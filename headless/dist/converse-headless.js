
import "./emojis.js";
//TOFIND Added utils manually


var Strophe;

/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/***/ ((module) => {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/abab/index.js":
/*!************************************!*\
  !*** ./node_modules/abab/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const atob = __webpack_require__(/*! ./lib/atob */ "./node_modules/abab/lib/atob.js");
const btoa = __webpack_require__(/*! ./lib/btoa */ "./node_modules/abab/lib/btoa.js");

module.exports = {
  atob,
  btoa
};


/***/ }),

/***/ "./node_modules/abab/lib/atob.js":
/*!***************************************!*\
  !*** ./node_modules/abab/lib/atob.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/**
 * Implementation of atob() according to the HTML and Infra specs, except that
 * instead of throwing INVALID_CHARACTER_ERR we return null.
 */
function atob(data) {
  // Web IDL requires DOMStrings to just be converted using ECMAScript
  // ToString, which in our case amounts to using a template literal.
  data = `${data}`;
  // "Remove all ASCII whitespace from data."
  data = data.replace(/[ \t\n\f\r]/g, "");
  // "If data's length divides by 4 leaving no remainder, then: if data ends
  // with one or two U+003D (=) code points, then remove them from data."
  if (data.length % 4 === 0) {
    data = data.replace(/==?$/, "");
  }
  // "If data's length divides by 4 leaving a remainder of 1, then return
  // failure."
  //
  // "If data contains a code point that is not one of
  //
  // U+002B (+)
  // U+002F (/)
  // ASCII alphanumeric
  //
  // then return failure."
  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {
    return null;
  }
  // "Let output be an empty byte sequence."
  let output = "";
  // "Let buffer be an empty buffer that can have bits appended to it."
  //
  // We append bits via left-shift and or.  accumulatedBits is used to track
  // when we've gotten to 24 bits.
  let buffer = 0;
  let accumulatedBits = 0;
  // "Let position be a position variable for data, initially pointing at the
  // start of data."
  //
  // "While position does not point past the end of data:"
  for (let i = 0; i < data.length; i++) {
    // "Find the code point pointed to by position in the second column of
    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in
    // the first cell of the same row.
    //
    // "Append to buffer the six bits corresponding to n, most significant bit
    // first."
    //
    // atobLookup() implements the table from RFC 4648.
    buffer <<= 6;
    buffer |= atobLookup(data[i]);
    accumulatedBits += 6;
    // "If buffer has accumulated 24 bits, interpret them as three 8-bit
    // big-endian numbers. Append three bytes with values equal to those
    // numbers to output, in the same order, and then empty buffer."
    if (accumulatedBits === 24) {
      output += String.fromCharCode((buffer & 0xff0000) >> 16);
      output += String.fromCharCode((buffer & 0xff00) >> 8);
      output += String.fromCharCode(buffer & 0xff);
      buffer = accumulatedBits = 0;
    }
    // "Advance position by 1."
  }
  // "If buffer is not empty, it contains either 12 or 18 bits. If it contains
  // 12 bits, then discard the last four and interpret the remaining eight as
  // an 8-bit big-endian number. If it contains 18 bits, then discard the last
  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append
  // the one or two bytes with values equal to those one or two numbers to
  // output, in the same order."
  if (accumulatedBits === 12) {
    buffer >>= 4;
    output += String.fromCharCode(buffer);
  } else if (accumulatedBits === 18) {
    buffer >>= 2;
    output += String.fromCharCode((buffer & 0xff00) >> 8);
    output += String.fromCharCode(buffer & 0xff);
  }
  // "Return output."
  return output;
}
/**
 * A lookup table for atob(), which converts an ASCII character to the
 * corresponding six-bit number.
 */

const keystr =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

function atobLookup(chr) {
  const index = keystr.indexOf(chr);
  // Throw exception if character is not in the lookup string; should not be hit in tests
  return index < 0 ? undefined : index;
}

module.exports = atob;


/***/ }),

/***/ "./node_modules/abab/lib/btoa.js":
/*!***************************************!*\
  !*** ./node_modules/abab/lib/btoa.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/**
 * btoa() as defined by the HTML and Infra specs, which mostly just references
 * RFC 4648.
 */
function btoa(s) {
  let i;
  // String conversion as required by Web IDL.
  s = `${s}`;
  // "The btoa() method must throw an "InvalidCharacterError" DOMException if
  // data contains any character whose code point is greater than U+00FF."
  for (i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) > 255) {
      return null;
    }
  }
  let out = "";
  for (i = 0; i < s.length; i += 3) {
    const groupsOfSix = [undefined, undefined, undefined, undefined];
    groupsOfSix[0] = s.charCodeAt(i) >> 2;
    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;
    if (s.length > i + 1) {
      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;
      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;
    }
    if (s.length > i + 2) {
      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;
      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;
    }
    for (let j = 0; j < groupsOfSix.length; j++) {
      if (typeof groupsOfSix[j] === "undefined") {
        out += "=";
      } else {
        out += btoaLookup(groupsOfSix[j]);
      }
    }
  }
  return out;
}

/**
 * Lookup table for btoa(), which converts a six-bit number into the
 * corresponding ASCII character.
 */
const keystr =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

function btoaLookup(index) {
  if (index >= 0 && index < 64) {
    return keystr[index];
  }

  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.
  return undefined;
}

module.exports = btoa;


/***/ }),

/***/ "./node_modules/@converse/openpromise/openpromise.js":
/*!***********************************************************!*\
  !*** ./node_modules/@converse/openpromise/openpromise.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOpenPromise": () => (/* binding */ getOpenPromise)
/* harmony export */ });
function getOpenPromise() {
  const wrapper = {
    isResolved: false,
    isPending: true,
    isRejected: false
  };
  const promise = new Promise((resolve, reject) => {
    wrapper.resolve = resolve;
    wrapper.reject = reject;
  });
  Object.assign(promise, wrapper);
  promise.then(function (v) {
    promise.isResolved = true;
    promise.isPending = false;
    promise.isRejected = false;
    return v;
  }, function (e) {
    promise.isResolved = false;
    promise.isPending = false;
    promise.isRejected = true;
    throw e;
  });
  return promise;
}

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/collection.js":
/*!***********************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/collection.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Collection": () => (/* binding */ Collection)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@converse/skeletor/src/helpers.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.js */ "./node_modules/@converse/skeletor/src/events.js");
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es/clone.js */ "./node_modules/lodash-es/clone.js");
/* harmony import */ var lodash_es_countBy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es/countBy.js */ "./node_modules/lodash-es/countBy.js");
/* harmony import */ var lodash_es_difference_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es/difference.js */ "./node_modules/lodash-es/difference.js");
/* harmony import */ var lodash_es_every_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/every.js */ "./node_modules/lodash-es/every.js");
/* harmony import */ var lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/extend.js */ "./node_modules/lodash-es/assignIn.js");
/* harmony import */ var lodash_es_findIndex_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es/findIndex.js */ "./node_modules/lodash-es/findIndex.js");
/* harmony import */ var lodash_es_findLastIndex_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es/findLastIndex.js */ "./node_modules/lodash-es/findLastIndex.js");
/* harmony import */ var lodash_es_groupBy_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/groupBy.js */ "./node_modules/lodash-es/groupBy.js");
/* harmony import */ var lodash_es_indexOf_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es/indexOf.js */ "./node_modules/lodash-es/indexOf.js");
/* harmony import */ var lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es/isEmpty.js */ "./node_modules/lodash-es/isEmpty.js");
/* harmony import */ var lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/isString.js */ "./node_modules/lodash-es/isString.js");
/* harmony import */ var lodash_es_keyBy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es/keyBy.js */ "./node_modules/lodash-es/keyBy.js");
/* harmony import */ var lodash_es_lastIndexOf_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es/lastIndexOf.js */ "./node_modules/lodash-es/lastIndexOf.js");
/* harmony import */ var lodash_es_some_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/some.js */ "./node_modules/lodash-es/some.js");
/* harmony import */ var lodash_es_sortBy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es/sortBy.js */ "./node_modules/lodash-es/sortBy.js");
//     Backbone.js 1.4.0
//     (c) 2010-2019 Jeremy Ashkenas and DocumentCloud
//     Backbone may be freely distributed under the MIT license.
// Collection
// ----------
// If models tend to represent a single row of data, a Collection is
// more analogous to a table full of data ... or a small slice or page of that
// table, or a collection of rows that belong together for a particular reason
// -- all of the messages in this particular folder, all of the documents
// belonging to this particular author, and so on. Collections maintain
// indexes of their models, both in order, and for lookup by `id`.



















const slice = Array.prototype.slice; // Create a new **Collection**, perhaps to contain a specific type of `model`.
// If a `comparator` is specified, the Collection will maintain
// its models in sort order, as they're added and removed.

const Collection = function (models, options) {
  options || (options = {});
  this.preinitialize.apply(this, arguments);
  if (options.model) this.model = options.model;
  if (options.comparator !== undefined) this.comparator = options.comparator;

  this._reset();

  this.initialize.apply(this, arguments);
  if (models) this.reset(models, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
    silent: true
  }, options));
};
Collection.extend = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.inherits; // Default options for `Collection#set`.

const setOptions = {
  add: true,
  remove: true,
  merge: true
};
const addOptions = {
  add: true,
  remove: false
}; // Splices `insert` into `array` at index `at`.

const splice = function (array, insert, at) {
  at = Math.min(Math.max(at, 0), array.length);
  const tail = Array(array.length - at);
  const length = insert.length;
  let i;

  for (i = 0; i < tail.length; i++) tail[i] = array[i + at];

  for (i = 0; i < length; i++) array[i + at] = insert[i];

  for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
}; // Define the Collection's inheritable methods.


Object.assign(Collection.prototype, _events_js__WEBPACK_IMPORTED_MODULE_1__.Events, {
  // The default model for a collection is just a **Backbone.Model**.
  // This should be overridden in most cases.
  model: _model_js__WEBPACK_IMPORTED_MODULE_2__.Model,
  // preinitialize is an empty function by default. You can override it with a function
  // or object.  preinitialize will run before any instantiation logic is run in the Collection.
  preinitialize: function () {},
  // Initialize is an empty function by default. Override it with your own
  // initialization logic.
  initialize: function () {},
  // The JSON representation of a Collection is an array of the
  // models' attributes.
  toJSON: function (options) {
    return this.map(function (model) {
      return model.toJSON(options);
    });
  },
  // Proxy `Backbone.sync` by default.
  sync: function (method, model, options) {
    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getSyncMethod)(this)(method, model, options);
  },
  // Add a model, or list of models to the set. `models` may be Backbone
  // Models or raw JavaScript objects to be converted to Models, or any
  // combination of the two.
  add: function (models, options) {
    return this.set(models, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
      merge: false
    }, options, addOptions));
  },
  // Remove a model, or a list of models from the set.
  remove: function (models, options) {
    options = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({}, options);
    const singular = !Array.isArray(models);
    models = singular ? [models] : models.slice();

    const removed = this._removeModels(models, options);

    if (!options.silent && removed.length) {
      options.changes = {
        added: [],
        merged: [],
        removed: removed
      };
      this.trigger('update', this, options);
    }

    return singular ? removed[0] : removed;
  },
  // Update a collection by `set`-ing a new list of models, adding new ones,
  // removing models that are no longer present, and merging models that
  // already exist in the collection, as necessary. Similar to **Model#set**,
  // the core operation for updating the data contained by the collection.
  set: function (models, options) {
    if (models == null) return;
    options = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({}, setOptions, options);

    if (options.parse && !this._isModel(models)) {
      models = this.parse(models, options) || [];
    }

    const singular = !Array.isArray(models);
    models = singular ? [models] : models.slice();
    let at = options.at;
    if (at != null) at = +at;
    if (at > this.length) at = this.length;
    if (at < 0) at += this.length + 1;
    const set = [];
    const toAdd = [];
    const toMerge = [];
    const toRemove = [];
    const modelMap = {};
    const add = options.add;
    const merge = options.merge;
    const remove = options.remove;
    let sort = false;
    const sortable = this.comparator && at == null && options.sort !== false;
    const sortAttr = (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(this.comparator) ? this.comparator : null; // Turn bare objects into model references, and prevent invalid models
    // from being added.

    let model, i;

    for (i = 0; i < models.length; i++) {
      model = models[i]; // If a duplicate is found, prevent it from being added and
      // optionally merge it into the existing model.

      const existing = this.get(model);

      if (existing) {
        if (merge && model !== existing) {
          let attrs = this._isModel(model) ? model.attributes : model;
          if (options.parse) attrs = existing.parse(attrs, options);
          existing.set(attrs, options);
          toMerge.push(existing);
          if (sortable && !sort) sort = existing.hasChanged(sortAttr);
        }

        if (!modelMap[existing.cid]) {
          modelMap[existing.cid] = true;
          set.push(existing);
        }

        models[i] = existing; // If this is a new, valid model, push it to the `toAdd` list.
      } else if (add) {
        model = models[i] = this._prepareModel(model, options);

        if (model) {
          toAdd.push(model);

          this._addReference(model, options);

          modelMap[model.cid] = true;
          set.push(model);
        }
      }
    } // Remove stale models.


    if (remove) {
      for (i = 0; i < this.length; i++) {
        model = this.models[i];
        if (!modelMap[model.cid]) toRemove.push(model);
      }

      if (toRemove.length) this._removeModels(toRemove, options);
    } // See if sorting is needed, update `length` and splice in new models.


    let orderChanged = false;
    const replace = !sortable && add && remove;

    if (set.length && replace) {
      orderChanged = this.length !== set.length || (0,lodash_es_some_js__WEBPACK_IMPORTED_MODULE_5__["default"])(this.models, (m, index) => m !== set[index]);
      this.models.length = 0;
      splice(this.models, set, 0);
      this.length = this.models.length;
    } else if (toAdd.length) {
      if (sortable) sort = true;
      splice(this.models, toAdd, at == null ? this.length : at);
      this.length = this.models.length;
    } // Silently sort the collection if appropriate.


    if (sort) this.sort({
      silent: true
    }); // Unless silenced, it's time to fire all appropriate add/sort/update events.

    if (!options.silent) {
      for (i = 0; i < toAdd.length; i++) {
        if (at != null) options.index = at + i;
        model = toAdd[i];
        model.trigger('add', model, this, options);
      }

      if (sort || orderChanged) this.trigger('sort', this, options);

      if (toAdd.length || toRemove.length || toMerge.length) {
        options.changes = {
          added: toAdd,
          removed: toRemove,
          merged: toMerge
        };
        this.trigger('update', this, options);
      }
    } // Return the added (or merged) model (or models).


    return singular ? models[0] : models;
  },
  clearStore: async function () {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : o => o;
    await Promise.all(this.models.filter(filter).map(m => {
      return new Promise(resolve => {
        m.destroy(Object.assign(options, {
          'success': resolve,
          'error': (m, e) => {
            console.error(e);
            resolve();
          }
        }));
      });
    }));
    await this.browserStorage.clear();
    this.reset();
  },
  // When you have more items than you want to add or remove individually,
  // you can reset the entire set with a new list of models, without firing
  // any granular `add` or `remove` events. Fires `reset` when finished.
  // Useful for bulk operations and optimizations.
  reset: function (models, options) {
    options = options ? (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(options) : {};

    for (let i = 0; i < this.models.length; i++) {
      this._removeReference(this.models[i], options);
    }

    options.previousModels = this.models;

    this._reset();

    models = this.add(models, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
      silent: true
    }, options));
    if (!options.silent) this.trigger('reset', this, options);
    return models;
  },
  // Add a model to the end of the collection.
  push: function (model, options) {
    return this.add(model, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
      at: this.length
    }, options));
  },
  // Remove a model from the end of the collection.
  pop: function (options) {
    const model = this.at(this.length - 1);
    return this.remove(model, options);
  },
  // Add a model to the beginning of the collection.
  unshift: function (model, options) {
    return this.add(model, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
      at: 0
    }, options));
  },
  // Remove a model from the beginning of the collection.
  shift: function (options) {
    const model = this.at(0);
    return this.remove(model, options);
  },
  // Slice out a sub-array of models from the collection.
  slice: function () {
    return slice.apply(this.models, arguments);
  },
  filter: function (callback, thisArg) {
    return this.models.filter((0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(callback) ? callback : m => m.matches(callback), thisArg);
  },
  every: function (pred) {
    return (0,lodash_es_every_js__WEBPACK_IMPORTED_MODULE_8__["default"])(this.models.map(m => m.attributes), pred);
  },
  difference: function (values) {
    return (0,lodash_es_difference_js__WEBPACK_IMPORTED_MODULE_9__["default"])(this.models, values);
  },
  max: function () {
    return Math.max.apply(Math, this.models);
  },
  min: function () {
    return Math.min.apply(Math, this.models);
  },
  drop: function () {
    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return this.models.slice(n);
  },
  some: function (pred) {
    return (0,lodash_es_some_js__WEBPACK_IMPORTED_MODULE_5__["default"])(this.models.map(m => m.attributes), pred);
  },
  sortBy: function (iteratee) {
    return (0,lodash_es_sortBy_js__WEBPACK_IMPORTED_MODULE_10__["default"])(this.models, (0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(iteratee) ? iteratee : m => (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(iteratee) ? m.get(iteratee) : m.matches(iteratee));
  },
  isEmpty: function () {
    return (0,lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_11__["default"])(this.models);
  },
  keyBy: function (iteratee) {
    return (0,lodash_es_keyBy_js__WEBPACK_IMPORTED_MODULE_12__["default"])(this.models, iteratee);
  },
  each: function (callback, thisArg) {
    return this.forEach(callback, thisArg);
  },
  forEach: function (callback, thisArg) {
    return this.models.forEach(callback, thisArg);
  },
  includes: function (item) {
    return this.models.includes(item);
  },
  size: function () {
    return this.models.length;
  },
  countBy: function (f) {
    return (0,lodash_es_countBy_js__WEBPACK_IMPORTED_MODULE_13__["default"])(this.models, (0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(f) ? f : m => (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(f) ? m.get(f) : m.matches(f));
  },
  groupBy: function (pred) {
    return (0,lodash_es_groupBy_js__WEBPACK_IMPORTED_MODULE_14__["default"])(this.models, (0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(pred) ? pred : m => (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(pred) ? m.get(pred) : m.matches(pred));
  },
  indexOf: function (fromIndex) {
    return (0,lodash_es_indexOf_js__WEBPACK_IMPORTED_MODULE_15__["default"])(this.models, fromIndex);
  },
  findLastIndex: function (pred, fromIndex) {
    return (0,lodash_es_findLastIndex_js__WEBPACK_IMPORTED_MODULE_16__["default"])(this.models, (0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(pred) ? pred : m => (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(pred) ? m.get(pred) : m.matches(pred), fromIndex);
  },
  lastIndexOf: function (fromIndex) {
    return (0,lodash_es_lastIndexOf_js__WEBPACK_IMPORTED_MODULE_17__["default"])(this.models, fromIndex);
  },
  findIndex: function (pred) {
    return (0,lodash_es_findIndex_js__WEBPACK_IMPORTED_MODULE_18__["default"])(this.models, (0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(pred) ? pred : m => (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(pred) ? m.get(pred) : m.matches(pred));
  },
  last: function () {
    const length = this.models == null ? 0 : this.models.length;
    return length ? this.models[length - 1] : undefined;
  },
  head: function () {
    return this.models[0];
  },
  first: function () {
    return this.head();
  },
  map: function (cb, thisArg) {
    return this.models.map((0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(cb) ? cb : m => (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(cb) ? m.get(cb) : m.matches(cb), thisArg);
  },
  reduce: function (callback, initialValue) {
    return this.models.reduce(callback, initialValue || this.models[0]);
  },
  reduceRight: function (callback, initialValue) {
    return this.models.reduceRight(callback, initialValue || this.models[0]);
  },
  toArray: function () {
    return Array.from(this.models);
  },
  // Get a model from the set by id, cid, model object with id or cid
  // properties, or an attributes object that is transformed through modelId.
  get: function (obj) {
    if (obj == null) return undefined;
    return this._byId[obj] || this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj)] || obj.cid && this._byId[obj.cid];
  },
  // Returns `true` if the model is in the collection.
  has: function (obj) {
    return this.get(obj) != null;
  },
  // Get the model at the given index.
  at: function (index) {
    if (index < 0) index += this.length;
    return this.models[index];
  },
  // Return models with matching attributes. Useful for simple cases of
  // `filter`.
  where: function (attrs, first) {
    return this[first ? 'find' : 'filter'](attrs);
  },
  // Return the first model with matching attributes. Useful for simple cases
  // of `find`.
  findWhere: function (attrs) {
    return this.where(attrs, true);
  },
  find: function (predicate, fromIndex) {
    const pred = (0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(predicate) ? predicate : m => m.matches(predicate);
    return this.models.find(pred, fromIndex);
  },
  // Force the collection to re-sort itself. You don't need to call this under
  // normal circumstances, as the set will maintain sort order as each item
  // is added.
  sort: function (options) {
    let comparator = this.comparator;
    if (!comparator) throw new Error('Cannot sort a set without a comparator');
    options || (options = {});
    const length = comparator.length;
    if ((0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_7__["default"])(comparator)) comparator = comparator.bind(this); // Run sort based on type of `comparator`.

    if (length === 1 || (0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_4__["default"])(comparator)) {
      this.models = this.sortBy(comparator);
    } else {
      this.models.sort(comparator);
    }

    if (!options.silent) this.trigger('sort', this, options);
    return this;
  },
  // Pluck an attribute from each model in the collection.
  pluck: function (attr) {
    return this.map(attr + '');
  },
  // Fetch the default set of models for this collection, resetting the
  // collection when they arrive. If `reset: true` is passed, the response
  // data will be passed through the `reset` method instead of `set`.
  fetch: function (options) {
    options = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
      parse: true
    }, options);
    const success = options.success;
    const collection = this;
    const promise = options.promise && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getResolveablePromise)();

    options.success = function (resp) {
      const method = options.reset ? 'reset' : 'set';
      collection[method](resp, options);
      if (success) success.call(options.context, collection, resp, options);
      promise && promise.resolve();
      collection.trigger('sync', collection, resp, options);
    };

    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.wrapError)(this, options);
    return promise ? promise : this.sync('read', this, options);
  },
  // Create a new instance of a model in this collection. Add the model to the
  // collection immediately, unless `wait: true` is passed, in which case we
  // wait for the server to agree.
  create: function (model, options) {
    options = options ? (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(options) : {};
    const wait = options.wait;
    const return_promise = options.promise;
    const promise = return_promise && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getResolveablePromise)();
    model = this._prepareModel(model, options);
    if (!model) return false;
    if (!wait) this.add(model, options);
    const collection = this;
    const success = options.success;
    const error = options.error;

    options.success = function (m, resp, callbackOpts) {
      if (wait) {
        collection.add(m, callbackOpts);
      }

      if (success) {
        success.call(callbackOpts.context, m, resp, callbackOpts);
      }

      if (return_promise) {
        promise.resolve(m);
      }
    };

    options.error = function (model, e, options) {
      error && error.call(options.context, model, e, options);
      return_promise && promise.reject(e);
    };

    model.save(null, Object.assign(options, {
      'promise': false
    }));

    if (return_promise) {
      return promise;
    } else {
      return model;
    }
  },
  // **parse** converts a response into a list of models to be added to the
  // collection. The default implementation is just to pass it through.
  parse: function (resp, options) {
    return resp;
  },
  // Create a new collection with an identical list of models as this one.
  clone: function () {
    return new this.constructor(this.models, {
      model: this.model,
      comparator: this.comparator
    });
  },
  // Define how to uniquely identify models in the collection.
  modelId: function (attrs) {
    var _this$model$prototype;

    return attrs[((_this$model$prototype = this.model.prototype) === null || _this$model$prototype === void 0 ? void 0 : _this$model$prototype.idAttribute) || 'id'];
  },
  // Get an iterator of all models in this collection.
  values: function () {
    return new CollectionIterator(this, ITERATOR_VALUES);
  },
  // Get an iterator of all model IDs in this collection.
  keys: function () {
    return new CollectionIterator(this, ITERATOR_KEYS);
  },
  // Get an iterator of all [ID, model] tuples in this collection.
  entries: function () {
    return new CollectionIterator(this, ITERATOR_KEYSVALUES);
  },
  // Private method to reset all internal state. Called when the collection
  // is first initialized or reset.
  _reset: function () {
    this.length = 0;
    this.models = [];
    this._byId = {};
  },
  // Prepare a hash of attributes (or other model) to be added to this
  // collection.
  _prepareModel: function (attrs, options) {
    if (this._isModel(attrs)) {
      if (!attrs.collection) attrs.collection = this;
      return attrs;
    }

    options = options ? (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(options) : {};
    options.collection = this;
    const model = new this.model(attrs, options);
    if (!model.validationError) return model;
    this.trigger('invalid', this, model.validationError, options);
    return false;
  },
  // Internal method called by both remove and set.
  _removeModels: function (models, options) {
    const removed = [];

    for (let i = 0; i < models.length; i++) {
      const model = this.get(models[i]);
      if (!model) continue;
      const index = this.indexOf(model);
      this.models.splice(index, 1);
      this.length--; // Remove references before triggering 'remove' event to prevent an
      // infinite loop. #3693

      delete this._byId[model.cid];
      const id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];

      if (!options.silent) {
        options.index = index;
        model.trigger('remove', model, this, options);
      }

      removed.push(model);

      this._removeReference(model, options);
    }

    return removed;
  },
  // Method for checking whether an object should be considered a model for
  // the purposes of adding to the collection.
  _isModel: function (model) {
    return model instanceof _model_js__WEBPACK_IMPORTED_MODULE_2__.Model;
  },
  // Internal method to create a model's ties to a collection.
  _addReference: function (model, options) {
    this._byId[model.cid] = model;
    const id = this.modelId(model.attributes);
    if (id != null) this._byId[id] = model;
    model.on('all', this._onModelEvent, this);
  },
  // Internal method to sever a model's ties to a collection.
  _removeReference: function (model, options) {
    delete this._byId[model.cid];
    const id = this.modelId(model.attributes);
    if (id != null) delete this._byId[id];
    if (this === model.collection) delete model.collection;
    model.off('all', this._onModelEvent, this);
  },
  // Internal method called every time a model in the set fires an event.
  // Sets need to update their indexes when models change ids. All other
  // events simply proxy through. "add" and "remove" events that originate
  // in other collections are ignored.
  _onModelEvent: function (event, model, collection, options) {
    if (model) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);

      if (event === 'change') {
        const prevId = this.modelId(model.previousAttributes());
        const id = this.modelId(model.attributes);

        if (prevId !== id) {
          if (prevId != null) delete this._byId[prevId];
          if (id != null) this._byId[id] = model;
        }
      }
    }

    this.trigger.apply(this, arguments);
  }
}); // Defining an @@iterator method implements JavaScript's Iterable protocol.
// In modern ES2015 browsers, this value is found at Symbol.iterator.

/* global Symbol */

const $$iterator = typeof Symbol === 'function' && Symbol.iterator;

if ($$iterator) {
  Collection.prototype[$$iterator] = Collection.prototype.values;
} // CollectionIterator
// ------------------
// A CollectionIterator implements JavaScript's Iterator protocol, allowing the
// use of `for of` loops in modern browsers and interoperation between
// Collection and other JavaScript functions and third-party libraries
// which can operate on Iterables.


const CollectionIterator = function (collection, kind) {
  this._collection = collection;
  this._kind = kind;
  this._index = 0;
}; // This "enum" defines the three possible kinds of values which can be emitted
// by a CollectionIterator that correspond to the values(), keys() and entries()
// methods on Collection, respectively.


const ITERATOR_VALUES = 1;
const ITERATOR_KEYS = 2;
const ITERATOR_KEYSVALUES = 3; // All Iterators should themselves be Iterable.

if ($$iterator) {
  CollectionIterator.prototype[$$iterator] = function () {
    return this;
  };
}

CollectionIterator.prototype.next = function () {
  if (this._collection) {
    // Only continue iterating if the iterated collection is long enough.
    if (this._index < this._collection.length) {
      const model = this._collection.at(this._index);

      this._index++; // Construct a value depending on what kind of values should be iterated.

      let value;

      if (this._kind === ITERATOR_VALUES) {
        value = model;
      } else {
        const id = this._collection.modelId(model.attributes);

        if (this._kind === ITERATOR_KEYS) {
          value = id;
        } else {
          // ITERATOR_KEYSVALUES
          value = [id, model];
        }
      }

      return {
        value: value,
        done: false
      };
    } // Once exhausted, remove the reference to the collection so future
    // calls to the next method always return done.


    this._collection = undefined;
  }

  return {
    value: undefined,
    done: true
  };
};

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/drivers/sessionStorage.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/drivers/sessionStorage.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! localforage/src/utils/executeCallback */ "./node_modules/localforage/src/utils/executeCallback.js");
/* harmony import */ var localforage_src_utils_getCallback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! localforage/src/utils/getCallback */ "./node_modules/localforage/src/utils/getCallback.js");
/* harmony import */ var localforage_src_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! localforage/src/utils/normalizeKey */ "./node_modules/localforage/src/utils/normalizeKey.js");
/* harmony import */ var localforage_src_utils_serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! localforage/src/utils/serializer */ "./node_modules/localforage/src/utils/serializer.js");
// Copyright 2014 Mozilla
// Copyright 2015 Thodoris Greasidis
// Copyright 2018 JC Brand
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.




const serialize = localforage_src_utils_serializer__WEBPACK_IMPORTED_MODULE_3__["default"].serialize;
const deserialize = localforage_src_utils_serializer__WEBPACK_IMPORTED_MODULE_3__["default"].deserialize;

function isSessionStorageValid() {
  // If the app is running inside a Google Chrome packaged webapp, or some
  // other context where sessionStorage isn't available, we don't use
  // sessionStorage. This feature detection is preferred over the old
  // `if (window.chrome && window.chrome.runtime)` code.
  // See: https://github.com/mozilla/localForage/issues/68
  try {
    // If sessionStorage isn't available, we get outta here!
    // This should be inside a try catch
    if (sessionStorage && 'setItem' in sessionStorage) {
      return true;
    }
  } catch (e) {
    console.log(e);
  }

  return false;
}

function _getKeyPrefix(options, defaultConfig) {
  let keyPrefix = options.name + '/';

  if (options.storeName !== defaultConfig.storeName) {
    keyPrefix += options.storeName + '/';
  }

  return keyPrefix;
}

const dbInfo = {
  'serializer': {
    'serialize': serialize,
    'deserialize': deserialize
  }
};

function _initStorage(options) {
  dbInfo.keyPrefix = _getKeyPrefix(options, this._defaultConfig);

  if (options) {
    for (const i in options) {
      // eslint-disable-line guard-for-in
      dbInfo[i] = options[i];
    }
  }
} // Remove all keys from the datastore, effectively destroying all data in
// the app's key/value store!


function clear(callback) {
  const promise = this.ready().then(function () {
    const keyPrefix = dbInfo.keyPrefix;

    for (let i = sessionStorage.length - 1; i >= 0; i--) {
      const key = sessionStorage.key(i);

      if (key.indexOf(keyPrefix) === 0) {
        sessionStorage.removeItem(key);
      }
    }
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
} // Retrieve an item from the store. Unlike the original async_storage
// library in Gaia, we don't modify return values at all. If a key's value
// is `undefined`, we pass that value to the callback function.


function getItem(key, callback) {
  key = (0,localforage_src_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_2__["default"])(key);
  const promise = this.ready().then(function () {
    let result = sessionStorage.getItem(dbInfo.keyPrefix + key); // If a result was found, parse it from the serialized
    // string into a JS object. If result isn't truthy, the key
    // is likely undefined and we'll pass it straight to the
    // callback.

    if (result) {
      result = dbInfo.serializer.deserialize(result);
    }

    return result;
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
} // Iterate over all items in the store.


function iterate(iterator, callback) {
  const self = this;
  const promise = self.ready().then(function () {
    const keyPrefix = dbInfo.keyPrefix;
    const keyPrefixLength = keyPrefix.length;
    const length = sessionStorage.length; // We use a dedicated iterator instead of the `i` variable below
    // so other keys we fetch in sessionStorage aren't counted in
    // the `iterationNumber` argument passed to the `iterate()`
    // callback.
    //
    // See: github.com/mozilla/localForage/pull/435#discussion_r38061530

    let iterationNumber = 1;

    for (let i = 0; i < length; i++) {
      const key = sessionStorage.key(i);

      if (key.indexOf(keyPrefix) !== 0) {
        continue;
      }

      let value = sessionStorage.getItem(key); // If a result was found, parse it from the serialized
      // string into a JS object. If result isn't truthy, the
      // key is likely undefined and we'll pass it straight
      // to the iterator.

      if (value) {
        value = dbInfo.serializer.deserialize(value);
      }

      value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

      if (value !== void 0) {
        // eslint-disable-line no-void
        return value;
      }
    }
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
} // Same as sessionStorage's key() method, except takes a callback.


function key(n, callback) {
  const self = this;
  const promise = self.ready().then(function () {
    let result;

    try {
      result = sessionStorage.key(n);
    } catch (error) {
      result = null;
    } // Remove the prefix from the key, if a key is found.


    if (result) {
      result = result.substring(dbInfo.keyPrefix.length);
    }

    return result;
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
}

function keys(callback) {
  const self = this;
  const promise = self.ready().then(function () {
    const length = sessionStorage.length;
    const keys = [];

    for (let i = 0; i < length; i++) {
      const itemKey = sessionStorage.key(i);

      if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
        keys.push(itemKey.substring(dbInfo.keyPrefix.length));
      }
    }

    return keys;
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
} // Supply the number of keys in the datastore to the callback function.


function length(callback) {
  const self = this;
  const promise = self.keys().then(function (keys) {
    return keys.length;
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
} // Remove an item from the store, nice and simple.


function removeItem(key, callback) {
  key = (0,localforage_src_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_2__["default"])(key);
  const promise = this.ready().then(function () {
    sessionStorage.removeItem(dbInfo.keyPrefix + key);
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
} // Set a key's value and run an optional callback once the value is set.
// Unlike Gaia's implementation, the callback function is passed the value,
// in case you want to operate on that value only after you're sure it
// saved, or something like that.


function setItem(key, value, callback) {
  key = (0,localforage_src_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_2__["default"])(key);
  const promise = this.ready().then(function () {
    // Convert undefined values to null.
    // https://github.com/mozilla/localForage/pull/42
    if (value === undefined) {
      value = null;
    } // Save the original value to pass to the callback.


    const originalValue = value;
    return new Promise(function (resolve, reject) {
      dbInfo.serializer.serialize(value, function (value, error) {
        if (error) {
          reject(error);
        } else {
          try {
            sessionStorage.setItem(dbInfo.keyPrefix + key, value);
            resolve(originalValue);
          } catch (e) {
            // sessionStorage capacity exceeded.
            // TODO: Make this a specific error/event.
            if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
              reject(e);
            }

            reject(e);
          }
        }
      });
    });
  });
  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
}

function dropInstance(options, callback) {
  callback = localforage_src_utils_getCallback__WEBPACK_IMPORTED_MODULE_1__["default"].apply(this, arguments);
  options = typeof options !== 'function' && options || {};

  if (!options.name) {
    const currentConfig = this.config();
    options.name = options.name || currentConfig.name;
    options.storeName = options.storeName || currentConfig.storeName;
  }

  const self = this;
  let promise;

  if (!options.name) {
    promise = Promise.reject(new Error('Invalid arguments'));
  } else {
    promise = new Promise(function (resolve) {
      if (!options.storeName) {
        resolve(`${options.name}/`);
      } else {
        resolve(_getKeyPrefix(options, self._defaultConfig));
      }
    }).then(function (keyPrefix) {
      for (let i = sessionStorage.length - 1; i >= 0; i--) {
        const key = sessionStorage.key(i);

        if (key.indexOf(keyPrefix) === 0) {
          sessionStorage.removeItem(key);
        }
      }
    });
  }

  (0,localforage_src_utils_executeCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(promise, callback);
  return promise;
}

const sessionStorageWrapper = {
  _driver: 'sessionStorageWrapper',
  _initStorage: _initStorage,
  _support: isSessionStorageValid(),
  iterate: iterate,
  getItem: getItem,
  setItem: setItem,
  removeItem: removeItem,
  clear: clear,
  length: length,
  key: key,
  keys: keys,
  dropInstance: dropInstance
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sessionStorageWrapper);

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/events.js":
/*!*******************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/events.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Events": () => (/* binding */ Events)
/* harmony export */ });
/* harmony import */ var lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/isEmpty.js */ "./node_modules/lodash-es/isEmpty.js");
/* harmony import */ var lodash_es_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash-es/keys.js */ "./node_modules/lodash-es/keys.js");
/* harmony import */ var lodash_es_once_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/once.js */ "./node_modules/lodash-es/once.js");
/* harmony import */ var lodash_es_uniqueId_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es/uniqueId.js */ "./node_modules/lodash-es/uniqueId.js");
//     Backbone.js 1.4.0
//     (c) 2010-2019 Jeremy Ashkenas and DocumentCloud
//     Backbone may be freely distributed under the MIT license.
// Events
// ------
// A module that can be mixed in to *any object* in order to provide it with
// a custom event channel. You may bind a callback to an event with `on` or
// remove with `off`; `trigger`-ing an event fires all callbacks in
// succession.
//
//     let object = {};
//     extend(object, Backbone.Events);
//     object.on('expand', function(){ alert('expanded'); });
//     object.trigger('expand');
//




const Events = {}; // Regular expression used to split event strings.

const eventSplitter = /\s+/; // A private global variable to share between listeners and listenees.

let _listening; // Iterates over the standard `event, callback` (as well as the fancy multiple
// space-separated events `"change blur", callback` and jQuery-style event
// maps `{event: callback}`).


const eventsApi = function (iteratee, events, name, callback, opts) {
  let i = 0,
      names;

  if (name && typeof name === 'object') {
    // Handle event maps.
    if (callback !== undefined && 'context' in opts && opts.context === undefined) opts.context = callback;

    for (names = (0,lodash_es_keys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name); i < names.length; i++) {
      events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
    }
  } else if (name && eventSplitter.test(name)) {
    // Handle space-separated event names by delegating them individually.
    for (names = name.split(eventSplitter); i < names.length; i++) {
      events = iteratee(events, names[i], callback, opts);
    }
  } else {
    // Finally, standard events.
    events = iteratee(events, name, callback, opts);
  }

  return events;
}; // Bind an event to a `callback` function. Passing `"all"` will bind
// the callback to all events fired.


Events.on = function (name, callback, context) {
  this._events = eventsApi(onApi, this._events || {}, name, callback, {
    context: context,
    ctx: this,
    listening: _listening
  });

  if (_listening) {
    const listeners = this._listeners || (this._listeners = {});
    listeners[_listening.id] = _listening; // Allow the listening to use a counter, instead of tracking
    // callbacks for library interop

    _listening.interop = false;
  }

  return this;
}; // Inversion-of-control versions of `on`. Tell *this* object to listen to
// an event in another object... keeping track of what it's listening to
// for easier unbinding later.


Events.listenTo = function (obj, name, callback) {
  if (!obj) return this;
  const id = obj._listenId || (obj._listenId = (0,lodash_es_uniqueId_js__WEBPACK_IMPORTED_MODULE_1__["default"])('l'));
  const listeningTo = this._listeningTo || (this._listeningTo = {});
  let listening = _listening = listeningTo[id]; // This object is not listening to any other events on `obj` yet.
  // Setup the necessary references to track the listening callbacks.

  if (!listening) {
    this._listenId || (this._listenId = (0,lodash_es_uniqueId_js__WEBPACK_IMPORTED_MODULE_1__["default"])('l'));
    listening = _listening = listeningTo[id] = new Listening(this, obj);
  } // Bind callbacks on obj.


  const error = tryCatchOn(obj, name, callback, this);
  _listening = undefined;
  if (error) throw error; // If the target obj is not Backbone.Events, track events manually.

  if (listening.interop) listening.on(name, callback);
  return this;
}; // The reducing API that adds a callback to the `events` object.


const onApi = function (events, name, callback, options) {
  if (callback) {
    const handlers = events[name] || (events[name] = []);
    const context = options.context,
          ctx = options.ctx,
          listening = options.listening;
    if (listening) listening.count++;
    handlers.push({
      callback: callback,
      context: context,
      ctx: context || ctx,
      listening: listening
    });
  }

  return events;
}; // An try-catch guarded #on function, to prevent poisoning the global
// `_listening` variable.


const tryCatchOn = function (obj, name, callback, context) {
  try {
    obj.on(name, callback, context);
  } catch (e) {
    return e;
  }
}; // Remove one or many callbacks. If `context` is null, removes all
// callbacks with that function. If `callback` is null, removes all
// callbacks for the event. If `name` is null, removes all bound
// callbacks for all events.


Events.off = function (name, callback, context) {
  if (!this._events) return this;
  this._events = eventsApi(offApi, this._events, name, callback, {
    context: context,
    listeners: this._listeners
  });
  return this;
}; // Tell this object to stop listening to either specific events ... or
// to every object it's currently listening to.


Events.stopListening = function (obj, name, callback) {
  const listeningTo = this._listeningTo;
  if (!listeningTo) return this;
  const ids = obj ? [obj._listenId] : (0,lodash_es_keys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(listeningTo);

  for (let i = 0; i < ids.length; i++) {
    const listening = listeningTo[ids[i]]; // If listening doesn't exist, this object is not currently
    // listening to obj. Break out early.

    if (!listening) break;
    listening.obj.off(name, callback, this);
    if (listening.interop) listening.off(name, callback);
  }

  if ((0,lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__["default"])(listeningTo)) this._listeningTo = undefined;
  return this;
}; // The reducing API that removes a callback from the `events` object.


const offApi = function (events, name, callback, options) {
  if (!events) return;
  const context = options.context,
        listeners = options.listeners;
  let i = 0,
      names; // Delete all event listeners and "drop" events.

  if (!name && !context && !callback) {
    for (names = (0,lodash_es_keys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(listeners); i < names.length; i++) {
      listeners[names[i]].cleanup();
    }

    return;
  }

  names = name ? [name] : (0,lodash_es_keys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(events);

  for (; i < names.length; i++) {
    name = names[i];
    const handlers = events[name]; // Bail out if there are no events stored.

    if (!handlers) {
      break;
    } // Find any remaining events.


    const remaining = [];

    for (let j = 0; j < handlers.length; j++) {
      const handler = handlers[j];

      if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {
        remaining.push(handler);
      } else {
        const listening = handler.listening;
        if (listening) listening.off(name, callback);
      }
    } // Replace events if there are any remaining.  Otherwise, clean up.


    if (remaining.length) {
      events[name] = remaining;
    } else {
      delete events[name];
    }
  }

  return events;
}; // Bind an event to only be triggered a single time. After the first time
// the callback is invoked, its listener will be removed. If multiple events
// are passed in using the space-separated syntax, the handler will fire
// once for each event, not once for a combination of all events.


Events.once = function (name, callback, context) {
  // Map the event into a `{event: once}` object.
  const events = eventsApi(onceMap, {}, name, callback, this.off.bind(this));
  if (typeof name === 'string' && (context === null || context === undefined)) callback = undefined;
  return this.on(events, callback, context);
}; // Inversion-of-control versions of `once`.


Events.listenToOnce = function (obj, name, callback) {
  // Map the event into a `{event: once}` object.
  const events = eventsApi(onceMap, {}, name, callback, this.stopListening.bind(this, obj));
  return this.listenTo(obj, events);
}; // Reduces the event callbacks into a map of `{event: onceWrapper}`.
// `offer` unbinds the `onceWrapper` after it has been called.


const onceMap = function (map, name, callback, offer) {
  if (callback) {
    const _once = map[name] = (0,lodash_es_once_js__WEBPACK_IMPORTED_MODULE_3__["default"])(function () {
      offer(name, _once);
      callback.apply(this, arguments);
    });

    _once._callback = callback;
  }

  return map;
}; // Trigger one or many events, firing all bound callbacks. Callbacks are
// passed the same arguments as `trigger` is, apart from the event name
// (unless you're listening on `"all"`, which will cause your callback to
// receive the true name of the event as the first argument).


Events.trigger = function (name) {
  if (!this._events) return this;
  const length = Math.max(0, arguments.length - 1);
  const args = Array(length);

  for (let i = 0; i < length; i++) args[i] = arguments[i + 1];

  eventsApi(triggerApi, this._events, name, undefined, args);
  return this;
}; // Handles triggering the appropriate event callbacks.


const triggerApi = function (objEvents, name, callback, args) {
  if (objEvents) {
    const events = objEvents[name];
    let allEvents = objEvents.all;
    if (events && allEvents) allEvents = allEvents.slice();
    if (events) triggerEvents(events, args);
    if (allEvents) triggerEvents(allEvents, [name].concat(args));
  }

  return objEvents;
}; // A difficult-to-believe, but optimized internal dispatch function for
// triggering events. Tries to keep the usual cases speedy (most internal
// Backbone events have 3 arguments).


const triggerEvents = function (events, args) {
  let ev,
      i = -1;
  const l = events.length,
        a1 = args[0],
        a2 = args[1],
        a3 = args[2];

  switch (args.length) {
    case 0:
      while (++i < l) (ev = events[i]).callback.call(ev.ctx);

      return;

    case 1:
      while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1);

      return;

    case 2:
      while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2);

      return;

    case 3:
      while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);

      return;

    default:
      while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);

      return;
  }
}; // A listening class that tracks and cleans up memory bindings
// when all callbacks have been offed.


const Listening = function (listener, obj) {
  this.id = listener._listenId;
  this.listener = listener;
  this.obj = obj;
  this.interop = true;
  this.count = 0;
  this._events = undefined;
};

Listening.prototype.on = Events.on; // Offs a callback (or several).
// Uses an optimized counter if the listenee uses Backbone.Events.
// Otherwise, falls back to manual tracking to support events
// library interop.

Listening.prototype.off = function (name, callback) {
  let cleanup;

  if (this.interop) {
    this._events = eventsApi(offApi, this._events, name, callback, {
      context: undefined,
      listeners: undefined
    });
    cleanup = !this._events;
  } else {
    this.count--;
    cleanup = this.count === 0;
  }

  if (cleanup) this.cleanup();
}; // Cleans up memory bindings between the listener and the listenee.


Listening.prototype.cleanup = function () {
  delete this.listener._listeningTo[this.obj._listenId];
  if (!this.interop) delete this.obj._listeners[this.id];
}; // Aliases for backwards compatibility.


Events.bind = Events.on;
Events.unbind = Events.off;

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/helpers.js":
/*!********************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/helpers.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotImplementedError": () => (/* binding */ NotImplementedError),
/* harmony export */   "ajax": () => (/* binding */ ajax),
/* harmony export */   "getResolveablePromise": () => (/* binding */ getResolveablePromise),
/* harmony export */   "getSyncMethod": () => (/* binding */ getSyncMethod),
/* harmony export */   "inherits": () => (/* binding */ inherits),
/* harmony export */   "sync": () => (/* binding */ sync),
/* harmony export */   "urlError": () => (/* binding */ urlError),
/* harmony export */   "wrapError": () => (/* binding */ wrapError)
/* harmony export */ });
/* harmony import */ var lodash_es_create_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/create.js */ "./node_modules/lodash-es/create.js");
/* harmony import */ var lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es/extend.js */ "./node_modules/lodash-es/assignIn.js");
/* harmony import */ var lodash_es_has_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash-es/has.js */ "./node_modules/lodash-es/has.js");
/* harmony import */ var lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/result.js */ "./node_modules/lodash-es/result.js");
//     (c) 2010-2019 Jeremy Ashkenas and DocumentCloud




/**
 * Custom error for indicating timeouts
 * @namespace _converse
 */

class NotImplementedError extends Error {} // Helpers
// -------
// Helper function to correctly set up the prototype chain for subclasses.
// Similar to `goog.inherits`, but uses a hash of prototype properties and
// class properties to be extended.
//

function inherits(protoProps, staticProps) {
  const parent = this;
  let child; // The constructor function for the new subclass is either defined by you
  // (the "constructor" property in your `extend` definition), or defaulted
  // by us to simply call the parent constructor.

  if (protoProps && (0,lodash_es_has_js__WEBPACK_IMPORTED_MODULE_0__["default"])(protoProps, 'constructor')) {
    child = protoProps.constructor;
  } else {
    child = function () {
      return parent.apply(this, arguments);
    };
  } // Add static properties to the constructor function, if supplied.


  (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_1__["default"])(child, parent, staticProps); // Set the prototype chain to inherit from `parent`, without calling
  // `parent`'s constructor function and add the prototype properties.

  child.prototype = (0,lodash_es_create_js__WEBPACK_IMPORTED_MODULE_2__["default"])(parent.prototype, protoProps);
  child.prototype.constructor = child; // Set a convenience property in case the parent's prototype is needed
  // later.

  child.__super__ = parent.prototype;
  return child;
}
function getResolveablePromise() {
  const wrapper = {
    isResolved: false,
    isPending: true,
    isRejected: false
  };
  const promise = new Promise((resolve, reject) => {
    wrapper.resolve = resolve;
    wrapper.reject = reject;
  });
  Object.assign(promise, wrapper);
  promise.then(function (v) {
    promise.isResolved = true;
    promise.isPending = false;
    promise.isRejected = false;
    return v;
  }, function (e) {
    promise.isResolved = false;
    promise.isPending = false;
    promise.isRejected = true;
    throw e;
  });
  return promise;
} // Throw an error when a URL is needed, and none is supplied.

function urlError() {
  throw new Error('A "url" property or function must be specified');
} // Wrap an optional error callback with a fallback error event.

function wrapError(model, options) {
  const error = options.error;

  options.error = function (resp) {
    if (error) error.call(options.context, model, resp, options);
    model.trigger('error', model, resp, options);
  };
} // Map from CRUD to HTTP for our default `sync` implementation.

const methodMap = {
  create: 'POST',
  update: 'PUT',
  patch: 'PATCH',
  delete: 'DELETE',
  read: 'GET'
};
function getSyncMethod(model) {
  const store = (0,lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__["default"])(model, 'browserStorage') || (0,lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__["default"])(model.collection, 'browserStorage');
  return store ? store.sync() : sync;
} // sync
// ----
// Override this function to change the manner in which Backbone persists
// models to the server. You will be passed the type of request, and the
// model in question. By default, makes a RESTful Ajax request
// to the model's `url()`. Some possible customizations could be:
//
// * Use `setTimeout` to batch rapid-fire updates into a single request.
// * Send up the models as XML instead of JSON.
// * Persist models via WebSockets instead of Ajax.
//

function sync(method, model) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const type = methodMap[method]; // Default JSON-request options.

  const params = {
    type: type,
    dataType: 'json'
  }; // Ensure that we have a URL.

  if (!options.url) {
    params.url = (0,lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__["default"])(model, 'url') || urlError();
  } // Ensure that we have the appropriate request data.


  if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
    params.contentType = 'application/json';
    params.data = JSON.stringify(options.attrs || model.toJSON(options));
  } // Don't process data on a non-GET request.


  if (params.type !== 'GET') {
    params.processData = false;
  } // Pass along `textStatus` and `errorThrown` from jQuery.


  const error = options.error;

  options.error = function (xhr, textStatus, errorThrown) {
    options.textStatus = textStatus;
    options.errorThrown = errorThrown;
    if (error) error.call(options.context, xhr, textStatus, errorThrown);
  }; // Make the request, allowing the user to override any Ajax options.


  const xhr = options.xhr = ajax((0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params, options));
  model.trigger('request', model, xhr, options);
  return xhr;
}
function ajax() {
  return fetch.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/history.js":
/*!********************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/history.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/extend.js */ "./node_modules/lodash-es/assignIn.js");
/* harmony import */ var lodash_es_some_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/some.js */ "./node_modules/lodash-es/some.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events.js */ "./node_modules/@converse/skeletor/src/events.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@converse/skeletor/src/helpers.js");
//  Backbone.js 1.4.0
//  (c) 2010-2019 Jeremy Ashkenas and DocumentCloud
//  Backbone may be freely distributed under the MIT license.



 // History
// -------
// Handles cross-browser history management, based on either
// [pushState](http://diveintohtml5.info/history.html) and real URLs, or
// [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
// and URL fragments. If the browser supports neither (old IE, natch),
// falls back to polling.

const History = function () {
  this.handlers = [];
  this.checkUrl = this.checkUrl.bind(this); // Ensure that `History` can be used outside of the browser.

  if (typeof window !== 'undefined') {
    this.location = window.location;
    this.history = window.history;
  }
};

History.extend = _helpers_js__WEBPACK_IMPORTED_MODULE_1__.inherits; // Cached regex for stripping a leading hash/slash and trailing space.

const routeStripper = /^[#\/]|\s+$/g; // Cached regex for stripping leading and trailing slashes.

const rootStripper = /^\/+|\/+$/g; // Cached regex for stripping urls of hash.

const pathStripper = /#.*$/; // Has the history handling already been started?

History.started = false; // Set up all inheritable **History** properties and methods.

Object.assign(History.prototype, _events_js__WEBPACK_IMPORTED_MODULE_0__.Events, {
  // The default interval to poll for hash changes, if necessary, is
  // twenty times a second.
  interval: 50,
  // Are we at the app root?
  atRoot: function () {
    const path = this.location.pathname.replace(/[^\/]$/, '$&/');
    return path === this.root && !this.getSearch();
  },
  // Does the pathname match the root?
  matchRoot: function () {
    const path = this.decodeFragment(this.location.pathname);
    const rootPath = path.slice(0, this.root.length - 1) + '/';
    return rootPath === this.root;
  },
  // Unicode characters in `location.pathname` are percent encoded so they're
  // decoded for comparison. `%25` should not be decoded since it may be part
  // of an encoded parameter.
  decodeFragment: function (fragment) {
    return decodeURI(fragment.replace(/%25/g, '%2525'));
  },
  // In IE6, the hash fragment and search params are incorrect if the
  // fragment contains `?`.
  getSearch: function () {
    const match = this.location.href.replace(/#.*/, '').match(/\?.+/);
    return match ? match[0] : '';
  },
  // Gets the true hash value. Cannot use location.hash directly due to bug
  // in Firefox where location.hash will always be decoded.
  getHash: function (window) {
    const match = (window || this).location.href.match(/#(.*)$/);
    return match ? match[1] : '';
  },
  // Get the pathname and search params, without the root.
  getPath: function () {
    const path = this.decodeFragment(this.location.pathname + this.getSearch()).slice(this.root.length - 1);
    return path.charAt(0) === '/' ? path.slice(1) : path;
  },
  // Get the cross-browser normalized URL fragment from the path or hash.
  getFragment: function (fragment) {
    if (fragment == null) {
      if (this._usePushState || !this._wantsHashChange) {
        fragment = this.getPath();
      } else {
        fragment = this.getHash();
      }
    }

    return fragment.replace(routeStripper, '');
  },
  // Start the hash change handling, returning `true` if the current URL matches
  // an existing route, and `false` otherwise.
  start: function (options) {
    if (History.started) throw new Error('history has already been started');
    History.started = true; // Figure out the initial configuration. Do we need an iframe?
    // Is pushState desired ... is it available?

    this.options = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_2__["default"])({
      root: '/'
    }, this.options, options);
    this.root = this.options.root;
    this._wantsHashChange = this.options.hashChange !== false;
    this._hasHashChange = 'onhashchange' in window && (document.documentMode === undefined || document.documentMode > 7);
    this._useHashChange = this._wantsHashChange && this._hasHashChange;
    this._wantsPushState = !!this.options.pushState;
    this._hasPushState = !!(this.history && this.history.pushState);
    this._usePushState = this._wantsPushState && this._hasPushState;
    this.fragment = this.getFragment(); // Normalize root to always include a leading and trailing slash.

    this.root = ('/' + this.root + '/').replace(rootStripper, '/'); // Transition from hashChange to pushState or vice versa if both are
    // requested.

    if (this._wantsHashChange && this._wantsPushState) {
      // If we've started off with a route from a `pushState`-enabled
      // browser, but we're currently in a browser that doesn't support it...
      if (!this._hasPushState && !this.atRoot()) {
        const rootPath = this.root.slice(0, -1) || '/';
        this.location.replace(rootPath + '#' + this.getPath()); // Return immediately as browser will do redirect to new url

        return true; // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
      } else if (this._hasPushState && this.atRoot()) {
        this.navigate(this.getHash(), {
          replace: true
        });
      }
    } // Proxy an iframe to handle location events if the browser doesn't
    // support the `hashchange` event, HTML5 history, or the user wants
    // `hashChange` but not `pushState`.


    if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
      this.iframe = document.createElement('iframe');
      this.iframe.src = 'javascript:0';
      this.iframe.style.display = 'none';
      this.iframe.tabIndex = -1;
      const body = document.body; // Using `appendChild` will throw on IE < 9 if the document is not ready.

      const iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
      iWindow.document.open();
      iWindow.document.close();
      iWindow.location.hash = '#' + this.fragment;
    } // Depending on whether we're using pushState or hashes, and whether
    // 'onhashchange' is supported, determine how we check the URL state.


    if (this._usePushState) {
      addEventListener('popstate', this.checkUrl, false);
    } else if (this._useHashChange && !this.iframe) {
      addEventListener('hashchange', this.checkUrl, false);
    } else if (this._wantsHashChange) {
      this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
    }

    if (!this.options.silent) return this.loadUrl();
  },
  // Disable history, perhaps temporarily. Not useful in a real app,
  // but possibly useful for unit testing Routers.
  stop: function () {
    // Remove window listeners.
    if (this._usePushState) {
      removeEventListener('popstate', this.checkUrl, false);
    } else if (this._useHashChange && !this.iframe) {
      removeEventListener('hashchange', this.checkUrl, false);
    } // Clean up the iframe if necessary.


    if (this.iframe) {
      document.body.removeChild(this.iframe);
      this.iframe = null;
    } // Some environments will throw when clearing an undefined interval.


    if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
    History.started = false;
  },
  // Add a route to be tested when the fragment changes. Routes added later
  // may override previous routes.
  route: function (route, callback) {
    this.handlers.unshift({
      route: route,
      callback: callback
    });
  },
  // Checks the current URL to see if it has changed, and if it has,
  // calls `loadUrl`, normalizing across the hidden iframe.
  checkUrl: function (e) {
    let current = this.getFragment(); // If the user pressed the back button, the iframe's hash will have
    // changed and we should use that for comparison.

    if (current === this.fragment && this.iframe) {
      current = this.getHash(this.iframe.contentWindow);
    }

    if (current === this.fragment) return false;
    if (this.iframe) this.navigate(current);
    this.loadUrl();
  },
  // Attempt to load the current URL fragment. If a route succeeds with a
  // match, returns `true`. If no defined routes matches the fragment,
  // returns `false`.
  loadUrl: function (fragment) {
    // If the root doesn't match, no routes can match either.
    if (!this.matchRoot()) return false;
    fragment = this.fragment = this.getFragment(fragment);
    return (0,lodash_es_some_js__WEBPACK_IMPORTED_MODULE_3__["default"])(this.handlers, function (handler) {
      if (handler.route.test(fragment)) {
        handler.callback(fragment);
        return true;
      }
    });
  },
  // Save a fragment into the hash history, or replace the URL state if the
  // 'replace' option is passed. You are responsible for properly URL-encoding
  // the fragment in advance.
  //
  // The options object can contain `trigger: true` if you wish to have the
  // route callback be fired (not usually desirable), or `replace: true`, if
  // you wish to modify the current URL without adding an entry to the history.
  navigate: function (fragment, options) {
    if (!History.started) return false;
    if (!options || options === true) options = {
      trigger: !!options
    }; // Normalize the fragment.

    fragment = this.getFragment(fragment || ''); // Don't include a trailing slash on the root.

    let rootPath = this.root;

    if (fragment === '' || fragment.charAt(0) === '?') {
      rootPath = rootPath.slice(0, -1) || '/';
    }

    const url = rootPath + fragment; // Strip the fragment of the query and hash for matching.

    fragment = fragment.replace(pathStripper, ''); // Decode for matching.

    const decodedFragment = this.decodeFragment(fragment);
    if (this.fragment === decodedFragment) return;
    this.fragment = decodedFragment; // If pushState is available, we use it to set the fragment as a real URL.

    if (this._usePushState) {
      this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url); // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
    } else if (this._wantsHashChange) {
      this._updateHash(this.location, fragment, options.replace);

      if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {
        const iWindow = this.iframe.contentWindow; // Opening and closing the iframe tricks IE7 and earlier to push a
        // history entry on hash-tag change.  When replace is true, we don't
        // want this.

        if (!options.replace) {
          iWindow.document.open();
          iWindow.document.close();
        }

        this._updateHash(iWindow.location, fragment, options.replace);
      } // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.

    } else {
      return this.location.assign(url);
    }

    if (options.trigger) return this.loadUrl(fragment);
  },
  // Update the hash location, either replacing the current entry, or adding
  // a new one to the browser history.
  _updateHash: function (location, fragment, replace) {
    if (replace) {
      const href = location.href.replace(/(javascript:|#).*$/, '');
      location.replace(href + '#' + fragment);
    } else {
      // Some browsers require that `hash` contains a leading #.
      location.hash = '#' + fragment;
    }
  }
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (History);

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/model.js":
/*!******************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/model.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Model": () => (/* binding */ Model)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@converse/skeletor/src/helpers.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.js */ "./node_modules/@converse/skeletor/src/events.js");
/* harmony import */ var lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es/clone.js */ "./node_modules/lodash-es/clone.js");
/* harmony import */ var lodash_es_defaults_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/defaults.js */ "./node_modules/lodash-es/defaults.js");
/* harmony import */ var lodash_es_defer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es/defer.js */ "./node_modules/lodash-es/defer.js");
/* harmony import */ var lodash_es_escape_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es/escape.js */ "./node_modules/lodash-es/escape.js");
/* harmony import */ var lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/extend.js */ "./node_modules/lodash-es/assignIn.js");
/* harmony import */ var lodash_es_has_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/has.js */ "./node_modules/lodash-es/has.js");
/* harmony import */ var lodash_es_invert_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/invert.js */ "./node_modules/lodash-es/invert.js");
/* harmony import */ var lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es/isEmpty.js */ "./node_modules/lodash-es/isEmpty.js");
/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es/isEqual.js */ "./node_modules/lodash-es/isEqual.js");
/* harmony import */ var lodash_es_iteratee_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es/iteratee.js */ "./node_modules/lodash-es/iteratee.js");
/* harmony import */ var lodash_es_omit_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es/omit.js */ "./node_modules/lodash-es/omit.js");
/* harmony import */ var lodash_es_pick_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/pick.js */ "./node_modules/lodash-es/pick.js");
/* harmony import */ var lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/result.js */ "./node_modules/lodash-es/result.js");
/* harmony import */ var lodash_es_uniqueId_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/uniqueId.js */ "./node_modules/lodash-es/uniqueId.js");
//     Backbone.js 1.4.0
//     (c) 2010-2019 Jeremy Ashkenas and DocumentCloud
//     Backbone may be freely distributed under the MIT license.
// Model
// -----
// **Models** are the basic data object in the framework --
// frequently representing a row in a table in a database on your server.
// A discrete chunk of data and a bunch of useful, related methods for
// performing computations and transformations on that data.
// Create a new model with the specified attributes. A client id (`cid`)
// is automatically generated and assigned for you.


















const Model = function (attributes, options) {
  let attrs = attributes || {};
  options || (options = {});
  this.preinitialize.apply(this, arguments);
  this.cid = (0,lodash_es_uniqueId_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.cidPrefix);
  this.attributes = {};
  if (options.collection) this.collection = options.collection;
  if (options.parse) attrs = this.parse(attrs, options) || {};
  const default_attrs = (0,lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__["default"])(this, 'defaults');
  attrs = (0,lodash_es_defaults_js__WEBPACK_IMPORTED_MODULE_4__["default"])((0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, default_attrs, attrs), default_attrs);
  this.set(attrs, options);
  this.changed = {};
  this.initialize.apply(this, arguments);
};
Model.extend = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.inherits; // Attach all inheritable methods to the Model prototype.

Object.assign(Model.prototype, _events_js__WEBPACK_IMPORTED_MODULE_1__.Events, {
  // A hash of attributes whose current and previous value differ.
  changed: null,
  // The value returned during the last failed validation.
  validationError: null,
  // The default name for the JSON `id` attribute is `"id"`. MongoDB and
  // CouchDB users may want to set this to `"_id"`.
  idAttribute: 'id',
  // The prefix is used to create the client id which is used to identify models locally.
  // You may want to override this if you're experiencing name clashes with model ids.
  cidPrefix: 'c',
  // preinitialize is an empty function by default. You can override it with a function
  // or object.  preinitialize will run before any instantiation logic is run in the Model.
  preinitialize: function () {},
  // Initialize is an empty function by default. Override it with your own
  // initialization logic.
  initialize: function () {},
  // Return a copy of the model's `attributes` object.
  toJSON: function (options) {
    return (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this.attributes);
  },
  // Proxy `Backbone.sync` by default -- but override this if you need
  // custom syncing semantics for *this* particular model.
  sync: function (method, model, options) {
    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getSyncMethod)(this)(method, model, options);
  },
  // Get the value of an attribute.
  get: function (attr) {
    return this.attributes[attr];
  },
  keys: function () {
    return Object.keys(this.attributes);
  },
  values: function () {
    return Object.values(this.attributes);
  },
  pairs: function () {
    return this.entries();
  },
  entries: function () {
    return Object.entries(this.attributes);
  },
  invert: function () {
    return (0,lodash_es_invert_js__WEBPACK_IMPORTED_MODULE_7__["default"])(this.attributes);
  },
  pick: function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && Array.isArray(args[0])) {
      args = args[0];
    }

    return (0,lodash_es_pick_js__WEBPACK_IMPORTED_MODULE_8__["default"])(this.attributes, args);
  },
  omit: function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (args.length === 1 && Array.isArray(args[0])) {
      args = args[0];
    }

    return (0,lodash_es_omit_js__WEBPACK_IMPORTED_MODULE_9__["default"])(this.attributes, args);
  },
  isEmpty: function () {
    return (0,lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_10__["default"])(this.attributes);
  },
  // Get the HTML-escaped value of an attribute.
  escape: function (attr) {
    return (0,lodash_es_escape_js__WEBPACK_IMPORTED_MODULE_11__["default"])(this.get(attr));
  },
  // Returns `true` if the attribute contains a value that is not null
  // or undefined.
  has: function (attr) {
    return this.get(attr) != null;
  },
  // Special-cased proxy to lodash's `matches` method.
  matches: function (attrs) {
    return !!(0,lodash_es_iteratee_js__WEBPACK_IMPORTED_MODULE_12__["default"])(attrs, this)(this.attributes);
  },
  // Set a hash of model attributes on the object, firing `"change"`. This is
  // the core primitive operation of a model, updating the data and notifying
  // anyone who needs to know about the change in state. The heart of the beast.
  set: function (key, val, options) {
    if (key == null) return this; // Handle both `"key", value` and `{key: value}` -style arguments.

    let attrs;

    if (typeof key === 'object') {
      attrs = key;
      options = val;
    } else {
      (attrs = {})[key] = val;
    }

    options || (options = {}); // Run validation.

    if (!this._validate(attrs, options)) return false; // Extract attributes and options.

    const unset = options.unset;
    const silent = options.silent;
    const changes = [];
    const changing = this._changing;
    this._changing = true;

    if (!changing) {
      this._previousAttributes = (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this.attributes);
      this.changed = {};
    }

    const current = this.attributes;
    const changed = this.changed;
    const prev = this._previousAttributes; // For each `set` attribute, update or delete the current value.

    for (const attr in attrs) {
      val = attrs[attr];
      if (!(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_13__["default"])(current[attr], val)) changes.push(attr);

      if (!(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_13__["default"])(prev[attr], val)) {
        changed[attr] = val;
      } else {
        delete changed[attr];
      }

      unset ? delete current[attr] : current[attr] = val;
    } // Update the `id`.


    if (this.idAttribute in attrs) this.id = this.get(this.idAttribute); // Trigger all relevant attribute changes.

    if (!silent) {
      if (changes.length) this._pending = options;

      for (let i = 0; i < changes.length; i++) {
        this.trigger('change:' + changes[i], this, current[changes[i]], options);
      }
    } // You might be wondering why there's a `while` loop here. Changes can
    // be recursively nested within `"change"` events.


    if (changing) return this;

    if (!silent) {
      while (this._pending) {
        options = this._pending;
        this._pending = false;
        this.trigger('change', this, options);
      }
    }

    this._pending = false;
    this._changing = false;
    return this;
  },
  // Remove an attribute from the model, firing `"change"`. `unset` is a noop
  // if the attribute doesn't exist.
  unset: function (attr, options) {
    return this.set(attr, undefined, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, options, {
      unset: true
    }));
  },
  // Clear all attributes on the model, firing `"change"`.
  clear: function (options) {
    const attrs = {};

    for (const key in this.attributes) attrs[key] = undefined;

    return this.set(attrs, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, options, {
      unset: true
    }));
  },
  // Determine if the model has changed since the last `"change"` event.
  // If you specify an attribute name, determine if that attribute has changed.
  hasChanged: function (attr) {
    if (attr == null) return !(0,lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_10__["default"])(this.changed);
    return (0,lodash_es_has_js__WEBPACK_IMPORTED_MODULE_14__["default"])(this.changed, attr);
  },
  // Return an object containing all the attributes that have changed, or
  // false if there are no changed attributes. Useful for determining what
  // parts of a view need to be updated and/or what attributes need to be
  // persisted to the server. Unset attributes will be set to undefined.
  // You can also pass an attributes object to diff against the model,
  // determining if there *would be* a change.
  changedAttributes: function (diff) {
    if (!diff) return this.hasChanged() ? (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this.changed) : false;
    const old = this._changing ? this._previousAttributes : this.attributes;
    const changed = {};
    let hasChanged;

    for (const attr in diff) {
      const val = diff[attr];
      if ((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_13__["default"])(old[attr], val)) continue;
      changed[attr] = val;
      hasChanged = true;
    }

    return hasChanged ? changed : false;
  },
  // Get the previous value of an attribute, recorded at the time the last
  // `"change"` event was fired.
  previous: function (attr) {
    if (attr == null || !this._previousAttributes) return null;
    return this._previousAttributes[attr];
  },
  // Get all of the attributes of the model at the time of the previous
  // `"change"` event.
  previousAttributes: function () {
    return (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this._previousAttributes);
  },
  // Fetch the model from the server, merging the response with the model's
  // local attributes. Any changed attributes will trigger a "change" event.
  fetch: function (options) {
    options = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({
      parse: true
    }, options);
    const model = this;
    const success = options.success;

    options.success = function (resp) {
      const serverAttrs = options.parse ? model.parse(resp, options) : resp;
      if (!model.set(serverAttrs, options)) return false;
      if (success) success.call(options.context, model, resp, options);
      model.trigger('sync', model, resp, options);
    };

    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.wrapError)(this, options);
    return this.sync('read', this, options);
  },
  // Set a hash of model attributes, and sync the model to the server.
  // If the server returns an attributes hash that differs, the model's
  // state will be `set` again.
  save: function (key, val, options) {
    // Handle both `"key", value` and `{key: value}` -style arguments.
    let attrs;

    if (key == null || typeof key === 'object') {
      attrs = key;
      options = val;
    } else {
      (attrs = {})[key] = val;
    }

    options = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({
      validate: true,
      parse: true
    }, options);
    const wait = options.wait;
    const return_promise = options.promise;
    const promise = return_promise && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getResolveablePromise)(); // If we're not waiting and attributes exist, save acts as
    // `set(attr).save(null, opts)` with validation. Otherwise, check if
    // the model will be valid when the attributes, if any, are set.

    if (attrs && !wait) {
      if (!this.set(attrs, options)) return false;
    } else if (!this._validate(attrs, options)) {
      return false;
    } // After a successful server-side save, the client is (optionally)
    // updated with the server-side state.


    const model = this;
    const success = options.success;
    const error = options.error;
    const attributes = this.attributes;

    options.success = function (resp) {
      // Ensure attributes are restored during synchronous saves.
      model.attributes = attributes;
      let serverAttrs = options.parse ? model.parse(resp, options) : resp;
      if (wait) serverAttrs = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, attrs, serverAttrs);
      if (serverAttrs && !model.set(serverAttrs, options)) return false;
      if (success) success.call(options.context, model, resp, options);
      model.trigger('sync', model, resp, options);
      return_promise && promise.resolve();
    };

    options.error = function (model, e, options) {
      error && error.call(options.context, model, e, options);
      return_promise && promise.reject(e);
    };

    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.wrapError)(this, options); // Set temporary attributes if `{wait: true}` to properly find new ids.

    if (attrs && wait) this.attributes = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, attributes, attrs);
    const method = this.isNew() ? 'create' : options.patch ? 'patch' : 'update';
    if (method === 'patch' && !options.attrs) options.attrs = attrs;
    const xhr = this.sync(method, this, options); // Restore attributes.

    this.attributes = attributes;

    if (return_promise) {
      return promise;
    } else {
      return xhr;
    }
  },
  // Destroy this model on the server if it was already persisted.
  // Optimistically removes the model from its collection, if it has one.
  // If `wait: true` is passed, waits for the server to respond before removal.
  destroy: function (options) {
    options = options ? (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_6__["default"])(options) : {};
    const model = this;
    const success = options.success;
    const wait = options.wait;

    const destroy = function () {
      model.stopListening();
      model.trigger('destroy', model, model.collection, options);
    };

    options.success = function (resp) {
      if (wait) destroy();
      if (success) success.call(options.context, model, resp, options);
      if (!model.isNew()) model.trigger('sync', model, resp, options);
    };

    let xhr = false;

    if (this.isNew()) {
      (0,lodash_es_defer_js__WEBPACK_IMPORTED_MODULE_15__["default"])(options.success);
    } else {
      (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.wrapError)(this, options);
      xhr = this.sync('delete', this, options);
    }

    if (!wait) destroy();
    return xhr;
  },
  // Default URL for the model's representation on the server -- if you're
  // using Backbone's restful methods, override this to change the endpoint
  // that will be called.
  url: function () {
    const base = (0,lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__["default"])(this, 'urlRoot') || (0,lodash_es_result_js__WEBPACK_IMPORTED_MODULE_3__["default"])(this.collection, 'url') || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.urlError)();
    if (this.isNew()) return base;
    const id = this.get(this.idAttribute);
    return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
  },
  // **parse** converts a response into the hash of attributes to be `set` on
  // the model. The default implementation is just to pass the response along.
  parse: function (resp, options) {
    return resp;
  },
  // Create a new model with identical attributes to this one.
  clone: function () {
    return new this.constructor(this.attributes);
  },
  // A model is new if it has never been saved to the server, and lacks an id.
  isNew: function () {
    return !this.has(this.idAttribute);
  },
  // Check if the model is currently in a valid state.
  isValid: function (options) {
    return this._validate({}, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, options, {
      validate: true
    }));
  },
  // Run validation against the next complete set of model attributes,
  // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
  _validate: function (attrs, options) {
    if (!options.validate || !this.validate) return true;
    attrs = (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])({}, this.attributes, attrs);
    const error = this.validationError = this.validate(attrs, options) || null;
    if (!error) return true;
    this.trigger('invalid', this, error, (0,lodash_es_extend_js__WEBPACK_IMPORTED_MODULE_5__["default"])(options, {
      validationError: error
    }));
    return false;
  }
});

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/router.js":
/*!*******************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/router.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Router": () => (/* binding */ Router)
/* harmony export */ });
/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./history.js */ "./node_modules/@converse/skeletor/src/history.js");
/* harmony import */ var lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var lodash_es_isRegExp_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/isRegExp.js */ "./node_modules/lodash-es/isRegExp.js");
/* harmony import */ var lodash_es_keys_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es/keys.js */ "./node_modules/lodash-es/keys.js");
/* harmony import */ var lodash_es_result_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/result.js */ "./node_modules/lodash-es/result.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.js */ "./node_modules/@converse/skeletor/src/events.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@converse/skeletor/src/helpers.js");
//     Backbone.js 1.4.0
//     (c) 2010-2019 Jeremy Ashkenas and DocumentCloud
//     Backbone may be freely distributed under the MIT license.
// Router
// ------







 // Routers map faux-URLs to actions, and fire events when routes are
// matched. Creating a new one sets its `routes` hash, if not set statically.

const Router = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  this.history = options.history || new _history_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
  this.preinitialize.apply(this, arguments);
  if (options.routes) this.routes = options.routes;

  this._bindRoutes();

  this.initialize.apply(this, arguments);
};
Router.extend = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.inherits; // Cached regular expressions for matching named param parts and splatted
// parts of route strings.

const optionalParam = /\((.*?)\)/g;
const namedParam = /(\(\?)?:\w+/g;
const splatParam = /\*\w+/g;
const escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g; // Set up all inheritable **Router** properties and methods.

Object.assign(Router.prototype, _events_js__WEBPACK_IMPORTED_MODULE_1__.Events, {
  // preinitialize is an empty function by default. You can override it with a function
  // or object.  preinitialize will run before any instantiation logic is run in the Router.
  preinitialize: function () {},
  // Initialize is an empty function by default. Override it with your own
  // initialization logic.
  initialize: function () {},
  // Manually bind a single named route to a callback. For example:
  //
  //     this.route('search/:query/p:num', 'search', function(query, num) {
  //       ...
  //     });
  //
  route: function (route, name, callback) {
    if (!(0,lodash_es_isRegExp_js__WEBPACK_IMPORTED_MODULE_3__["default"])(route)) route = this._routeToRegExp(route);

    if ((0,lodash_es_isFunction_js__WEBPACK_IMPORTED_MODULE_4__["default"])(name)) {
      callback = name;
      name = '';
    }

    if (!callback) callback = this[name];
    this.history.route(route, fragment => {
      const args = this._extractParameters(route, fragment);

      if (this.execute(callback, args, name) !== false) {
        this.trigger.apply(this, ['route:' + name].concat(args));
        this.trigger('route', name, args);
        this.history.trigger('route', this, name, args);
      }
    });
    return this;
  },
  // Execute a route handler with the provided parameters.  This is an
  // excellent place to do pre-route setup or post-route cleanup.
  execute: function (callback, args, name) {
    if (callback) callback.apply(this, args);
  },
  // Simple proxy to `history` to save a fragment into the history.
  navigate: function (fragment, options) {
    this.history.navigate(fragment, options);
    return this;
  },
  // Bind all defined routes to `history`. We have to reverse the
  // order of the routes here to support behavior where the most general
  // routes can be defined at the bottom of the route map.
  _bindRoutes: function () {
    if (!this.routes) return;
    this.routes = (0,lodash_es_result_js__WEBPACK_IMPORTED_MODULE_5__["default"])(this, 'routes');
    let route;
    const routes = (0,lodash_es_keys_js__WEBPACK_IMPORTED_MODULE_6__["default"])(this.routes);

    while ((route = routes.pop()) != null) {
      this.route(route, this.routes[route]);
    }
  },
  // Convert a route string into a regular expression, suitable for matching
  // against the current location hash.
  _routeToRegExp: function (route) {
    route = route.replace(escapeRegExp, '\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, function (match, optional) {
      return optional ? match : '([^/?]+)';
    }).replace(splatParam, '([^?]*?)');
    return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
  },
  // Given a route, and a URL fragment that it matches, return the array of
  // extracted decoded parameters. Empty or unmatched parameters will be
  // treated as `null` to normalize cross-browser behavior.
  _extractParameters: function (route, fragment) {
    const params = route.exec(fragment).slice(1);
    return params.map(function (param, i) {
      // Don't decode the search params.
      if (i === params.length - 1) return param || null;
      return param ? decodeURIComponent(param) : null;
    });
  }
});

/***/ }),

/***/ "./node_modules/@converse/skeletor/src/storage.js":
/*!********************************************************!*\
  !*** ./node_modules/@converse/skeletor/src/storage.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var localforage_driver_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! localforage-driver-memory */ "./node_modules/localforage-driver-memory/_bundle/umd.js");
/* harmony import */ var localforage_driver_memory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(localforage_driver_memory__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_es_cloneDeep_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/cloneDeep.js */ "./node_modules/lodash-es/cloneDeep.js");
/* harmony import */ var lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es/isString.js */ "./node_modules/lodash-es/isString.js");
/* harmony import */ var localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! localforage/src/localforage */ "./node_modules/localforage/src/localforage.js");
/* harmony import */ var mergebounce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mergebounce */ "./node_modules/mergebounce/mergebounce.js");
/* harmony import */ var _drivers_sessionStorage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./drivers/sessionStorage.js */ "./node_modules/@converse/skeletor/src/drivers/sessionStorage.js");
/* harmony import */ var localforage_setitems__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! localforage-setitems */ "./node_modules/localforage-setitems/dist/localforage-setitems.js");
/* harmony import */ var localforage_setitems__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(localforage_setitems__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var localforage_getitems__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! localforage-getitems */ "./node_modules/localforage-getitems/dist/localforage-getitems.js");
/* harmony import */ var localforage_getitems__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(localforage_getitems__WEBPACK_IMPORTED_MODULE_5__);
/**
 * IndexedDB, localStorage and sessionStorage adapter
 */








const IN_MEMORY = localforage_driver_memory__WEBPACK_IMPORTED_MODULE_0__._driver;
localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"].defineDriver(localforage_driver_memory__WEBPACK_IMPORTED_MODULE_0__);
(0,localforage_setitems__WEBPACK_IMPORTED_MODULE_4__.extendPrototype)(localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"]);
(0,localforage_getitems__WEBPACK_IMPORTED_MODULE_5__.extendPrototype)(localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"]);

function S4() {
  // Generate four random hex digits.
  return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
}

function guid() {
  // Generate a pseudo-GUID by concatenating random hexadecimal.
  return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
}

class Storage {
  constructor(id, type) {
    let batchedWrites = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (type === 'local' && !window.localStorage) {
      throw new Error("Skeletor.storage: Environment does not support localStorage.");
    } else if (type === 'session' && !window.sessionStorage) {
      throw new Error("Skeletor.storage: Environment does not support sessionStorage.");
    }

    if ((0,lodash_es_isString_js__WEBPACK_IMPORTED_MODULE_6__["default"])(type)) {
      this.storeInitialized = this.initStore(type, batchedWrites);
    } else {
      this.store = type;

      if (batchedWrites) {
        this.store.debouncedSetItems = (0,mergebounce__WEBPACK_IMPORTED_MODULE_2__["default"])(items => this.store.setItems(items), 50, {
          'promise': true
        });
      }

      this.storeInitialized = Promise.resolve();
    }

    this.name = id;
  }

  async initStore(type, batchedWrites) {
    if (type === 'session') {
      localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"].setDriver(_drivers_sessionStorage_js__WEBPACK_IMPORTED_MODULE_3__["default"]._driver);
    } else if (type === 'local') {
      await localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"].config({
        'driver': localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"].LOCALSTORAGE
      });
    } else if (type === 'in_memory') {
      localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"].config({
        'driver': IN_MEMORY
      });
    } else if (type !== 'indexed') {
      throw new Error("Skeletor.storage: No storage type was specified");
    }

    this.store = localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"];

    if (batchedWrites) {
      this.store.debouncedSetItems = (0,mergebounce__WEBPACK_IMPORTED_MODULE_2__["default"])(items => this.store.setItems(items), 50, {
        'promise': true
      });
    }
  }

  flush() {
    var _this$store$debounced;

    return (_this$store$debounced = this.store.debouncedSetItems) === null || _this$store$debounced === void 0 ? void 0 : _this$store$debounced.flush();
  }

  async clear() {
    await this.store.removeItem(this.name).catch(e => console.error(e));
    const re = new RegExp(`^${this.name}-`);
    const keys = await this.store.keys();
    const removed_keys = keys.filter(k => re.test(k));
    await Promise.all(removed_keys.map(k => this.store.removeItem(k).catch(e => console.error(e))));
  }

  sync() {
    const that = this;

    async function localSync(method, model, options) {
      let resp, errorMessage, promise, new_attributes; // We get the collection (and if necessary the model attribute.
      // Waiting for storeInitialized will cause another iteration of
      // the event loop, after which the collection reference will
      // be removed from the model.

      const collection = model.collection;

      if (['patch', 'update'].includes(method)) {
        new_attributes = (0,lodash_es_cloneDeep_js__WEBPACK_IMPORTED_MODULE_7__["default"])(model.attributes);
      }

      await that.storeInitialized;

      try {
        const original_attributes = model.attributes;

        switch (method) {
          case "read":
            if (model.id !== undefined) {
              resp = await that.find(model);
            } else {
              resp = await that.findAll();
            }

            break;

          case "create":
            resp = await that.create(model, options);
            break;

          case 'patch':
          case "update":
            if (options.wait) {
              // When `wait` is set to true, Skeletor waits until
              // confirmation of storage before setting the values on
              // the model.
              // However, the new attributes needs to be sent, so it
              // sets them manually on the model and then removes
              // them after calling `sync`.
              // Because our `sync` method is asynchronous and we
              // wait for `storeInitialized`, the attributes are
              // already restored once we get here, so we need to do
              // the attributes dance again.
              model.attributes = new_attributes;
            }

            promise = that.update(model, options);

            if (options.wait) {
              model.attributes = original_attributes;
            }

            resp = await promise;
            break;

          case "delete":
            resp = await that.destroy(model, collection);
            break;
        }
      } catch (error) {
        if (error.code === 22 && that.getStorageSize() === 0) {
          errorMessage = "Private browsing is unsupported";
        } else {
          errorMessage = error.message;
        }
      }

      if (resp) {
        if (options && options.success) {
          // When storing, we don't pass back the response (which is
          // the set attributes returned from localforage because
          // Skeletor sets them again on the model and due to the async
          // nature of localforage it can cause stale attributes to be
          // set on a model after it's been updated in the meantime.
          const data = method === "read" ? resp : null;
          options.success(data, options);
        }
      } else {
        errorMessage = errorMessage ? errorMessage : "Record Not Found";

        if (options && options.error) {
          options.error(errorMessage);
        }
      }
    }

    localSync.__name__ = 'localSync';
    return localSync;
  }

  removeCollectionReference(model, collection) {
    if (!collection) {
      return;
    }

    const ids = collection.filter(m => m.id !== model.id).map(m => this.getItemName(m.id));
    return this.store.setItem(this.name, ids);
  }

  addCollectionReference(model, collection) {
    if (!collection) {
      return;
    }

    const ids = collection.map(m => this.getItemName(m.id));
    const new_id = this.getItemName(model.id);

    if (!ids.includes(new_id)) {
      ids.push(new_id);
    }

    return this.store.setItem(this.name, ids);
  }

  getCollectionReferenceData(model) {
    if (!model.collection) {
      return {};
    }

    const ids = model.collection.map(m => this.getItemName(m.id));
    const new_id = this.getItemName(model.id);

    if (!ids.includes(new_id)) {
      ids.push(new_id);
    }

    const result = {};
    result[this.name] = ids;
    return result;
  }

  async save(model) {
    if (this.store.setItems) {
      const items = {};
      items[this.getItemName(model.id)] = model.toJSON();
      Object.assign(items, this.getCollectionReferenceData(model));
      return this.store.debouncedSetItems ? this.store.debouncedSetItems(items) : this.store.setItems(items);
    } else {
      const key = this.getItemName(model.id);
      const data = await this.store.setItem(key, model.toJSON());
      await this.addCollectionReference(model, model.collection);
      return data;
    }
  }

  create(model, options) {
    /* Add a model, giving it a (hopefully)-unique GUID, if it doesn't already
     * have an id of it's own.
     */
    if (!model.id) {
      model.id = guid();
      model.set(model.idAttribute, model.id, options);
    }

    return this.save(model);
  }

  update(model) {
    return this.save(model);
  }

  find(model) {
    return this.store.getItem(this.getItemName(model.id));
  }

  async findAll() {
    /* Return the array of all models currently in storage.
     */
    const keys = await this.store.getItem(this.name);

    if (keys !== null && keys !== void 0 && keys.length) {
      const items = await this.store.getItems(keys);
      return Object.values(items);
    }

    return [];
  }

  async destroy(model, collection) {
    await this.flush();
    await this.store.removeItem(this.getItemName(model.id));
    await this.removeCollectionReference(model, collection);
    return model;
  }

  getStorageSize() {
    return this.store.length;
  }

  getItemName(id) {
    return this.name + "-" + id;
  }

}

Storage.sessionStorageInitialized = localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"].defineDriver(_drivers_sessionStorage_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
Storage.localForage = localforage_src_localforage__WEBPACK_IMPORTED_MODULE_1__["default"];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Storage);

/***/ }),

/***/ "./node_modules/localforage/src/drivers/indexeddb.js":
/*!***********************************************************!*\
  !*** ./node_modules/localforage/src/drivers/indexeddb.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_isIndexedDBValid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isIndexedDBValid */ "./node_modules/localforage/src/utils/isIndexedDBValid.js");
/* harmony import */ var _utils_createBlob__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/createBlob */ "./node_modules/localforage/src/utils/createBlob.js");
/* harmony import */ var _utils_idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/idb */ "./node_modules/localforage/src/utils/idb.js");
/* harmony import */ var _utils_promise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/promise */ "./node_modules/localforage/src/utils/promise.js");
/* harmony import */ var _utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/executeCallback */ "./node_modules/localforage/src/utils/executeCallback.js");
/* harmony import */ var _utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/executeTwoCallbacks */ "./node_modules/localforage/src/utils/executeTwoCallbacks.js");
/* harmony import */ var _utils_normalizeKey__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/normalizeKey */ "./node_modules/localforage/src/utils/normalizeKey.js");
/* harmony import */ var _utils_getCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getCallback */ "./node_modules/localforage/src/utils/getCallback.js");







 // Some code originally from async_storage.js in
// [Gaia](https://github.com/mozilla-b2g/gaia).

const DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
let supportsBlobs;
const dbContexts = {};
const toString = Object.prototype.toString; // Transaction Modes

const READ_ONLY = 'readonly';
const READ_WRITE = 'readwrite'; // Transform a binary string to an array buffer, because otherwise
// weird stuff happens when you try to work with the binary string directly.
// It is known.
// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)

function _binStringToArrayBuffer(bin) {
  var length = bin.length;
  var buf = new ArrayBuffer(length);
  var arr = new Uint8Array(buf);

  for (var i = 0; i < length; i++) {
    arr[i] = bin.charCodeAt(i);
  }

  return buf;
} //
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37 and Android <5. In those versions, storing a blob will throw.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
// Code borrowed from PouchDB. See:
// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
//


function _checkBlobSupportWithoutCaching(idb) {
  return new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve) {
    var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
    var blob = (0,_utils_createBlob__WEBPACK_IMPORTED_MODULE_1__["default"])(['']);
    txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

    txn.onabort = function (e) {
      // If the transaction aborts now its due to not being able to
      // write to the database, likely due to the disk being full
      e.preventDefault();
      e.stopPropagation();
      resolve(false);
    };

    txn.oncomplete = function () {
      var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
      var matchedEdge = navigator.userAgent.match(/Edge\//); // MS Edge pretends to be Chrome 42:
      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx

      resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
    };
  }).catch(function () {
    return false; // error, so assume unsupported
  });
}

function _checkBlobSupport(idb) {
  if (typeof supportsBlobs === 'boolean') {
    return _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].resolve(supportsBlobs);
  }

  return _checkBlobSupportWithoutCaching(idb).then(function (value) {
    supportsBlobs = value;
    return supportsBlobs;
  });
}

function _deferReadiness(dbInfo) {
  var dbContext = dbContexts[dbInfo.name]; // Create a deferred object representing the current database operation.

  var deferredOperation = {};
  deferredOperation.promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    deferredOperation.resolve = resolve;
    deferredOperation.reject = reject;
  }); // Enqueue the deferred operation.

  dbContext.deferredOperations.push(deferredOperation); // Chain its promise to the database readiness.

  if (!dbContext.dbReady) {
    dbContext.dbReady = deferredOperation.promise;
  } else {
    dbContext.dbReady = dbContext.dbReady.then(function () {
      return deferredOperation.promise;
    });
  }
}

function _advanceReadiness(dbInfo) {
  var dbContext = dbContexts[dbInfo.name]; // Dequeue a deferred operation.

  var deferredOperation = dbContext.deferredOperations.pop(); // Resolve its promise (which is part of the database readiness
  // chain of promises).

  if (deferredOperation) {
    deferredOperation.resolve();
    return deferredOperation.promise;
  }
}

function _rejectReadiness(dbInfo, err) {
  var dbContext = dbContexts[dbInfo.name]; // Dequeue a deferred operation.

  var deferredOperation = dbContext.deferredOperations.pop(); // Reject its promise (which is part of the database readiness
  // chain of promises).

  if (deferredOperation) {
    deferredOperation.reject(err);
    return deferredOperation.promise;
  }
}

function _getConnection(dbInfo, upgradeNeeded) {
  return new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

    if (dbInfo.db) {
      if (upgradeNeeded) {
        _deferReadiness(dbInfo);

        dbInfo.db.close();
      } else {
        return resolve(dbInfo.db);
      }
    }

    var dbArgs = [dbInfo.name];

    if (upgradeNeeded) {
      dbArgs.push(dbInfo.version);
    }

    var openreq = _utils_idb__WEBPACK_IMPORTED_MODULE_2__["default"].open.apply(_utils_idb__WEBPACK_IMPORTED_MODULE_2__["default"], dbArgs);

    if (upgradeNeeded) {
      openreq.onupgradeneeded = function (e) {
        var db = openreq.result;

        try {
          db.createObjectStore(dbInfo.storeName);

          if (e.oldVersion <= 1) {
            // Added when support for blob shims was added
            db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
          }
        } catch (ex) {
          if (ex.name === 'ConstraintError') {
            console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
          } else {
            throw ex;
          }
        }
      };
    }

    openreq.onerror = function (e) {
      e.preventDefault();
      reject(openreq.error);
    };

    openreq.onsuccess = function () {
      var db = openreq.result;

      db.onversionchange = function (e) {
        // Triggered when the database is modified (e.g. adding an objectStore) or
        // deleted (even when initiated by other sessions in different tabs).
        // Closing the connection here prevents those operations from being blocked.
        // If the database is accessed again later by this instance, the connection
        // will be reopened or the database recreated as needed.
        e.target.close();
      };

      resolve(db);

      _advanceReadiness(dbInfo);
    };
  });
}

function _getOriginalConnection(dbInfo) {
  return _getConnection(dbInfo, false);
}

function _getUpgradedConnection(dbInfo) {
  return _getConnection(dbInfo, true);
}

function _isUpgradeNeeded(dbInfo, defaultVersion) {
  if (!dbInfo.db) {
    return true;
  }

  var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
  var isDowngrade = dbInfo.version < dbInfo.db.version;
  var isUpgrade = dbInfo.version > dbInfo.db.version;

  if (isDowngrade) {
    // If the version is not the default one
    // then warn for impossible downgrade.
    if (dbInfo.version !== defaultVersion) {
      console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
    } // Align the versions to prevent errors.


    dbInfo.version = dbInfo.db.version;
  }

  if (isUpgrade || isNewStore) {
    // If the store is new then increment the version (if needed).
    // This will trigger an "upgradeneeded" event which is required
    // for creating a store.
    if (isNewStore) {
      var incVersion = dbInfo.db.version + 1;

      if (incVersion > dbInfo.version) {
        dbInfo.version = incVersion;
      }
    }

    return true;
  }

  return false;
} // encode a blob for indexeddb engines that don't support blobs


function _encodeBlob(blob) {
  return new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    var reader = new FileReader();
    reader.onerror = reject;

    reader.onloadend = function (e) {
      var base64 = btoa(e.target.result || '');
      resolve({
        __local_forage_encoded_blob: true,
        data: base64,
        type: blob.type
      });
    };

    reader.readAsBinaryString(blob);
  });
} // decode an encoded blob


function _decodeBlob(encodedBlob) {
  var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));

  return (0,_utils_createBlob__WEBPACK_IMPORTED_MODULE_1__["default"])([arrayBuff], {
    type: encodedBlob.type
  });
} // is this one of our fancy encoded blobs?


function _isEncodedBlob(value) {
  return value && value.__local_forage_encoded_blob;
} // Specialize the default `ready()` function by making it dependent
// on the current database operations. Thus, the driver will be actually
// ready when it's been initialized (default) *and* there are no pending
// operations on the database (initiated by some other instances).


function _fullyReady(callback) {
  var self = this;

  var promise = self._initReady().then(function () {
    var dbContext = dbContexts[self._dbInfo.name];

    if (dbContext && dbContext.dbReady) {
      return dbContext.dbReady;
    }
  });

  (0,_utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_5__["default"])(promise, callback, callback);
  return promise;
} // Try to establish a new db connection to replace the
// current one which is broken (i.e. experiencing
// InvalidStateError while creating a transaction).


function _tryReconnect(dbInfo) {
  _deferReadiness(dbInfo);

  var dbContext = dbContexts[dbInfo.name];
  var forages = dbContext.forages;

  for (var i = 0; i < forages.length; i++) {
    const forage = forages[i];

    if (forage._dbInfo.db) {
      forage._dbInfo.db.close();

      forage._dbInfo.db = null;
    }
  }

  dbInfo.db = null;
  return _getOriginalConnection(dbInfo).then(db => {
    dbInfo.db = db;

    if (_isUpgradeNeeded(dbInfo)) {
      // Reopen the database for upgrading.
      return _getUpgradedConnection(dbInfo);
    }

    return db;
  }).then(db => {
    // store the latest db reference
    // in case the db was upgraded
    dbInfo.db = dbContext.db = db;

    for (var i = 0; i < forages.length; i++) {
      forages[i]._dbInfo.db = db;
    }
  }).catch(err => {
    _rejectReadiness(dbInfo, err);

    throw err;
  });
} // FF doesn't like Promises (micro-tasks) and IDDB store operations,
// so we have to do it with callbacks


function createTransaction(dbInfo, mode, callback, retries) {
  if (retries === undefined) {
    retries = 1;
  }

  try {
    var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
    callback(null, tx);
  } catch (err) {
    if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
      return _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].resolve().then(() => {
        if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
          // increase the db version, to create the new ObjectStore
          if (dbInfo.db) {
            dbInfo.version = dbInfo.db.version + 1;
          } // Reopen the database for upgrading.


          return _getUpgradedConnection(dbInfo);
        }
      }).then(() => {
        return _tryReconnect(dbInfo).then(function () {
          createTransaction(dbInfo, mode, callback, retries - 1);
        });
      }).catch(callback);
    }

    callback(err);
  }
}

function createDbContext() {
  return {
    // Running localForages sharing a database.
    forages: [],
    // Shared database.
    db: null,
    // Database readiness (promise).
    dbReady: null,
    // Deferred operations on the database.
    deferredOperations: []
  };
} // Open the IndexedDB database (automatically creates one if one didn't
// previously exist), using any options set in the config.


function _initStorage(options) {
  var self = this;
  var dbInfo = {
    db: null
  };

  if (options) {
    for (var i in options) {
      dbInfo[i] = options[i];
    }
  } // Get the current context of the database;


  var dbContext = dbContexts[dbInfo.name]; // ...or create a new context.

  if (!dbContext) {
    dbContext = createDbContext(); // Register the new context in the global container.

    dbContexts[dbInfo.name] = dbContext;
  } // Register itself as a running localForage in the current context.


  dbContext.forages.push(self); // Replace the default `ready()` function with the specialized one.

  if (!self._initReady) {
    self._initReady = self.ready;
    self.ready = _fullyReady;
  } // Create an array of initialization states of the related localForages.


  var initPromises = [];

  function ignoreErrors() {
    // Don't handle errors here,
    // just makes sure related localForages aren't pending.
    return _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].resolve();
  }

  for (var j = 0; j < dbContext.forages.length; j++) {
    var forage = dbContext.forages[j];

    if (forage !== self) {
      // Don't wait for itself...
      initPromises.push(forage._initReady().catch(ignoreErrors));
    }
  } // Take a snapshot of the related localForages.


  var forages = dbContext.forages.slice(0); // Initialize the connection process only when
  // all the related localForages aren't pending.

  return _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].all(initPromises).then(function () {
    dbInfo.db = dbContext.db; // Get the connection or open a new one without upgrade.

    return _getOriginalConnection(dbInfo);
  }).then(function (db) {
    dbInfo.db = db;

    if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
      // Reopen the database for upgrading.
      return _getUpgradedConnection(dbInfo);
    }

    return db;
  }).then(function (db) {
    dbInfo.db = dbContext.db = db;
    self._dbInfo = dbInfo; // Share the final connection amongst related localForages.

    for (var k = 0; k < forages.length; k++) {
      var forage = forages[k];

      if (forage !== self) {
        // Self is already up-to-date.
        forage._dbInfo.db = dbInfo.db;
        forage._dbInfo.version = dbInfo.version;
      }
    }
  });
}

function getItem(key, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_6__["default"])(key);
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    self.ready().then(function () {
      createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName);
          var req = store.get(key);

          req.onsuccess = function () {
            var value = req.result;

            if (value === undefined) {
              value = null;
            }

            if (_isEncodedBlob(value)) {
              value = _decodeBlob(value);
            }

            resolve(value);
          };

          req.onerror = function () {
            reject(req.error);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
} // Iterate over all items stored in database.


function iterate(iterator, callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    self.ready().then(function () {
      createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName);
          var req = store.openCursor();
          var iterationNumber = 1;

          req.onsuccess = function () {
            var cursor = req.result;

            if (cursor) {
              var value = cursor.value;

              if (_isEncodedBlob(value)) {
                value = _decodeBlob(value);
              }

              var result = iterator(value, cursor.key, iterationNumber++); // when the iterator callback returns any
              // (non-`undefined`) value, then we stop
              // the iteration immediately

              if (result !== void 0) {
                resolve(result);
              } else {
                cursor.continue();
              }
            } else {
              resolve();
            }
          };

          req.onerror = function () {
            reject(req.error);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

function setItem(key, value, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_6__["default"])(key);
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    var dbInfo;
    self.ready().then(function () {
      dbInfo = self._dbInfo;

      if (toString.call(value) === '[object Blob]') {
        return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
          if (blobSupport) {
            return value;
          }

          return _encodeBlob(value);
        });
      }

      return value;
    }).then(function (value) {
      createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName); // The reason we don't _save_ null is because IE 10 does
          // not support saving the `null` type in IndexedDB. How
          // ironic, given the bug below!
          // See: https://github.com/mozilla/localForage/issues/161

          if (value === null) {
            value = undefined;
          }

          var req = store.put(value, key);

          transaction.oncomplete = function () {
            // Cast to undefined so the value passed to
            // callback/promise is the same as what one would get out
            // of `getItem()` later. This leads to some weirdness
            // (setItem('foo', undefined) will return `null`), but
            // it's not my fault localStorage is our baseline and that
            // it's weird.
            if (value === undefined) {
              value = null;
            }

            resolve(value);
          };

          transaction.onabort = transaction.onerror = function () {
            var err = req.error ? req.error : req.transaction.error;
            reject(err);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

function removeItem(key, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_6__["default"])(key);
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    self.ready().then(function () {
      createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName); // We use a Grunt task to make this safe for IE and some
          // versions of Android (including those used by Cordova).
          // Normally IE won't like `.delete()` and will insist on
          // using `['delete']()`, but we have a build step that
          // fixes this for us now.

          var req = store.delete(key);

          transaction.oncomplete = function () {
            resolve();
          };

          transaction.onerror = function () {
            reject(req.error);
          }; // The request will be also be aborted if we've exceeded our storage
          // space.


          transaction.onabort = function () {
            var err = req.error ? req.error : req.transaction.error;
            reject(err);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

function clear(callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    self.ready().then(function () {
      createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName);
          var req = store.clear();

          transaction.oncomplete = function () {
            resolve();
          };

          transaction.onabort = transaction.onerror = function () {
            var err = req.error ? req.error : req.transaction.error;
            reject(err);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

function length(callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    self.ready().then(function () {
      createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName);
          var req = store.count();

          req.onsuccess = function () {
            resolve(req.result);
          };

          req.onerror = function () {
            reject(req.error);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

function key(n, callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    if (n < 0) {
      resolve(null);
      return;
    }

    self.ready().then(function () {
      createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName);
          var advanced = false;
          var req = store.openKeyCursor();

          req.onsuccess = function () {
            var cursor = req.result;

            if (!cursor) {
              // this means there weren't enough keys
              resolve(null);
              return;
            }

            if (n === 0) {
              // We have the first key, return it if that's what they
              // wanted.
              resolve(cursor.key);
            } else {
              if (!advanced) {
                // Otherwise, ask the cursor to skip ahead n
                // records.
                advanced = true;
                cursor.advance(n);
              } else {
                // When we get here, we've got the nth key.
                resolve(cursor.key);
              }
            }
          };

          req.onerror = function () {
            reject(req.error);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

function keys(callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"](function (resolve, reject) {
    self.ready().then(function () {
      createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
        if (err) {
          return reject(err);
        }

        try {
          var store = transaction.objectStore(self._dbInfo.storeName);
          var req = store.openKeyCursor();
          var keys = [];

          req.onsuccess = function () {
            var cursor = req.result;

            if (!cursor) {
              resolve(keys);
              return;
            }

            keys.push(cursor.key);
            cursor.continue();
          };

          req.onerror = function () {
            reject(req.error);
          };
        } catch (e) {
          reject(e);
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

function dropInstance(options, callback) {
  callback = _utils_getCallback__WEBPACK_IMPORTED_MODULE_7__["default"].apply(this, arguments);
  var currentConfig = this.config();
  options = typeof options !== 'function' && options || {};

  if (!options.name) {
    options.name = options.name || currentConfig.name;
    options.storeName = options.storeName || currentConfig.storeName;
  }

  var self = this;
  var promise;

  if (!options.name) {
    promise = _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].reject('Invalid arguments');
  } else {
    const isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;
    const dbPromise = isCurrentDb ? _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].resolve(self._dbInfo.db) : _getOriginalConnection(options).then(db => {
      const dbContext = dbContexts[options.name];
      const forages = dbContext.forages;
      dbContext.db = db;

      for (var i = 0; i < forages.length; i++) {
        forages[i]._dbInfo.db = db;
      }

      return db;
    });

    if (!options.storeName) {
      promise = dbPromise.then(db => {
        _deferReadiness(options);

        const dbContext = dbContexts[options.name];
        const forages = dbContext.forages;
        db.close();

        for (var i = 0; i < forages.length; i++) {
          const forage = forages[i];
          forage._dbInfo.db = null;
        }

        const dropDBPromise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"]((resolve, reject) => {
          var req = _utils_idb__WEBPACK_IMPORTED_MODULE_2__["default"].deleteDatabase(options.name);

          req.onerror = () => {
            const db = req.result;

            if (db) {
              db.close();
            }

            reject(req.error);
          };

          req.onblocked = () => {
            // Closing all open connections in onversionchange handler should prevent this situation, but if
            // we do get here, it just means the request remains pending - eventually it will succeed or error
            console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
          };

          req.onsuccess = () => {
            const db = req.result;

            if (db) {
              db.close();
            }

            resolve(db);
          };
        });
        return dropDBPromise.then(db => {
          dbContext.db = db;

          for (var i = 0; i < forages.length; i++) {
            const forage = forages[i];

            _advanceReadiness(forage._dbInfo);
          }
        }).catch(err => {
          (_rejectReadiness(options, err) || _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].resolve()).catch(() => {});
          throw err;
        });
      });
    } else {
      promise = dbPromise.then(db => {
        if (!db.objectStoreNames.contains(options.storeName)) {
          return;
        }

        const newVersion = db.version + 1;

        _deferReadiness(options);

        const dbContext = dbContexts[options.name];
        const forages = dbContext.forages;
        db.close();

        for (let i = 0; i < forages.length; i++) {
          const forage = forages[i];
          forage._dbInfo.db = null;
          forage._dbInfo.version = newVersion;
        }

        const dropObjectPromise = new _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"]((resolve, reject) => {
          const req = _utils_idb__WEBPACK_IMPORTED_MODULE_2__["default"].open(options.name, newVersion);

          req.onerror = err => {
            const db = req.result;
            db.close();
            reject(err);
          };

          req.onupgradeneeded = () => {
            var db = req.result;
            db.deleteObjectStore(options.storeName);
          };

          req.onsuccess = () => {
            const db = req.result;
            db.close();
            resolve(db);
          };
        });
        return dropObjectPromise.then(db => {
          dbContext.db = db;

          for (let j = 0; j < forages.length; j++) {
            const forage = forages[j];
            forage._dbInfo.db = db;

            _advanceReadiness(forage._dbInfo);
          }
        }).catch(err => {
          (_rejectReadiness(options, err) || _utils_promise__WEBPACK_IMPORTED_MODULE_3__["default"].resolve()).catch(() => {});
          throw err;
        });
      });
    }
  }

  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(promise, callback);
  return promise;
}

var asyncStorage = {
  _driver: 'asyncStorage',
  _initStorage: _initStorage,
  _support: (0,_utils_isIndexedDBValid__WEBPACK_IMPORTED_MODULE_0__["default"])(),
  iterate: iterate,
  getItem: getItem,
  setItem: setItem,
  removeItem: removeItem,
  clear: clear,
  length: length,
  key: key,
  keys: keys,
  dropInstance: dropInstance
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (asyncStorage);

/***/ }),

/***/ "./node_modules/localforage/src/drivers/localstorage.js":
/*!**************************************************************!*\
  !*** ./node_modules/localforage/src/drivers/localstorage.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_isLocalStorageValid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isLocalStorageValid */ "./node_modules/localforage/src/utils/isLocalStorageValid.js");
/* harmony import */ var _utils_serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/serializer */ "./node_modules/localforage/src/utils/serializer.js");
/* harmony import */ var _utils_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise */ "./node_modules/localforage/src/utils/promise.js");
/* harmony import */ var _utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/executeCallback */ "./node_modules/localforage/src/utils/executeCallback.js");
/* harmony import */ var _utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/normalizeKey */ "./node_modules/localforage/src/utils/normalizeKey.js");
/* harmony import */ var _utils_getCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getCallback */ "./node_modules/localforage/src/utils/getCallback.js");
// If IndexedDB isn't available, we'll fall back to localStorage.
// Note that this will have considerable performance and storage
// side-effects (all data will be serialized on save and only data that
// can be converted to a string via `JSON.stringify()` will be saved).







function _getKeyPrefix(options, defaultConfig) {
  var keyPrefix = options.name + '/';

  if (options.storeName !== defaultConfig.storeName) {
    keyPrefix += options.storeName + '/';
  }

  return keyPrefix;
} // Check if localStorage throws when saving an item


function checkIfLocalStorageThrows() {
  var localStorageTestKey = '_localforage_support_test';

  try {
    localStorage.setItem(localStorageTestKey, true);
    localStorage.removeItem(localStorageTestKey);
    return false;
  } catch (e) {
    return true;
  }
} // Check if localStorage is usable and allows to save an item
// This method checks if localStorage is usable in Safari Private Browsing
// mode, or in any other case where the available quota for localStorage
// is 0 and there wasn't any saved items yet.


function _isLocalStorageUsable() {
  return !checkIfLocalStorageThrows() || localStorage.length > 0;
} // Config the localStorage backend, using options set in the config.


function _initStorage(options) {
  var self = this;
  var dbInfo = {};

  if (options) {
    for (var i in options) {
      dbInfo[i] = options[i];
    }
  }

  dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

  if (!_isLocalStorageUsable()) {
    return _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"].reject();
  }

  self._dbInfo = dbInfo;
  dbInfo.serializer = _utils_serializer__WEBPACK_IMPORTED_MODULE_1__["default"];
  return _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"].resolve();
} // Remove all keys from the datastore, effectively destroying all data in
// the app's key/value store!


function clear(callback) {
  var self = this;
  var promise = self.ready().then(function () {
    var keyPrefix = self._dbInfo.keyPrefix;

    for (var i = localStorage.length - 1; i >= 0; i--) {
      var key = localStorage.key(i);

      if (key.indexOf(keyPrefix) === 0) {
        localStorage.removeItem(key);
      }
    }
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Retrieve an item from the store. Unlike the original async_storage
// library in Gaia, we don't modify return values at all. If a key's value
// is `undefined`, we pass that value to the callback function.


function getItem(key, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__["default"])(key);
  var promise = self.ready().then(function () {
    var dbInfo = self._dbInfo;
    var result = localStorage.getItem(dbInfo.keyPrefix + key); // If a result was found, parse it from the serialized
    // string into a JS object. If result isn't truthy, the key
    // is likely undefined and we'll pass it straight to the
    // callback.

    if (result) {
      result = dbInfo.serializer.deserialize(result);
    }

    return result;
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Iterate over all items in the store.


function iterate(iterator, callback) {
  var self = this;
  var promise = self.ready().then(function () {
    var dbInfo = self._dbInfo;
    var keyPrefix = dbInfo.keyPrefix;
    var keyPrefixLength = keyPrefix.length;
    var length = localStorage.length; // We use a dedicated iterator instead of the `i` variable below
    // so other keys we fetch in localStorage aren't counted in
    // the `iterationNumber` argument passed to the `iterate()`
    // callback.
    //
    // See: github.com/mozilla/localForage/pull/435#discussion_r38061530

    var iterationNumber = 1;

    for (var i = 0; i < length; i++) {
      var key = localStorage.key(i);

      if (key.indexOf(keyPrefix) !== 0) {
        continue;
      }

      var value = localStorage.getItem(key); // If a result was found, parse it from the serialized
      // string into a JS object. If result isn't truthy, the
      // key is likely undefined and we'll pass it straight
      // to the iterator.

      if (value) {
        value = dbInfo.serializer.deserialize(value);
      }

      value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

      if (value !== void 0) {
        return value;
      }
    }
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Same as localStorage's key() method, except takes a callback.


function key(n, callback) {
  var self = this;
  var promise = self.ready().then(function () {
    var dbInfo = self._dbInfo;
    var result;

    try {
      result = localStorage.key(n);
    } catch (error) {
      result = null;
    } // Remove the prefix from the key, if a key is found.


    if (result) {
      result = result.substring(dbInfo.keyPrefix.length);
    }

    return result;
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

function keys(callback) {
  var self = this;
  var promise = self.ready().then(function () {
    var dbInfo = self._dbInfo;
    var length = localStorage.length;
    var keys = [];

    for (var i = 0; i < length; i++) {
      var itemKey = localStorage.key(i);

      if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
        keys.push(itemKey.substring(dbInfo.keyPrefix.length));
      }
    }

    return keys;
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Supply the number of keys in the datastore to the callback function.


function length(callback) {
  var self = this;
  var promise = self.keys().then(function (keys) {
    return keys.length;
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Remove an item from the store, nice and simple.


function removeItem(key, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__["default"])(key);
  var promise = self.ready().then(function () {
    var dbInfo = self._dbInfo;
    localStorage.removeItem(dbInfo.keyPrefix + key);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Set a key's value and run an optional callback once the value is set.
// Unlike Gaia's implementation, the callback function is passed the value,
// in case you want to operate on that value only after you're sure it
// saved, or something like that.


function setItem(key, value, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__["default"])(key);
  var promise = self.ready().then(function () {
    // Convert undefined values to null.
    // https://github.com/mozilla/localForage/pull/42
    if (value === undefined) {
      value = null;
    } // Save the original value to pass to the callback.


    var originalValue = value;
    return new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
      var dbInfo = self._dbInfo;
      dbInfo.serializer.serialize(value, function (value, error) {
        if (error) {
          reject(error);
        } else {
          try {
            localStorage.setItem(dbInfo.keyPrefix + key, value);
            resolve(originalValue);
          } catch (e) {
            // localStorage capacity exceeded.
            // TODO: Make this a specific error/event.
            if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
              reject(e);
            }

            reject(e);
          }
        }
      });
    });
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

function dropInstance(options, callback) {
  callback = _utils_getCallback__WEBPACK_IMPORTED_MODULE_5__["default"].apply(this, arguments);
  options = typeof options !== 'function' && options || {};

  if (!options.name) {
    var currentConfig = this.config();
    options.name = options.name || currentConfig.name;
    options.storeName = options.storeName || currentConfig.storeName;
  }

  var self = this;
  var promise;

  if (!options.name) {
    promise = _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"].reject('Invalid arguments');
  } else {
    promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve) {
      if (!options.storeName) {
        resolve(`${options.name}/`);
      } else {
        resolve(_getKeyPrefix(options, self._defaultConfig));
      }
    }).then(function (keyPrefix) {
      for (var i = localStorage.length - 1; i >= 0; i--) {
        var key = localStorage.key(i);

        if (key.indexOf(keyPrefix) === 0) {
          localStorage.removeItem(key);
        }
      }
    });
  }

  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

var localStorageWrapper = {
  _driver: 'localStorageWrapper',
  _initStorage: _initStorage,
  _support: (0,_utils_isLocalStorageValid__WEBPACK_IMPORTED_MODULE_0__["default"])(),
  iterate: iterate,
  getItem: getItem,
  setItem: setItem,
  removeItem: removeItem,
  clear: clear,
  length: length,
  key: key,
  keys: keys,
  dropInstance: dropInstance
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (localStorageWrapper);

/***/ }),

/***/ "./node_modules/localforage/src/drivers/websql.js":
/*!********************************************************!*\
  !*** ./node_modules/localforage/src/drivers/websql.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_isWebSQLValid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isWebSQLValid */ "./node_modules/localforage/src/utils/isWebSQLValid.js");
/* harmony import */ var _utils_serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/serializer */ "./node_modules/localforage/src/utils/serializer.js");
/* harmony import */ var _utils_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise */ "./node_modules/localforage/src/utils/promise.js");
/* harmony import */ var _utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/executeCallback */ "./node_modules/localforage/src/utils/executeCallback.js");
/* harmony import */ var _utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/normalizeKey */ "./node_modules/localforage/src/utils/normalizeKey.js");
/* harmony import */ var _utils_getCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getCallback */ "./node_modules/localforage/src/utils/getCallback.js");






/*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */

function createDbTable(t, dbInfo, callback, errorCallback) {
  t.executeSql(`CREATE TABLE IF NOT EXISTS ${dbInfo.storeName} ` + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
} // Open the WebSQL database (automatically creates one if one didn't
// previously exist), using any options set in the config.


function _initStorage(options) {
  var self = this;
  var dbInfo = {
    db: null
  };

  if (options) {
    for (var i in options) {
      dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
    }
  }

  var dbInfoPromise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    // Open the database; the openDatabase API will automatically
    // create it for us if it doesn't exist.
    try {
      dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
    } catch (e) {
      return reject(e);
    } // Create our key/value table if it doesn't exist.


    dbInfo.db.transaction(function (t) {
      createDbTable(t, dbInfo, function () {
        self._dbInfo = dbInfo;
        resolve();
      }, function (t, error) {
        reject(error);
      });
    }, reject);
  });
  dbInfo.serializer = _utils_serializer__WEBPACK_IMPORTED_MODULE_1__["default"];
  return dbInfoPromise;
}

function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
  t.executeSql(sqlStatement, args, callback, function (t, error) {
    if (error.code === error.SYNTAX_ERR) {
      t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
        if (!results.rows.length) {
          // if the table is missing (was deleted)
          // re-create it table and retry
          createDbTable(t, dbInfo, function () {
            t.executeSql(sqlStatement, args, callback, errorCallback);
          }, errorCallback);
        } else {
          errorCallback(t, error);
        }
      }, errorCallback);
    } else {
      errorCallback(t, error);
    }
  }, errorCallback);
}

function getItem(key, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__["default"])(key);
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      var dbInfo = self._dbInfo;
      dbInfo.db.transaction(function (t) {
        tryExecuteSql(t, dbInfo, `SELECT * FROM ${dbInfo.storeName} WHERE key = ? LIMIT 1`, [key], function (t, results) {
          var result = results.rows.length ? results.rows.item(0).value : null; // Check to see if this is serialized content we need to
          // unpack.

          if (result) {
            result = dbInfo.serializer.deserialize(result);
          }

          resolve(result);
        }, function (t, error) {
          reject(error);
        });
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

function iterate(iterator, callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      var dbInfo = self._dbInfo;
      dbInfo.db.transaction(function (t) {
        tryExecuteSql(t, dbInfo, `SELECT * FROM ${dbInfo.storeName}`, [], function (t, results) {
          var rows = results.rows;
          var length = rows.length;

          for (var i = 0; i < length; i++) {
            var item = rows.item(i);
            var result = item.value; // Check to see if this is serialized content
            // we need to unpack.

            if (result) {
              result = dbInfo.serializer.deserialize(result);
            }

            result = iterator(result, item.key, i + 1); // void(0) prevents problems with redefinition
            // of `undefined`.

            if (result !== void 0) {
              resolve(result);
              return;
            }
          }

          resolve();
        }, function (t, error) {
          reject(error);
        });
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

function _setItem(key, value, callback, retriesLeft) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__["default"])(key);
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      // The localStorage API doesn't return undefined values in an
      // "expected" way, so undefined is always cast to null in all
      // drivers. See: https://github.com/mozilla/localForage/pull/42
      if (value === undefined) {
        value = null;
      } // Save the original value to pass to the callback.


      var originalValue = value;
      var dbInfo = self._dbInfo;
      dbInfo.serializer.serialize(value, function (value, error) {
        if (error) {
          reject(error);
        } else {
          dbInfo.db.transaction(function (t) {
            tryExecuteSql(t, dbInfo, `INSERT OR REPLACE INTO ${dbInfo.storeName} ` + '(key, value) VALUES (?, ?)', [key, value], function () {
              resolve(originalValue);
            }, function (t, error) {
              reject(error);
            });
          }, function (sqlError) {
            // The transaction failed; check
            // to see if it's a quota error.
            if (sqlError.code === sqlError.QUOTA_ERR) {
              // We reject the callback outright for now, but
              // it's worth trying to re-run the transaction.
              // Even if the user accepts the prompt to use
              // more storage on Safari, this error will
              // be called.
              //
              // Try to re-run the transaction.
              if (retriesLeft > 0) {
                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
                return;
              }

              reject(sqlError);
            }
          });
        }
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

function setItem(key, value, callback) {
  return _setItem.apply(this, [key, value, callback, 1]);
}

function removeItem(key, callback) {
  var self = this;
  key = (0,_utils_normalizeKey__WEBPACK_IMPORTED_MODULE_4__["default"])(key);
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      var dbInfo = self._dbInfo;
      dbInfo.db.transaction(function (t) {
        tryExecuteSql(t, dbInfo, `DELETE FROM ${dbInfo.storeName} WHERE key = ?`, [key], function () {
          resolve();
        }, function (t, error) {
          reject(error);
        });
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Deletes every item in the table.
// TODO: Find out if this resets the AUTO_INCREMENT number.


function clear(callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      var dbInfo = self._dbInfo;
      dbInfo.db.transaction(function (t) {
        tryExecuteSql(t, dbInfo, `DELETE FROM ${dbInfo.storeName}`, [], function () {
          resolve();
        }, function (t, error) {
          reject(error);
        });
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Does a simple `COUNT(key)` to get the number of items stored in
// localForage.


function length(callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      var dbInfo = self._dbInfo;
      dbInfo.db.transaction(function (t) {
        // Ahhh, SQL makes this one soooooo easy.
        tryExecuteSql(t, dbInfo, `SELECT COUNT(key) as c FROM ${dbInfo.storeName}`, [], function (t, results) {
          var result = results.rows.item(0).c;
          resolve(result);
        }, function (t, error) {
          reject(error);
        });
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // Return the key located at key index X; essentially gets the key from a
// `WHERE id = ?`. This is the most efficient way I can think to implement
// this rarely-used (in my experience) part of the API, but it can seem
// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
// the ID of each key will change every time it's updated. Perhaps a stored
// procedure for the `setItem()` SQL would solve this problem?
// TODO: Don't change ID on `setItem()`.


function key(n, callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      var dbInfo = self._dbInfo;
      dbInfo.db.transaction(function (t) {
        tryExecuteSql(t, dbInfo, `SELECT key FROM ${dbInfo.storeName} WHERE id = ? LIMIT 1`, [n + 1], function (t, results) {
          var result = results.rows.length ? results.rows.item(0).key : null;
          resolve(result);
        }, function (t, error) {
          reject(error);
        });
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

function keys(callback) {
  var self = this;
  var promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    self.ready().then(function () {
      var dbInfo = self._dbInfo;
      dbInfo.db.transaction(function (t) {
        tryExecuteSql(t, dbInfo, `SELECT key FROM ${dbInfo.storeName}`, [], function (t, results) {
          var keys = [];

          for (var i = 0; i < results.rows.length; i++) {
            keys.push(results.rows.item(i).key);
          }

          resolve(keys);
        }, function (t, error) {
          reject(error);
        });
      });
    }).catch(reject);
  });
  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
} // https://www.w3.org/TR/webdatabase/#databases
// > There is no way to enumerate or delete the databases available for an origin from this API.


function getAllStoreNames(db) {
  return new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
    db.transaction(function (t) {
      t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
        var storeNames = [];

        for (var i = 0; i < results.rows.length; i++) {
          storeNames.push(results.rows.item(i).name);
        }

        resolve({
          db,
          storeNames
        });
      }, function (t, error) {
        reject(error);
      });
    }, function (sqlError) {
      reject(sqlError);
    });
  });
}

function dropInstance(options, callback) {
  callback = _utils_getCallback__WEBPACK_IMPORTED_MODULE_5__["default"].apply(this, arguments);
  var currentConfig = this.config();
  options = typeof options !== 'function' && options || {};

  if (!options.name) {
    options.name = options.name || currentConfig.name;
    options.storeName = options.storeName || currentConfig.storeName;
  }

  var self = this;
  var promise;

  if (!options.name) {
    promise = _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"].reject('Invalid arguments');
  } else {
    promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve) {
      var db;

      if (options.name === currentConfig.name) {
        // use the db reference of the current instance
        db = self._dbInfo.db;
      } else {
        db = openDatabase(options.name, '', '', 0);
      }

      if (!options.storeName) {
        // drop all database tables
        resolve(getAllStoreNames(db));
      } else {
        resolve({
          db,
          storeNames: [options.storeName]
        });
      }
    }).then(function (operationInfo) {
      return new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
        operationInfo.db.transaction(function (t) {
          function dropTable(storeName) {
            return new _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {
              t.executeSql(`DROP TABLE IF EXISTS ${storeName}`, [], function () {
                resolve();
              }, function (t, error) {
                reject(error);
              });
            });
          }

          var operations = [];

          for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
            operations.push(dropTable(operationInfo.storeNames[i]));
          }

          _utils_promise__WEBPACK_IMPORTED_MODULE_2__["default"].all(operations).then(function () {
            resolve();
          }).catch(function (e) {
            reject(e);
          });
        }, function (sqlError) {
          reject(sqlError);
        });
      });
    });
  }

  (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(promise, callback);
  return promise;
}

var webSQLStorage = {
  _driver: 'webSQLStorage',
  _initStorage: _initStorage,
  _support: (0,_utils_isWebSQLValid__WEBPACK_IMPORTED_MODULE_0__["default"])(),
  iterate: iterate,
  getItem: getItem,
  setItem: setItem,
  removeItem: removeItem,
  clear: clear,
  length: length,
  key: key,
  keys: keys,
  dropInstance: dropInstance
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (webSQLStorage);

/***/ }),

/***/ "./node_modules/localforage/src/localforage.js":
/*!*****************************************************!*\
  !*** ./node_modules/localforage/src/localforage.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _drivers_indexeddb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drivers/indexeddb */ "./node_modules/localforage/src/drivers/indexeddb.js");
/* harmony import */ var _drivers_websql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drivers/websql */ "./node_modules/localforage/src/drivers/websql.js");
/* harmony import */ var _drivers_localstorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drivers/localstorage */ "./node_modules/localforage/src/drivers/localstorage.js");
/* harmony import */ var _utils_serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/serializer */ "./node_modules/localforage/src/utils/serializer.js");
/* harmony import */ var _utils_promise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/promise */ "./node_modules/localforage/src/utils/promise.js");
/* harmony import */ var _utils_executeCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/executeCallback */ "./node_modules/localforage/src/utils/executeCallback.js");
/* harmony import */ var _utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/executeTwoCallbacks */ "./node_modules/localforage/src/utils/executeTwoCallbacks.js");
/* harmony import */ var _utils_includes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/includes */ "./node_modules/localforage/src/utils/includes.js");
/* harmony import */ var _utils_isArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/isArray */ "./node_modules/localforage/src/utils/isArray.js");








 // Drivers are stored here when `defineDriver()` is called.
// They are shared across all instances of localForage.

const DefinedDrivers = {};
const DriverSupport = {};
const DefaultDrivers = {
  INDEXEDDB: _drivers_indexeddb__WEBPACK_IMPORTED_MODULE_0__["default"],
  WEBSQL: _drivers_websql__WEBPACK_IMPORTED_MODULE_1__["default"],
  LOCALSTORAGE: _drivers_localstorage__WEBPACK_IMPORTED_MODULE_2__["default"]
};
const DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];
const OptionalDriverMethods = ['dropInstance'];
const LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);
const DefaultConfig = {
  description: '',
  driver: DefaultDriverOrder.slice(),
  name: 'localforage',
  // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
  // we can use without a prompt.
  size: 4980736,
  storeName: 'keyvaluepairs',
  version: 1.0
};

function callWhenReady(localForageInstance, libraryMethod) {
  localForageInstance[libraryMethod] = function () {
    const _args = arguments;
    return localForageInstance.ready().then(function () {
      return localForageInstance[libraryMethod].apply(localForageInstance, _args);
    });
  };
}

function extend() {
  for (let i = 1; i < arguments.length; i++) {
    const arg = arguments[i];

    if (arg) {
      for (let key in arg) {
        if (arg.hasOwnProperty(key)) {
          if ((0,_utils_isArray__WEBPACK_IMPORTED_MODULE_8__["default"])(arg[key])) {
            arguments[0][key] = arg[key].slice();
          } else {
            arguments[0][key] = arg[key];
          }
        }
      }
    }
  }

  return arguments[0];
}

class LocalForage {
  constructor(options) {
    for (let driverTypeKey in DefaultDrivers) {
      if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
        const driver = DefaultDrivers[driverTypeKey];
        const driverName = driver._driver;
        this[driverTypeKey] = driverName;

        if (!DefinedDrivers[driverName]) {
          // we don't need to wait for the promise,
          // since the default drivers can be defined
          // in a blocking manner
          this.defineDriver(driver);
        }
      }
    }

    this._defaultConfig = extend({}, DefaultConfig);
    this._config = extend({}, this._defaultConfig, options);
    this._driverSet = null;
    this._initDriver = null;
    this._ready = false;
    this._dbInfo = null;

    this._wrapLibraryMethodsWithReady();

    this.setDriver(this._config.driver).catch(() => {});
  } // Set any config values for localForage; can be called anytime before
  // the first API call (e.g. `getItem`, `setItem`).
  // We loop through options so we don't overwrite existing config
  // values.


  config(options) {
    // If the options argument is an object, we use it to set values.
    // Otherwise, we return either a specified config value or all
    // config values.
    if (typeof options === 'object') {
      // If localforage is ready and fully initialized, we can't set
      // any new configuration values. Instead, we return an error.
      if (this._ready) {
        return new Error("Can't call config() after localforage " + 'has been used.');
      }

      for (let i in options) {
        if (i === 'storeName') {
          options[i] = options[i].replace(/\W/g, '_');
        }

        if (i === 'version' && typeof options[i] !== 'number') {
          return new Error('Database version must be a number.');
        }

        this._config[i] = options[i];
      } // after all config options are set and
      // the driver option is used, try setting it


      if ('driver' in options && options.driver) {
        return this.setDriver(this._config.driver);
      }

      return true;
    } else if (typeof options === 'string') {
      return this._config[options];
    } else {
      return this._config;
    }
  } // Used to define a custom driver, shared across all instances of
  // localForage.


  defineDriver(driverObject, callback, errorCallback) {
    const promise = new _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"](function (resolve, reject) {
      try {
        const driverName = driverObject._driver;
        const complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver'); // A driver name should be defined and not overlap with the
        // library-defined, default drivers.

        if (!driverObject._driver) {
          reject(complianceError);
          return;
        }

        const driverMethods = LibraryMethods.concat('_initStorage');

        for (let i = 0, len = driverMethods.length; i < len; i++) {
          const driverMethodName = driverMethods[i]; // when the property is there,
          // it should be a method even when optional

          const isRequired = !(0,_utils_includes__WEBPACK_IMPORTED_MODULE_7__["default"])(OptionalDriverMethods, driverMethodName);

          if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
            reject(complianceError);
            return;
          }
        }

        const configureMissingMethods = function () {
          const methodNotImplementedFactory = function (methodName) {
            return function () {
              const error = new Error(`Method ${methodName} is not implemented by the current driver`);
              const promise = _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].reject(error);
              (0,_utils_executeCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(promise, arguments[arguments.length - 1]);
              return promise;
            };
          };

          for (let i = 0, len = OptionalDriverMethods.length; i < len; i++) {
            const optionalDriverMethod = OptionalDriverMethods[i];

            if (!driverObject[optionalDriverMethod]) {
              driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
            }
          }
        };

        configureMissingMethods();

        const setDriverSupport = function (support) {
          if (DefinedDrivers[driverName]) {
            console.info(`Redefining LocalForage driver: ${driverName}`);
          }

          DefinedDrivers[driverName] = driverObject;
          DriverSupport[driverName] = support; // don't use a then, so that we can define
          // drivers that have simple _support methods
          // in a blocking manner

          resolve();
        };

        if ('_support' in driverObject) {
          if (driverObject._support && typeof driverObject._support === 'function') {
            driverObject._support().then(setDriverSupport, reject);
          } else {
            setDriverSupport(!!driverObject._support);
          }
        } else {
          setDriverSupport(true);
        }
      } catch (e) {
        reject(e);
      }
    });
    (0,_utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_6__["default"])(promise, callback, errorCallback);
    return promise;
  }

  driver() {
    return this._driver || null;
  }

  getDriver(driverName, callback, errorCallback) {
    const getDriverPromise = DefinedDrivers[driverName] ? _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].resolve(DefinedDrivers[driverName]) : _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].reject(new Error('Driver not found.'));
    (0,_utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_6__["default"])(getDriverPromise, callback, errorCallback);
    return getDriverPromise;
  }

  getSerializer(callback) {
    const serializerPromise = _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].resolve(_utils_serializer__WEBPACK_IMPORTED_MODULE_3__["default"]);
    (0,_utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_6__["default"])(serializerPromise, callback);
    return serializerPromise;
  }

  ready(callback) {
    const self = this;

    const promise = self._driverSet.then(() => {
      if (self._ready === null) {
        self._ready = self._initDriver();
      }

      return self._ready;
    });

    (0,_utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_6__["default"])(promise, callback, callback);
    return promise;
  }

  setDriver(drivers, callback, errorCallback) {
    const self = this;

    if (!(0,_utils_isArray__WEBPACK_IMPORTED_MODULE_8__["default"])(drivers)) {
      drivers = [drivers];
    }

    const supportedDrivers = this._getSupportedDrivers(drivers);

    function setDriverToConfig() {
      self._config.driver = self.driver();
    }

    function extendSelfWithDriver(driver) {
      self._extend(driver);

      setDriverToConfig();
      self._ready = self._initStorage(self._config);
      return self._ready;
    }

    function initDriver(supportedDrivers) {
      return function () {
        let currentDriverIndex = 0;

        function driverPromiseLoop() {
          while (currentDriverIndex < supportedDrivers.length) {
            let driverName = supportedDrivers[currentDriverIndex];
            currentDriverIndex++;
            self._dbInfo = null;
            self._ready = null;
            return self.getDriver(driverName).then(extendSelfWithDriver).catch(driverPromiseLoop);
          }

          setDriverToConfig();
          const error = new Error('No available storage method found.');
          self._driverSet = _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].reject(error);
          return self._driverSet;
        }

        return driverPromiseLoop();
      };
    } // There might be a driver initialization in progress
    // so wait for it to finish in order to avoid a possible
    // race condition to set _dbInfo


    const oldDriverSetDone = this._driverSet !== null ? this._driverSet.catch(() => _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].resolve()) : _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].resolve();
    this._driverSet = oldDriverSetDone.then(() => {
      const driverName = supportedDrivers[0];
      self._dbInfo = null;
      self._ready = null;
      return self.getDriver(driverName).then(driver => {
        self._driver = driver._driver;
        setDriverToConfig();

        self._wrapLibraryMethodsWithReady();

        self._initDriver = initDriver(supportedDrivers);
      });
    }).catch(() => {
      setDriverToConfig();
      const error = new Error('No available storage method found.');
      self._driverSet = _utils_promise__WEBPACK_IMPORTED_MODULE_4__["default"].reject(error);
      return self._driverSet;
    });
    (0,_utils_executeTwoCallbacks__WEBPACK_IMPORTED_MODULE_6__["default"])(this._driverSet, callback, errorCallback);
    return this._driverSet;
  }

  supports(driverName) {
    return !!DriverSupport[driverName];
  }

  _extend(libraryMethodsAndProperties) {
    extend(this, libraryMethodsAndProperties);
  }

  _getSupportedDrivers(drivers) {
    const supportedDrivers = [];

    for (let i = 0, len = drivers.length; i < len; i++) {
      const driverName = drivers[i];

      if (this.supports(driverName)) {
        supportedDrivers.push(driverName);
      }
    }

    return supportedDrivers;
  }

  _wrapLibraryMethodsWithReady() {
    // Add a stub for each driver API method that delays the call to the
    // corresponding driver method until localForage is ready. These stubs
    // will be replaced by the driver methods as soon as the driver is
    // loaded, so there is no performance impact.
    for (let i = 0, len = LibraryMethods.length; i < len; i++) {
      callWhenReady(this, LibraryMethods[i]);
    }
  }

  createInstance(options) {
    return new LocalForage(options);
  }

} // The actual localForage object that we expose as a module or via a
// global. It's extended by pulling in one of our other libraries.


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new LocalForage());

/***/ }),

/***/ "./node_modules/localforage/src/utils/createBlob.js":
/*!**********************************************************!*\
  !*** ./node_modules/localforage/src/utils/createBlob.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
function createBlob(parts, properties) {
  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
  parts = parts || [];
  properties = properties || {};

  try {
    return new Blob(parts, properties);
  } catch (e) {
    if (e.name !== 'TypeError') {
      throw e;
    }

    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
    var builder = new Builder();

    for (var i = 0; i < parts.length; i += 1) {
      builder.append(parts[i]);
    }

    return builder.getBlob(properties.type);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createBlob);

/***/ }),

/***/ "./node_modules/localforage/src/utils/executeCallback.js":
/*!***************************************************************!*\
  !*** ./node_modules/localforage/src/utils/executeCallback.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function executeCallback(promise, callback) {
  if (callback) {
    promise.then(function (result) {
      callback(null, result);
    }, function (error) {
      callback(error);
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (executeCallback);

/***/ }),

/***/ "./node_modules/localforage/src/utils/executeTwoCallbacks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/localforage/src/utils/executeTwoCallbacks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function executeTwoCallbacks(promise, callback, errorCallback) {
  if (typeof callback === 'function') {
    promise.then(callback);
  }

  if (typeof errorCallback === 'function') {
    promise.catch(errorCallback);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (executeTwoCallbacks);

/***/ }),

/***/ "./node_modules/localforage/src/utils/getCallback.js":
/*!***********************************************************!*\
  !*** ./node_modules/localforage/src/utils/getCallback.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCallback)
/* harmony export */ });
function getCallback() {
  if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
    return arguments[arguments.length - 1];
  }
}

/***/ }),

/***/ "./node_modules/localforage/src/utils/idb.js":
/*!***************************************************!*\
  !*** ./node_modules/localforage/src/utils/idb.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function getIDB() {
  /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
  try {
    if (typeof indexedDB !== 'undefined') {
      return indexedDB;
    }

    if (typeof webkitIndexedDB !== 'undefined') {
      return webkitIndexedDB;
    }

    if (typeof mozIndexedDB !== 'undefined') {
      return mozIndexedDB;
    }

    if (typeof OIndexedDB !== 'undefined') {
      return OIndexedDB;
    }

    if (typeof msIndexedDB !== 'undefined') {
      return msIndexedDB;
    }
  } catch (e) {
    return;
  }
}

var idb = getIDB();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (idb);

/***/ }),

/***/ "./node_modules/localforage/src/utils/includes.js":
/*!********************************************************!*\
  !*** ./node_modules/localforage/src/utils/includes.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const sameValue = (x, y) => x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);

const includes = (array, searchElement) => {
  const len = array.length;
  let i = 0;

  while (i < len) {
    if (sameValue(array[i], searchElement)) {
      return true;
    }

    i++;
  }

  return false;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (includes);

/***/ }),

/***/ "./node_modules/localforage/src/utils/isArray.js":
/*!*******************************************************!*\
  !*** ./node_modules/localforage/src/utils/isArray.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const isArray = Array.isArray || function (arg) {
  return Object.prototype.toString.call(arg) === '[object Array]';
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArray);

/***/ }),

/***/ "./node_modules/localforage/src/utils/isIndexedDBValid.js":
/*!****************************************************************!*\
  !*** ./node_modules/localforage/src/utils/isIndexedDBValid.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./idb */ "./node_modules/localforage/src/utils/idb.js");


function isIndexedDBValid() {
  try {
    // Initialize IndexedDB; fall back to vendor-prefixed versions
    // if needed.
    if (!_idb__WEBPACK_IMPORTED_MODULE_0__["default"] || !_idb__WEBPACK_IMPORTED_MODULE_0__["default"].open) {
      return false;
    } // We mimic PouchDB here;
    //
    // We test for openDatabase because IE Mobile identifies itself
    // as Safari. Oh the lulz...


    var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
    var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1; // Safari <10.1 does not meet our requirements for IDB support
    // (see: https://github.com/pouchdb/pouchdb/issues/5572).
    // Safari 10.1 shipped with fetch, we can use that to detect it.
    // Note: this creates issues with `window.fetch` polyfills and
    // overrides; see:
    // https://github.com/localForage/localForage/issues/856

    return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' && // some outdated implementations of IDB that appear on Samsung
    // and HTC Android devices <4.4 are missing IDBKeyRange
    // See: https://github.com/mozilla/localForage/issues/128
    // See: https://github.com/mozilla/localForage/issues/272
    typeof IDBKeyRange !== 'undefined';
  } catch (e) {
    return false;
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isIndexedDBValid);

/***/ }),

/***/ "./node_modules/localforage/src/utils/isLocalStorageValid.js":
/*!*******************************************************************!*\
  !*** ./node_modules/localforage/src/utils/isLocalStorageValid.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function isLocalStorageValid() {
  try {
    return typeof localStorage !== 'undefined' && 'setItem' in localStorage && // in IE8 typeof localStorage.setItem === 'object'
    !!localStorage.setItem;
  } catch (e) {
    return false;
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isLocalStorageValid);

/***/ }),

/***/ "./node_modules/localforage/src/utils/isWebSQLValid.js":
/*!*************************************************************!*\
  !*** ./node_modules/localforage/src/utils/isWebSQLValid.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function isWebSQLValid() {
  return typeof openDatabase === 'function';
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isWebSQLValid);

/***/ }),

/***/ "./node_modules/localforage/src/utils/normalizeKey.js":
/*!************************************************************!*\
  !*** ./node_modules/localforage/src/utils/normalizeKey.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ normalizeKey)
/* harmony export */ });
function normalizeKey(key) {
  // Cast the key to a string, as that's all we can set as a key.
  if (typeof key !== 'string') {
    console.warn(`${key} used as a key, but it is not a string.`);
    key = String(key);
  }

  return key;
}

/***/ }),

/***/ "./node_modules/localforage/src/utils/promise.js":
/*!*******************************************************!*\
  !*** ./node_modules/localforage/src/utils/promise.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// This is CommonJS because lie is an external dependency, so Rollup
// can just ignore it.
if (typeof Promise === 'undefined') {
  // In the "nopromises" build this will just throw if you don't have
  // a global promise object, but it would throw anyway later.
  __webpack_require__(/*! lie/polyfill */ "./node_modules/lie/polyfill.js");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Promise);

/***/ }),

/***/ "./node_modules/localforage/src/utils/serializer.js":
/*!**********************************************************!*\
  !*** ./node_modules/localforage/src/utils/serializer.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _createBlob__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createBlob */ "./node_modules/localforage/src/utils/createBlob.js");
/* eslint-disable no-bitwise */
 // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
// it to Base64, so this is how we store it to prevent very strange errors with less
// verbose ways of binary <-> string data storage.

var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
var BLOB_TYPE_PREFIX = '~~local_forage_type~';
var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
var SERIALIZED_MARKER = '__lfsc__:';
var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length; // OMG the serializations!

var TYPE_ARRAYBUFFER = 'arbf';
var TYPE_BLOB = 'blob';
var TYPE_INT8ARRAY = 'si08';
var TYPE_UINT8ARRAY = 'ui08';
var TYPE_UINT8CLAMPEDARRAY = 'uic8';
var TYPE_INT16ARRAY = 'si16';
var TYPE_INT32ARRAY = 'si32';
var TYPE_UINT16ARRAY = 'ur16';
var TYPE_UINT32ARRAY = 'ui32';
var TYPE_FLOAT32ARRAY = 'fl32';
var TYPE_FLOAT64ARRAY = 'fl64';
var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;
var toString = Object.prototype.toString;

function stringToBuffer(serializedString) {
  // Fill the string into a ArrayBuffer.
  var bufferLength = serializedString.length * 0.75;
  var len = serializedString.length;
  var i;
  var p = 0;
  var encoded1, encoded2, encoded3, encoded4;

  if (serializedString[serializedString.length - 1] === '=') {
    bufferLength--;

    if (serializedString[serializedString.length - 2] === '=') {
      bufferLength--;
    }
  }

  var buffer = new ArrayBuffer(bufferLength);
  var bytes = new Uint8Array(buffer);

  for (i = 0; i < len; i += 4) {
    encoded1 = BASE_CHARS.indexOf(serializedString[i]);
    encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
    encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
    encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);
    /*jslint bitwise: true */

    bytes[p++] = encoded1 << 2 | encoded2 >> 4;
    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
  }

  return buffer;
} // Converts a buffer to a string to store, serialized, in the backend
// storage library.


function bufferToString(buffer) {
  // base64-arraybuffer
  var bytes = new Uint8Array(buffer);
  var base64String = '';
  var i;

  for (i = 0; i < bytes.length; i += 3) {
    /*jslint bitwise: true */
    base64String += BASE_CHARS[bytes[i] >> 2];
    base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
    base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
    base64String += BASE_CHARS[bytes[i + 2] & 63];
  }

  if (bytes.length % 3 === 2) {
    base64String = base64String.substring(0, base64String.length - 1) + '=';
  } else if (bytes.length % 3 === 1) {
    base64String = base64String.substring(0, base64String.length - 2) + '==';
  }

  return base64String;
} // Serialize a value, afterwards executing a callback (which usually
// instructs the `setItem()` callback/promise to be executed). This is how
// we store binary data with localStorage.


function serialize(value, callback) {
  var valueType = '';

  if (value) {
    valueType = toString.call(value);
  } // Cannot use `value instanceof ArrayBuffer` or such here, as these
  // checks fail when running the tests using casper.js...
  //
  // TODO: See why those tests fail and use a better solution.


  if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString.call(value.buffer) === '[object ArrayBuffer]')) {
    // Convert binary arrays to a string and prefix the string with
    // a special marker.
    var buffer;
    var marker = SERIALIZED_MARKER;

    if (value instanceof ArrayBuffer) {
      buffer = value;
      marker += TYPE_ARRAYBUFFER;
    } else {
      buffer = value.buffer;

      if (valueType === '[object Int8Array]') {
        marker += TYPE_INT8ARRAY;
      } else if (valueType === '[object Uint8Array]') {
        marker += TYPE_UINT8ARRAY;
      } else if (valueType === '[object Uint8ClampedArray]') {
        marker += TYPE_UINT8CLAMPEDARRAY;
      } else if (valueType === '[object Int16Array]') {
        marker += TYPE_INT16ARRAY;
      } else if (valueType === '[object Uint16Array]') {
        marker += TYPE_UINT16ARRAY;
      } else if (valueType === '[object Int32Array]') {
        marker += TYPE_INT32ARRAY;
      } else if (valueType === '[object Uint32Array]') {
        marker += TYPE_UINT32ARRAY;
      } else if (valueType === '[object Float32Array]') {
        marker += TYPE_FLOAT32ARRAY;
      } else if (valueType === '[object Float64Array]') {
        marker += TYPE_FLOAT64ARRAY;
      } else {
        callback(new Error('Failed to get type for BinaryArray'));
      }
    }

    callback(marker + bufferToString(buffer));
  } else if (valueType === '[object Blob]') {
    // Conver the blob to a binaryArray and then to a string.
    var fileReader = new FileReader();

    fileReader.onload = function () {
      // Backwards-compatible prefix for the blob type.
      var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);
      callback(SERIALIZED_MARKER + TYPE_BLOB + str);
    };

    fileReader.readAsArrayBuffer(value);
  } else {
    try {
      callback(JSON.stringify(value));
    } catch (e) {
      console.error("Couldn't convert value into a JSON string: ", value);
      callback(null, e);
    }
  }
} // Deserialize data we've inserted into a value column/field. We place
// special markers into our strings to mark them as encoded; this isn't
// as nice as a meta field, but it's the only sane thing we can do whilst
// keeping localStorage support intact.
//
// Oftentimes this will just deserialize JSON content, but if we have a
// special marker (SERIALIZED_MARKER, defined above), we will extract
// some kind of arraybuffer/binary data/typed array out of the string.


function deserialize(value) {
  // If we haven't marked this string as being specially serialized (i.e.
  // something other than serialized JSON), we can just return it and be
  // done with it.
  if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
    return JSON.parse(value);
  } // The following code deals with deserializing some kind of Blob or
  // TypedArray. First we separate out the type of data we're dealing
  // with from the data itself.


  var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
  var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
  var blobType; // Backwards-compatible blob type serialization strategy.
  // DBs created with older versions of localForage will simply not have the blob type.

  if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
    var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
    blobType = matcher[1];
    serializedString = serializedString.substring(matcher[0].length);
  }

  var buffer = stringToBuffer(serializedString); // Return the right type based on the code/type set during
  // serialization.

  switch (type) {
    case TYPE_ARRAYBUFFER:
      return buffer;

    case TYPE_BLOB:
      return (0,_createBlob__WEBPACK_IMPORTED_MODULE_0__["default"])([buffer], {
        type: blobType
      });

    case TYPE_INT8ARRAY:
      return new Int8Array(buffer);

    case TYPE_UINT8ARRAY:
      return new Uint8Array(buffer);

    case TYPE_UINT8CLAMPEDARRAY:
      return new Uint8ClampedArray(buffer);

    case TYPE_INT16ARRAY:
      return new Int16Array(buffer);

    case TYPE_UINT16ARRAY:
      return new Uint16Array(buffer);

    case TYPE_INT32ARRAY:
      return new Int32Array(buffer);

    case TYPE_UINT32ARRAY:
      return new Uint32Array(buffer);

    case TYPE_FLOAT32ARRAY:
      return new Float32Array(buffer);

    case TYPE_FLOAT64ARRAY:
      return new Float64Array(buffer);

    default:
      throw new Error('Unkown type: ' + type);
  }
}

var localforageSerializer = {
  serialize: serialize,
  deserialize: deserialize,
  stringToBuffer: stringToBuffer,
  bufferToString: bufferToString
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (localforageSerializer);

/***/ }),

/***/ "./node_modules/mergebounce/mergebounce.js":
/*!*************************************************!*\
  !*** ./node_modules/mergebounce/mergebounce.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_es_isObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var lodash_es_merge_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/merge.js */ "./node_modules/lodash-es/merge.js");
/* harmony import */ var lodash_es_mergeWith_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/mergeWith.js */ "./node_modules/lodash-es/mergeWith.js");
/* harmony import */ var lodash_es_now_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/now.js */ "./node_modules/lodash-es/now.js");
/* harmony import */ var lodash_es_toNumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es/toNumber.js */ "./node_modules/lodash-es/toNumber.js");
/* harmony import */ var _converse_openpromise_openpromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/openpromise/openpromise.js */ "./node_modules/@converse/openpromise/openpromise.js");






/** Error message constants. */

const FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */

const nativeMax = Math.max;
const nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 *
 * This function differs from lodash's debounce by merging all passed objects
 * before passing them to the final invoked function.
 *
 * Because of this, invoking can only happen on the trailing edge, since
 * passed-in data would be discarded if invoking happened on the leading edge.
 *
 * If `wait` is `0`, `func` invocation is deferred until to the next tick,
 * similar to `setTimeout` with a timeout of `0`.
 *
 * @static
 * @category Function
 * @param {Function} func The function to mergebounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.concatArrays=false]
 *  By default arrays will be treated as objects when being merged. When
 *  merging two arrays, the values in the 2nd arrray will replace the
 *  corresponding values (i.e. those with the same indexes) in the first array.
 *  When `concatArrays` is set to `true`, arrays will be concatenated instead.
 * @param {boolean} [options.dedupeArrays=false]
 *  This option is similar to `concatArrays`, except that the concatenated
 *  array will also be deduplicated. Thus any entries that are concatenated to the
 *  existing array, which are already contained in the existing array, will
 *  first be removed.
 * @param {boolean} [options.promise=false]
 *  By default, when calling a merge-debounced function that doesn't execute
 *  immediately, you'll receive the result from its previous execution, or
 *  `undefined` if it has never executed before. By setting the `promise`
 *  option to `true`, a promise will be returned instead of the previous
 *  execution result when the function is debounced. The promise will resolve
 *  with the result of the next execution, as soon as it happens.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * window.addEventListener('resize', mergebounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * element.addEventListner('click', mergebounce(sendMail, 300));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * const mergebounced = mergebounce(batchLog, 250, { 'maxWait': 1000 });
 * const source = new EventSource('/stream');
 * jQuery(source).on('message', mergebounced);
 *
 * // Cancel the trailing debounced invocation.
 * window.addEventListener('popstate', mergebounced.cancel);
 */

function mergebounce(func, wait) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      maxing = false;
  let promise = options.promise ? (0,_converse_openpromise_openpromise_js__WEBPACK_IMPORTED_MODULE_0__.getOpenPromise)() : null;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  wait = (0,lodash_es_toNumber_js__WEBPACK_IMPORTED_MODULE_1__["default"])(wait) || 0;

  if ((0,lodash_es_isObject_js__WEBPACK_IMPORTED_MODULE_2__["default"])(options)) {
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax((0,lodash_es_toNumber_js__WEBPACK_IMPORTED_MODULE_1__["default"])(options.maxWait) || 0, wait) : maxWait;
  }

  function invokeFunc(time) {
    const args = lastArgs;
    const thisArg = lastThis;
    const existingPromise = promise;
    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);

    if (options.promise) {
      existingPromise.resolve(result);
      promise = (0,_converse_openpromise_openpromise_js__WEBPACK_IMPORTED_MODULE_0__.getOpenPromise)();
    }

    return options.promise ? existingPromise : result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time; // Start the timer for the trailing edge.

    timerId = setTimeout(timerExpired, wait);
    return options.promise ? promise : result;
  }

  function remainingWait(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    const timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }

  function shouldInvoke(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.

    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    const time = (0,lodash_es_now_js__WEBPACK_IMPORTED_MODULE_3__["default"])();

    if (shouldInvoke(time)) {
      return trailingEdge(time);
    } // Restart the timer.


    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.

    if (lastArgs) {
      return invokeFunc(time);
    }

    lastArgs = lastThis = undefined;
    return options.promise ? promise : result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }

    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge((0,lodash_es_now_js__WEBPACK_IMPORTED_MODULE_3__["default"])());
  }

  function concatArrays(objValue, srcValue) {
    if (Array.isArray(objValue) && Array.isArray(srcValue)) {
      if (options !== null && options !== void 0 && options.dedupeArrays) {
        return objValue.concat(srcValue.filter(i => objValue.indexOf(i) === -1));
      } else {
        return objValue.concat(srcValue);
      }
    }
  }

  function mergeArguments(args) {
    var _lastArgs;

    if ((_lastArgs = lastArgs) !== null && _lastArgs !== void 0 && _lastArgs.length) {
      if (!args.length) {
        return lastArgs;
      }

      if (options !== null && options !== void 0 && options.concatArrays || options !== null && options !== void 0 && options.dedupeArrays) {
        return (0,lodash_es_mergeWith_js__WEBPACK_IMPORTED_MODULE_4__["default"])(lastArgs, args, concatArrays);
      } else {
        return (0,lodash_es_merge_js__WEBPACK_IMPORTED_MODULE_5__["default"])(lastArgs, args);
      }
    } else {
      return args || [];
    }
  }

  function debounced() {
    const time = (0,lodash_es_now_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
    const isInvoking = shouldInvoke(time);
    lastArgs = mergeArguments(Array.from(arguments));
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }

      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }

    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }

    return options.promise ? promise : result;
  }

  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mergebounce);

/***/ }),

/***/ "./node_modules/pluggable.js/src/pluggable.js":
/*!****************************************************!*\
  !*** ./node_modules/pluggable.js/src/pluggable.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "enable": () => (/* binding */ enable)
/* harmony export */ });
/*
       ____  __                        __    __         _
      / __ \/ /_  __ ___   ___  ____ _/ /_  / /__      (_)____
     / /_/ / / / / / __ \/ __ \/ __/ / __ \/ / _ \    / / ___/
    / ____/ / /_/ / /_/ / /_/ / /_/ / /_/ / /  __/   / (__  )
   /_/   /_/\__,_/\__, /\__, /\__/_/_.___/_/\___(_)_/ /____/
                 /____//____/                    /___/
 */
// Pluggable.js lets you to make your Javascript code pluggable while still
// keeping sensitive objects and data private through closures.
// `wrappedOverride` creates a partially applied wrapper function
// that makes sure to set the proper super method when the
// overriding method is called. This is done to enable
// chaining of plugin methods, all the way up to the
// original method.
function wrappedOverride(key, value, super_method, default_super) {
  if (typeof super_method === "function") {
    if (typeof this.__super__ === "undefined") {
      /* We're not on the context of the plugged object.
       * This can happen when the overridden method is called via
       * an event handler or when it's a constructor.
       *
       * In this case, we simply tack on the  __super__ obj.
       */
      this.__super__ = default_super;
    }

    this.__super__[key] = super_method.bind(this);
  }

  for (var _len = arguments.length, args = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
    args[_key - 4] = arguments[_key];
  }

  return value.apply(this, args);
} // The `PluginSocket` class contains the plugin architecture, and gets
// created whenever `pluggable.enable(obj);` is called on the object
// that you want to make pluggable.
// You can also see it as the thing into which the plugins are plugged.
// It takes two parameters, first, the object being made pluggable, and
// then the name by which the pluggable object may be referenced on the
// __super__ object (inside overrides).


class PluginSocket {
  constructor(plugged, name) {
    this.name = name;
    this.plugged = plugged;

    if (typeof this.plugged.__super__ === 'undefined') {
      this.plugged.__super__ = {};
    } else if (typeof this.plugged.__super__ === 'string') {
      this.plugged.__super__ = {
        '__string__': this.plugged.__super__
      };
    }

    this.plugged.__super__[name] = this.plugged;
    this.plugins = {};
    this.initialized_plugins = [];
  } // `_overrideAttribute` overrides an attribute on the original object
  // (the thing being plugged into).
  //
  // If the attribute being overridden is a function, then the original
  // function will still be available via the `__super__` attribute.
  //
  // If the same function is being overridden multiple times, then
  // the original function will be available at the end of a chain of
  // functions, starting from the most recent override, all the way
  // back to the original function, each being referenced by the
  // previous' __super__ attribute.
  //
  // For example:
  //
  // `plugin2.MyFunc.__super__.myFunc => plugin1.MyFunc.__super__.myFunc => original.myFunc`


  _overrideAttribute(key, plugin) {
    const value = plugin.overrides[key];

    if (typeof value === "function") {
      const default_super = {};
      default_super[this.name] = this.plugged;
      const super_method = this.plugged[key];

      this.plugged[key] = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return wrappedOverride.apply(this, [key, value, super_method, default_super, ...args]);
      };
    } else {
      this.plugged[key] = value;
    }
  }

  _extendObject(obj, attributes) {
    if (!obj.prototype.__super__) {
      obj.prototype.__super__ = {};
      obj.prototype.__super__[this.name] = this.plugged;
    }

    for (const [key, value] of Object.entries(attributes)) {
      if (key === 'events') {
        obj.prototype[key] = Object.assign(value, obj.prototype[key]);
      } else if (typeof value === 'function') {
        // We create a partially applied wrapper function, that
        // makes sure to set the proper super method when the
        // overriding method is called. This is done to enable
        // chaining of plugin methods, all the way up to the
        // original method.
        const default_super = {};
        default_super[this.name] = this.plugged;
        const super_method = obj.prototype[key];

        obj.prototype[key] = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          return wrappedOverride.apply(this, [key, value, super_method, default_super, ...args]);
        };
      } else {
        obj.prototype[key] = value;
      }
    }
  } // Plugins can specify dependencies (by means of the
  // `dependencies` list attribute) which refers to dependencies
  // which will be initialized first, before the plugin itself gets initialized.
  //
  // If `strict_plugin_dependencies` is set to `false` (on the object being
  // made pluggable), then no error will be thrown if any of these plugins aren't
  // available.


  loadPluginDependencies(plugin) {
    var _plugin$dependencies;

    (_plugin$dependencies = plugin.dependencies) === null || _plugin$dependencies === void 0 ? void 0 : _plugin$dependencies.forEach(name => {
      const dep = this.plugins[name];

      if (dep) {
        var _dep$dependencies;

        if ((_dep$dependencies = dep.dependencies) !== null && _dep$dependencies !== void 0 && _dep$dependencies.includes(plugin.__name__)) {
          /* FIXME: circular dependency checking is only one level deep. */
          throw "Found a circular dependency between the plugins \"" + plugin.__name__ + "\" and \"" + name + "\"";
        }

        this.initializePlugin(dep);
      } else {
        this.throwUndefinedDependencyError("Could not find dependency \"" + name + "\" " + "for the plugin \"" + plugin.__name__ + "\". " + "If it's needed, make sure it's loaded by require.js");
      }
    });
  }

  throwUndefinedDependencyError(msg) {
    if (this.plugged.strict_plugin_dependencies) {
      throw msg;
    } else {
      if (console.warn) {
        console.warn(msg);
      } else {
        console.log(msg);
      }
    }
  } // `applyOverrides` is called by initializePlugin. It applies any
  // and all overrides of methods or Backbone views and models that
  // are defined on any of the plugins.


  applyOverrides(plugin) {
    Object.keys(plugin.overrides || {}).forEach(key => {
      const override = plugin.overrides[key];

      if (typeof override === "object") {
        if (typeof this.plugged[key] === 'undefined') {
          this.throwUndefinedDependencyError(`Plugin "${plugin.__name__}" tried to override "${key}" but it's not found.`);
        } else {
          this._extendObject(this.plugged[key], override);
        }
      } else {
        this._overrideAttribute(key, plugin);
      }
    });
  } // `initializePlugin` applies the overrides (if any) defined on all
  // the registered plugins and then calls the initialize method of the plugin


  initializePlugin(plugin) {
    var _plugin$enabled;

    if (!Object.keys(this.allowed_plugins).includes(plugin.__name__)) {
      /* Don't initialize disallowed plugins. */
      return;
    }

    if (this.initialized_plugins.includes(plugin.__name__)) {
      /* Don't initialize plugins twice, otherwise we get
      * infinite recursion in overridden methods.
      */
      return;
    }

    if (typeof plugin.enabled === 'boolean' && plugin.enabled || (_plugin$enabled = plugin.enabled) !== null && _plugin$enabled !== void 0 && _plugin$enabled.call(plugin, this.plugged) || plugin.enabled == null) {
      // isNil
      Object.assign(plugin, this.properties);

      if (plugin.dependencies) {
        this.loadPluginDependencies(plugin);
      }

      this.applyOverrides(plugin);

      if (typeof plugin.initialize === "function") {
        plugin.initialize.bind(plugin)(this);
      }

      this.initialized_plugins.push(plugin.__name__);
    }
  } // `registerPlugin` registers (or inserts, if you'd like) a plugin,
  // by adding it to the `plugins` map on the PluginSocket instance.


  registerPlugin(name, plugin) {
    if (name in this.plugins) {
      throw new Error('Error: Plugin name ' + name + ' is already taken');
    }

    plugin.__name__ = name;
    this.plugins[name] = plugin;
  } // `initializePlugins` should get called once all plugins have been
  // registered. It will then iterate through all the plugins, calling
  // `initializePlugin` for each.
  // The passed in  properties variable is an object with attributes and methods
  // which will be attached to the plugins.


  initializePlugins() {
    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let whitelist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let blacklist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    if (!Object.keys(this.plugins).length) {
      return;
    }

    this.properties = properties;
    this.allowed_plugins = {};

    for (const [key, plugin] of Object.entries(this.plugins)) {
      if ((!whitelist.length || whitelist.includes(key)) && !blacklist.includes(key)) {
        this.allowed_plugins[key] = plugin;
      }
    }

    Object.values(this.allowed_plugins).forEach(o => this.initializePlugin(o));
  }

}

function enable(object, name, attrname) {
  // Call the `enable` method to make an object pluggable
  //
  // It takes three parameters:
  // - `object`: The object that gets made pluggable.
  // - `name`: The string name by which the now pluggable object
  //     may be referenced on the __super__ obj (in overrides).
  //     The default value is "plugged".
  // - `attrname`: The string name of the attribute on the now
  //     pluggable object, which refers to the PluginSocket instance
  //     that gets created.
  if (typeof attrname === "undefined") {
    attrname = "pluginSocket";
  }

  if (typeof name === 'undefined') {
    name = 'plugged';
  }

  object[attrname] = new PluginSocket(object, name);
  return object;
}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  enable
});

/***/ }),

/***/ "./node_modules/sprintf-js/src/sprintf.js":
/*!************************************************!*\
  !*** ./node_modules/sprintf-js/src/sprintf.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/* global window, exports, define */
!function () {
  'use strict';

  var re = {
    not_string: /[^s]/,
    not_bool: /[^t]/,
    not_type: /[^T]/,
    not_primitive: /[^v]/,
    number: /[diefg]/,
    numeric_arg: /[bcdiefguxX]/,
    json: /[j]/,
    not_json: /[^j]/,
    text: /^[^\x25]+/,
    modulo: /^\x25{2}/,
    placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
    key: /^([a-z_][a-z_\d]*)/i,
    key_access: /^\.([a-z_][a-z_\d]*)/i,
    index_access: /^\[(\d+)\]/,
    sign: /^[+-]/
  };

  function sprintf(key) {
    // `arguments` is not an array, but should be fine for this call
    return sprintf_format(sprintf_parse(key), arguments);
  }

  function vsprintf(fmt, argv) {
    return sprintf.apply(null, [fmt].concat(argv || []));
  }

  function sprintf_format(parse_tree, argv) {
    var cursor = 1,
        tree_length = parse_tree.length,
        arg,
        output = '',
        i,
        k,
        ph,
        pad,
        pad_character,
        pad_length,
        is_positive,
        sign;

    for (i = 0; i < tree_length; i++) {
      if (typeof parse_tree[i] === 'string') {
        output += parse_tree[i];
      } else if (typeof parse_tree[i] === 'object') {
        ph = parse_tree[i]; // convenience purposes only

        if (ph.keys) {
          // keyword argument
          arg = argv[cursor];

          for (k = 0; k < ph.keys.length; k++) {
            if (arg == undefined) {
              throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k - 1]));
            }

            arg = arg[ph.keys[k]];
          }
        } else if (ph.param_no) {
          // positional argument (explicit)
          arg = argv[ph.param_no];
        } else {
          // positional argument (implicit)
          arg = argv[cursor++];
        }

        if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
          arg = arg();
        }

        if (re.numeric_arg.test(ph.type) && typeof arg !== 'number' && isNaN(arg)) {
          throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg));
        }

        if (re.number.test(ph.type)) {
          is_positive = arg >= 0;
        }

        switch (ph.type) {
          case 'b':
            arg = parseInt(arg, 10).toString(2);
            break;

          case 'c':
            arg = String.fromCharCode(parseInt(arg, 10));
            break;

          case 'd':
          case 'i':
            arg = parseInt(arg, 10);
            break;

          case 'j':
            arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
            break;

          case 'e':
            arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
            break;

          case 'f':
            arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
            break;

          case 'g':
            arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
            break;

          case 'o':
            arg = (parseInt(arg, 10) >>> 0).toString(8);
            break;

          case 's':
            arg = String(arg);
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 't':
            arg = String(!!arg);
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 'T':
            arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 'u':
            arg = parseInt(arg, 10) >>> 0;
            break;

          case 'v':
            arg = arg.valueOf();
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 'x':
            arg = (parseInt(arg, 10) >>> 0).toString(16);
            break;

          case 'X':
            arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
            break;
        }

        if (re.json.test(ph.type)) {
          output += arg;
        } else {
          if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
            sign = is_positive ? '+' : '-';
            arg = arg.toString().replace(re.sign, '');
          } else {
            sign = '';
          }

          pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';
          pad_length = ph.width - (sign + arg).length;
          pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : '' : '';
          output += ph.align ? sign + arg + pad : pad_character === '0' ? sign + pad + arg : pad + sign + arg;
        }
      }
    }

    return output;
  }

  var sprintf_cache = Object.create(null);

  function sprintf_parse(fmt) {
    if (sprintf_cache[fmt]) {
      return sprintf_cache[fmt];
    }

    var _fmt = fmt,
        match,
        parse_tree = [],
        arg_names = 0;

    while (_fmt) {
      if ((match = re.text.exec(_fmt)) !== null) {
        parse_tree.push(match[0]);
      } else if ((match = re.modulo.exec(_fmt)) !== null) {
        parse_tree.push('%');
      } else if ((match = re.placeholder.exec(_fmt)) !== null) {
        if (match[2]) {
          arg_names |= 1;
          var field_list = [],
              replacement_field = match[2],
              field_match = [];

          if ((field_match = re.key.exec(replacement_field)) !== null) {
            field_list.push(field_match[1]);

            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
              if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              } else {
                throw new SyntaxError('[sprintf] failed to parse named argument key');
              }
            }
          } else {
            throw new SyntaxError('[sprintf] failed to parse named argument key');
          }

          match[2] = field_list;
        } else {
          arg_names |= 2;
        }

        if (arg_names === 3) {
          throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');
        }

        parse_tree.push({
          placeholder: match[0],
          param_no: match[1],
          keys: match[2],
          sign: match[3],
          pad_char: match[4],
          align: match[5],
          width: match[6],
          precision: match[7],
          type: match[8]
        });
      } else {
        throw new SyntaxError('[sprintf] unexpected placeholder');
      }

      _fmt = _fmt.substring(match[0].length);
    }

    return sprintf_cache[fmt] = parse_tree;
  }
  /**
   * export to either browser or node.js
   */

  /* eslint-disable quote-props */


  if (true) {
    exports.sprintf = sprintf;
    exports.vsprintf = vsprintf;
  }

  if (typeof window !== 'undefined') {
    window['sprintf'] = sprintf;
    window['vsprintf'] = vsprintf;

    if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return {
          'sprintf': sprintf,
          'vsprintf': vsprintf
        };
      }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
  /* eslint-enable quote-props */

}(); // eslint-disable-line

/***/ }),

/***/ "./node_modules/strophe.js/src/bosh.js":
/*!*********************************************!*\
  !*** ./node_modules/strophe.js/src/bosh.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shims */ "./src/strophe-shims.js");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core */ "./node_modules/strophe.js/src/core.js");
/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2006-2008, OGG, LLC
*/

/* global ActiveXObject */


/** PrivateClass: Strophe.Request
 *  _Private_ helper class that provides a cross implementation abstraction
 *  for a BOSH related XMLHttpRequest.
 *
 *  The Strophe.Request class is used internally to encapsulate BOSH request
 *  information.  It is not meant to be used from user's code.
 */

Strophe = _core__WEBPACK_IMPORTED_MODULE_1__.Strophe;
_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Request = class Request {
  /** PrivateConstructor: Strophe.Request
   *  Create and initialize a new Strophe.Request object.
   *
   *  Parameters:
   *    (XMLElement) elem - The XML data to be sent in the request.
   *    (Function) func - The function that will be called when the
   *      XMLHttpRequest readyState changes.
   *    (Integer) rid - The BOSH rid attribute associated with this request.
   *    (Integer) sends - The number of times this same request has been sent.
   */
  constructor(elem, func, rid, sends) {
    this.id = ++_core__WEBPACK_IMPORTED_MODULE_1__.Strophe._requestId;
    this.xmlData = elem;
    this.data = _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.serialize(elem); // save original function in case we need to make a new request
    // from this one.

    this.origFunc = func;
    this.func = func;
    this.rid = rid;
    this.date = NaN;
    this.sends = sends || 0;
    this.abort = false;
    this.dead = null;

    this.age = function () {
      if (!this.date) {
        return 0;
      }

      const now = new Date();
      return (now - this.date) / 1000;
    };

    this.timeDead = function () {
      if (!this.dead) {
        return 0;
      }

      const now = new Date();
      return (now - this.dead) / 1000;
    };

    this.xhr = this._newXHR();
  }
  /** PrivateFunction: getResponse
   *  Get a response from the underlying XMLHttpRequest.
   *
   *  This function attempts to get a response from the request and checks
   *  for errors.
   *
   *  Throws:
   *    "parsererror" - A parser error occured.
   *    "bad-format" - The entity has sent XML that cannot be processed.
   *
   *  Returns:
   *    The DOM element tree of the response.
   */


  getResponse() {
    let node = null;

    if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {
      node = this.xhr.responseXML.documentElement;

      if (node.tagName === "parsererror") {
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("invalid response received");
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("responseText: " + this.xhr.responseText);
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("responseXML: " + _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.serialize(this.xhr.responseXML));
        throw new Error("parsererror");
      }
    } else if (this.xhr.responseText) {
      // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("Got responseText but no responseXML; attempting to parse it with DOMParser...");
      node = new _shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;

      if (!node) {
        throw new Error('Parsing produced null node');
      } else if (node.querySelector('parsererror')) {
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("invalid response received: " + node.querySelector('parsererror').textContent);
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("responseText: " + this.xhr.responseText);
        const error = new Error();
        error.name = _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.ErrorCondition.BAD_FORMAT;
        throw error;
      }
    }

    return node;
  }
  /** PrivateFunction: _newXHR
   *  _Private_ helper function to create XMLHttpRequests.
   *
   *  This function creates XMLHttpRequests across all implementations.
   *
   *  Returns:
   *    A new XMLHttpRequest.
   */


  _newXHR() {
    let xhr = null;

    if (window.XMLHttpRequest) {
      xhr = new XMLHttpRequest();

      if (xhr.overrideMimeType) {
        xhr.overrideMimeType("text/xml; charset=utf-8");
      }
    } else if (window.ActiveXObject) {
      xhr = new ActiveXObject("Microsoft.XMLHTTP");
    } // use Function.bind() to prepend ourselves as an argument


    xhr.onreadystatechange = this.func.bind(null, this);
    return xhr;
  }

};
/** Class: Strophe.Bosh
 *  _Private_ helper class that handles BOSH Connections
 *
 *  The Strophe.Bosh class is used internally by Strophe.Connection
 *  to encapsulate BOSH sessions. It is not meant to be used from user's code.
 */

/** File: bosh.js
 *  A JavaScript library to enable BOSH in Strophejs.
 *
 *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)
 *  to emulate a persistent, stateful, two-way connection to an XMPP server.
 *  More information on BOSH can be found in XEP 124.
 */

/** PrivateConstructor: Strophe.Bosh
 *  Create and initialize a Strophe.Bosh object.
 *
 *  Parameters:
 *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.
 *
 *  Returns:
 *    A new Strophe.Bosh object.
 */

_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Bosh = class Bosh {
  constructor(connection) {
    this._conn = connection;
    /* request id for body tags */

    this.rid = Math.floor(Math.random() * 4294967295);
    /* The current session ID. */

    this.sid = null; // default BOSH values

    this.hold = 1;
    this.wait = 60;
    this.window = 5;
    this.errors = 0;
    this.inactivity = null;
    this.lastResponseHeaders = null;
    this._requests = [];
  }
  /** PrivateFunction: _buildBody
   *  _Private_ helper function to generate the <body/> wrapper for BOSH.
   *
   *  Returns:
   *    A Strophe.Builder with a <body/> element.
   */


  _buildBody() {
    const bodyWrap = (0,_core__WEBPACK_IMPORTED_MODULE_1__.$build)('body', {
      'rid': this.rid++,
      'xmlns': _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.HTTPBIND
    });

    if (this.sid !== null) {
      bodyWrap.attrs({
        'sid': this.sid
      });
    }

    if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {
      this._cacheSession();
    }

    return bodyWrap;
  }
  /** PrivateFunction: _reset
   *  Reset the connection.
   *
   *  This function is called by the reset function of the Strophe Connection
   */


  _reset() {
    this.rid = Math.floor(Math.random() * 4294967295);
    this.sid = null;
    this.errors = 0;

    if (this._conn._sessionCachingSupported()) {
      window.sessionStorage.removeItem('strophe-bosh-session');
    }

    this._conn.nextValidRid(this.rid);
  }
  /** PrivateFunction: _connect
   *  _Private_ function that initializes the BOSH connection.
   *
   *  Creates and sends the Request that initializes the BOSH connection.
   */


  _connect(wait, hold, route) {
    this.wait = wait || this.wait;
    this.hold = hold || this.hold;
    this.errors = 0;

    const body = this._buildBody().attrs({
      "to": this._conn.domain,
      "xml:lang": "en",
      "wait": this.wait,
      "hold": this.hold,
      "content": "text/xml; charset=utf-8",
      "ver": "1.6",
      "xmpp:version": "1.0",
      "xmlns:xmpp": _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.BOSH
    });

    if (route) {
      body.attrs({
        'route': route
      });
    }

    const _connect_cb = this._conn._connect_cb;

    this._requests.push(new _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute("rid")));

    this._throttledRequestHandler();
  }
  /** PrivateFunction: _attach
   *  Attach to an already created and authenticated BOSH session.
   *
   *  This function is provided to allow Strophe to attach to BOSH
   *  sessions which have been created externally, perhaps by a Web
   *  application.  This is often used to support auto-login type features
   *  without putting user credentials into the page.
   *
   *  Parameters:
   *    (String) jid - The full JID that is bound by the session.
   *    (String) sid - The SID of the BOSH session.
   *    (String) rid - The current RID of the BOSH session.  This RID
   *      will be used by the next request.
   *    (Function) callback The connect callback function.
   *    (Integer) wait - The optional HTTPBIND wait value.  This is the
   *      time the server will wait before returning an empty result for
   *      a request.  The default setting of 60 seconds is recommended.
   *      Other settings will require tweaks to the Strophe.TIMEOUT value.
   *    (Integer) hold - The optional HTTPBIND hold value.  This is the
   *      number of connections the server will hold at one time.  This
   *      should almost always be set to 1 (the default).
   *    (Integer) wind - The optional HTTBIND window value.  This is the
   *      allowed range of request ids that are valid.  The default is 5.
   */


  _attach(jid, sid, rid, callback, wait, hold, wind) {
    this._conn.jid = jid;
    this.sid = sid;
    this.rid = rid;
    this._conn.connect_callback = callback;
    this._conn.domain = _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.getDomainFromJid(this._conn.jid);
    this._conn.authenticated = true;
    this._conn.connected = true;
    this.wait = wait || this.wait;
    this.hold = hold || this.hold;
    this.window = wind || this.window;

    this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.ATTACHED, null);
  }
  /** PrivateFunction: _restore
   *  Attempt to restore a cached BOSH session
   *
   *  Parameters:
   *    (String) jid - The full JID that is bound by the session.
   *      This parameter is optional but recommended, specifically in cases
   *      where prebinded BOSH sessions are used where it's important to know
   *      that the right session is being restored.
   *    (Function) callback The connect callback function.
   *    (Integer) wait - The optional HTTPBIND wait value.  This is the
   *      time the server will wait before returning an empty result for
   *      a request.  The default setting of 60 seconds is recommended.
   *      Other settings will require tweaks to the Strophe.TIMEOUT value.
   *    (Integer) hold - The optional HTTPBIND hold value.  This is the
   *      number of connections the server will hold at one time.  This
   *      should almost always be set to 1 (the default).
   *    (Integer) wind - The optional HTTBIND window value.  This is the
   *      allowed range of request ids that are valid.  The default is 5.
   */


  _restore(jid, callback, wait, hold, wind) {
    const session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));

    if (typeof session !== "undefined" && session !== null && session.rid && session.sid && session.jid && (typeof jid === "undefined" || jid === null || _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.getBareJidFromJid(session.jid) === _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so
    // we compare only the domains:
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.getNodeFromJid(jid) === null && _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.getDomainFromJid(session.jid) === jid)) {
      this._conn.restored = true;

      this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);
    } else {
      const error = new Error("_restore: no restoreable session.");
      error.name = "StropheSessionError";
      throw error;
    }
  }
  /** PrivateFunction: _cacheSession
   *  _Private_ handler for the beforeunload event.
   *
   *  This handler is used to process the Bosh-part of the initial request.
   *  Parameters:
   *    (Strophe.Request) bodyWrap - The received stanza.
   */


  _cacheSession() {
    if (this._conn.authenticated) {
      if (this._conn.jid && this.rid && this.sid) {
        window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({
          'jid': this._conn.jid,
          'rid': this.rid,
          'sid': this.sid
        }));
      }
    } else {
      window.sessionStorage.removeItem('strophe-bosh-session');
    }
  }
  /** PrivateFunction: _connect_cb
   *  _Private_ handler for initial connection request.
   *
   *  This handler is used to process the Bosh-part of the initial request.
   *  Parameters:
   *    (Strophe.Request) bodyWrap - The received stanza.
   */


  _connect_cb(bodyWrap) {
    const typ = bodyWrap.getAttribute("type");

    if (typ !== null && typ === "terminate") {
      // an error occurred
      let cond = bodyWrap.getAttribute("condition");
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("BOSH-Connection failed: " + cond);
      const conflict = bodyWrap.getElementsByTagName("conflict");

      if (cond !== null) {
        if (cond === "remote-stream-error" && conflict.length > 0) {
          cond = "conflict";
        }

        this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, cond);
      } else {
        this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, "unknown");
      }

      this._conn._doDisconnect(cond);

      return _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL;
    } // check to make sure we don't overwrite these if _connect_cb is
    // called multiple times in the case of missing stream:features


    if (!this.sid) {
      this.sid = bodyWrap.getAttribute("sid");
    }

    const wind = bodyWrap.getAttribute('requests');

    if (wind) {
      this.window = parseInt(wind, 10);
    }

    const hold = bodyWrap.getAttribute('hold');

    if (hold) {
      this.hold = parseInt(hold, 10);
    }

    const wait = bodyWrap.getAttribute('wait');

    if (wait) {
      this.wait = parseInt(wait, 10);
    }

    const inactivity = bodyWrap.getAttribute('inactivity');

    if (inactivity) {
      this.inactivity = parseInt(inactivity, 10);
    }
  }
  /** PrivateFunction: _disconnect
   *  _Private_ part of Connection.disconnect for Bosh
   *
   *  Parameters:
   *    (Request) pres - This stanza will be sent before disconnecting.
   */


  _disconnect(pres) {
    this._sendTerminate(pres);
  }
  /** PrivateFunction: _doDisconnect
   *  _Private_ function to disconnect.
   *
   *  Resets the SID and RID.
   */


  _doDisconnect() {
    this.sid = null;
    this.rid = Math.floor(Math.random() * 4294967295);

    if (this._conn._sessionCachingSupported()) {
      window.sessionStorage.removeItem('strophe-bosh-session');
    }

    this._conn.nextValidRid(this.rid);
  }
  /** PrivateFunction: _emptyQueue
   * _Private_ function to check if the Request queue is empty.
   *
   *  Returns:
   *    True, if there are no Requests queued, False otherwise.
   */


  _emptyQueue() {
    return this._requests.length === 0;
  }
  /** PrivateFunction: _callProtocolErrorHandlers
   *  _Private_ function to call error handlers registered for HTTP errors.
   *
   *  Parameters:
   *    (Strophe.Request) req - The request that is changing readyState.
   */


  _callProtocolErrorHandlers(req) {
    const reqStatus = Bosh._getRequestStatus(req);

    const err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];

    if (err_callback) {
      err_callback.call(this, reqStatus);
    }
  }
  /** PrivateFunction: _hitError
   *  _Private_ function to handle the error count.
   *
   *  Requests are resent automatically until their error count reaches
   *  5.  Each time an error is encountered, this function is called to
   *  increment the count and disconnect if the count is too high.
   *
   *  Parameters:
   *    (Integer) reqStatus - The request status.
   */


  _hitError(reqStatus) {
    this.errors++;
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.warn("request errored, status: " + reqStatus + ", number of errors: " + this.errors);

    if (this.errors > 4) {
      this._conn._onDisconnectTimeout();
    }
  }
  /** PrivateFunction: _no_auth_received
   *
   * Called on stream start/restart when no stream:features
   * has been received and sends a blank poll request.
   */


  _no_auth_received(callback) {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.warn("Server did not yet offer a supported authentication " + "mechanism. Sending a blank poll request.");

    if (callback) {
      callback = callback.bind(this._conn);
    } else {
      callback = this._conn._connect_cb.bind(this._conn);
    }

    const body = this._buildBody();

    this._requests.push(new _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute("rid")));

    this._throttledRequestHandler();
  }
  /** PrivateFunction: _onDisconnectTimeout
   *  _Private_ timeout handler for handling non-graceful disconnection.
   *
   *  Cancels all remaining Requests and clears the queue.
   */


  _onDisconnectTimeout() {
    this._abortAllRequests();
  }
  /** PrivateFunction: _abortAllRequests
   *  _Private_ helper function that makes sure all pending requests are aborted.
   */


  _abortAllRequests() {
    while (this._requests.length > 0) {
      const req = this._requests.pop();

      req.abort = true;
      req.xhr.abort();

      req.xhr.onreadystatechange = function () {};
    }
  }
  /** PrivateFunction: _onIdle
   *  _Private_ handler called by Strophe.Connection._onIdle
   *
   *  Sends all queued Requests or polls with empty Request if there are none.
   */


  _onIdle() {
    const data = this._conn._data; // if no requests are in progress, poll

    if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("no requests during idle cycle, sending blank request");
      data.push(null);
    }

    if (this._conn.paused) {
      return;
    }

    if (this._requests.length < 2 && data.length > 0) {
      const body = this._buildBody();

      for (let i = 0; i < data.length; i++) {
        if (data[i] !== null) {
          if (data[i] === "restart") {
            body.attrs({
              "to": this._conn.domain,
              "xml:lang": "en",
              "xmpp:restart": "true",
              "xmlns:xmpp": _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.BOSH
            });
          } else {
            body.cnode(data[i]).up();
          }
        }
      }

      delete this._conn._data;
      this._conn._data = [];

      this._requests.push(new _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute("rid")));

      this._throttledRequestHandler();
    }

    if (this._requests.length > 0) {
      const time_elapsed = this._requests[0].age();

      if (this._requests[0].dead !== null) {
        if (this._requests[0].timeDead() > Math.floor(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.SECONDARY_TIMEOUT * this.wait)) {
          this._throttledRequestHandler();
        }
      }

      if (time_elapsed > Math.floor(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.TIMEOUT * this.wait)) {
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.warn("Request " + this._requests[0].id + " timed out, over " + Math.floor(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.TIMEOUT * this.wait) + " seconds since last activity");

        this._throttledRequestHandler();
      }
    }
  }
  /** PrivateFunction: _getRequestStatus
   *
   *  Returns the HTTP status code from a Strophe.Request
   *
   *  Parameters:
   *    (Strophe.Request) req - The Strophe.Request instance.
   *    (Integer) def - The default value that should be returned if no
   *          status value was found.
   */


  static _getRequestStatus(req, def) {
    let reqStatus;

    if (req.xhr.readyState === 4) {
      try {
        reqStatus = req.xhr.status;
      } catch (e) {
        // ignore errors from undefined status attribute. Works
        // around a browser bug
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("Caught an error while retrieving a request's status, " + "reqStatus: " + reqStatus);
      }
    }

    if (typeof reqStatus === "undefined") {
      reqStatus = typeof def === 'number' ? def : 0;
    }

    return reqStatus;
  }
  /** PrivateFunction: _onRequestStateChange
   *  _Private_ handler for Strophe.Request state changes.
   *
   *  This function is called when the XMLHttpRequest readyState changes.
   *  It contains a lot of error handling logic for the many ways that
   *  requests can fail, and calls the request callback when requests
   *  succeed.
   *
   *  Parameters:
   *    (Function) func - The handler for the request.
   *    (Strophe.Request) req - The request that is changing readyState.
   */


  _onRequestStateChange(func, req) {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("request id " + req.id + "." + req.sends + " state changed to " + req.xhr.readyState);

    if (req.abort) {
      req.abort = false;
      return;
    }

    if (req.xhr.readyState !== 4) {
      // The request is not yet complete
      return;
    }

    const reqStatus = Bosh._getRequestStatus(req);

    this.lastResponseHeaders = req.xhr.getAllResponseHeaders();

    if (this._conn.disconnecting && reqStatus >= 400) {
      this._hitError(reqStatus);

      this._callProtocolErrorHandlers(req);

      return;
    }

    const reqIs0 = this._requests[0] === req;
    const reqIs1 = this._requests[1] === req;
    const valid_request = reqStatus > 0 && reqStatus < 500;
    const too_many_retries = req.sends > this._conn.maxRetries;

    if (valid_request || too_many_retries) {
      // remove from internal queue
      this._removeRequest(req);

      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("request id " + req.id + " should now be removed");
    }

    if (reqStatus === 200) {
      // request succeeded
      // if request 1 finished, or request 0 finished and request
      // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to
      // restart the other - both will be in the first spot, as the
      // completed request has been removed from the queue already
      if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.SECONDARY_TIMEOUT * this.wait)) {
        this._restartRequest(0);
      }

      this._conn.nextValidRid(Number(req.rid) + 1);

      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("request id " + req.id + "." + req.sends + " got 200");
      func(req); // call handler

      this.errors = 0;
    } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {
      // request failed
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("request id " + req.id + "." + req.sends + " error " + reqStatus + " happened");

      this._hitError(reqStatus);

      this._callProtocolErrorHandlers(req);

      if (reqStatus >= 400 && reqStatus < 500) {
        this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.DISCONNECTING, null);

        this._conn._doDisconnect();
      }
    } else {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("request id " + req.id + "." + req.sends + " error " + reqStatus + " happened");
    }

    if (!valid_request && !too_many_retries) {
      this._throttledRequestHandler();
    } else if (too_many_retries && !this._conn.connected) {
      this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, "giving-up");
    }
  }
  /** PrivateFunction: _processRequest
   *  _Private_ function to process a request in the queue.
   *
   *  This function takes requests off the queue and sends them and
   *  restarts dead requests.
   *
   *  Parameters:
   *    (Integer) i - The index of the request in the queue.
   */


  _processRequest(i) {
    let req = this._requests[i];

    const reqStatus = Bosh._getRequestStatus(req, -1); // make sure we limit the number of retries


    if (req.sends > this._conn.maxRetries) {
      this._conn._onDisconnectTimeout();

      return;
    }

    const time_elapsed = req.age();
    const primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.TIMEOUT * this.wait);
    const secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.SECONDARY_TIMEOUT * this.wait);
    const server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);

    if (primary_timeout || secondary_timeout || server_error) {
      if (secondary_timeout) {
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error(`Request ${this._requests[i].id} timed out (secondary), restarting`);
      }

      req.abort = true;
      req.xhr.abort(); // setting to null fails on IE6, so set to empty function

      req.xhr.onreadystatechange = function () {};

      this._requests[i] = new _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Request(req.xmlData, req.origFunc, req.rid, req.sends);
      req = this._requests[i];
    }

    if (req.xhr.readyState === 0) {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("request id " + req.id + "." + req.sends + " posting");

      try {
        const content_type = this._conn.options.contentType || "text/xml; charset=utf-8";
        req.xhr.open("POST", this._conn.service, this._conn.options.sync ? false : true);

        if (typeof req.xhr.setRequestHeader !== 'undefined') {
          // IE9 doesn't have setRequestHeader
          req.xhr.setRequestHeader("Content-Type", content_type);
        }

        if (this._conn.options.withCredentials) {
          req.xhr.withCredentials = true;
        }
      } catch (e2) {
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("XHR open failed: " + e2.toString());

        if (!this._conn.connected) {
          this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, "bad-service");
        }

        this._conn.disconnect();

        return;
      } // Fires the XHR request -- may be invoked immediately
      // or on a gradually expanding retry window for reconnects


      const sendFunc = () => {
        req.date = new Date();

        if (this._conn.options.customHeaders) {
          const headers = this._conn.options.customHeaders;

          for (const header in headers) {
            if (Object.prototype.hasOwnProperty.call(headers, header)) {
              req.xhr.setRequestHeader(header, headers[header]);
            }
          }
        }

        req.xhr.send(req.data);
      }; // Implement progressive backoff for reconnects --
      // First retry (send === 1) should also be instantaneous


      if (req.sends > 1) {
        // Using a cube of the retry number creates a nicely
        // expanding retry window
        const backoff = Math.min(Math.floor(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;
        setTimeout(function () {
          // XXX: setTimeout should be called only with function expressions (23974bc1)
          sendFunc();
        }, backoff);
      } else {
        sendFunc();
      }

      req.sends++;

      if (this._conn.xmlOutput !== _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Connection.prototype.xmlOutput) {
        if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {
          this._conn.xmlOutput(req.xmlData.childNodes[0]);
        } else {
          this._conn.xmlOutput(req.xmlData);
        }
      }

      if (this._conn.rawOutput !== _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Connection.prototype.rawOutput) {
        this._conn.rawOutput(req.data);
      }
    } else {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("_processRequest: " + (i === 0 ? "first" : "second") + " request has readyState of " + req.xhr.readyState);
    }
  }
  /** PrivateFunction: _removeRequest
   *  _Private_ function to remove a request from the queue.
   *
   *  Parameters:
   *    (Strophe.Request) req - The request to remove.
   */


  _removeRequest(req) {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("removing request");

    for (let i = this._requests.length - 1; i >= 0; i--) {
      if (req === this._requests[i]) {
        this._requests.splice(i, 1);
      }
    } // IE6 fails on setting to null, so set to empty function


    req.xhr.onreadystatechange = function () {};

    this._throttledRequestHandler();
  }
  /** PrivateFunction: _restartRequest
   *  _Private_ function to restart a request that is presumed dead.
   *
   *  Parameters:
   *    (Integer) i - The index of the request in the queue.
   */


  _restartRequest(i) {
    const req = this._requests[i];

    if (req.dead === null) {
      req.dead = new Date();
    }

    this._processRequest(i);
  }
  /** PrivateFunction: _reqToData
   * _Private_ function to get a stanza out of a request.
   *
   * Tries to extract a stanza out of a Request Object.
   * When this fails the current connection will be disconnected.
   *
   *  Parameters:
   *    (Object) req - The Request.
   *
   *  Returns:
   *    The stanza that was passed.
   */


  _reqToData(req) {
    try {
      return req.getResponse();
    } catch (e) {
      if (e.message !== "parsererror") {
        throw e;
      }

      this._conn.disconnect("strophe-parsererror");
    }
  }
  /** PrivateFunction: _sendTerminate
   *  _Private_ function to send initial disconnect sequence.
   *
   *  This is the first step in a graceful disconnect.  It sends
   *  the BOSH server a terminate body and includes an unavailable
   *  presence if authentication has completed.
   */


  _sendTerminate(pres) {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("_sendTerminate was called");

    const body = this._buildBody().attrs({
      type: "terminate"
    });

    if (pres) {
      body.cnode(pres.tree());
    }

    const req = new _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute("rid"));

    this._requests.push(req);

    this._throttledRequestHandler();
  }
  /** PrivateFunction: _send
   *  _Private_ part of the Connection.send function for BOSH
   *
   * Just triggers the RequestHandler to send the messages that are in the queue
   */


  _send() {
    clearTimeout(this._conn._idleTimeout);

    this._throttledRequestHandler();

    this._conn._idleTimeout = setTimeout(() => this._conn._onIdle(), 100);
  }
  /** PrivateFunction: _sendRestart
   *
   *  Send an xmpp:restart stanza.
   */


  _sendRestart() {
    this._throttledRequestHandler();

    clearTimeout(this._conn._idleTimeout);
  }
  /** PrivateFunction: _throttledRequestHandler
   *  _Private_ function to throttle requests to the connection window.
   *
   *  This function makes sure we don't send requests so fast that the
   *  request ids overflow the connection window in the case that one
   *  request died.
   */


  _throttledRequestHandler() {
    if (!this._requests) {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("_throttledRequestHandler called with " + "undefined requests");
    } else {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("_throttledRequestHandler called with " + this._requests.length + " requests");
    }

    if (!this._requests || this._requests.length === 0) {
      return;
    }

    if (this._requests.length > 0) {
      this._processRequest(0);
    }

    if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {
      this._processRequest(1);
    }
  }

};
/** Variable: strip
 *
 *  BOSH-Connections will have all stanzas wrapped in a <body> tag when
 *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.
 *  To strip this tag, User code can set <Strophe.Bosh.strip> to "body":
 *
 *  > Strophe.Bosh.prototype.strip = "body";
 *
 *  This will enable stripping of the body tag in both
 *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.
 */

_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Bosh.prototype.strip = null;

/***/ }),

/***/ "./node_modules/strophe.js/src/core.js":
/*!*********************************************!*\
  !*** ./node_modules/strophe.js/src/core.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$build": () => (/* binding */ $build),
/* harmony export */   "$iq": () => (/* binding */ $iq),
/* harmony export */   "$msg": () => (/* binding */ $msg),
/* harmony export */   "$pres": () => (/* binding */ $pres),
/* harmony export */   "MD5": () => (/* reexport safe */ _md5__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "SHA1": () => (/* reexport safe */ _sha1__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   "Strophe": () => (/* binding */ Strophe),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shims */ "./src/strophe-shims.js");
/* harmony import */ var _md5__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5 */ "./node_modules/strophe.js/src/md5.js");
/* harmony import */ var _sasl_anon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sasl-anon.js */ "./node_modules/strophe.js/src/sasl-anon.js");
/* harmony import */ var _sasl_external_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sasl-external.js */ "./node_modules/strophe.js/src/sasl-external.js");
/* harmony import */ var _sasl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sasl.js */ "./node_modules/strophe.js/src/sasl.js");
/* harmony import */ var _sasl_oauthbearer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sasl-oauthbearer.js */ "./node_modules/strophe.js/src/sasl-oauthbearer.js");
/* harmony import */ var _sasl_plain_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sasl-plain.js */ "./node_modules/strophe.js/src/sasl-plain.js");
/* harmony import */ var _sasl_sha1_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sasl-sha1.js */ "./node_modules/strophe.js/src/sasl-sha1.js");
/* harmony import */ var _sasl_xoauth2_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sasl-xoauth2.js */ "./node_modules/strophe.js/src/sasl-xoauth2.js");
/* harmony import */ var _sha1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sha1 */ "./node_modules/strophe.js/src/sha1.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils */ "./node_modules/strophe.js/src/utils.js");
/* harmony import */ var abab__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! abab */ "./node_modules/abab/index.js");
/* harmony import */ var abab__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(abab__WEBPACK_IMPORTED_MODULE_11__);
/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2006-2018, OGG, LLC
*/

/*global define, document, sessionStorage, setTimeout, clearTimeout, ActiveXObject, DOMParser, btoa, atob */












/** Function: $build
 *  Create a Strophe.Builder.
 *  This is an alias for 'new Strophe.Builder(name, attrs)'.
 *
 *  Parameters:
 *    (String) name - The root element name.
 *    (Object) attrs - The attributes for the root element in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */

function $build(name, attrs) {
  return new Strophe.Builder(name, attrs);
}
/** Function: $msg
 *  Create a Strophe.Builder with a <message/> element as the root.
 *
 *  Parameters:
 *    (Object) attrs - The <message/> element attributes in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */

function $msg(attrs) {
  return new Strophe.Builder("message", attrs);
}
/** Function: $iq
 *  Create a Strophe.Builder with an <iq/> element as the root.
 *
 *  Parameters:
 *    (Object) attrs - The <iq/> element attributes in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */

function $iq(attrs) {
  return new Strophe.Builder("iq", attrs);
}
/** Function: $pres
 *  Create a Strophe.Builder with a <presence/> element as the root.
 *
 *  Parameters:
 *    (Object) attrs - The <presence/> element attributes in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */

function $pres(attrs) {
  return new Strophe.Builder("presence", attrs);
}
/** Class: Strophe
 *  An object container for all Strophe library functions.
 *
 *  This class is just a container for all the objects and constants
 *  used in the library.  It is not meant to be instantiated, but to
 *  provide a namespace for library objects, constants, and functions.
 */

const Strophe = {
  /** Constant: VERSION */
  VERSION: "1.5.0",

  /** Constants: XMPP Namespace Constants
   *  Common namespace constants from the XMPP RFCs and XEPs.
   *
   *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.
   *  NS.BOSH - BOSH namespace from XEP 206.
   *  NS.CLIENT - Main XMPP client namespace.
   *  NS.AUTH - Legacy authentication namespace.
   *  NS.ROSTER - Roster operations namespace.
   *  NS.PROFILE - Profile namespace.
   *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.
   *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.
   *  NS.MUC - Multi-User Chat namespace from XEP 45.
   *  NS.SASL - XMPP SASL namespace from RFC 3920.
   *  NS.STREAM - XMPP Streams namespace from RFC 3920.
   *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.
   *  NS.SESSION - XMPP Session namespace from RFC 3920.
   *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.
   *  NS.XHTML - XHTML body namespace from XEP 71.
   */
  NS: {
    HTTPBIND: "http://jabber.org/protocol/httpbind",
    BOSH: "urn:xmpp:xbosh",
    CLIENT: "jabber:client",
    AUTH: "jabber:iq:auth",
    ROSTER: "jabber:iq:roster",
    PROFILE: "jabber:iq:profile",
    DISCO_INFO: "http://jabber.org/protocol/disco#info",
    DISCO_ITEMS: "http://jabber.org/protocol/disco#items",
    MUC: "http://jabber.org/protocol/muc",
    SASL: "urn:ietf:params:xml:ns:xmpp-sasl",
    STREAM: "http://etherx.jabber.org/streams",
    FRAMING: "urn:ietf:params:xml:ns:xmpp-framing",
    BIND: "urn:ietf:params:xml:ns:xmpp-bind",
    SESSION: "urn:ietf:params:xml:ns:xmpp-session",
    VERSION: "jabber:iq:version",
    STANZAS: "urn:ietf:params:xml:ns:xmpp-stanzas",
    XHTML_IM: "http://jabber.org/protocol/xhtml-im",
    XHTML: "http://www.w3.org/1999/xhtml"
  },

  /** Constants: XHTML_IM Namespace
   *  contains allowed tags, tag attributes, and css properties.
   *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.
   *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended
   *  allowed tags and their attributes.
   */
  XHTML: {
    tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],
    attributes: {
      'a': ['href'],
      'blockquote': ['style'],
      'br': [],
      'cite': ['style'],
      'em': [],
      'img': ['src', 'alt', 'style', 'height', 'width'],
      'li': ['style'],
      'ol': ['style'],
      'p': ['style'],
      'span': ['style'],
      'strong': [],
      'ul': ['style'],
      'body': []
    },
    css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],

    /** Function: XHTML.validTag
     *
     * Utility method to determine whether a tag is allowed
     * in the XHTML_IM namespace.
     *
     * XHTML tag names are case sensitive and must be lower case.
     */
    validTag(tag) {
      for (let i = 0; i < Strophe.XHTML.tags.length; i++) {
        if (tag === Strophe.XHTML.tags[i]) {
          return true;
        }
      }

      return false;
    },

    /** Function: XHTML.validAttribute
     *
     * Utility method to determine whether an attribute is allowed
     * as recommended per XEP-0071
     *
     * XHTML attribute names are case sensitive and must be lower case.
     */
    validAttribute(tag, attribute) {
      if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {
        for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {
          if (attribute === Strophe.XHTML.attributes[tag][i]) {
            return true;
          }
        }
      }

      return false;
    },

    validCSS(style) {
      for (let i = 0; i < Strophe.XHTML.css.length; i++) {
        if (style === Strophe.XHTML.css[i]) {
          return true;
        }
      }

      return false;
    }

  },

  /** Constants: Connection Status Constants
   *  Connection status constants for use by the connection handler
   *  callback.
   *
   *  Status.ERROR - An error has occurred
   *  Status.CONNECTING - The connection is currently being made
   *  Status.CONNFAIL - The connection attempt failed
   *  Status.AUTHENTICATING - The connection is authenticating
   *  Status.AUTHFAIL - The authentication attempt failed
   *  Status.CONNECTED - The connection has succeeded
   *  Status.DISCONNECTED - The connection has been terminated
   *  Status.DISCONNECTING - The connection is currently being terminated
   *  Status.ATTACHED - The connection has been attached
   *  Status.REDIRECT - The connection has been redirected
   *  Status.CONNTIMEOUT - The connection has timed out
   */
  Status: {
    ERROR: 0,
    CONNECTING: 1,
    CONNFAIL: 2,
    AUTHENTICATING: 3,
    AUTHFAIL: 4,
    CONNECTED: 5,
    DISCONNECTED: 6,
    DISCONNECTING: 7,
    ATTACHED: 8,
    REDIRECT: 9,
    CONNTIMEOUT: 10,
    BINDREQUIRED: 11,
    ATTACHFAIL: 12
  },
  ErrorCondition: {
    BAD_FORMAT: "bad-format",
    CONFLICT: "conflict",
    MISSING_JID_NODE: "x-strophe-bad-non-anon-jid",
    NO_AUTH_MECH: "no-auth-mech",
    UNKNOWN_REASON: "unknown"
  },

  /** Constants: Log Level Constants
   *  Logging level indicators.
   *
   *  LogLevel.DEBUG - Debug output
   *  LogLevel.INFO - Informational output
   *  LogLevel.WARN - Warnings
   *  LogLevel.ERROR - Errors
   *  LogLevel.FATAL - Fatal errors
   */
  LogLevel: {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    FATAL: 4
  },

  /** PrivateConstants: DOM Element Type Constants
   *  DOM element types.
   *
   *  ElementType.NORMAL - Normal element.
   *  ElementType.TEXT - Text data element.
   *  ElementType.FRAGMENT - XHTML fragment element.
   */
  ElementType: {
    NORMAL: 1,
    TEXT: 3,
    CDATA: 4,
    FRAGMENT: 11
  },

  /** PrivateConstants: Timeout Values
   *  Timeout values for error states.  These values are in seconds.
   *  These should not be changed unless you know exactly what you are
   *  doing.
   *
   *  TIMEOUT - Timeout multiplier. A waiting request will be considered
   *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.
   *      This defaults to 1.1, and with default wait, 66 seconds.
   *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where
   *      Strophe can detect early failure, it will consider the request
   *      failed if it doesn't return after
   *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.
   *      This defaults to 0.1, and with default wait, 6 seconds.
   */
  TIMEOUT: 1.1,
  SECONDARY_TIMEOUT: 0.1,

  /** Function: addNamespace
   *  This function is used to extend the current namespaces in
   *  Strophe.NS.  It takes a key and a value with the key being the
   *  name of the new namespace, with its actual value.
   *  For example:
   *  Strophe.addNamespace('PUBSUB', "http://jabber.org/protocol/pubsub");
   *
   *  Parameters:
   *    (String) name - The name under which the namespace will be
   *      referenced under Strophe.NS
   *    (String) value - The actual namespace.
   */
  addNamespace(name, value) {
    Strophe.NS[name] = value;
  },

  /** Function: forEachChild
   *  Map a function over some or all child elements of a given element.
   *
   *  This is a small convenience function for mapping a function over
   *  some or all of the children of an element.  If elemName is null, all
   *  children will be passed to the function, otherwise only children
   *  whose tag names match elemName will be passed.
   *
   *  Parameters:
   *    (XMLElement) elem - The element to operate on.
   *    (String) elemName - The child element tag name filter.
   *    (Function) func - The function to apply to each child.  This
   *      function should take a single argument, a DOM element.
   */
  forEachChild(elem, elemName, func) {
    for (let i = 0; i < elem.childNodes.length; i++) {
      const childNode = elem.childNodes[i];

      if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {
        func(childNode);
      }
    }
  },

  /** Function: isTagEqual
   *  Compare an element's tag name with a string.
   *
   *  This function is case sensitive.
   *
   *  Parameters:
   *    (XMLElement) el - A DOM element.
   *    (String) name - The element name.
   *
   *  Returns:
   *    true if the element's tag name matches _el_, and false
   *    otherwise.
   */
  isTagEqual(el, name) {
    return el.tagName === name;
  },

  /** PrivateVariable: _xmlGenerator
   *  _Private_ variable that caches a DOM document to
   *  generate elements.
   */
  _xmlGenerator: null,

  /** Function: xmlGenerator
   *  Get the DOM document to generate elements.
   *
   *  Returns:
   *    The currently used DOM document.
   */
  xmlGenerator() {
    if (!Strophe._xmlGenerator) {
      Strophe._xmlGenerator = _shims__WEBPACK_IMPORTED_MODULE_0__.getDummyXMLDOMDocument();
    }

    return Strophe._xmlGenerator;
  },

  /** Function: xmlElement
   *  Create an XML DOM element.
   *
   *  This function creates an XML DOM element correctly across all
   *  implementations. Note that these are not HTML DOM elements, which
   *  aren't appropriate for XMPP stanzas.
   *
   *  Parameters:
   *    (String) name - The name for the element.
   *    (Array|Object) attrs - An optional array or object containing
   *      key/value pairs to use as element attributes. The object should
   *      be in the format {'key': 'value'} or {key: 'value'}. The array
   *      should have the format [['key1', 'value1'], ['key2', 'value2']].
   *    (String) text - The text child data for the element.
   *
   *  Returns:
   *    A new XML DOM element.
   */
  xmlElement(name) {
    if (!name) {
      return null;
    }

    const node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or
    // there are more than two optional args

    for (let a = 1; a < arguments.length; a++) {
      const arg = arguments[a];

      if (!arg) {
        continue;
      }

      if (typeof arg === "string" || typeof arg === "number") {
        node.appendChild(Strophe.xmlTextNode(arg));
      } else if (typeof arg === "object" && typeof arg.sort === "function") {
        for (let i = 0; i < arg.length; i++) {
          const attr = arg[i];

          if (typeof attr === "object" && typeof attr.sort === "function" && attr[1] !== undefined && attr[1] !== null) {
            node.setAttribute(attr[0], attr[1]);
          }
        }
      } else if (typeof arg === "object") {
        for (const k in arg) {
          if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {
            node.setAttribute(k, arg[k]);
          }
        }
      }
    }

    return node;
  },

  /*  Function: xmlescape
   *  Excapes invalid xml characters.
   *
   *  Parameters:
   *     (String) text - text to escape.
   *
   *  Returns:
   *      Escaped text.
   */
  xmlescape(text) {
    text = text.replace(/\&/g, "&amp;");
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");
    text = text.replace(/'/g, "&apos;");
    text = text.replace(/"/g, "&quot;");
    return text;
  },

  /*  Function: xmlunescape
  *  Unexcapes invalid xml characters.
  *
  *  Parameters:
  *     (String) text - text to unescape.
  *
  *  Returns:
  *      Unescaped text.
  */
  xmlunescape(text) {
    text = text.replace(/\&amp;/g, "&");
    text = text.replace(/&lt;/g, "<");
    text = text.replace(/&gt;/g, ">");
    text = text.replace(/&apos;/g, "'");
    text = text.replace(/&quot;/g, "\"");
    return text;
  },

  /** Function: xmlTextNode
   *  Creates an XML DOM text node.
   *
   *  Provides a cross implementation version of document.createTextNode.
   *
   *  Parameters:
   *    (String) text - The content of the text node.
   *
   *  Returns:
   *    A new XML DOM text node.
   */
  xmlTextNode(text) {
    return Strophe.xmlGenerator().createTextNode(text);
  },

  /** Function: xmlHtmlNode
   *  Creates an XML DOM html node.
   *
   *  Parameters:
   *    (String) html - The content of the html node.
   *
   *  Returns:
   *    A new XML DOM text node.
   */
  xmlHtmlNode(html) {
    let node; //ensure text is escaped

    if (_shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser) {
      const parser = new _shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser();
      node = parser.parseFromString(html, "text/xml");
    } else {
      node = new ActiveXObject("Microsoft.XMLDOM");
      node.async = "false";
      node.loadXML(html);
    }

    return node;
  },

  /** Function: getText
   *  Get the concatenation of all text children of an element.
   *
   *  Parameters:
   *    (XMLElement) elem - A DOM element.
   *
   *  Returns:
   *    A String with the concatenated text of all text element children.
   */
  getText(elem) {
    if (!elem) {
      return null;
    }

    let str = "";

    if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {
      str += elem.nodeValue;
    }

    for (let i = 0; i < elem.childNodes.length; i++) {
      if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {
        str += elem.childNodes[i].nodeValue;
      }
    }

    return Strophe.xmlescape(str);
  },

  /** Function: copyElement
   *  Copy an XML DOM element.
   *
   *  This function copies a DOM element and all its descendants and returns
   *  the new copy.
   *
   *  Parameters:
   *    (XMLElement) elem - A DOM element.
   *
   *  Returns:
   *    A new, copied DOM element tree.
   */
  copyElement(elem) {
    let el;

    if (elem.nodeType === Strophe.ElementType.NORMAL) {
      el = Strophe.xmlElement(elem.tagName);

      for (let i = 0; i < elem.attributes.length; i++) {
        el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);
      }

      for (let i = 0; i < elem.childNodes.length; i++) {
        el.appendChild(Strophe.copyElement(elem.childNodes[i]));
      }
    } else if (elem.nodeType === Strophe.ElementType.TEXT) {
      el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);
    }

    return el;
  },

  /** Function: createHtml
   *  Copy an HTML DOM element into an XML DOM.
   *
   *  This function copies a DOM element and all its descendants and returns
   *  the new copy.
   *
   *  Parameters:
   *    (HTMLElement) elem - A DOM element.
   *
   *  Returns:
   *    A new, copied DOM element tree.
   */
  createHtml(elem) {
    let el;

    if (elem.nodeType === Strophe.ElementType.NORMAL) {
      const tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.

      if (Strophe.XHTML.validTag(tag)) {
        try {
          el = Strophe.xmlElement(tag);

          for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {
            const attribute = Strophe.XHTML.attributes[tag][i];
            let value = elem.getAttribute(attribute);

            if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {
              continue;
            }

            if (attribute === 'style' && typeof value === 'object' && typeof value.cssText !== 'undefined') {
              value = value.cssText; // we're dealing with IE, need to get CSS out
            } // filter out invalid css styles


            if (attribute === 'style') {
              const css = [];
              const cssAttrs = value.split(';');

              for (let j = 0; j < cssAttrs.length; j++) {
                const attr = cssAttrs[j].split(':');
                const cssName = attr[0].replace(/^\s*/, "").replace(/\s*$/, "").toLowerCase();

                if (Strophe.XHTML.validCSS(cssName)) {
                  const cssValue = attr[1].replace(/^\s*/, "").replace(/\s*$/, "");
                  css.push(cssName + ': ' + cssValue);
                }
              }

              if (css.length > 0) {
                value = css.join('; ');
                el.setAttribute(attribute, value);
              }
            } else {
              el.setAttribute(attribute, value);
            }
          }

          for (let i = 0; i < elem.childNodes.length; i++) {
            el.appendChild(Strophe.createHtml(elem.childNodes[i]));
          }
        } catch (e) {
          // invalid elements
          el = Strophe.xmlTextNode('');
        }
      } else {
        el = Strophe.xmlGenerator().createDocumentFragment();

        for (let i = 0; i < elem.childNodes.length; i++) {
          el.appendChild(Strophe.createHtml(elem.childNodes[i]));
        }
      }
    } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {
      el = Strophe.xmlGenerator().createDocumentFragment();

      for (let i = 0; i < elem.childNodes.length; i++) {
        el.appendChild(Strophe.createHtml(elem.childNodes[i]));
      }
    } else if (elem.nodeType === Strophe.ElementType.TEXT) {
      el = Strophe.xmlTextNode(elem.nodeValue);
    }

    return el;
  },

  /** Function: escapeNode
   *  Escape the node part (also called local part) of a JID.
   *
   *  Parameters:
   *    (String) node - A node (or local part).
   *
   *  Returns:
   *    An escaped node (or local part).
   */
  escapeNode(node) {
    if (typeof node !== "string") {
      return node;
    }

    return node.replace(/^\s+|\s+$/g, '').replace(/\\/g, "\\5c").replace(/ /g, "\\20").replace(/\"/g, "\\22").replace(/\&/g, "\\26").replace(/\'/g, "\\27").replace(/\//g, "\\2f").replace(/:/g, "\\3a").replace(/</g, "\\3c").replace(/>/g, "\\3e").replace(/@/g, "\\40");
  },

  /** Function: unescapeNode
   *  Unescape a node part (also called local part) of a JID.
   *
   *  Parameters:
   *    (String) node - A node (or local part).
   *
   *  Returns:
   *    An unescaped node (or local part).
   */
  unescapeNode(node) {
    if (typeof node !== "string") {
      return node;
    }

    return node.replace(/\\20/g, " ").replace(/\\22/g, '"').replace(/\\26/g, "&").replace(/\\27/g, "'").replace(/\\2f/g, "/").replace(/\\3a/g, ":").replace(/\\3c/g, "<").replace(/\\3e/g, ">").replace(/\\40/g, "@").replace(/\\5c/g, "\\");
  },

  /** Function: getNodeFromJid
   *  Get the node portion of a JID String.
   *
   *  Parameters:
   *    (String) jid - A JID.
   *
   *  Returns:
   *    A String containing the node.
   */
  getNodeFromJid(jid) {
    if (jid.indexOf("@") < 0) {
      return null;
    }

    return jid.split("@")[0];
  },

  /** Function: getDomainFromJid
   *  Get the domain portion of a JID String.
   *
   *  Parameters:
   *    (String) jid - A JID.
   *
   *  Returns:
   *    A String containing the domain.
   */
  getDomainFromJid(jid) {
    const bare = Strophe.getBareJidFromJid(jid);

    if (bare.indexOf("@") < 0) {
      return bare;
    } else {
      const parts = bare.split("@");
      parts.splice(0, 1);
      return parts.join('@');
    }
  },

  /** Function: getResourceFromJid
   *  Get the resource portion of a JID String.
   *
   *  Parameters:
   *    (String) jid - A JID.
   *
   *  Returns:
   *    A String containing the resource.
   */
  getResourceFromJid(jid) {
    if (!jid) {
      return null;
    }

    const s = jid.split("/");

    if (s.length < 2) {
      return null;
    }

    s.splice(0, 1);
    return s.join('/');
  },

  /** Function: getBareJidFromJid
   *  Get the bare JID from a JID String.
   *
   *  Parameters:
   *    (String) jid - A JID.
   *
   *  Returns:
   *    A String containing the bare JID.
   */
  getBareJidFromJid(jid) {
    return jid ? jid.split("/")[0] : null;
  },

  /** PrivateFunction: _handleError
   *  _Private_ function that properly logs an error to the console
   */
  _handleError(e) {
    if (typeof e.stack !== "undefined") {
      Strophe.fatal(e.stack);
    }

    if (e.sourceURL) {
      Strophe.fatal("error: " + this.handler + " " + e.sourceURL + ":" + e.line + " - " + e.name + ": " + e.message);
    } else if (e.fileName) {
      Strophe.fatal("error: " + this.handler + " " + e.fileName + ":" + e.lineNumber + " - " + e.name + ": " + e.message);
    } else {
      Strophe.fatal("error: " + e.message);
    }
  },

  /** Function: log
   *  User overrideable logging function.
   *
   *  This function is called whenever the Strophe library calls any
   *  of the logging functions.  The default implementation of this
   *  function logs only fatal errors.  If client code wishes to handle the logging
   *  messages, it should override this with
   *  > Strophe.log = function (level, msg) {
   *  >   (user code here)
   *  > };
   *
   *  Please note that data sent and received over the wire is logged
   *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().
   *
   *  The different levels and their meanings are
   *
   *    DEBUG - Messages useful for debugging purposes.
   *    INFO - Informational messages.  This is mostly information like
   *      'disconnect was called' or 'SASL auth succeeded'.
   *    WARN - Warnings about potential problems.  This is mostly used
   *      to report transient connection errors like request timeouts.
   *    ERROR - Some error occurred.
   *    FATAL - A non-recoverable fatal error occurred.
   *
   *  Parameters:
   *    (Integer) level - The log level of the log message.  This will
   *      be one of the values in Strophe.LogLevel.
   *    (String) msg - The log message.
   */
  log(level, msg) {
    if (level === this.LogLevel.FATAL) {
      var _console;

      (_console = console) === null || _console === void 0 ? void 0 : _console.error(msg);
    }
  },

  /** Function: debug
   *  Log a message at the Strophe.LogLevel.DEBUG level.
   *
   *  Parameters:
   *    (String) msg - The log message.
   */
  debug(msg) {
    this.log(this.LogLevel.DEBUG, msg);
  },

  /** Function: info
   *  Log a message at the Strophe.LogLevel.INFO level.
   *
   *  Parameters:
   *    (String) msg - The log message.
   */
  info(msg) {
    this.log(this.LogLevel.INFO, msg);
  },

  /** Function: warn
   *  Log a message at the Strophe.LogLevel.WARN level.
   *
   *  Parameters:
   *    (String) msg - The log message.
   */
  warn(msg) {
    this.log(this.LogLevel.WARN, msg);
  },

  /** Function: error
   *  Log a message at the Strophe.LogLevel.ERROR level.
   *
   *  Parameters:
   *    (String) msg - The log message.
   */
  error(msg) {
    this.log(this.LogLevel.ERROR, msg);
  },

  /** Function: fatal
   *  Log a message at the Strophe.LogLevel.FATAL level.
   *
   *  Parameters:
   *    (String) msg - The log message.
   */
  fatal(msg) {
    this.log(this.LogLevel.FATAL, msg);
  },

  /** Function: serialize
   *  Render a DOM element and all descendants to a String.
   *
   *  Parameters:
   *    (XMLElement) elem - A DOM element.
   *
   *  Returns:
   *    The serialized element tree as a String.
   */
  serialize(elem) {
    if (!elem) {
      return null;
    }

    if (typeof elem.tree === "function") {
      elem = elem.tree();
    }

    const names = [...Array(elem.attributes.length).keys()].map(i => elem.attributes[i].nodeName);
    names.sort();
    let result = names.reduce((a, n) => `${a} ${n}="${Strophe.xmlescape(elem.attributes.getNamedItem(n).value)}"`, `<${elem.nodeName}`);

    if (elem.childNodes.length > 0) {
      result += ">";

      for (let i = 0; i < elem.childNodes.length; i++) {
        const child = elem.childNodes[i];

        switch (child.nodeType) {
          case Strophe.ElementType.NORMAL:
            // normal element, so recurse
            result += Strophe.serialize(child);
            break;

          case Strophe.ElementType.TEXT:
            // text element to escape values
            result += Strophe.xmlescape(child.nodeValue);
            break;

          case Strophe.ElementType.CDATA:
            // cdata section so don't escape values
            result += "<![CDATA[" + child.nodeValue + "]]>";
        }
      }

      result += "</" + elem.nodeName + ">";
    } else {
      result += "/>";
    }

    return result;
  },

  /** PrivateVariable: _requestId
   *  _Private_ variable that keeps track of the request ids for
   *  connections.
   */
  _requestId: 0,

  /** PrivateVariable: Strophe.connectionPlugins
   *  _Private_ variable Used to store plugin names that need
   *  initialization on Strophe.Connection construction.
   */
  _connectionPlugins: {},

  /** Function: addConnectionPlugin
   *  Extends the Strophe.Connection object with the given plugin.
   *
   *  Parameters:
   *    (String) name - The name of the extension.
   *    (Object) ptype - The plugin's prototype.
   */
  addConnectionPlugin(name, ptype) {
    Strophe._connectionPlugins[name] = ptype;
  }

};
/** Class: Strophe.Builder
 *  XML DOM builder.
 *
 *  This object provides an interface similar to JQuery but for building
 *  DOM elements easily and rapidly.  All the functions except for toString()
 *  and tree() return the object, so calls can be chained.  Here's an
 *  example using the $iq() builder helper.
 *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})
 *  >     .c('query', {xmlns: 'strophe:example'})
 *  >     .c('example')
 *  >     .toString()
 *
 *  The above generates this XML fragment
 *  > <iq to='you' from='me' type='get' id='1'>
 *  >   <query xmlns='strophe:example'>
 *  >     <example/>
 *  >   </query>
 *  > </iq>
 *  The corresponding DOM manipulations to get a similar fragment would be
 *  a lot more tedious and probably involve several helper variables.
 *
 *  Since adding children makes new operations operate on the child, up()
 *  is provided to traverse up the tree.  To add two children, do
 *  > builder.c('child1', ...).up().c('child2', ...)
 *  The next operation on the Builder will be relative to the second child.
 */

/** Constructor: Strophe.Builder
 *  Create a Strophe.Builder object.
 *
 *  The attributes should be passed in object notation.  For example
 *  > let b = new Builder('message', {to: 'you', from: 'me'});
 *  or
 *  > let b = new Builder('messsage', {'xml:lang': 'en'});
 *
 *  Parameters:
 *    (String) name - The name of the root element.
 *    (Object) attrs - The attributes for the root element in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder.
 */

Strophe.Builder = class Builder {
  constructor(name, attrs) {
    // Set correct namespace for jabber:client elements
    if (name === "presence" || name === "message" || name === "iq") {
      if (attrs && !attrs.xmlns) {
        attrs.xmlns = Strophe.NS.CLIENT;
      } else if (!attrs) {
        attrs = {
          xmlns: Strophe.NS.CLIENT
        };
      }
    } // Holds the tree being built.


    this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.

    this.node = this.nodeTree;
  }
  /** Function: tree
   *  Return the DOM tree.
   *
   *  This function returns the current DOM tree as an element object.  This
   *  is suitable for passing to functions like Strophe.Connection.send().
   *
   *  Returns:
   *    The DOM tree as a element object.
   */


  tree() {
    return this.nodeTree;
  }
  /** Function: toString
   *  Serialize the DOM tree to a String.
   *
   *  This function returns a string serialization of the current DOM
   *  tree.  It is often used internally to pass data to a
   *  Strophe.Request object.
   *
   *  Returns:
   *    The serialized DOM tree in a String.
   */


  toString() {
    return Strophe.serialize(this.nodeTree);
  }
  /** Function: up
   *  Make the current parent element the new current element.
   *
   *  This function is often used after c() to traverse back up the tree.
   *  For example, to add two children to the same element
   *  > builder.c('child1', {}).up().c('child2', {});
   *
   *  Returns:
   *    The Stophe.Builder object.
   */


  up() {
    this.node = this.node.parentNode;
    return this;
  }
  /** Function: root
   *  Make the root element the new current element.
   *
   *  When at a deeply nested element in the tree, this function can be used
   *  to jump back to the root of the tree, instead of having to repeatedly
   *  call up().
   *
   *  Returns:
   *    The Stophe.Builder object.
   */


  root() {
    this.node = this.nodeTree;
    return this;
  }
  /** Function: attrs
   *  Add or modify attributes of the current element.
   *
   *  The attributes should be passed in object notation.  This function
   *  does not move the current element pointer.
   *
   *  Parameters:
   *    (Object) moreattrs - The attributes to add/modify in object notation.
   *
   *  Returns:
   *    The Strophe.Builder object.
   */


  attrs(moreattrs) {
    for (const k in moreattrs) {
      if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {
        if (moreattrs[k] === undefined) {
          this.node.removeAttribute(k);
        } else {
          this.node.setAttribute(k, moreattrs[k]);
        }
      }
    }

    return this;
  }
  /** Function: c
   *  Add a child to the current element and make it the new current
   *  element.
   *
   *  This function moves the current element pointer to the child,
   *  unless text is provided.  If you need to add another child, it
   *  is necessary to use up() to go back to the parent in the tree.
   *
   *  Parameters:
   *    (String) name - The name of the child.
   *    (Object) attrs - The attributes of the child in object notation.
   *    (String) text - The text to add to the child.
   *
   *  Returns:
   *    The Strophe.Builder object.
   */


  c(name, attrs, text) {
    const child = Strophe.xmlElement(name, attrs, text);
    this.node.appendChild(child);

    if (typeof text !== "string" && typeof text !== "number") {
      this.node = child;
    }

    return this;
  }
  /** Function: cnode
   *  Add a child to the current element and make it the new current
   *  element.
   *
   *  This function is the same as c() except that instead of using a
   *  name and an attributes object to create the child it uses an
   *  existing DOM element object.
   *
   *  Parameters:
   *    (XMLElement) elem - A DOM element.
   *
   *  Returns:
   *    The Strophe.Builder object.
   */


  cnode(elem) {
    let impNode;
    const xmlGen = Strophe.xmlGenerator();

    try {
      impNode = xmlGen.importNode !== undefined;
    } catch (e) {
      impNode = false;
    }

    const newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);
    this.node.appendChild(newElem);
    this.node = newElem;
    return this;
  }
  /** Function: t
   *  Add a child text element.
   *
   *  This *does not* make the child the new current element since there
   *  are no children of text elements.
   *
   *  Parameters:
   *    (String) text - The text data to append to the current element.
   *
   *  Returns:
   *    The Strophe.Builder object.
   */


  t(text) {
    const child = Strophe.xmlTextNode(text);
    this.node.appendChild(child);
    return this;
  }
  /** Function: h
   *  Replace current element contents with the HTML passed in.
   *
   *  This *does not* make the child the new current element
   *
   *  Parameters:
   *    (String) html - The html to insert as contents of current element.
   *
   *  Returns:
   *    The Strophe.Builder object.
   */


  h(html) {
    const fragment = Strophe.xmlGenerator().createElement('body'); // force the browser to try and fix any invalid HTML tags

    fragment.innerHTML = html; // copy cleaned html into an xml dom

    const xhtml = Strophe.createHtml(fragment);

    while (xhtml.childNodes.length > 0) {
      this.node.appendChild(xhtml.childNodes[0]);
    }

    return this;
  }

};
/** PrivateClass: Strophe.Handler
 *  _Private_ helper class for managing stanza handlers.
 *
 *  A Strophe.Handler encapsulates a user provided callback function to be
 *  executed when matching stanzas are received by the connection.
 *  Handlers can be either one-off or persistant depending on their
 *  return value. Returning true will cause a Handler to remain active, and
 *  returning false will remove the Handler.
 *
 *  Users will not use Strophe.Handler objects directly, but instead they
 *  will use Strophe.Connection.addHandler() and
 *  Strophe.Connection.deleteHandler().
 */

/** PrivateConstructor: Strophe.Handler
 *  Create and initialize a new Strophe.Handler.
 *
 *  Parameters:
 *    (Function) handler - A function to be executed when the handler is run.
 *    (String) ns - The namespace to match.
 *    (String) name - The element name to match.
 *    (String) type - The element type to match.
 *    (String) id - The element id attribute to match.
 *    (String) from - The element from attribute to match.
 *    (Object) options - Handler options
 *
 *  Returns:
 *    A new Strophe.Handler object.
 */

Strophe.Handler = function (handler, ns, name, type, id, from, options) {
  this.handler = handler;
  this.ns = ns;
  this.name = name;
  this.type = type;
  this.id = id;
  this.options = options || {
    'matchBareFromJid': false,
    'ignoreNamespaceFragment': false
  }; // BBB: Maintain backward compatibility with old `matchBare` option

  if (this.options.matchBare) {
    Strophe.warn('The "matchBare" option is deprecated, use "matchBareFromJid" instead.');
    this.options.matchBareFromJid = this.options.matchBare;
    delete this.options.matchBare;
  }

  if (this.options.matchBareFromJid) {
    this.from = from ? Strophe.getBareJidFromJid(from) : null;
  } else {
    this.from = from;
  } // whether the handler is a user handler or a system handler


  this.user = true;
};

Strophe.Handler.prototype = {
  /** PrivateFunction: getNamespace
   *  Returns the XML namespace attribute on an element.
   *  If `ignoreNamespaceFragment` was passed in for this handler, then the
   *  URL fragment will be stripped.
   *
   *  Parameters:
   *    (XMLElement) elem - The XML element with the namespace.
   *
   *  Returns:
   *    The namespace, with optionally the fragment stripped.
   */
  getNamespace(elem) {
    let elNamespace = elem.getAttribute("xmlns");

    if (elNamespace && this.options.ignoreNamespaceFragment) {
      elNamespace = elNamespace.split('#')[0];
    }

    return elNamespace;
  },

  /** PrivateFunction: namespaceMatch
   *  Tests if a stanza matches the namespace set for this Strophe.Handler.
   *
   *  Parameters:
   *    (XMLElement) elem - The XML element to test.
   *
   *  Returns:
   *    true if the stanza matches and false otherwise.
   */
  namespaceMatch(elem) {
    let nsMatch = false;

    if (!this.ns) {
      return true;
    } else {
      Strophe.forEachChild(elem, null, elem => {
        if (this.getNamespace(elem) === this.ns) {
          nsMatch = true;
        }
      });
      return nsMatch || this.getNamespace(elem) === this.ns;
    }
  },

  /** PrivateFunction: isMatch
   *  Tests if a stanza matches the Strophe.Handler.
   *
   *  Parameters:
   *    (XMLElement) elem - The XML element to test.
   *
   *  Returns:
   *    true if the stanza matches and false otherwise.
   */
  isMatch(elem) {
    let from = elem.getAttribute('from');

    if (this.options.matchBareFromJid) {
      from = Strophe.getBareJidFromJid(from);
    }

    const elem_type = elem.getAttribute("type");

    if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute("id") === this.id) && (!this.from || from === this.from)) {
      return true;
    }

    return false;
  },

  /** PrivateFunction: run
   *  Run the callback on a matching stanza.
   *
   *  Parameters:
   *    (XMLElement) elem - The DOM element that triggered the
   *      Strophe.Handler.
   *
   *  Returns:
   *    A boolean indicating if the handler should remain active.
   */
  run(elem) {
    let result = null;

    try {
      result = this.handler(elem);
    } catch (e) {
      Strophe._handleError(e);

      throw e;
    }

    return result;
  },

  /** PrivateFunction: toString
   *  Get a String representation of the Strophe.Handler object.
   *
   *  Returns:
   *    A String.
   */
  toString() {
    return "{Handler: " + this.handler + "(" + this.name + "," + this.id + "," + this.ns + ")}";
  }

};
/** PrivateClass: Strophe.TimedHandler
 *  _Private_ helper class for managing timed handlers.
 *
 *  A Strophe.TimedHandler encapsulates a user provided callback that
 *  should be called after a certain period of time or at regular
 *  intervals.  The return value of the callback determines whether the
 *  Strophe.TimedHandler will continue to fire.
 *
 *  Users will not use Strophe.TimedHandler objects directly, but instead
 *  they will use Strophe.Connection.addTimedHandler() and
 *  Strophe.Connection.deleteTimedHandler().
 */

Strophe.TimedHandler = class TimedHandler {
  /** PrivateConstructor: Strophe.TimedHandler
   *  Create and initialize a new Strophe.TimedHandler object.
   *
   *  Parameters:
   *    (Integer) period - The number of milliseconds to wait before the
   *      handler is called.
   *    (Function) handler - The callback to run when the handler fires.  This
   *      function should take no arguments.
   *
   *  Returns:
   *    A new Strophe.TimedHandler object.
   */
  constructor(period, handler) {
    this.period = period;
    this.handler = handler;
    this.lastCalled = new Date().getTime();
    this.user = true;
  }
  /** PrivateFunction: run
   *  Run the callback for the Strophe.TimedHandler.
   *
   *  Returns:
   *    true if the Strophe.TimedHandler should be called again, and false
   *      otherwise.
   */


  run() {
    this.lastCalled = new Date().getTime();
    return this.handler();
  }
  /** PrivateFunction: reset
   *  Reset the last called time for the Strophe.TimedHandler.
   */


  reset() {
    this.lastCalled = new Date().getTime();
  }
  /** PrivateFunction: toString
   *  Get a string representation of the Strophe.TimedHandler object.
   *
   *  Returns:
   *    The string representation.
   */


  toString() {
    return "{TimedHandler: " + this.handler + "(" + this.period + ")}";
  }

};
/** Class: Strophe.Connection
 *  XMPP Connection manager.
 *
 *  This class is the main part of Strophe.  It manages a BOSH or websocket
 *  connection to an XMPP server and dispatches events to the user callbacks
 *  as data arrives. It supports SASL PLAIN, SASL SCRAM-SHA-1
 *  and legacy authentication.
 *
 *  After creating a Strophe.Connection object, the user will typically
 *  call connect() with a user supplied callback to handle connection level
 *  events like authentication failure, disconnection, or connection
 *  complete.
 *
 *  The user will also have several event handlers defined by using
 *  addHandler() and addTimedHandler().  These will allow the user code to
 *  respond to interesting stanzas or do something periodically with the
 *  connection. These handlers will be active once authentication is
 *  finished.
 *
 *  To send data to the connection, use send().
 */

/** Constructor: Strophe.Connection
 *  Create and initialize a Strophe.Connection object.
 *
 *  The transport-protocol for this connection will be chosen automatically
 *  based on the given service parameter. URLs starting with "ws://" or
 *  "wss://" will use WebSockets, URLs starting with "http://", "https://"
 *  or without a protocol will use BOSH.
 *
 *  To make Strophe connect to the current host you can leave out the protocol
 *  and host part and just pass the path, e.g.
 *
 *  > let conn = new Strophe.Connection("/http-bind/");
 *
 *  Options common to both Websocket and BOSH:
 *  ------------------------------------------
 *
 *  cookies:
 *
 *  The *cookies* option allows you to pass in cookies to be added to the
 *  document. These cookies will then be included in the BOSH XMLHttpRequest
 *  or in the websocket connection.
 *
 *  The passed in value must be a map of cookie names and string values.
 *
 *  > { "myCookie": {
 *  >     "value": "1234",
 *  >     "domain": ".example.org",
 *  >     "path": "/",
 *  >     "expires": expirationDate
 *  >     }
 *  > }
 *
 *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).
 *  Those cookies need to be set under those domains, for example they can be
 *  set server-side by making a XHR call to that domain to ask it to set any
 *  necessary cookies.
 *
 *  mechanisms:
 *
 *  The *mechanisms* option allows you to specify the SASL mechanisms that this
 *  instance of Strophe.Connection (and therefore your XMPP client) will
 *  support.
 *
 *  The value must be an array of objects with Strophe.SASLMechanism
 *  prototypes.
 *
 *  If nothing is specified, then the following mechanisms (and their
 *  priorities) are registered:
 *
 *      SCRAM-SHA-1 - 60
 *      PLAIN       - 50
 *      OAUTHBEARER - 40
 *      X-OAUTH2    - 30
 *      ANONYMOUS   - 20
 *      EXTERNAL    - 10
 *
 *  explicitResourceBinding:
 *
 *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client
 *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP
 *  server has advertised the "urn:ietf:params:xml:ns:xmpp-bind" feature.
 *
 *  Making this step explicit allows client authors to first finish other
 *  stream related tasks, such as setting up an XEP-0198 Stream Management
 *  session, before binding the JID resource for this session.
 *
 *  WebSocket options:
 *  ------------------
 *
 *  protocol:
 *
 *  If you want to connect to the current host with a WebSocket connection you
 *  can tell Strophe to use WebSockets through a "protocol" attribute in the
 *  optional options parameter. Valid values are "ws" for WebSocket and "wss"
 *  for Secure WebSocket.
 *  So to connect to "wss://CURRENT_HOSTNAME/xmpp-websocket" you would call
 *
 *  > let conn = new Strophe.Connection("/xmpp-websocket/", {protocol: "wss"});
 *
 *  Note that relative URLs _NOT_ starting with a "/" will also include the path
 *  of the current site.
 *
 *  Also because downgrading security is not permitted by browsers, when using
 *  relative URLs both BOSH and WebSocket connections will use their secure
 *  variants if the current connection to the site is also secure (https).
 *
 *  worker:
 *
 *  Set this option to URL from where the shared worker script should be loaded.
 *
 *  To run the websocket connection inside a shared worker.
 *  This allows you to share a single websocket-based connection between
 *  multiple Strophe.Connection instances, for example one per browser tab.
 *
 *  The script to use is the one in `src/shared-connection-worker.js`.
 *
 *  BOSH options:
 *  -------------
 *
 *  By adding "sync" to the options, you can control if requests will
 *  be made synchronously or not. The default behaviour is asynchronous.
 *  If you want to make requests synchronous, make "sync" evaluate to true.
 *  > let conn = new Strophe.Connection("/http-bind/", {sync: true});
 *
 *  You can also toggle this on an already established connection.
 *  > conn.options.sync = true;
 *
 *  The *customHeaders* option can be used to provide custom HTTP headers to be
 *  included in the XMLHttpRequests made.
 *
 *  The *keepalive* option can be used to instruct Strophe to maintain the
 *  current BOSH session across interruptions such as webpage reloads.
 *
 *  It will do this by caching the sessions tokens in sessionStorage, and when
 *  "restore" is called it will check whether there are cached tokens with
 *  which it can resume an existing session.
 *
 *  The *withCredentials* option should receive a Boolean value and is used to
 *  indicate wether cookies should be included in ajax requests (by default
 *  they're not).
 *  Set this value to true if you are connecting to a BOSH service
 *  and for some reason need to send cookies to it.
 *  In order for this to work cross-domain, the server must also enable
 *  credentials by setting the Access-Control-Allow-Credentials response header
 *  to "true". For most usecases however this setting should be false (which
 *  is the default).
 *  Additionally, when using Access-Control-Allow-Credentials, the
 *  Access-Control-Allow-Origin header can't be set to the wildcard "*", but
 *  instead must be restricted to actual domains.
 *
 *  The *contentType* option can be set to change the default Content-Type
 *  of "text/xml; charset=utf-8", which can be useful to reduce the amount of
 *  CORS preflight requests that are sent to the server.
 *
 *  Parameters:
 *    (String) service - The BOSH or WebSocket service URL.
 *    (Object) options - A hash of configuration options
 *
 *  Returns:
 *    A new Strophe.Connection object.
 */

Strophe.Connection = class Connection {
  constructor(service, options) {
    // The service URL
    this.service = service; // Configuration options

    this.options = options || {};
    this.setProtocol();
    /* The connected JID. */

    this.jid = "";
    /* the JIDs domain */

    this.domain = null;
    /* stream:features */

    this.features = null; // SASL

    this._sasl_data = {};
    this.do_bind = false;
    this.do_session = false;
    this.mechanisms = {}; // handler lists

    this.timedHandlers = [];
    this.handlers = [];
    this.removeTimeds = [];
    this.removeHandlers = [];
    this.addTimeds = [];
    this.addHandlers = [];
    this.protocolErrorHandlers = {
      'HTTP': {},
      'websocket': {}
    };
    this._idleTimeout = null;
    this._disconnectTimeout = null;
    this.authenticated = false;
    this.connected = false;
    this.disconnecting = false;
    this.do_authentication = true;
    this.paused = false;
    this.restored = false;
    this._data = [];
    this._uniqueId = 0;
    this._sasl_success_handler = null;
    this._sasl_failure_handler = null;
    this._sasl_challenge_handler = null; // Max retries before disconnecting

    this.maxRetries = 5; // Call onIdle callback every 1/10th of a second

    this._idleTimeout = setTimeout(() => this._onIdle(), 100);
    _utils__WEBPACK_IMPORTED_MODULE_10__["default"].addCookies(this.options.cookies);
    this.registerSASLMechanisms(this.options.mechanisms); // A client must always respond to incoming IQ "set" and "get" stanzas.
    // See https://datatracker.ietf.org/doc/html/rfc6120#section-8.2.3
    //
    // This is a fallback handler which gets called when no other handler
    // was called for a received IQ "set" or "get".

    this.iqFallbackHandler = new Strophe.Handler(iq => this.send($iq({
      type: 'error',
      id: iq.getAttribute('id')
    }).c('error', {
      'type': 'cancel'
    }).c('service-unavailable', {
      'xmlns': Strophe.NS.STANZAS
    })), null, 'iq', ['get', 'set']); // initialize plugins

    for (const k in Strophe._connectionPlugins) {
      if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {
        const F = function () {};

        F.prototype = Strophe._connectionPlugins[k];
        this[k] = new F();
        this[k].init(this);
      }
    }
  }
  /** Function: setProtocol
   *  Select protocal based on this.options or this.service
   */


  setProtocol() {
    const proto = this.options.protocol || "";

    if (this.options.worker) {
      this._proto = new Strophe.WorkerWebsocket(this);
    } else if (this.service.indexOf("ws:") === 0 || this.service.indexOf("wss:") === 0 || proto.indexOf("ws") === 0) {
      this._proto = new Strophe.Websocket(this);
    } else {
      this._proto = new Strophe.Bosh(this);
    }
  }
  /** Function: reset
   *  Reset the connection.
   *
   *  This function should be called after a connection is disconnected
   *  before that connection is reused.
   */


  reset() {
    this._proto._reset(); // SASL


    this.do_session = false;
    this.do_bind = false; // handler lists

    this.timedHandlers = [];
    this.handlers = [];
    this.removeTimeds = [];
    this.removeHandlers = [];
    this.addTimeds = [];
    this.addHandlers = [];
    this.authenticated = false;
    this.connected = false;
    this.disconnecting = false;
    this.restored = false;
    this._data = [];
    this._requests = [];
    this._uniqueId = 0;
  }
  /** Function: pause
   *  Pause the request manager.
   *
   *  This will prevent Strophe from sending any more requests to the
   *  server.  This is very useful for temporarily pausing
   *  BOSH-Connections while a lot of send() calls are happening quickly.
   *  This causes Strophe to send the data in a single request, saving
   *  many request trips.
   */


  pause() {
    this.paused = true;
  }
  /** Function: resume
   *  Resume the request manager.
   *
   *  This resumes after pause() has been called.
   */


  resume() {
    this.paused = false;
  }
  /** Function: getUniqueId
   *  Generate a unique ID for use in <iq/> elements.
   *
   *  All <iq/> stanzas are required to have unique id attributes.  This
   *  function makes creating these easy.  Each connection instance has
   *  a counter which starts from zero, and the value of this counter
   *  plus a colon followed by the suffix becomes the unique id. If no
   *  suffix is supplied, the counter is used as the unique id.
   *
   *  Suffixes are used to make debugging easier when reading the stream
   *  data, and their use is recommended.  The counter resets to 0 for
   *  every new connection for the same reason.  For connections to the
   *  same server that authenticate the same way, all the ids should be
   *  the same, which makes it easy to see changes.  This is useful for
   *  automated testing as well.
   *
   *  Parameters:
   *    (String) suffix - A optional suffix to append to the id.
   *
   *  Returns:
   *    A unique string to be used for the id attribute.
   */


  getUniqueId(suffix) {
    // eslint-disable-line class-methods-use-this
    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      const r = Math.random() * 16 | 0,
            v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });

    if (typeof suffix === "string" || typeof suffix === "number") {
      return uuid + ":" + suffix;
    } else {
      return uuid + "";
    }
  }
  /** Function: addProtocolErrorHandler
   *  Register a handler function for when a protocol (websocker or HTTP)
   *  error occurs.
   *
   *  NOTE: Currently only HTTP errors for BOSH requests are handled.
   *  Patches that handle websocket errors would be very welcome.
   *
   *  Parameters:
   *    (String) protocol - 'HTTP' or 'websocket'
   *    (Integer) status_code - Error status code (e.g 500, 400 or 404)
   *    (Function) callback - Function that will fire on Http error
   *
   *  Example:
   *  function onError(err_code){
   *    //do stuff
   *  }
   *
   *  let conn = Strophe.connect('http://example.com/http-bind');
   *  conn.addProtocolErrorHandler('HTTP', 500, onError);
   *  // Triggers HTTP 500 error and onError handler will be called
   *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);
   */


  addProtocolErrorHandler(protocol, status_code, callback) {
    this.protocolErrorHandlers[protocol][status_code] = callback;
  }
  /** Function: connect
   *  Starts the connection process.
   *
   *  As the connection process proceeds, the user supplied callback will
   *  be triggered multiple times with status updates.  The callback
   *  should take two arguments - the status code and the error condition.
   *
   *  The status code will be one of the values in the Strophe.Status
   *  constants.  The error condition will be one of the conditions
   *  defined in RFC 3920 or the condition 'strophe-parsererror'.
   *
   *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant
   *  for BOSH connections. Please see XEP 124 for a more detailed explanation
   *  of the optional parameters.
   *
   *  Parameters:
   *    (String) jid - The user's JID.  This may be a bare JID,
   *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or
   *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will
   *      process the provided password value as an access token).
   *    (String) pass - The user's password.
   *    (Function) callback - The connect callback function.
   *    (Integer) wait - The optional HTTPBIND wait value.  This is the
   *      time the server will wait before returning an empty result for
   *      a request.  The default setting of 60 seconds is recommended.
   *    (Integer) hold - The optional HTTPBIND hold value.  This is the
   *      number of connections the server will hold at one time.  This
   *      should almost always be set to 1 (the default).
   *    (String) route - The optional route value.
   *    (String) authcid - The optional alternative authentication identity
   *      (username) if intending to impersonate another user.
   *      When using the SASL-EXTERNAL authentication mechanism, for example
   *      with client certificates, then the authcid value is used to
   *      determine whether an authorization JID (authzid) should be sent to
   *      the server. The authzid should NOT be sent to the server if the
   *      authzid and authcid are the same. So to prevent it from being sent
   *      (for example when the JID is already contained in the client
   *      certificate), set authcid to that same JID. See XEP-178 for more
   *      details.
   *     (Integer) disconnection_timeout - The optional disconnection timeout
   *      in milliseconds before _doDisconnect will be called.
   */


  connect(jid, pass, callback, wait, hold, route, authcid) {
    let disconnection_timeout = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 3000;
    this.jid = jid;
    /** Variable: authzid
     *  Authorization identity.
     */

    this.authzid = Strophe.getBareJidFromJid(this.jid);
    /** Variable: authcid
     *  Authentication identity (User name).
     */

    this.authcid = authcid || Strophe.getNodeFromJid(this.jid);
    /** Variable: pass
     *  Authentication identity (User password).
     */

    this.pass = pass;
    this.connect_callback = callback;
    this.disconnecting = false;
    this.connected = false;
    this.authenticated = false;
    this.restored = false;
    this.disconnection_timeout = disconnection_timeout; // parse jid for domain

    this.domain = Strophe.getDomainFromJid(this.jid);

    this._changeConnectStatus(Strophe.Status.CONNECTING, null);

    this._proto._connect(wait, hold, route);
  }
  /** Function: attach
   *  Attach to an already created and authenticated BOSH session.
   *
   *  This function is provided to allow Strophe to attach to BOSH
   *  sessions which have been created externally, perhaps by a Web
   *  application.  This is often used to support auto-login type features
   *  without putting user credentials into the page.
   *
   *  Parameters:
   *    (String) jid - The full JID that is bound by the session.
   *    (String) sid - The SID of the BOSH session.
   *    (String) rid - The current RID of the BOSH session.  This RID
   *      will be used by the next request.
   *    (Function) callback The connect callback function.
   *    (Integer) wait - The optional HTTPBIND wait value.  This is the
   *      time the server will wait before returning an empty result for
   *      a request.  The default setting of 60 seconds is recommended.
   *      Other settings will require tweaks to the Strophe.TIMEOUT value.
   *    (Integer) hold - The optional HTTPBIND hold value.  This is the
   *      number of connections the server will hold at one time.  This
   *      should almost always be set to 1 (the default).
   *    (Integer) wind - The optional HTTBIND window value.  This is the
   *      allowed range of request ids that are valid.  The default is 5.
   */


  attach(jid, sid, rid, callback, wait, hold, wind) {
    if (this._proto._attach) {
      return this._proto._attach(jid, sid, rid, callback, wait, hold, wind);
    } else {
      const error = new Error('The "attach" method is not available for your connection protocol');
      error.name = 'StropheSessionError';
      throw error;
    }
  }
  /** Function: restore
   *  Attempt to restore a cached BOSH session.
   *
   *  This function is only useful in conjunction with providing the
   *  "keepalive":true option when instantiating a new Strophe.Connection.
   *
   *  When "keepalive" is set to true, Strophe will cache the BOSH tokens
   *  RID (Request ID) and SID (Session ID) and then when this function is
   *  called, it will attempt to restore the session from those cached
   *  tokens.
   *
   *  This function must therefore be called instead of connect or attach.
   *
   *  For an example on how to use it, please see examples/restore.js
   *
   *  Parameters:
   *    (String) jid - The user's JID.  This may be a bare JID or a full JID.
   *    (Function) callback - The connect callback function.
   *    (Integer) wait - The optional HTTPBIND wait value.  This is the
   *      time the server will wait before returning an empty result for
   *      a request.  The default setting of 60 seconds is recommended.
   *    (Integer) hold - The optional HTTPBIND hold value.  This is the
   *      number of connections the server will hold at one time.  This
   *      should almost always be set to 1 (the default).
   *    (Integer) wind - The optional HTTBIND window value.  This is the
   *      allowed range of request ids that are valid.  The default is 5.
   */


  restore(jid, callback, wait, hold, wind) {
    if (this._sessionCachingSupported()) {
      this._proto._restore(jid, callback, wait, hold, wind);
    } else {
      const error = new Error('The "restore" method can only be used with a BOSH connection.');
      error.name = 'StropheSessionError';
      throw error;
    }
  }
  /** PrivateFunction: _sessionCachingSupported
   * Checks whether sessionStorage and JSON are supported and whether we're
   * using BOSH.
   */


  _sessionCachingSupported() {
    if (this._proto instanceof Strophe.Bosh) {
      if (!JSON) {
        return false;
      }

      try {
        sessionStorage.setItem('_strophe_', '_strophe_');
        sessionStorage.removeItem('_strophe_');
      } catch (e) {
        return false;
      }

      return true;
    }

    return false;
  }
  /** Function: xmlInput
   *  User overrideable function that receives XML data coming into the
   *  connection.
   *
   *  The default function does nothing.  User code can override this with
   *  > Strophe.Connection.xmlInput = function (elem) {
   *  >   (user code)
   *  > };
   *
   *  Due to limitations of current Browsers' XML-Parsers the opening and closing
   *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
   *
   *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See
   *  <Strophe.Bosh.strip> if you want to strip this tag.
   *
   *  Parameters:
   *    (XMLElement) elem - The XML data received by the connection.
   */


  xmlInput(elem) {
    // eslint-disable-line
    return;
  }
  /** Function: xmlOutput
   *  User overrideable function that receives XML data sent to the
   *  connection.
   *
   *  The default function does nothing.  User code can override this with
   *  > Strophe.Connection.xmlOutput = function (elem) {
   *  >   (user code)
   *  > };
   *
   *  Due to limitations of current Browsers' XML-Parsers the opening and closing
   *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
   *
   *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See
   *  <Strophe.Bosh.strip> if you want to strip this tag.
   *
   *  Parameters:
   *    (XMLElement) elem - The XMLdata sent by the connection.
   */


  xmlOutput(elem) {
    // eslint-disable-line
    return;
  }
  /** Function: rawInput
   *  User overrideable function that receives raw data coming into the
   *  connection.
   *
   *  The default function does nothing.  User code can override this with
   *  > Strophe.Connection.rawInput = function (data) {
   *  >   (user code)
   *  > };
   *
   *  Parameters:
   *    (String) data - The data received by the connection.
   */


  rawInput(data) {
    // eslint-disable-line
    return;
  }
  /** Function: rawOutput
   *  User overrideable function that receives raw data sent to the
   *  connection.
   *
   *  The default function does nothing.  User code can override this with
   *  > Strophe.Connection.rawOutput = function (data) {
   *  >   (user code)
   *  > };
   *
   *  Parameters:
   *    (String) data - The data sent by the connection.
   */


  rawOutput(data) {
    // eslint-disable-line
    return;
  }
  /** Function: nextValidRid
   *  User overrideable function that receives the new valid rid.
   *
   *  The default function does nothing. User code can override this with
   *  > Strophe.Connection.nextValidRid = function (rid) {
   *  >    (user code)
   *  > };
   *
   *  Parameters:
   *    (Number) rid - The next valid rid
   */


  nextValidRid(rid) {
    // eslint-disable-line
    return;
  }
  /** Function: send
   *  Send a stanza.
   *
   *  This function is called to push data onto the send queue to
   *  go out over the wire.  Whenever a request is sent to the BOSH
   *  server, all pending data is sent and the queue is flushed.
   *
   *  Parameters:
   *    (XMLElement |
   *     [XMLElement] |
   *     Strophe.Builder) elem - The stanza to send.
   */


  send(elem) {
    if (elem === null) {
      return;
    }

    if (typeof elem.sort === "function") {
      for (let i = 0; i < elem.length; i++) {
        this._queueData(elem[i]);
      }
    } else if (typeof elem.tree === "function") {
      this._queueData(elem.tree());
    } else {
      this._queueData(elem);
    }

    this._proto._send();
  }
  /** Function: flush
   *  Immediately send any pending outgoing data.
   *
   *  Normally send() queues outgoing data until the next idle period
   *  (100ms), which optimizes network use in the common cases when
   *  several send()s are called in succession. flush() can be used to
   *  immediately send all pending data.
   */


  flush() {
    // cancel the pending idle period and run the idle function
    // immediately
    clearTimeout(this._idleTimeout);

    this._onIdle();
  }
  /** Function: sendPresence
   *  Helper function to send presence stanzas. The main benefit is for
   *  sending presence stanzas for which you expect a responding presence
   *  stanza with the same id (for example when leaving a chat room).
   *
   *  Parameters:
   *    (XMLElement) elem - The stanza to send.
   *    (Function) callback - The callback function for a successful request.
   *    (Function) errback - The callback function for a failed or timed
   *      out request.  On timeout, the stanza will be null.
   *    (Integer) timeout - The time specified in milliseconds for a
   *      timeout to occur.
   *
   *  Returns:
   *    The id used to send the presence.
   */


  sendPresence(elem, callback, errback, timeout) {
    let timeoutHandler = null;

    if (typeof elem.tree === "function") {
      elem = elem.tree();
    }

    let id = elem.getAttribute('id');

    if (!id) {
      // inject id if not found
      id = this.getUniqueId("sendPresence");
      elem.setAttribute("id", id);
    }

    if (typeof callback === "function" || typeof errback === "function") {
      const handler = this.addHandler(stanza => {
        // remove timeout handler if there is one
        if (timeoutHandler) {
          this.deleteTimedHandler(timeoutHandler);
        }

        if (stanza.getAttribute('type') === 'error') {
          if (errback) {
            errback(stanza);
          }
        } else if (callback) {
          callback(stanza);
        }
      }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.

      if (timeout) {
        timeoutHandler = this.addTimedHandler(timeout, () => {
          // get rid of normal handler
          this.deleteHandler(handler); // call errback on timeout with null stanza

          if (errback) {
            errback(null);
          }

          return false;
        });
      }
    }

    this.send(elem);
    return id;
  }
  /** Function: sendIQ
   *  Helper function to send IQ stanzas.
   *
   *  Parameters:
   *    (XMLElement) elem - The stanza to send.
   *    (Function) callback - The callback function for a successful request.
   *    (Function) errback - The callback function for a failed or timed
   *      out request.  On timeout, the stanza will be null.
   *    (Integer) timeout - The time specified in milliseconds for a
   *      timeout to occur.
   *
   *  Returns:
   *    The id used to send the IQ.
  */


  sendIQ(elem, callback, errback, timeout) {
    let timeoutHandler = null;

    if (typeof elem.tree === "function") {
      elem = elem.tree();
    }

    let id = elem.getAttribute('id');

    if (!id) {
      // inject id if not found
      id = this.getUniqueId("sendIQ");
      elem.setAttribute("id", id);
    }

    if (typeof callback === "function" || typeof errback === "function") {
      const handler = this.addHandler(stanza => {
        // remove timeout handler if there is one
        if (timeoutHandler) {
          this.deleteTimedHandler(timeoutHandler);
        }

        const iqtype = stanza.getAttribute('type');

        if (iqtype === 'result') {
          if (callback) {
            callback(stanza);
          }
        } else if (iqtype === 'error') {
          if (errback) {
            errback(stanza);
          }
        } else {
          const error = new Error(`Got bad IQ type of ${iqtype}`);
          error.name = "StropheError";
          throw error;
        }
      }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.

      if (timeout) {
        timeoutHandler = this.addTimedHandler(timeout, () => {
          // get rid of normal handler
          this.deleteHandler(handler); // call errback on timeout with null stanza

          if (errback) {
            errback(null);
          }

          return false;
        });
      }
    }

    this.send(elem);
    return id;
  }
  /** PrivateFunction: _queueData
   *  Queue outgoing data for later sending.  Also ensures that the data
   *  is a DOMElement.
   */


  _queueData(element) {
    if (element === null || !element.tagName || !element.childNodes) {
      const error = new Error("Cannot queue non-DOMElement.");
      error.name = "StropheError";
      throw error;
    }

    this._data.push(element);
  }
  /** PrivateFunction: _sendRestart
   *  Send an xmpp:restart stanza.
   */


  _sendRestart() {
    this._data.push("restart");

    this._proto._sendRestart();

    this._idleTimeout = setTimeout(() => this._onIdle(), 100);
  }
  /** Function: addTimedHandler
   *  Add a timed handler to the connection.
   *
   *  This function adds a timed handler.  The provided handler will
   *  be called every period milliseconds until it returns false,
   *  the connection is terminated, or the handler is removed.  Handlers
   *  that wish to continue being invoked should return true.
   *
   *  Because of method binding it is necessary to save the result of
   *  this function if you wish to remove a handler with
   *  deleteTimedHandler().
   *
   *  Note that user handlers are not active until authentication is
   *  successful.
   *
   *  Parameters:
   *    (Integer) period - The period of the handler.
   *    (Function) handler - The callback function.
   *
   *  Returns:
   *    A reference to the handler that can be used to remove it.
   */


  addTimedHandler(period, handler) {
    const thand = new Strophe.TimedHandler(period, handler);
    this.addTimeds.push(thand);
    return thand;
  }
  /** Function: deleteTimedHandler
   *  Delete a timed handler for a connection.
   *
   *  This function removes a timed handler from the connection.  The
   *  handRef parameter is *not* the function passed to addTimedHandler(),
   *  but is the reference returned from addTimedHandler().
   *
   *  Parameters:
   *    (Strophe.TimedHandler) handRef - The handler reference.
   */


  deleteTimedHandler(handRef) {
    // this must be done in the Idle loop so that we don't change
    // the handlers during iteration
    this.removeTimeds.push(handRef);
  }
  /** Function: addHandler
   *  Add a stanza handler for the connection.
   *
   *  This function adds a stanza handler to the connection.  The
   *  handler callback will be called for any stanza that matches
   *  the parameters.  Note that if multiple parameters are supplied,
   *  they must all match for the handler to be invoked.
   *
   *  The handler will receive the stanza that triggered it as its argument.
   *  *The handler should return true if it is to be invoked again;
   *  returning false will remove the handler after it returns.*
   *
   *  As a convenience, the ns parameters applies to the top level element
   *  and also any of its immediate children.  This is primarily to make
   *  matching /iq/query elements easy.
   *
   *  Options
   *  ~~~~~~~
   *  With the options argument, you can specify boolean flags that affect how
   *  matches are being done.
   *
   *  Currently two flags exist:
   *
   *  - matchBareFromJid:
   *      When set to true, the from parameter and the
   *      from attribute on the stanza will be matched as bare JIDs instead
   *      of full JIDs. To use this, pass {matchBareFromJid: true} as the
   *      value of options. The default value for matchBareFromJid is false.
   *
   *  - ignoreNamespaceFragment:
   *      When set to true, a fragment specified on the stanza's namespace
   *      URL will be ignored when it's matched with the one configured for
   *      the handler.
   *
   *      This means that if you register like this:
   *      >   connection.addHandler(
   *      >       handler,
   *      >       'http://jabber.org/protocol/muc',
   *      >       null, null, null, null,
   *      >       {'ignoreNamespaceFragment': true}
   *      >   );
   *
   *      Then a stanza with XML namespace of
   *      'http://jabber.org/protocol/muc#user' will also be matched. If
   *      'ignoreNamespaceFragment' is false, then only stanzas with
   *      'http://jabber.org/protocol/muc' will be matched.
   *
   *  Deleting the handler
   *  ~~~~~~~~~~~~~~~~~~~~
   *  The return value should be saved if you wish to remove the handler
   *  with deleteHandler().
   *
   *  Parameters:
   *    (Function) handler - The user callback.
   *    (String) ns - The namespace to match.
   *    (String) name - The stanza name to match.
   *    (String|Array) type - The stanza type (or types if an array) to match.
   *    (String) id - The stanza id attribute to match.
   *    (String) from - The stanza from attribute to match.
   *    (String) options - The handler options
   *
   *  Returns:
   *    A reference to the handler that can be used to remove it.
   */


  addHandler(handler, ns, name, type, id, from, options) {
    const hand = new Strophe.Handler(handler, ns, name, type, id, from, options);
    this.addHandlers.push(hand);
    return hand;
  }
  /** Function: deleteHandler
   *  Delete a stanza handler for a connection.
   *
   *  This function removes a stanza handler from the connection.  The
   *  handRef parameter is *not* the function passed to addHandler(),
   *  but is the reference returned from addHandler().
   *
   *  Parameters:
   *    (Strophe.Handler) handRef - The handler reference.
   */


  deleteHandler(handRef) {
    // this must be done in the Idle loop so that we don't change
    // the handlers during iteration
    this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,
    // prevent it from getting added

    const i = this.addHandlers.indexOf(handRef);

    if (i >= 0) {
      this.addHandlers.splice(i, 1);
    }
  }
  /** Function: registerSASLMechanisms
   *
   * Register the SASL mechanisms which will be supported by this instance of
   * Strophe.Connection (i.e. which this XMPP client will support).
   *
   *  Parameters:
   *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes
   *
   */


  registerSASLMechanisms(mechanisms) {
    this.mechanisms = {};
    mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];
    mechanisms.forEach(m => this.registerSASLMechanism(m));
  }
  /** Function: registerSASLMechanism
   *
   * Register a single SASL mechanism, to be supported by this client.
   *
   *  Parameters:
   *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype
   *
   */


  registerSASLMechanism(Mechanism) {
    const mechanism = new Mechanism();
    this.mechanisms[mechanism.mechname] = mechanism;
  }
  /** Function: disconnect
   *  Start the graceful disconnection process.
   *
   *  This function starts the disconnection process.  This process starts
   *  by sending unavailable presence and sending BOSH body of type
   *  terminate.  A timeout handler makes sure that disconnection happens
   *  even if the BOSH server does not respond.
   *  If the Connection object isn't connected, at least tries to abort all pending requests
   *  so the connection object won't generate successful requests (which were already opened).
   *
   *  The user supplied connection callback will be notified of the
   *  progress as this process happens.
   *
   *  Parameters:
   *    (String) reason - The reason the disconnect is occuring.
   */


  disconnect(reason) {
    this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);

    if (reason) {
      Strophe.warn("Disconnect was called because: " + reason);
    } else {
      Strophe.info("Disconnect was called");
    }

    if (this.connected) {
      let pres = false;
      this.disconnecting = true;

      if (this.authenticated) {
        pres = $pres({
          'xmlns': Strophe.NS.CLIENT,
          'type': 'unavailable'
        });
      } // setup timeout handler


      this._disconnectTimeout = this._addSysTimedHandler(this.disconnection_timeout, this._onDisconnectTimeout.bind(this));

      this._proto._disconnect(pres);
    } else {
      Strophe.warn("Disconnect was called before Strophe connected to the server");

      this._proto._abortAllRequests();

      this._doDisconnect();
    }
  }
  /** PrivateFunction: _changeConnectStatus
   *  _Private_ helper function that makes sure plugins and the user's
   *  callback are notified of connection status changes.
   *
   *  Parameters:
   *    (Integer) status - the new connection status, one of the values
   *      in Strophe.Status
   *    (String) condition - the error condition or null
   *    (XMLElement) elem - The triggering stanza.
   */


  _changeConnectStatus(status, condition, elem) {
    // notify all plugins listening for status changes
    for (const k in Strophe._connectionPlugins) {
      if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {
        const plugin = this[k];

        if (plugin.statusChanged) {
          try {
            plugin.statusChanged(status, condition);
          } catch (err) {
            Strophe.error(`${k} plugin caused an exception changing status: ${err}`);
          }
        }
      }
    } // notify the user's callback


    if (this.connect_callback) {
      try {
        this.connect_callback(status, condition, elem);
      } catch (e) {
        Strophe._handleError(e);

        Strophe.error(`User connection callback caused an exception: ${e}`);
      }
    }
  }
  /** PrivateFunction: _doDisconnect
   *  _Private_ function to disconnect.
   *
   *  This is the last piece of the disconnection logic.  This resets the
   *  connection and alerts the user's connection callback.
   */


  _doDisconnect(condition) {
    if (typeof this._idleTimeout === "number") {
      clearTimeout(this._idleTimeout);
    } // Cancel Disconnect Timeout


    if (this._disconnectTimeout !== null) {
      this.deleteTimedHandler(this._disconnectTimeout);
      this._disconnectTimeout = null;
    }

    Strophe.debug("_doDisconnect was called");

    this._proto._doDisconnect();

    this.authenticated = false;
    this.disconnecting = false;
    this.restored = false; // delete handlers

    this.handlers = [];
    this.timedHandlers = [];
    this.removeTimeds = [];
    this.removeHandlers = [];
    this.addTimeds = [];
    this.addHandlers = []; // tell the parent we disconnected

    this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);

    this.connected = false;
  }
  /** PrivateFunction: _dataRecv
   *  _Private_ handler to processes incoming data from the the connection.
   *
   *  Except for _connect_cb handling the initial connection request,
   *  this function handles the incoming data for all requests.  This
   *  function also fires stanza handlers that match each incoming
   *  stanza.
   *
   *  Parameters:
   *    (Strophe.Request) req - The request that has data ready.
   *    (string) req - The stanza a raw string (optiona).
   */


  _dataRecv(req, raw) {
    const elem = this._proto._reqToData(req);

    if (elem === null) {
      return;
    }

    if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {
      if (elem.nodeName === this._proto.strip && elem.childNodes.length) {
        this.xmlInput(elem.childNodes[0]);
      } else {
        this.xmlInput(elem);
      }
    }

    if (this.rawInput !== Strophe.Connection.prototype.rawInput) {
      if (raw) {
        this.rawInput(raw);
      } else {
        this.rawInput(Strophe.serialize(elem));
      }
    } // remove handlers scheduled for deletion


    while (this.removeHandlers.length > 0) {
      const hand = this.removeHandlers.pop();
      const i = this.handlers.indexOf(hand);

      if (i >= 0) {
        this.handlers.splice(i, 1);
      }
    } // add handlers scheduled for addition


    while (this.addHandlers.length > 0) {
      this.handlers.push(this.addHandlers.pop());
    } // handle graceful disconnect


    if (this.disconnecting && this._proto._emptyQueue()) {
      this._doDisconnect();

      return;
    }

    const type = elem.getAttribute("type");

    if (type !== null && type === "terminate") {
      // Don't process stanzas that come in after disconnect
      if (this.disconnecting) {
        return;
      } // an error occurred


      let cond = elem.getAttribute("condition");
      const conflict = elem.getElementsByTagName("conflict");

      if (cond !== null) {
        if (cond === "remote-stream-error" && conflict.length > 0) {
          cond = "conflict";
        }

        this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);
      } else {
        this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);
      }

      this._doDisconnect(cond);

      return;
    } // send each incoming stanza through the handler chain


    Strophe.forEachChild(elem, null, child => {
      const matches = [];
      this.handlers = this.handlers.reduce((handlers, handler) => {
        try {
          if (handler.isMatch(child) && (this.authenticated || !handler.user)) {
            if (handler.run(child)) {
              handlers.push(handler);
            }

            matches.push(handler);
          } else {
            handlers.push(handler);
          }
        } catch (e) {
          // if the handler throws an exception, we consider it as false
          Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);
        }

        return handlers;
      }, []); // If no handler was fired for an incoming IQ with type="set",
      // then we return an IQ error stanza with service-unavailable.

      if (!matches.length && this.iqFallbackHandler.isMatch(child)) {
        this.iqFallbackHandler.run(child);
      }
    });
  }
  /** PrivateFunction: _connect_cb
   *  _Private_ handler for initial connection request.
   *
   *  This handler is used to process the initial connection request
   *  response from the BOSH server. It is used to set up authentication
   *  handlers and start the authentication process.
   *
   *  SASL authentication will be attempted if available, otherwise
   *  the code will fall back to legacy authentication.
   *
   *  Parameters:
   *    (Strophe.Request) req - The current request.
   *    (Function) _callback - low level (xmpp) connect callback function.
   *      Useful for plugins with their own xmpp connect callback (when they
   *      want to do something special).
   */


  _connect_cb(req, _callback, raw) {
    Strophe.debug("_connect_cb was called");
    this.connected = true;
    let bodyWrap;

    try {
      bodyWrap = this._proto._reqToData(req);
    } catch (e) {
      if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {
        throw e;
      }

      this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);

      this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);
    }

    if (!bodyWrap) {
      return;
    }

    if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {
      if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {
        this.xmlInput(bodyWrap.childNodes[0]);
      } else {
        this.xmlInput(bodyWrap);
      }
    }

    if (this.rawInput !== Strophe.Connection.prototype.rawInput) {
      if (raw) {
        this.rawInput(raw);
      } else {
        this.rawInput(Strophe.serialize(bodyWrap));
      }
    }

    const conncheck = this._proto._connect_cb(bodyWrap);

    if (conncheck === Strophe.Status.CONNFAIL) {
      return;
    } // Check for the stream:features tag


    let hasFeatures;

    if (bodyWrap.getElementsByTagNameNS) {
      hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, "features").length > 0;
    } else {
      hasFeatures = bodyWrap.getElementsByTagName("stream:features").length > 0 || bodyWrap.getElementsByTagName("features").length > 0;
    }

    if (!hasFeatures) {
      this._proto._no_auth_received(_callback);

      return;
    }

    const matched = Array.from(bodyWrap.getElementsByTagName("mechanism")).map(m => this.mechanisms[m.textContent]).filter(m => m);

    if (matched.length === 0) {
      if (bodyWrap.getElementsByTagName("auth").length === 0) {
        // There are no matching SASL mechanisms and also no legacy
        // auth available.
        this._proto._no_auth_received(_callback);

        return;
      }
    }

    if (this.do_authentication !== false) {
      this.authenticate(matched);
    }
  }
  /** Function: sortMechanismsByPriority
   *
   *  Sorts an array of objects with prototype SASLMechanism according to
   *  their priorities.
   *
   *  Parameters:
   *    (Array) mechanisms - Array of SASL mechanisms.
   *
   */


  sortMechanismsByPriority(mechanisms) {
    // eslint-disable-line class-methods-use-this
    // Sorting mechanisms according to priority.
    for (let i = 0; i < mechanisms.length - 1; ++i) {
      let higher = i;

      for (let j = i + 1; j < mechanisms.length; ++j) {
        if (mechanisms[j].priority > mechanisms[higher].priority) {
          higher = j;
        }
      }

      if (higher !== i) {
        const swap = mechanisms[i];
        mechanisms[i] = mechanisms[higher];
        mechanisms[higher] = swap;
      }
    }

    return mechanisms;
  }
  /** Function: authenticate
   * Set up authentication
   *
   *  Continues the initial connection request by setting up authentication
   *  handlers and starting the authentication process.
   *
   *  SASL authentication will be attempted if available, otherwise
   *  the code will fall back to legacy authentication.
   *
   *  Parameters:
   *    (Array) matched - Array of SASL mechanisms supported.
   *
   */


  authenticate(matched) {
    if (!this._attemptSASLAuth(matched)) {
      this._attemptLegacyAuth();
    }
  }
  /** PrivateFunction: _attemptSASLAuth
   *
   *  Iterate through an array of SASL mechanisms and attempt authentication
   *  with the highest priority (enabled) mechanism.
   *
   *  Parameters:
   *    (Array) mechanisms - Array of SASL mechanisms.
   *
   *  Returns:
   *    (Boolean) mechanism_found - true or false, depending on whether a
   *          valid SASL mechanism was found with which authentication could be
   *          started.
   */


  _attemptSASLAuth(mechanisms) {
    mechanisms = this.sortMechanismsByPriority(mechanisms || []);
    let mechanism_found = false;

    for (let i = 0; i < mechanisms.length; ++i) {
      if (!mechanisms[i].test(this)) {
        continue;
      }

      this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, "success", null, null);
      this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, "failure", null, null);
      this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, "challenge", null, null);
      this._sasl_mechanism = mechanisms[i];

      this._sasl_mechanism.onStart(this);

      const request_auth_exchange = $build("auth", {
        'xmlns': Strophe.NS.SASL,
        'mechanism': this._sasl_mechanism.mechname
      });

      if (this._sasl_mechanism.isClientFirst) {
        const response = this._sasl_mechanism.clientChallenge(this);

        request_auth_exchange.t((0,abab__WEBPACK_IMPORTED_MODULE_11__.btoa)(response));
      }

      this.send(request_auth_exchange.tree());
      mechanism_found = true;
      break;
    }

    return mechanism_found;
  }
  /** PrivateFunction: _sasl_challenge_cb
   *  _Private_ handler for the SASL challenge
   *
   */


  _sasl_challenge_cb(elem) {
    const challenge = (0,abab__WEBPACK_IMPORTED_MODULE_11__.atob)(Strophe.getText(elem));

    const response = this._sasl_mechanism.onChallenge(this, challenge);

    const stanza = $build('response', {
      'xmlns': Strophe.NS.SASL
    });

    if (response !== "") {
      stanza.t((0,abab__WEBPACK_IMPORTED_MODULE_11__.btoa)(response));
    }

    this.send(stanza.tree());
    return true;
  }
  /** PrivateFunction: _attemptLegacyAuth
   *
   *  Attempt legacy (i.e. non-SASL) authentication.
   */


  _attemptLegacyAuth() {
    if (Strophe.getNodeFromJid(this.jid) === null) {
      // we don't have a node, which is required for non-anonymous
      // client connections
      this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);

      this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);
    } else {
      // Fall back to legacy authentication
      this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);

      this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, "_auth_1");

      this.send($iq({
        'type': "get",
        'to': this.domain,
        'id': "_auth_1"
      }).c("query", {
        xmlns: Strophe.NS.AUTH
      }).c("username", {}).t(Strophe.getNodeFromJid(this.jid)).tree());
    }
  }
  /** PrivateFunction: _onLegacyAuthIQResult
   *  _Private_ handler for legacy authentication.
   *
   *  This handler is called in response to the initial <iq type='get'/>
   *  for legacy authentication.  It builds an authentication <iq/> and
   *  sends it, creating a handler (calling back to _auth2_cb()) to
   *  handle the result
   *
   *  Parameters:
   *    (XMLElement) elem - The stanza that triggered the callback.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _onLegacyAuthIQResult(elem) {
    // eslint-disable-line no-unused-vars
    // build plaintext auth iq
    const iq = $iq({
      type: "set",
      id: "_auth_2"
    }).c('query', {
      xmlns: Strophe.NS.AUTH
    }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);

    if (!Strophe.getResourceFromJid(this.jid)) {
      // since the user has not supplied a resource, we pick
      // a default one here.  unlike other auth methods, the server
      // cannot do this for us.
      this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';
    }

    iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));

    this._addSysHandler(this._auth2_cb.bind(this), null, null, null, "_auth_2");

    this.send(iq.tree());
    return false;
  }
  /** PrivateFunction: _sasl_success_cb
   *  _Private_ handler for succesful SASL authentication.
   *
   *  Parameters:
   *    (XMLElement) elem - The matching stanza.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _sasl_success_cb(elem) {
    if (this._sasl_data["server-signature"]) {
      let serverSignature;
      const success = (0,abab__WEBPACK_IMPORTED_MODULE_11__.atob)(Strophe.getText(elem));
      const attribMatch = /([a-z]+)=([^,]+)(,|$)/;
      const matches = success.match(attribMatch);

      if (matches[1] === "v") {
        serverSignature = matches[2];
      }

      if (serverSignature !== this._sasl_data["server-signature"]) {
        // remove old handlers
        this.deleteHandler(this._sasl_failure_handler);
        this._sasl_failure_handler = null;

        if (this._sasl_challenge_handler) {
          this.deleteHandler(this._sasl_challenge_handler);
          this._sasl_challenge_handler = null;
        }

        this._sasl_data = {};
        return this._sasl_failure_cb(null);
      }
    }

    Strophe.info("SASL authentication succeeded.");

    if (this._sasl_mechanism) {
      this._sasl_mechanism.onSuccess();
    } // remove old handlers


    this.deleteHandler(this._sasl_failure_handler);
    this._sasl_failure_handler = null;

    if (this._sasl_challenge_handler) {
      this.deleteHandler(this._sasl_challenge_handler);
      this._sasl_challenge_handler = null;
    }

    const streamfeature_handlers = [];

    const wrapper = (handlers, elem) => {
      while (handlers.length) {
        this.deleteHandler(handlers.pop());
      }

      this._onStreamFeaturesAfterSASL(elem);

      return false;
    };

    streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), null, "stream:features", null, null));
    streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), Strophe.NS.STREAM, "features", null, null)); // we must send an xmpp:restart now

    this._sendRestart();

    return false;
  }
  /** PrivateFunction: _onStreamFeaturesAfterSASL
   *  Parameters:
   *    (XMLElement) elem - The matching stanza.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _onStreamFeaturesAfterSASL(elem) {
    // save stream:features for future usage
    this.features = elem;

    for (let i = 0; i < elem.childNodes.length; i++) {
      const child = elem.childNodes[i];

      if (child.nodeName === 'bind') {
        this.do_bind = true;
      }

      if (child.nodeName === 'session') {
        this.do_session = true;
      }
    }

    if (!this.do_bind) {
      this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);

      return false;
    } else if (!this.options.explicitResourceBinding) {
      this.bind();
    } else {
      this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);
    }

    return false;
  }
  /** Function: bind
   *
   *  Sends an IQ to the XMPP server to bind a JID resource for this session.
   *
   *  https://tools.ietf.org/html/rfc6120#section-7.5
   *
   *  If `explicitResourceBinding` was set to a truthy value in the options
   *  passed to the Strophe.Connection constructor, then this function needs
   *  to be called explicitly by the client author.
   *
   *  Otherwise it'll be called automatically as soon as the XMPP server
   *  advertises the "urn:ietf:params:xml:ns:xmpp-bind" stream feature.
   */


  bind() {
    if (!this.do_bind) {
      Strophe.log(Strophe.LogLevel.INFO, `Strophe.Connection.prototype.bind called but "do_bind" is false`);
      return;
    }

    this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, "_bind_auth_2");

    const resource = Strophe.getResourceFromJid(this.jid);

    if (resource) {
      this.send($iq({
        type: "set",
        id: "_bind_auth_2"
      }).c('bind', {
        xmlns: Strophe.NS.BIND
      }).c('resource', {}).t(resource).tree());
    } else {
      this.send($iq({
        type: "set",
        id: "_bind_auth_2"
      }).c('bind', {
        xmlns: Strophe.NS.BIND
      }).tree());
    }
  }
  /** PrivateFunction: _onResourceBindIQ
   *  _Private_ handler for binding result and session start.
   *
   *  Parameters:
   *    (XMLElement) elem - The matching stanza.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _onResourceBindResultIQ(elem) {
    if (elem.getAttribute("type") === "error") {
      Strophe.warn("Resource binding failed.");
      const conflict = elem.getElementsByTagName("conflict");
      let condition;

      if (conflict.length > 0) {
        condition = Strophe.ErrorCondition.CONFLICT;
      }

      this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);

      return false;
    } // TODO - need to grab errors


    const bind = elem.getElementsByTagName("bind");

    if (bind.length > 0) {
      const jidNode = bind[0].getElementsByTagName("jid");

      if (jidNode.length > 0) {
        this.authenticated = true;
        this.jid = Strophe.getText(jidNode[0]);

        if (this.do_session) {
          this._establishSession();
        } else {
          this._changeConnectStatus(Strophe.Status.CONNECTED, null);
        }
      }
    } else {
      Strophe.warn("Resource binding failed.");

      this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

      return false;
    }
  }
  /** PrivateFunction: _establishSession
   *  Send IQ request to establish a session with the XMPP server.
   *
   *  See https://xmpp.org/rfcs/rfc3921.html#session
   *
   *  Note: The protocol for session establishment has been determined as
   *  unnecessary and removed in RFC-6121.
   */


  _establishSession() {
    if (!this.do_session) {
      throw new Error(`Strophe.Connection.prototype._establishSession ` + `called but apparently ${Strophe.NS.SESSION} wasn't advertised by the server`);
    }

    this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, "_session_auth_2");

    this.send($iq({
      type: "set",
      id: "_session_auth_2"
    }).c('session', {
      xmlns: Strophe.NS.SESSION
    }).tree());
  }
  /** PrivateFunction: _onSessionResultIQ
   *  _Private_ handler for the server's IQ response to a client's session
   *  request.
   *
   *  This sets Connection.authenticated to true on success, which
   *  starts the processing of user handlers.
   *
   *  See https://xmpp.org/rfcs/rfc3921.html#session
   *
   *  Note: The protocol for session establishment has been determined as
   *  unnecessary and removed in RFC-6121.
   *
   *  Parameters:
   *    (XMLElement) elem - The matching stanza.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _onSessionResultIQ(elem) {
    if (elem.getAttribute("type") === "result") {
      this.authenticated = true;

      this._changeConnectStatus(Strophe.Status.CONNECTED, null);
    } else if (elem.getAttribute("type") === "error") {
      this.authenticated = false;
      Strophe.warn("Session creation failed.");

      this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

      return false;
    }

    return false;
  }
  /** PrivateFunction: _sasl_failure_cb
   *  _Private_ handler for SASL authentication failure.
   *
   *  Parameters:
   *    (XMLElement) elem - The matching stanza.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _sasl_failure_cb(elem) {
    // delete unneeded handlers
    if (this._sasl_success_handler) {
      this.deleteHandler(this._sasl_success_handler);
      this._sasl_success_handler = null;
    }

    if (this._sasl_challenge_handler) {
      this.deleteHandler(this._sasl_challenge_handler);
      this._sasl_challenge_handler = null;
    }

    if (this._sasl_mechanism) this._sasl_mechanism.onFailure();

    this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

    return false;
  }
  /** PrivateFunction: _auth2_cb
   *  _Private_ handler to finish legacy authentication.
   *
   *  This handler is called when the result from the jabber:iq:auth
   *  <iq/> stanza is returned.
   *
   *  Parameters:
   *    (XMLElement) elem - The stanza that triggered the callback.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _auth2_cb(elem) {
    if (elem.getAttribute("type") === "result") {
      this.authenticated = true;

      this._changeConnectStatus(Strophe.Status.CONNECTED, null);
    } else if (elem.getAttribute("type") === "error") {
      this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

      this.disconnect('authentication failed');
    }

    return false;
  }
  /** PrivateFunction: _addSysTimedHandler
   *  _Private_ function to add a system level timed handler.
   *
   *  This function is used to add a Strophe.TimedHandler for the
   *  library code.  System timed handlers are allowed to run before
   *  authentication is complete.
   *
   *  Parameters:
   *    (Integer) period - The period of the handler.
   *    (Function) handler - The callback function.
   */


  _addSysTimedHandler(period, handler) {
    const thand = new Strophe.TimedHandler(period, handler);
    thand.user = false;
    this.addTimeds.push(thand);
    return thand;
  }
  /** PrivateFunction: _addSysHandler
   *  _Private_ function to add a system level stanza handler.
   *
   *  This function is used to add a Strophe.Handler for the
   *  library code.  System stanza handlers are allowed to run before
   *  authentication is complete.
   *
   *  Parameters:
   *    (Function) handler - The callback function.
   *    (String) ns - The namespace to match.
   *    (String) name - The stanza name to match.
   *    (String) type - The stanza type attribute to match.
   *    (String) id - The stanza id attribute to match.
   */


  _addSysHandler(handler, ns, name, type, id) {
    const hand = new Strophe.Handler(handler, ns, name, type, id);
    hand.user = false;
    this.addHandlers.push(hand);
    return hand;
  }
  /** PrivateFunction: _onDisconnectTimeout
   *  _Private_ timeout handler for handling non-graceful disconnection.
   *
   *  If the graceful disconnect process does not complete within the
   *  time allotted, this handler finishes the disconnect anyway.
   *
   *  Returns:
   *    false to remove the handler.
   */


  _onDisconnectTimeout() {
    Strophe.debug("_onDisconnectTimeout was called");

    this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);

    this._proto._onDisconnectTimeout(); // actually disconnect


    this._doDisconnect();

    return false;
  }
  /** PrivateFunction: _onIdle
   *  _Private_ handler to process events during idle cycle.
   *
   *  This handler is called every 100ms to fire timed handlers that
   *  are ready and keep poll requests going.
   */


  _onIdle() {
    // add timed handlers scheduled for addition
    // NOTE: we add before remove in the case a timed handler is
    // added and then deleted before the next _onIdle() call.
    while (this.addTimeds.length > 0) {
      this.timedHandlers.push(this.addTimeds.pop());
    } // remove timed handlers that have been scheduled for deletion


    while (this.removeTimeds.length > 0) {
      const thand = this.removeTimeds.pop();
      const i = this.timedHandlers.indexOf(thand);

      if (i >= 0) {
        this.timedHandlers.splice(i, 1);
      }
    } // call ready timed handlers


    const now = new Date().getTime();
    const newList = [];

    for (let i = 0; i < this.timedHandlers.length; i++) {
      const thand = this.timedHandlers[i];

      if (this.authenticated || !thand.user) {
        const since = thand.lastCalled + thand.period;

        if (since - now <= 0) {
          if (thand.run()) {
            newList.push(thand);
          }
        } else {
          newList.push(thand);
        }
      }
    }

    this.timedHandlers = newList;
    clearTimeout(this._idleTimeout);

    this._proto._onIdle(); // reactivate the timer only if connected


    if (this.connected) {
      this._idleTimeout = setTimeout(() => this._onIdle(), 100);
    }
  }

};
Strophe.SASLMechanism = _sasl_js__WEBPACK_IMPORTED_MODULE_4__["default"];
/** Constants: SASL mechanisms
 *  Available authentication mechanisms
 *
 *  Strophe.SASLAnonymous   - SASL ANONYMOUS authentication.
 *  Strophe.SASLPlain       - SASL PLAIN authentication.
 *  Strophe.SASLSHA1        - SASL SCRAM-SHA-1 authentication
 *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication
 *  Strophe.SASLExternal    - SASL EXTERNAL authentication
 *  Strophe.SASLXOAuth2     - SASL X-OAuth2 authentication
 */

Strophe.SASLAnonymous = _sasl_anon_js__WEBPACK_IMPORTED_MODULE_2__["default"];
Strophe.SASLPlain = _sasl_plain_js__WEBPACK_IMPORTED_MODULE_6__["default"];
Strophe.SASLSHA1 = _sasl_sha1_js__WEBPACK_IMPORTED_MODULE_7__["default"];
Strophe.SASLOAuthBearer = _sasl_oauthbearer_js__WEBPACK_IMPORTED_MODULE_5__["default"];
Strophe.SASLExternal = _sasl_external_js__WEBPACK_IMPORTED_MODULE_3__["default"];
Strophe.SASLXOAuth2 = _sasl_xoauth2_js__WEBPACK_IMPORTED_MODULE_8__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  'Strophe': Strophe,
  '$build': $build,
  '$iq': $iq,
  '$msg': $msg,
  '$pres': $pres,
  'SHA1': _sha1__WEBPACK_IMPORTED_MODULE_9__["default"],
  'MD5': _md5__WEBPACK_IMPORTED_MODULE_1__["default"],
  'b64_hmac_sha1': _sha1__WEBPACK_IMPORTED_MODULE_9__["default"].b64_hmac_sha1,
  'b64_sha1': _sha1__WEBPACK_IMPORTED_MODULE_9__["default"].b64_sha1,
  'str_hmac_sha1': _sha1__WEBPACK_IMPORTED_MODULE_9__["default"].str_hmac_sha1,
  'str_sha1': _sha1__WEBPACK_IMPORTED_MODULE_9__["default"].str_sha1
});

/***/ }),

/***/ "./node_modules/strophe.js/src/md5.js":
/*!********************************************!*\
  !*** ./node_modules/strophe.js/src/md5.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MD5)
/* harmony export */ });
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*
 * Everything that isn't used by Strophe has been stripped here!
 */

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
const safe_add = function (x, y) {
  const lsw = (x & 0xFFFF) + (y & 0xFFFF);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xFFFF;
};
/*
 * Bitwise rotate a 32-bit number to the left.
 */


const bit_rol = function (num, cnt) {
  return num << cnt | num >>> 32 - cnt;
};
/*
 * Convert a string to an array of little-endian words
 */


const str2binl = function (str) {
  if (typeof str !== "string") {
    throw new Error("str2binl was passed a non-string");
  }

  const bin = [];

  for (let i = 0; i < str.length * 8; i += 8) {
    bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;
  }

  return bin;
};
/*
 * Convert an array of little-endian words to a string
 */


const binl2str = function (bin) {
  let str = "";

  for (let i = 0; i < bin.length * 32; i += 8) {
    str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);
  }

  return str;
};
/*
 * Convert an array of little-endian words to a hex string.
 */


const binl2hex = function (binarray) {
  const hex_tab = "0123456789abcdef";
  let str = "";

  for (let i = 0; i < binarray.length * 4; i++) {
    str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);
  }

  return str;
};
/*
 * These functions implement the four basic operations the algorithm uses.
 */


const md5_cmn = function (q, a, b, x, s, t) {
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
};

const md5_ff = function (a, b, c, d, x, s, t) {
  return md5_cmn(b & c | ~b & d, a, b, x, s, t);
};

const md5_gg = function (a, b, c, d, x, s, t) {
  return md5_cmn(b & d | c & ~d, a, b, x, s, t);
};

const md5_hh = function (a, b, c, d, x, s, t) {
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
};

const md5_ii = function (a, b, c, d, x, s, t) {
  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
};
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */


const core_md5 = function (x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[(len + 64 >>> 9 << 4) + 14] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  let olda, oldb, oldc, oldd;

  for (let i = 0; i < x.length; i += 16) {
    olda = a;
    oldb = b;
    oldc = c;
    oldd = d;
    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }

  return [a, b, c, d];
};
/*
 * These are the functions you'll usually want to call.
 * They take string arguments and return either hex or base-64 encoded
 * strings.
 */


const MD5 = {
  hexdigest: function (s) {
    return binl2hex(core_md5(str2binl(s), s.length * 8));
  },
  hash: function (s) {
    return binl2str(core_md5(str2binl(s), s.length * 8));
  }
};


/***/ }),

/***/ "./node_modules/strophe.js/src/sasl-anon.js":
/*!**************************************************!*\
  !*** ./node_modules/strophe.js/src/sasl-anon.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SASLAnonymous)
/* harmony export */ });
/* harmony import */ var _sasl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sasl.js */ "./node_modules/strophe.js/src/sasl.js");
 // Building SASL callbacks

class SASLAnonymous extends _sasl_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** PrivateConstructor: SASLAnonymous
   *  SASL ANONYMOUS authentication.
   */
  constructor() {
    let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ANONYMOUS';
    let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;
    super(mechname, isClientFirst, priority);
  }

  test(connection) {
    // eslint-disable-line class-methods-use-this
    return connection.authcid === null;
  }

}

/***/ }),

/***/ "./node_modules/strophe.js/src/sasl-external.js":
/*!******************************************************!*\
  !*** ./node_modules/strophe.js/src/sasl-external.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SASLExternal)
/* harmony export */ });
/* harmony import */ var _sasl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sasl.js */ "./node_modules/strophe.js/src/sasl.js");

class SASLExternal extends _sasl_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** PrivateConstructor: SASLExternal
   *  SASL EXTERNAL authentication.
   *
   *  The EXTERNAL mechanism allows a client to request the server to use
   *  credentials established by means external to the mechanism to
   *  authenticate the client. The external means may be, for instance,
   *  TLS services.
   */
  constructor() {
    let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'EXTERNAL';
    let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
    super(mechname, isClientFirst, priority);
  }

  onChallenge(connection) {
    // eslint-disable-line class-methods-use-this

    /** According to XEP-178, an authzid SHOULD NOT be presented when the
     * authcid contained or implied in the client certificate is the JID (i.e.
     * authzid) with which the user wants to log in as.
     *
     * To NOT send the authzid, the user should therefore set the authcid equal
     * to the JID when instantiating a new Strophe.Connection object.
     */
    return connection.authcid === connection.authzid ? '' : connection.authzid;
  }

}

/***/ }),

/***/ "./node_modules/strophe.js/src/sasl-oauthbearer.js":
/*!*********************************************************!*\
  !*** ./node_modules/strophe.js/src/sasl-oauthbearer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SASLOAuthBearer)
/* harmony export */ });
/* harmony import */ var _sasl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sasl.js */ "./node_modules/strophe.js/src/sasl.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/strophe.js/src/utils.js");


class SASLOAuthBearer extends _sasl_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** PrivateConstructor: SASLOAuthBearer
   *  SASL OAuth Bearer authentication.
   */
  constructor() {
    let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'OAUTHBEARER';
    let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;
    super(mechname, isClientFirst, priority);
  }

  test(connection) {
    // eslint-disable-line class-methods-use-this
    return connection.pass !== null;
  }

  onChallenge(connection) {
    // eslint-disable-line class-methods-use-this
    let auth_str = 'n,';

    if (connection.authcid !== null) {
      auth_str = auth_str + 'a=' + connection.authzid;
    }

    auth_str = auth_str + ',';
    auth_str = auth_str + "\u0001";
    auth_str = auth_str + 'auth=Bearer ';
    auth_str = auth_str + connection.pass;
    auth_str = auth_str + "\u0001";
    auth_str = auth_str + "\u0001";
    return _utils__WEBPACK_IMPORTED_MODULE_1__["default"].utf16to8(auth_str);
  }

}

/***/ }),

/***/ "./node_modules/strophe.js/src/sasl-plain.js":
/*!***************************************************!*\
  !*** ./node_modules/strophe.js/src/sasl-plain.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SASLPlain)
/* harmony export */ });
/* harmony import */ var _sasl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sasl.js */ "./node_modules/strophe.js/src/sasl.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/strophe.js/src/utils.js");


class SASLPlain extends _sasl_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** PrivateConstructor: SASLPlain
   *  SASL PLAIN authentication.
   */
  constructor() {
    let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'PLAIN';
    let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
    super(mechname, isClientFirst, priority);
  }

  test(connection) {
    // eslint-disable-line class-methods-use-this
    return connection.authcid !== null;
  }

  onChallenge(connection) {
    // eslint-disable-line class-methods-use-this
    const {
      authcid,
      authzid,
      domain,
      pass
    } = connection;

    if (!domain) {
      throw new Error("SASLPlain onChallenge: domain is not defined!");
    } // Only include authzid if it differs from authcid.
    // See: https://tools.ietf.org/html/rfc6120#section-6.3.8


    let auth_str = authzid !== `${authcid}@${domain}` ? authzid : '';
    auth_str = auth_str + "\u0000";
    auth_str = auth_str + authcid;
    auth_str = auth_str + "\u0000";
    auth_str = auth_str + pass;
    return _utils__WEBPACK_IMPORTED_MODULE_1__["default"].utf16to8(auth_str);
  }

}

/***/ }),

/***/ "./node_modules/strophe.js/src/sasl-sha1.js":
/*!**************************************************!*\
  !*** ./node_modules/strophe.js/src/sasl-sha1.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SASLSHA1)
/* harmony export */ });
/* harmony import */ var _md5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./md5 */ "./node_modules/strophe.js/src/md5.js");
/* harmony import */ var _sasl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sasl.js */ "./node_modules/strophe.js/src/sasl.js");
/* harmony import */ var _sha1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sha1 */ "./node_modules/strophe.js/src/sha1.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./node_modules/strophe.js/src/utils.js");




class SASLSHA1 extends _sasl_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
  /** PrivateConstructor: SASLSHA1
   *  SASL SCRAM SHA 1 authentication.
   */
  constructor() {
    let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'SCRAM-SHA-1';
    let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
    super(mechname, isClientFirst, priority);
  }

  test(connection) {
    // eslint-disable-line class-methods-use-this
    return connection.authcid !== null;
  }

  onChallenge(connection, challenge) {
    // eslint-disable-line class-methods-use-this
    let nonce, salt, iter, Hi, U, U_old, i, k;
    let responseText = "c=biws,";
    let authMessage = `${connection._sasl_data["client-first-message-bare"]},${challenge},`;
    const cnonce = connection._sasl_data.cnonce;
    const attribMatch = /([a-z]+)=([^,]+)(,|$)/;

    while (challenge.match(attribMatch)) {
      const matches = challenge.match(attribMatch);
      challenge = challenge.replace(matches[0], "");

      switch (matches[1]) {
        case "r":
          nonce = matches[2];
          break;

        case "s":
          salt = matches[2];
          break;

        case "i":
          iter = matches[2];
          break;
      }
    }

    if (nonce.slice(0, cnonce.length) !== cnonce) {
      connection._sasl_data = {};
      return connection._sasl_failure_cb();
    }

    responseText += "r=" + nonce;
    authMessage += responseText;
    salt = atob(salt);
    salt += "\x00\x00\x00\x01";
    const pass = _utils__WEBPACK_IMPORTED_MODULE_3__["default"].utf16to8(connection.pass);
    Hi = U_old = _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].core_hmac_sha1(pass, salt);

    for (i = 1; i < iter; i++) {
      U = _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].core_hmac_sha1(pass, _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].binb2str(U_old));

      for (k = 0; k < 5; k++) {
        Hi[k] ^= U[k];
      }

      U_old = U;
    }

    Hi = _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].binb2str(Hi);
    const clientKey = _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].core_hmac_sha1(Hi, "Client Key");
    const serverKey = _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].str_hmac_sha1(Hi, "Server Key");
    const clientSignature = _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].core_hmac_sha1(_sha1__WEBPACK_IMPORTED_MODULE_2__["default"].str_sha1(_sha1__WEBPACK_IMPORTED_MODULE_2__["default"].binb2str(clientKey)), authMessage);
    connection._sasl_data["server-signature"] = _sha1__WEBPACK_IMPORTED_MODULE_2__["default"].b64_hmac_sha1(serverKey, authMessage);

    for (k = 0; k < 5; k++) {
      clientKey[k] ^= clientSignature[k];
    }

    responseText += ",p=" + btoa(_sha1__WEBPACK_IMPORTED_MODULE_2__["default"].binb2str(clientKey));
    return responseText;
  }

  clientChallenge(connection, test_cnonce) {
    // eslint-disable-line class-methods-use-this
    const cnonce = test_cnonce || _md5__WEBPACK_IMPORTED_MODULE_0__["default"].hexdigest("" + Math.random() * 1234567890);
    let auth_str = "n=" + _utils__WEBPACK_IMPORTED_MODULE_3__["default"].utf16to8(connection.authcid);
    auth_str += ",r=";
    auth_str += cnonce;
    connection._sasl_data.cnonce = cnonce;
    connection._sasl_data["client-first-message-bare"] = auth_str;
    auth_str = "n,," + auth_str;
    return auth_str;
  }

}

/***/ }),

/***/ "./node_modules/strophe.js/src/sasl-xoauth2.js":
/*!*****************************************************!*\
  !*** ./node_modules/strophe.js/src/sasl-xoauth2.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SASLXOAuth2)
/* harmony export */ });
/* harmony import */ var _sasl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sasl.js */ "./node_modules/strophe.js/src/sasl.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/strophe.js/src/utils.js");


class SASLXOAuth2 extends _sasl_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** PrivateConstructor: SASLXOAuth2
   *  SASL X-OAuth2 authentication.
   */
  constructor() {
    let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'X-OAUTH2';
    let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
    super(mechname, isClientFirst, priority);
  }

  test(connection) {
    // eslint-disable-line class-methods-use-this
    return connection.pass !== null;
  }

  onChallenge(connection) {
    // eslint-disable-line class-methods-use-this
    let auth_str = '\u0000';

    if (connection.authcid !== null) {
      auth_str = auth_str + connection.authzid;
    }

    auth_str = auth_str + "\u0000";
    auth_str = auth_str + connection.pass;
    return _utils__WEBPACK_IMPORTED_MODULE_1__["default"].utf16to8(auth_str);
  }

}

/***/ }),

/***/ "./node_modules/strophe.js/src/sasl.js":
/*!*********************************************!*\
  !*** ./node_modules/strophe.js/src/sasl.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SASLMechanism)
/* harmony export */ });
/** Class: Strophe.SASLMechanism
 *
 *  Encapsulates an SASL authentication mechanism.
 *
 *  User code may override the priority for each mechanism or disable it completely.
 *  See <priority> for information about changing priority and <test> for informatian on
 *  how to disable a mechanism.
 *
 *  By default, all mechanisms are enabled and the priorities are
 *
 *      SCRAM-SHA-1 - 60
 *      PLAIN       - 50
 *      OAUTHBEARER - 40
 *      X-OAUTH2    - 30
 *      ANONYMOUS   - 20
 *      EXTERNAL    - 10
 *
 *  See: Strophe.Connection.addSupportedSASLMechanisms
 */
class SASLMechanism {
  /**
   * PrivateConstructor: Strophe.SASLMechanism
   * SASL auth mechanism abstraction.
   *
   *  Parameters:
   *    (String) name - SASL Mechanism name.
   *    (Boolean) isClientFirst - If client should send response first without challenge.
   *    (Number) priority - Priority.
   *
   *  Returns:
   *    A new Strophe.SASLMechanism object.
   */
  constructor(name, isClientFirst, priority) {
    /** PrivateVariable: mechname
     *  Mechanism name.
     */
    this.mechname = name;
    /** PrivateVariable: isClientFirst
     *  If client sends response without initial server challenge.
     */

    this.isClientFirst = isClientFirst;
    /** Variable: priority
     *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).
     *  Users may override this to prioritize mechanisms differently.
     *
     *  Example: (This will cause Strophe to choose the mechanism that the server sent first)
     *
     *  > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;
     *
     *  See <SASL mechanisms> for a list of available mechanisms.
     *
     */

    this.priority = priority;
  }
  /**
   *  Function: test
   *  Checks if mechanism able to run.
   *  To disable a mechanism, make this return false;
   *
   *  To disable plain authentication run
   *  > Strophe.SASLPlain.test = function() {
   *  >   return false;
   *  > }
   *
   *  See <SASL mechanisms> for a list of available mechanisms.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - Target Connection.
   *
   *  Returns:
   *    (Boolean) If mechanism was able to run.
   */


  test() {
    // eslint-disable-line class-methods-use-this
    return true;
  }
  /** PrivateFunction: onStart
   *  Called before starting mechanism on some connection.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - Target Connection.
   */


  onStart(connection) {
    this._connection = connection;
  }
  /** PrivateFunction: onChallenge
   *  Called by protocol implementation on incoming challenge.
   *
   *  By deafult, if the client is expected to send data first (isClientFirst === true),
   *  this method is called with `challenge` as null on the first call,
   *  unless `clientChallenge` is overridden in the relevant subclass.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - Target Connection.
   *    (String) challenge - current challenge to handle.
   *
   *  Returns:
   *    (String) Mechanism response.
   */


  onChallenge(connection, challenge) {
    // eslint-disable-line
    throw new Error("You should implement challenge handling!");
  }
  /** PrivateFunction: clientChallenge
   *  Called by the protocol implementation if the client is expected to send
   *  data first in the authentication exchange (i.e. isClientFirst === true).
   *
   *  Parameters:
   *    (Strophe.Connection) connection - Target Connection.
   *
   *  Returns:
   *    (String) Mechanism response.
   */


  clientChallenge(connection) {
    if (!this.isClientFirst) {
      throw new Error("clientChallenge should not be called if isClientFirst is false!");
    }

    return this.onChallenge(connection);
  }
  /** PrivateFunction: onFailure
   *  Protocol informs mechanism implementation about SASL failure.
   */


  onFailure() {
    this._connection = null;
  }
  /** PrivateFunction: onSuccess
   *  Protocol informs mechanism implementation about SASL success.
   */


  onSuccess() {
    this._connection = null;
  }

}

/***/ }),

/***/ "./node_modules/strophe.js/src/sha1.js":
/*!*********************************************!*\
  !*** ./node_modules/strophe.js/src/sha1.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SHA1)
/* harmony export */ });
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

/* global define */

/* Some functions and variables have been stripped for use with Strophe */

/*
 * Calculate the SHA-1 of an array of big-endian words, and a bit length
 */
function core_sha1(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << 24 - len % 32;
  x[(len + 64 >> 9 << 4) + 15] = len;
  var w = new Array(80);
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  var e = -1009589776;
  var i, j, t, olda, oldb, oldc, oldd, olde;

  for (i = 0; i < x.length; i += 16) {
    olda = a;
    oldb = b;
    oldc = c;
    oldd = d;
    olde = e;

    for (j = 0; j < 80; j++) {
      if (j < 16) {
        w[j] = x[i + j];
      } else {
        w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
      }

      t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
      e = d;
      d = c;
      c = rol(b, 30);
      b = a;
      a = t;
    }

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
    e = safe_add(e, olde);
  }

  return [a, b, c, d, e];
}
/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */


function sha1_ft(t, b, c, d) {
  if (t < 20) {
    return b & c | ~b & d;
  }

  if (t < 40) {
    return b ^ c ^ d;
  }

  if (t < 60) {
    return b & c | b & d | c & d;
  }

  return b ^ c ^ d;
}
/*
 * Determine the appropriate additive constant for the current iteration
 */


function sha1_kt(t) {
  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
}
/*
 * Calculate the HMAC-SHA1 of a key and some data
 */


function core_hmac_sha1(key, data) {
  var bkey = str2binb(key);

  if (bkey.length > 16) {
    bkey = core_sha1(bkey, key.length * 8);
  }

  var ipad = new Array(16),
      opad = new Array(16);

  for (var i = 0; i < 16; i++) {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);
  return core_sha1(opad.concat(hash), 512 + 160);
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safe_add(x, y) {
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xFFFF;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function rol(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * Convert an 8-bit or 16-bit string to an array of big-endian words
 * In 8-bit function, characters >255 have their hi-byte silently ignored.
 */


function str2binb(str) {
  var bin = [];
  var mask = 255;

  for (var i = 0; i < str.length * 8; i += 8) {
    bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;
  }

  return bin;
}
/*
 * Convert an array of big-endian words to a base-64 string
 */


function binb2b64(binarray) {
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var str = "";
  var triplet, j;

  for (var i = 0; i < binarray.length * 4; i += 3) {
    triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;

    for (j = 0; j < 4; j++) {
      if (i * 8 + j * 6 > binarray.length * 32) {
        str += "=";
      } else {
        str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);
      }
    }
  }

  return str;
}
/*
 * Convert an array of big-endian words to a string
 */


function binb2str(bin) {
  var str = "";
  var mask = 255;

  for (var i = 0; i < bin.length * 32; i += 8) {
    str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);
  }

  return str;
}
/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */


const SHA1 = {
  b64_hmac_sha1: function (key, data) {
    return binb2b64(core_hmac_sha1(key, data));
  },
  b64_sha1: function (s) {
    return binb2b64(core_sha1(str2binb(s), s.length * 8));
  },
  binb2str: binb2str,
  core_hmac_sha1: core_hmac_sha1,
  str_hmac_sha1: function (key, data) {
    return binb2str(core_hmac_sha1(key, data));
  },
  str_sha1: function (s) {
    return binb2str(core_sha1(str2binb(s), s.length * 8));
  }
};


/***/ }),

/***/ "./node_modules/strophe.js/src/strophe.js":
/*!************************************************!*\
  !*** ./node_modules/strophe.js/src/strophe.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$build": () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_3__.$build),
/* harmony export */   "$iq": () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_3__.$iq),
/* harmony export */   "$msg": () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_3__.$msg),
/* harmony export */   "$pres": () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_3__.$pres),
/* harmony export */   "Strophe": () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_3__.Strophe),
/* harmony export */   "b64_sha1": () => (/* binding */ b64_sha1)
/* harmony export */ });
/* harmony import */ var _bosh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bosh */ "./node_modules/strophe.js/src/bosh.js");
/* harmony import */ var _websocket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websocket */ "./node_modules/strophe.js/src/websocket.js");
/* harmony import */ var _worker_websocket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./worker-websocket */ "./node_modules/strophe.js/src/worker-websocket.js");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core */ "./node_modules/strophe.js/src/core.js");
/*global global*/




__webpack_require__.g.$build = _core__WEBPACK_IMPORTED_MODULE_3__["default"].$build;
__webpack_require__.g.$iq = _core__WEBPACK_IMPORTED_MODULE_3__["default"].$iq;
__webpack_require__.g.$msg = _core__WEBPACK_IMPORTED_MODULE_3__["default"].$msg;
__webpack_require__.g.$pres = _core__WEBPACK_IMPORTED_MODULE_3__["default"].$pres;
__webpack_require__.g.Strophe = _core__WEBPACK_IMPORTED_MODULE_3__["default"].Strophe;

const {
  b64_sha1
} = _core__WEBPACK_IMPORTED_MODULE_3__.SHA1;

/***/ }),

/***/ "./node_modules/strophe.js/src/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/strophe.js/src/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ utils)
/* harmony export */ });
const utils = {
  utf16to8: function (str) {
    var i, c;
    var out = "";
    var len = str.length;

    for (i = 0; i < len; i++) {
      c = str.charCodeAt(i);

      if (c >= 0x0000 && c <= 0x007F) {
        out += str.charAt(i);
      } else if (c > 0x07FF) {
        out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);
        out += String.fromCharCode(0x80 | c >> 6 & 0x3F);
        out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
      } else {
        out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);
        out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
      }
    }

    return out;
  },
  addCookies: function (cookies) {
    /* Parameters:
     *  (Object) cookies - either a map of cookie names
     *    to string values or to maps of cookie values.
     *
     * For example:
     * { "myCookie": "1234" }
     *
     * or:
     * { "myCookie": {
     *      "value": "1234",
     *      "domain": ".example.org",
     *      "path": "/",
     *      "expires": expirationDate
     *      }
     *  }
     *
     *  These values get passed to Strophe.Connection via
     *   options.cookies
     */
    cookies = cookies || {};

    for (const cookieName in cookies) {
      if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {
        let expires = '';
        let domain = '';
        let path = '';
        const cookieObj = cookies[cookieName];
        const isObj = typeof cookieObj === "object";
        const cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));

        if (isObj) {
          expires = cookieObj.expires ? ";expires=" + cookieObj.expires : '';
          domain = cookieObj.domain ? ";domain=" + cookieObj.domain : '';
          path = cookieObj.path ? ";path=" + cookieObj.path : '';
        }

        document.cookie = cookieName + '=' + cookieValue + expires + domain + path;
      }
    }
  }
};


/***/ }),

/***/ "./node_modules/strophe.js/src/websocket.js":
/*!**************************************************!*\
  !*** ./node_modules/strophe.js/src/websocket.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shims */ "./src/strophe-shims.js");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core */ "./node_modules/strophe.js/src/core.js");
/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2006-2008, OGG, LLC
*/

/* global window, clearTimeout, WebSocket, DOMParser */


/** Class: Strophe.WebSocket
 *  _Private_ helper class that handles WebSocket Connections
 *
 *  The Strophe.WebSocket class is used internally by Strophe.Connection
 *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.
 */

/** File: websocket.js
 *  A JavaScript library to enable XMPP over Websocket in Strophejs.
 *
 *  This file implements XMPP over WebSockets for Strophejs.
 *  If a Connection is established with a Websocket url (ws://...)
 *  Strophe will use WebSockets.
 *  For more information on XMPP-over-WebSocket see RFC 7395:
 *  http://tools.ietf.org/html/rfc7395
 *
 *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)
 */

_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Websocket = class Websocket {
  /** PrivateConstructor: Strophe.Websocket
   *  Create and initialize a Strophe.WebSocket object.
   *  Currently only sets the connection Object.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.
   *
   *  Returns:
   *    A new Strophe.WebSocket object.
   */
  constructor(connection) {
    this._conn = connection;
    this.strip = "wrapper";
    const service = connection.service;

    if (service.indexOf("ws:") !== 0 && service.indexOf("wss:") !== 0) {
      // If the service is not an absolute URL, assume it is a path and put the absolute
      // URL together from options, current URL and the path.
      let new_service = "";

      if (connection.options.protocol === "ws" && window.location.protocol !== "https:") {
        new_service += "ws";
      } else {
        new_service += "wss";
      }

      new_service += "://" + window.location.host;

      if (service.indexOf("/") !== 0) {
        new_service += window.location.pathname + service;
      } else {
        new_service += service;
      }

      connection.service = new_service;
    }
  }
  /** PrivateFunction: _buildStream
   *  _Private_ helper function to generate the <stream> start tag for WebSockets
   *
   *  Returns:
   *    A Strophe.Builder with a <stream> element.
   */


  _buildStream() {
    return (0,_core__WEBPACK_IMPORTED_MODULE_1__.$build)("open", {
      "xmlns": _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.FRAMING,
      "to": this._conn.domain,
      "version": '1.0'
    });
  }
  /** PrivateFunction: _checkStreamError
   * _Private_ checks a message for stream:error
   *
   *  Parameters:
   *    (Strophe.Request) bodyWrap - The received stanza.
   *    connectstatus - The ConnectStatus that will be set on error.
   *  Returns:
   *     true if there was a streamerror, false otherwise.
   */


  _checkStreamError(bodyWrap, connectstatus) {
    let errors;

    if (bodyWrap.getElementsByTagNameNS) {
      errors = bodyWrap.getElementsByTagNameNS(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.STREAM, "error");
    } else {
      errors = bodyWrap.getElementsByTagName("stream:error");
    }

    if (errors.length === 0) {
      return false;
    }

    const error = errors[0];
    let condition = "";
    let text = "";
    const ns = "urn:ietf:params:xml:ns:xmpp-streams";

    for (let i = 0; i < error.childNodes.length; i++) {
      const e = error.childNodes[i];

      if (e.getAttribute("xmlns") !== ns) {
        break;
      }

      if (e.nodeName === "text") {
        text = e.textContent;
      } else {
        condition = e.nodeName;
      }
    }

    let errorString = "WebSocket stream error: ";

    if (condition) {
      errorString += condition;
    } else {
      errorString += "unknown";
    }

    if (text) {
      errorString += " - " + text;
    }

    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error(errorString); // close the connection on stream_error

    this._conn._changeConnectStatus(connectstatus, condition);

    this._conn._doDisconnect();

    return true;
  }
  /** PrivateFunction: _reset
   *  Reset the connection.
   *
   *  This function is called by the reset function of the Strophe Connection.
   *  Is not needed by WebSockets.
   */


  _reset() {
    // eslint-disable-line class-methods-use-this
    return;
  }
  /** PrivateFunction: _connect
   *  _Private_ function called by Strophe.Connection.connect
   *
   *  Creates a WebSocket for a connection and assigns Callbacks to it.
   *  Does nothing if there already is a WebSocket.
   */


  _connect() {
    // Ensure that there is no open WebSocket from a previous Connection.
    this._closeSocket();

    this.socket = new _shims__WEBPACK_IMPORTED_MODULE_0__.WebSocket(this._conn.service, "xmpp");

    this.socket.onopen = () => this._onOpen();

    this.socket.onerror = e => this._onError(e);

    this.socket.onclose = e => this._onClose(e); // Gets replaced with this._onMessage once _onInitialMessage is called


    this.socket.onmessage = message => this._onInitialMessage(message);
  }
  /** PrivateFunction: _connect_cb
   *  _Private_ function called by Strophe.Connection._connect_cb
   *
   * checks for stream:error
   *
   *  Parameters:
   *    (Strophe.Request) bodyWrap - The received stanza.
   */


  _connect_cb(bodyWrap) {
    const error = this._checkStreamError(bodyWrap, _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL);

    if (error) {
      return _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL;
    }
  }
  /** PrivateFunction: _handleStreamStart
   * _Private_ function that checks the opening <open /> tag for errors.
   *
   * Disconnects if there is an error and returns false, true otherwise.
   *
   *  Parameters:
   *    (Node) message - Stanza containing the <open /> tag.
   */


  _handleStreamStart(message) {
    let error = false; // Check for errors in the <open /> tag

    const ns = message.getAttribute("xmlns");

    if (typeof ns !== "string") {
      error = "Missing xmlns in <open />";
    } else if (ns !== _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.FRAMING) {
      error = "Wrong xmlns in <open />: " + ns;
    }

    const ver = message.getAttribute("version");

    if (typeof ver !== "string") {
      error = "Missing version in <open />";
    } else if (ver !== "1.0") {
      error = "Wrong version in <open />: " + ver;
    }

    if (error) {
      this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, error);

      this._conn._doDisconnect();

      return false;
    }

    return true;
  }
  /** PrivateFunction: _onInitialMessage
   * _Private_ function that handles the first connection messages.
   *
   * On receiving an opening stream tag this callback replaces itself with the real
   * message handler. On receiving a stream error the connection is terminated.
   */


  _onInitialMessage(message) {
    if (message.data.indexOf("<open ") === 0 || message.data.indexOf("<?xml") === 0) {
      // Strip the XML Declaration, if there is one
      const data = message.data.replace(/^(<\?.*?\?>\s*)*/, "");
      if (data === '') return;
      const streamStart = new _shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser().parseFromString(data, "text/xml").documentElement;

      this._conn.xmlInput(streamStart);

      this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error


      if (this._handleStreamStart(streamStart)) {
        //_connect_cb will check for stream:error and disconnect on error
        this._connect_cb(streamStart);
      }
    } else if (message.data.indexOf("<close ") === 0) {
      // <close xmlns="urn:ietf:params:xml:ns:xmpp-framing />
      // Parse the raw string to an XML element
      const parsedMessage = new _shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser().parseFromString(message.data, "text/xml").documentElement; // Report this input to the raw and xml handlers

      this._conn.xmlInput(parsedMessage);

      this._conn.rawInput(message.data);

      const see_uri = parsedMessage.getAttribute("see-other-uri");

      if (see_uri) {
        const service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY

        const isSecureRedirect = service.indexOf("wss:") >= 0 && see_uri.indexOf("wss:") >= 0 || service.indexOf("ws:") >= 0;

        if (isSecureRedirect) {
          this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.REDIRECT, "Received see-other-uri, resetting connection");

          this._conn.reset();

          this._conn.service = see_uri;

          this._connect();
        }
      } else {
        this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, "Received closing stream");

        this._conn._doDisconnect();
      }
    } else {
      this._replaceMessageHandler();

      const string = this._streamWrap(message.data);

      const elem = new _shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser().parseFromString(string, "text/xml").documentElement;

      this._conn._connect_cb(elem, null, message.data);
    }
  }
  /** PrivateFunction: _replaceMessageHandler
   *
   * Called by _onInitialMessage in order to replace itself with the general message handler.
   * This method is overridden by Strophe.WorkerWebsocket, which manages a
   * websocket connection via a service worker and doesn't have direct access
   * to the socket.
   */


  _replaceMessageHandler() {
    this.socket.onmessage = m => this._onMessage(m);
  }
  /** PrivateFunction: _disconnect
   *  _Private_ function called by Strophe.Connection.disconnect
   *
   *  Disconnects and sends a last stanza if one is given
   *
   *  Parameters:
   *    (Request) pres - This stanza will be sent before disconnecting.
   */


  _disconnect(pres) {
    if (this.socket && this.socket.readyState !== _shims__WEBPACK_IMPORTED_MODULE_0__.WebSocket.CLOSED) {
      if (pres) {
        this._conn.send(pres);
      }

      const close = (0,_core__WEBPACK_IMPORTED_MODULE_1__.$build)("close", {
        "xmlns": _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.FRAMING
      });

      this._conn.xmlOutput(close.tree());

      const closeString = _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.serialize(close);

      this._conn.rawOutput(closeString);

      try {
        this.socket.send(closeString);
      } catch (e) {
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.warn("Couldn't send <close /> tag.");
      }
    }

    setTimeout(() => this._conn._doDisconnect, 0);
  }
  /** PrivateFunction: _doDisconnect
   *  _Private_ function to disconnect.
   *
   *  Just closes the Socket for WebSockets
   */


  _doDisconnect() {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("WebSockets _doDisconnect was called");

    this._closeSocket();
  }
  /** PrivateFunction _streamWrap
   *  _Private_ helper function to wrap a stanza in a <stream> tag.
   *  This is used so Strophe can process stanzas from WebSockets like BOSH
   */


  _streamWrap(stanza) {
    // eslint-disable-line class-methods-use-this
    return "<wrapper>" + stanza + '</wrapper>';
  }
  /** PrivateFunction: _closeSocket
   *  _Private_ function to close the WebSocket.
   *
   *  Closes the socket if it is still open and deletes it
   */


  _closeSocket() {
    if (this.socket) {
      try {
        this.socket.onclose = null;
        this.socket.onerror = null;
        this.socket.onmessage = null;
        this.socket.close();
      } catch (e) {
        _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug(e.message);
      }
    }

    this.socket = null;
  }
  /** PrivateFunction: _emptyQueue
   * _Private_ function to check if the message queue is empty.
   *
   *  Returns:
   *    True, because WebSocket messages are send immediately after queueing.
   */


  _emptyQueue() {
    // eslint-disable-line class-methods-use-this
    return true;
  }
  /** PrivateFunction: _onClose
   * _Private_ function to handle websockets closing.
   */


  _onClose(e) {
    if (this._conn.connected && !this._conn.disconnecting) {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("Websocket closed unexpectedly");

      this._conn._doDisconnect();
    } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {
      // in case the onError callback was not called (Safari 10 does not
      // call onerror when the initial connection fails) we need to
      // dispatch a CONNFAIL status update to be consistent with the
      // behavior on other browsers.
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("Websocket closed unexcectedly");

      this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected.");

      this._conn._doDisconnect();
    } else {
      _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("Websocket closed");
    }
  }
  /** PrivateFunction: _no_auth_received
   *
   * Called on stream start/restart when no stream:features
   * has been received.
   */


  _no_auth_received(callback) {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("Server did not offer a supported authentication mechanism");

    this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.ErrorCondition.NO_AUTH_MECH);

    if (callback) {
      callback.call(this._conn);
    }

    this._conn._doDisconnect();
  }
  /** PrivateFunction: _onDisconnectTimeout
   *  _Private_ timeout handler for handling non-graceful disconnection.
   *
   *  This does nothing for WebSockets
   */


  _onDisconnectTimeout() {} // eslint-disable-line class-methods-use-this

  /** PrivateFunction: _abortAllRequests
   *  _Private_ helper function that makes sure all pending requests are aborted.
   */


  _abortAllRequests() {} // eslint-disable-line class-methods-use-this

  /** PrivateFunction: _onError
   * _Private_ function to handle websockets errors.
   *
   * Parameters:
   * (Object) error - The websocket error.
   */


  _onError(error) {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("Websocket error " + JSON.stringify(error));

    this._conn._changeConnectStatus(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected.");

    this._disconnect();
  }
  /** PrivateFunction: _onIdle
   *  _Private_ function called by Strophe.Connection._onIdle
   *
   *  sends all queued stanzas
   */


  _onIdle() {
    const data = this._conn._data;

    if (data.length > 0 && !this._conn.paused) {
      for (let i = 0; i < data.length; i++) {
        if (data[i] !== null) {
          let stanza;

          if (data[i] === "restart") {
            stanza = this._buildStream().tree();
          } else {
            stanza = data[i];
          }

          const rawStanza = _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.serialize(stanza);

          this._conn.xmlOutput(stanza);

          this._conn.rawOutput(rawStanza);

          this.socket.send(rawStanza);
        }
      }

      this._conn._data = [];
    }
  }
  /** PrivateFunction: _onMessage
   * _Private_ function to handle websockets messages.
   *
   * This function parses each of the messages as if they are full documents.
   * [TODO : We may actually want to use a SAX Push parser].
   *
   * Since all XMPP traffic starts with
   *  <stream:stream version='1.0'
   *                 xml:lang='en'
   *                 xmlns='jabber:client'
   *                 xmlns:stream='http://etherx.jabber.org/streams'
   *                 id='3697395463'
   *                 from='SERVER'>
   *
   * The first stanza will always fail to be parsed.
   *
   * Additionally, the seconds stanza will always be <stream:features> with
   * the stream NS defined in the previous stanza, so we need to 'force'
   * the inclusion of the NS in this stanza.
   *
   * Parameters:
   * (string) message - The websocket message.
   */


  _onMessage(message) {
    let elem; // check for closing stream

    const close = '<close xmlns="urn:ietf:params:xml:ns:xmpp-framing" />';

    if (message.data === close) {
      this._conn.rawInput(close);

      this._conn.xmlInput(message);

      if (!this._conn.disconnecting) {
        this._conn._doDisconnect();
      }

      return;
    } else if (message.data.search("<open ") === 0) {
      // This handles stream restarts
      elem = new _shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser().parseFromString(message.data, "text/xml").documentElement;

      if (!this._handleStreamStart(elem)) {
        return;
      }
    } else {
      const data = this._streamWrap(message.data);

      elem = new _shims__WEBPACK_IMPORTED_MODULE_0__.DOMParser().parseFromString(data, "text/xml").documentElement;
    }

    if (this._checkStreamError(elem, _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.ERROR)) {
      return;
    } //handle unavailable presence stanza before disconnecting


    if (this._conn.disconnecting && elem.firstChild.nodeName === "presence" && elem.firstChild.getAttribute("type") === "unavailable") {
      this._conn.xmlInput(elem);

      this._conn.rawInput(_core__WEBPACK_IMPORTED_MODULE_1__.Strophe.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and
      // wait for the </stream:stream> tag before we close the connection


      return;
    }

    this._conn._dataRecv(elem, message.data);
  }
  /** PrivateFunction: _onOpen
   * _Private_ function to handle websockets connection setup.
   *
   * The opening stream tag is sent here.
   */


  _onOpen() {
    _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("Websocket open");

    const start = this._buildStream();

    this._conn.xmlOutput(start.tree());

    const startString = _core__WEBPACK_IMPORTED_MODULE_1__.Strophe.serialize(start);

    this._conn.rawOutput(startString);

    this.socket.send(startString);
  }
  /** PrivateFunction: _reqToData
   * _Private_ function to get a stanza out of a request.
   *
   * WebSockets don't use requests, so the passed argument is just returned.
   *
   *  Parameters:
   *    (Object) stanza - The stanza.
   *
   *  Returns:
   *    The stanza that was passed.
   */


  _reqToData(stanza) {
    // eslint-disable-line class-methods-use-this
    return stanza;
  }
  /** PrivateFunction: _send
   *  _Private_ part of the Connection.send function for WebSocket
   *
   * Just flushes the messages that are in the queue
   */


  _send() {
    this._conn.flush();
  }
  /** PrivateFunction: _sendRestart
   *
   *  Send an xmpp:restart stanza.
   */


  _sendRestart() {
    clearTimeout(this._conn._idleTimeout);

    this._conn._onIdle.bind(this._conn)();
  }

};

/***/ }),

/***/ "./node_modules/strophe.js/src/worker-websocket.js":
/*!*********************************************************!*\
  !*** ./node_modules/strophe.js/src/worker-websocket.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _websocket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websocket.js */ "./node_modules/strophe.js/src/websocket.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ "./node_modules/strophe.js/src/core.js");
/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2020, JC Brand
*/


const lmap = {};
lmap['debug'] = _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.DEBUG;
lmap['info'] = _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.INFO;
lmap['warn'] = _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.WARN;
lmap['error'] = _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.ERROR;
lmap['fatal'] = _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.FATAL;
/** Class: Strophe.WorkerWebsocket
 *  _Private_ helper class that handles a websocket connection inside a shared worker.
 */

_core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.WorkerWebsocket = class WorkerWebsocket extends _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.Websocket {
  /** PrivateConstructor: Strophe.WorkerWebsocket
   *  Create and initialize a Strophe.WorkerWebsocket object.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - The Strophe.Connection
   *
   *  Returns:
   *    A new Strophe.WorkerWebsocket object.
   */
  constructor(connection) {
    super(connection);
    this._conn = connection;
    this.worker = new SharedWorker(this._conn.options.worker, 'Strophe XMPP Connection');

    this.worker.onerror = e => {
      var _console;

      (_console = console) === null || _console === void 0 ? void 0 : _console.error(e);
      _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.log(_core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.ERROR, `Shared Worker Error: ${e}`);
    };
  }

  get socket() {
    return {
      'send': str => this.worker.port.postMessage(['send', str])
    };
  }

  _connect() {
    this._messageHandler = m => this._onInitialMessage(m);

    this.worker.port.start();

    this.worker.port.onmessage = ev => this._onWorkerMessage(ev);

    this.worker.port.postMessage(['_connect', this._conn.service, this._conn.jid]);
  }

  _attach(callback) {
    this._messageHandler = m => this._onMessage(m);

    this._conn.connect_callback = callback;
    this.worker.port.start();

    this.worker.port.onmessage = ev => this._onWorkerMessage(ev);

    this.worker.port.postMessage(['_attach', this._conn.service]);
  }

  _attachCallback(status, jid) {
    if (status === _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.ATTACHED) {
      this._conn.jid = jid;
      this._conn.authenticated = true;
      this._conn.connected = true;
      this._conn.restored = true;

      this._conn._changeConnectStatus(_core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.ATTACHED);
    } else if (status === _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.ATTACHFAIL) {
      this._conn.authenticated = false;
      this._conn.connected = false;
      this._conn.restored = false;

      this._conn._changeConnectStatus(_core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.ATTACHFAIL);
    }
  }

  _disconnect(readyState, pres) {
    pres && this._conn.send(pres);
    const close = (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.$build)("close", {
      "xmlns": _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.FRAMING
    });

    this._conn.xmlOutput(close.tree());

    const closeString = _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.serialize(close);

    this._conn.rawOutput(closeString);

    this.worker.port.postMessage(['send', closeString]);

    this._conn._doDisconnect();
  }

  _onClose(e) {
    if (this._conn.connected && !this._conn.disconnecting) {
      _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("Websocket closed unexpectedly");

      this._conn._doDisconnect();
    } else if (e && e.code === 1006 && !this._conn.connected) {
      // in case the onError callback was not called (Safari 10 does not
      // call onerror when the initial connection fails) we need to
      // dispatch a CONNFAIL status update to be consistent with the
      // behavior on other browsers.
      _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.error("Websocket closed unexcectedly");

      this._conn._changeConnectStatus(_core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected.");

      this._conn._doDisconnect();
    } else {
      _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.debug("Websocket closed");
    }
  }

  _closeSocket() {
    this.worker.port.postMessage(['_closeSocket']);
  }
  /** PrivateFunction: _replaceMessageHandler
   *
   * Called by _onInitialMessage in order to replace itself with the general message handler.
   * This method is overridden by Strophe.WorkerWebsocket, which manages a
   * websocket connection via a service worker and doesn't have direct access
   * to the socket.
   */


  _replaceMessageHandler() {
    this._messageHandler = m => this._onMessage(m);
  }
  /** PrivateFunction: _onWorkerMessage
   * _Private_ function that handles messages received from the service worker
   */


  _onWorkerMessage(ev) {
    const {
      data
    } = ev;
    const method_name = data[0];

    if (method_name === '_onMessage') {
      this._messageHandler(data[1]);
    } else if (method_name in this) {
      try {
        this[method_name].apply(this, ev.data.slice(1));
      } catch (e) {
        _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.log(_core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.ERROR, e);
      }
    } else if (method_name === 'log') {
      const level = data[1];
      const msg = data[2];
      _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.log(lmap[level], msg);
    } else {
      _core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.log(_core_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.LogLevel.ERROR, `Found unhandled service worker message: ${data}`);
    }
  }

};

/***/ }),

/***/ "./node_modules/urijs/src/IPv6.js":
/*!****************************************!*\
  !*** ./node_modules/urijs/src/IPv6.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict'; // https://github.com/umdjs/umd/blob/master/returnExports.js

  if ( true && module.exports) {
    // Node
    module.exports = factory();
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function (root) {
  'use strict';
  /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";
   console.log(_in, _out, _expected, _out === _expected);
  */
  // save current IPv6 variable, if any

  var _IPv6 = root && root.IPv6;

  function bestPresentation(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js
    var _address = address.toLowerCase();

    var segments = _address.split(':');

    var length = segments.length;
    var total = 8; // trim colons (:: or ::a:b:c… or …a:b:c::)

    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
      // must have been ::
      // remove first two items
      segments.shift();
      segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
      // must have been ::xxxx
      // remove the first item
      segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
      // must have been xxxx::
      segments.pop();
    }

    length = segments.length; // adjust total segments for IPv4 trailer

    if (segments[length - 1].indexOf('.') !== -1) {
      // found a "." which means IPv4
      total = 7;
    } // fill empty segments them with "0000"


    var pos;

    for (pos = 0; pos < length; pos++) {
      if (segments[pos] === '') {
        break;
      }
    }

    if (pos < total) {
      segments.splice(pos, 1, '0000');

      while (segments.length < total) {
        segments.splice(pos, 0, '0000');
      }
    } // strip leading zeros


    var _segments;

    for (var i = 0; i < total; i++) {
      _segments = segments[i].split('');

      for (var j = 0; j < 3; j++) {
        if (_segments[0] === '0' && _segments.length > 1) {
          _segments.splice(0, 1);
        } else {
          break;
        }
      }

      segments[i] = _segments.join('');
    } // find longest sequence of zeroes and coalesce them into one segment


    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false; // i; already declared

    for (i = 0; i < total; i++) {
      if (inzeroes) {
        if (segments[i] === '0') {
          _current += 1;
        } else {
          inzeroes = false;

          if (_current > _best) {
            best = current;
            _best = _current;
          }
        }
      } else {
        if (segments[i] === '0') {
          inzeroes = true;
          current = i;
          _current = 1;
        }
      }
    }

    if (_current > _best) {
      best = current;
      _best = _current;
    }

    if (_best > 1) {
      segments.splice(best, _best, '');
    }

    length = segments.length; // assemble remaining segments

    var result = '';

    if (segments[0] === '') {
      result = ':';
    }

    for (i = 0; i < length; i++) {
      result += segments[i];

      if (i === length - 1) {
        break;
      }

      result += ':';
    }

    if (segments[length - 1] === '') {
      result += ':';
    }

    return result;
  }

  function noConflict() {
    /*jshint validthis: true */
    if (root.IPv6 === this) {
      root.IPv6 = _IPv6;
    }

    return this;
  }

  return {
    best: bestPresentation,
    noConflict: noConflict
  };
});

/***/ }),

/***/ "./node_modules/urijs/src/SecondLevelDomains.js":
/*!******************************************************!*\
  !*** ./node_modules/urijs/src/SecondLevelDomains.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict'; // https://github.com/umdjs/umd/blob/master/returnExports.js

  if ( true && module.exports) {
    // Node
    module.exports = factory();
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function (root) {
  'use strict'; // save current SecondLevelDomains variable, if any

  var _SecondLevelDomains = root && root.SecondLevelDomains;

  var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
      'ac': ' com gov mil net org ',
      'ae': ' ac co gov mil name net org pro sch ',
      'af': ' com edu gov net org ',
      'al': ' com edu gov mil net org ',
      'ao': ' co ed gv it og pb ',
      'ar': ' com edu gob gov int mil net org tur ',
      'at': ' ac co gv or ',
      'au': ' asn com csiro edu gov id net org ',
      'ba': ' co com edu gov mil net org rs unbi unmo unsa untz unze ',
      'bb': ' biz co com edu gov info net org store tv ',
      'bh': ' biz cc com edu gov info net org ',
      'bn': ' com edu gov net org ',
      'bo': ' com edu gob gov int mil net org tv ',
      'br': ' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
      'bs': ' com edu gov net org ',
      'bz': ' du et om ov rg ',
      'ca': ' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
      'ck': ' biz co edu gen gov info net org ',
      'cn': ' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
      'co': ' com edu gov mil net nom org ',
      'cr': ' ac c co ed fi go or sa ',
      'cy': ' ac biz com ekloges gov ltd name net org parliament press pro tm ',
      'do': ' art com edu gob gov mil net org sld web ',
      'dz': ' art asso com edu gov net org pol ',
      'ec': ' com edu fin gov info med mil net org pro ',
      'eg': ' com edu eun gov mil name net org sci ',
      'er': ' com edu gov ind mil net org rochest w ',
      'es': ' com edu gob nom org ',
      'et': ' biz com edu gov info name net org ',
      'fj': ' ac biz com info mil name net org pro ',
      'fk': ' ac co gov net nom org ',
      'fr': ' asso com f gouv nom prd presse tm ',
      'gg': ' co net org ',
      'gh': ' com edu gov mil org ',
      'gn': ' ac com gov net org ',
      'gr': ' com edu gov mil net org ',
      'gt': ' com edu gob ind mil net org ',
      'gu': ' com edu gov net org ',
      'hk': ' com edu gov idv net org ',
      'hu': ' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
      'id': ' ac co go mil net or sch web ',
      'il': ' ac co gov idf k12 muni net org ',
      'in': ' ac co edu ernet firm gen gov i ind mil net nic org res ',
      'iq': ' com edu gov i mil net org ',
      'ir': ' ac co dnssec gov i id net org sch ',
      'it': ' edu gov ',
      'je': ' co net org ',
      'jo': ' com edu gov mil name net org sch ',
      'jp': ' ac ad co ed go gr lg ne or ',
      'ke': ' ac co go info me mobi ne or sc ',
      'kh': ' com edu gov mil net org per ',
      'ki': ' biz com de edu gov info mob net org tel ',
      'km': ' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
      'kn': ' edu gov net org ',
      'kr': ' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
      'kw': ' com edu gov net org ',
      'ky': ' com edu gov net org ',
      'kz': ' com edu gov mil net org ',
      'lb': ' com edu gov net org ',
      'lk': ' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
      'lr': ' com edu gov net org ',
      'lv': ' asn com conf edu gov id mil net org ',
      'ly': ' com edu gov id med net org plc sch ',
      'ma': ' ac co gov m net org press ',
      'mc': ' asso tm ',
      'me': ' ac co edu gov its net org priv ',
      'mg': ' com edu gov mil nom org prd tm ',
      'mk': ' com edu gov inf name net org pro ',
      'ml': ' com edu gov net org presse ',
      'mn': ' edu gov org ',
      'mo': ' com edu gov net org ',
      'mt': ' com edu gov net org ',
      'mv': ' aero biz com coop edu gov info int mil museum name net org pro ',
      'mw': ' ac co com coop edu gov int museum net org ',
      'mx': ' com edu gob net org ',
      'my': ' com edu gov mil name net org sch ',
      'nf': ' arts com firm info net other per rec store web ',
      'ng': ' biz com edu gov mil mobi name net org sch ',
      'ni': ' ac co com edu gob mil net nom org ',
      'np': ' com edu gov mil net org ',
      'nr': ' biz com edu gov info net org ',
      'om': ' ac biz co com edu gov med mil museum net org pro sch ',
      'pe': ' com edu gob mil net nom org sld ',
      'ph': ' com edu gov i mil net ngo org ',
      'pk': ' biz com edu fam gob gok gon gop gos gov net org web ',
      'pl': ' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
      'pr': ' ac biz com edu est gov info isla name net org pro prof ',
      'ps': ' com edu gov net org plo sec ',
      'pw': ' belau co ed go ne or ',
      'ro': ' arts com firm info nom nt org rec store tm www ',
      'rs': ' ac co edu gov in org ',
      'sb': ' com edu gov net org ',
      'sc': ' com edu gov net org ',
      'sh': ' co com edu gov net nom org ',
      'sl': ' com edu gov net org ',
      'st': ' co com consulado edu embaixada gov mil net org principe saotome store ',
      'sv': ' com edu gob org red ',
      'sz': ' ac co org ',
      'tr': ' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
      'tt': ' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
      'tw': ' club com ebiz edu game gov idv mil net org ',
      'mu': ' ac co com gov net or org ',
      'mz': ' ac co edu gov org ',
      'na': ' co com ',
      'nz': ' ac co cri geek gen govt health iwi maori mil net org parliament school ',
      'pa': ' abo ac com edu gob ing med net nom org sld ',
      'pt': ' com edu gov int net nome org publ ',
      'py': ' com edu gov mil net org ',
      'qa': ' com edu gov mil net org ',
      're': ' asso com nom ',
      'ru': ' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
      'rw': ' ac co com edu gouv gov int mil net ',
      'sa': ' com edu gov med net org pub sch ',
      'sd': ' com edu gov info med net org tv ',
      'se': ' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
      'sg': ' com edu gov idn net org per ',
      'sn': ' art com edu gouv org perso univ ',
      'sy': ' com edu gov mil net news org ',
      'th': ' ac co go in mi net or ',
      'tj': ' ac biz co com edu go gov info int mil name net nic org test web ',
      'tn': ' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
      'tz': ' ac co go ne or ',
      'ua': ' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
      'ug': ' ac co go ne or org sc ',
      'uk': ' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
      'us': ' dni fed isa kids nsn ',
      'uy': ' com edu gub mil net org ',
      've': ' co com edu gob info mil net org web ',
      'vi': ' co com k12 net org ',
      'vn': ' ac biz com edu gov health info int name net org pro ',
      'ye': ' co com gov ltd me net org plc ',
      'yu': ' ac co edu gov org ',
      'za': ' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
      'zm': ' ac co com edu gov net org sch ',
      // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
      'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',
      'net': 'gb jp se uk ',
      'org': 'ae',
      'de': 'com '
    },
    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
    // in both performance and memory footprint. No initialization required.
    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
    // Following methods use lastIndexOf() rather than array.split() in order
    // to avoid any memory allocations.
    has: function (domain) {
      var tldOffset = domain.lastIndexOf('.');

      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
        return false;
      }

      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);

      if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
        return false;
      }

      var sldList = SLD.list[domain.slice(tldOffset + 1)];

      if (!sldList) {
        return false;
      }

      return sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') >= 0;
    },
    is: function (domain) {
      var tldOffset = domain.lastIndexOf('.');

      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
        return false;
      }

      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);

      if (sldOffset >= 0) {
        return false;
      }

      var sldList = SLD.list[domain.slice(tldOffset + 1)];

      if (!sldList) {
        return false;
      }

      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
    },
    get: function (domain) {
      var tldOffset = domain.lastIndexOf('.');

      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
        return null;
      }

      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);

      if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
        return null;
      }

      var sldList = SLD.list[domain.slice(tldOffset + 1)];

      if (!sldList) {
        return null;
      }

      if (sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') < 0) {
        return null;
      }

      return domain.slice(sldOffset + 1);
    },
    noConflict: function () {
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }

      return this;
    }
  };
  return SLD;
});

/***/ }),

/***/ "./node_modules/urijs/src/URI.js":
/*!***************************************!*\
  !*** ./node_modules/urijs/src/URI.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict'; // https://github.com/umdjs/umd/blob/master/returnExports.js

  if ( true && module.exports) {
    // Node
    module.exports = factory(__webpack_require__(/*! ./punycode */ "./node_modules/urijs/src/punycode.js"), __webpack_require__(/*! ./IPv6 */ "./node_modules/urijs/src/IPv6.js"), __webpack_require__(/*! ./SecondLevelDomains */ "./node_modules/urijs/src/SecondLevelDomains.js"));
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./punycode */ "./node_modules/urijs/src/punycode.js"), __webpack_require__(/*! ./IPv6 */ "./node_modules/urijs/src/IPv6.js"), __webpack_require__(/*! ./SecondLevelDomains */ "./node_modules/urijs/src/SecondLevelDomains.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase

  /*jshint camelcase: false */
  // save current URI variable, if any

  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;

    var _baseSupplied = arguments.length >= 2; // Allow instantiation without the 'new' keyword


    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    if (url === null) {
      if (_urlSupplied) {
        throw new TypeError('null is not a valid argument for URI');
      }
    }

    this.href(url); // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor

    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  function isInteger(value) {
    return /^[0-9]+$/.test(value);
  }

  URI.version = '1.19.11';
  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */


      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length; // value may be string, number, array, regexp

    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);

    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    } // arrays can't be equal if they have different amount of content


    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function () {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      preventInvalidHostname: URI.preventInvalidHostname,
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  }; // state: throw on invalid hostname
  // see https://github.com/medialize/URI.js/pull/345
  // and https://github.com/medialize/URI.js/issues/354


  URI.preventInvalidHostname = false; // state: allow duplicate query parameters (a=1&a=1)

  URI.duplicateQueryParameters = false; // state: replaces + with %20 (space in query strings)

  URI.escapeQuerySpace = true; // static properties

  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\._-]/i;
  URI.punycode_expression = /(xn--)/i; // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?

  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/; // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt

  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/; // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html

  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
    // balanced parens inclusion (), [], {}, <>
    parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g
  };
  URI.leading_whitespace_expression = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/; // https://infra.spec.whatwg.org/#ascii-tab-or-newline

  URI.ascii_tab_whitespace = /[\u0009\u000A\u000D]+/g; // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports

  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  }; // list of protocols which always require a hostname

  URI.hostProtocols = ['http', 'https']; // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _

  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/; // map DOM Elements to their URI attribute

  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src',
    // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };

  URI.getDomAttribute = function (node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase(); // <input> should only expose src for type="image"

    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  } // encoding / decoding according to RFC3986


  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, '%2A');
  }

  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;

  URI.iso8859 = function () {
    URI.encode = escape;
    URI.decode = unescape;
  };

  URI.unicode = function () {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };

  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };

  URI.encodeQuery = function (string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };

  URI.decodeQuery = function (string, escapeQuerySpace) {
    string += '';

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch (e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  }; // generate encode/decode path functions


  var _parts = {
    'encode': 'encode',
    'decode': 'decode'
  };

  var _part;

  var generateAccessor = function (_group, _part) {
    return function (string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function (c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function (_sep, _codingFuncName, _innerCodingFuncName) {
    return function (string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;

      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function (string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  }; // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.


  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function (string, parts) {
    var pos;

    if (!parts) {
      parts = {
        preventInvalidHostname: URI.preventInvalidHostname
      };
    }

    string = string.replace(URI.leading_whitespace_expression, ''); // https://infra.spec.whatwg.org/#ascii-tab-or-newline

    string = string.replace(URI.ascii_tab_whitespace, ''); // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
    // extract fragment

    pos = string.indexOf('#');

    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // extract query


    pos = string.indexOf('?');

    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // slashes and backslashes have lost all meaning for the web protocols (https, http, wss, ws)


    string = string.replace(/^(https?|ftp|wss?)?:+[/\\]*/i, '$1://'); // slashes and backslashes have lost all meaning for scheme relative URLs

    string = string.replace(/^[/\\]{2,}/i, '//'); // extract protocol

    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2); // extract "user:pass@host:port"

      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');

      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;

        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3).replace(/\\/g, '/') === '//') {
          string = string.substring(pos + 3); // extract "user:pass@host:port"

          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    } // what's left must be the path


    parts.path = string; // and we're done

    return parts;
  };

  URI.parseHost = function (string, parts) {
    if (!string) {
      string = '';
    } // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233


    string = string.replace(/\\/g, '/'); // extract host:port

    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;

      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);

      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    if (parts.preventInvalidHostname) {
      URI.ensureValidHostname(parts.hostname, parts.protocol);
    }

    if (parts.port) {
      URI.ensureValidPort(parts.port);
    }

    return string.substring(pos) || '/';
  };

  URI.parseAuthority = function (string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };

  URI.parseUserinfo = function (string, parts) {
    // extract username:password
    var _string = string;
    var firstBackSlash = string.indexOf('\\');

    if (firstBackSlash !== -1) {
      string = string.replace(/\\/g, '/');
    }

    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t; // authority@ must come before /path or \path

    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = _string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };

  URI.parseQuery = function (string, escapeQuerySpace) {
    if (!string) {
      return {};
    } // throw out the funky business - "?"[name"="value"&"]+


    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace); // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters

      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (name === '__proto__') {
        // ignore attempt at exploiting JavaScript internals
        continue;
      } else if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function (parts) {
    var t = '';
    var requireAbsolutePath = false;

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
      requireAbsolutePath = true;
    }

    t += URI.buildAuthority(parts) || '';

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && requireAbsolutePath) {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }

    return t;
  };

  URI.buildHost = function (parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };

  URI.buildAuthority = function (parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };

  URI.buildUserinfo = function (parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);
    }

    if (parts.password) {
      t += ':' + URI.encode(parts.password);
    }

    if (t) {
      t += '@';
    }

    return t;
  };

  URI.buildQuery = function (data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
    var t = '';
    var unique, key, i, length;

    for (key in data) {
      if (key === '__proto__') {
        // ignore attempt at exploiting JavaScript internals
        continue;
      } else if (hasOwn.call(data, key)) {
        if (isArray(data[key])) {
          unique = {};

          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);

              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };

  URI.buildQueryParameter = function (name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function (data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };

  URI.setQuery = function (data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.setQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      data[name] = value === undefined ? null : value;
    } else {
      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');
    }
  };

  URI.removeQuery = function (data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };

  URI.hasQuery = function (data, name, value, withinArray) {
    switch (getType(name)) {
      case 'String':
        // Nothing to do here
        break;

      case 'RegExp':
        for (var key in data) {
          if (hasOwn.call(data, key)) {
            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
              return true;
            }
          }
        }

        return false;

      case 'Object':
        for (var _key in name) {
          if (hasOwn.call(name, _key)) {
            if (!URI.hasQuery(data, _key, name[_key])) {
              return false;
            }
          }
        }

        return true;

      default:
        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data;
      // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);

        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);

      /* falls through */

      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };

  URI.joinPaths = function () {
    var input = [];
    var segments = [];
    var nonEmptySegments = 0;

    for (var i = 0; i < arguments.length; i++) {
      var url = new URI(arguments[i]);
      input.push(url);

      var _segments = url.segment();

      for (var s = 0; s < _segments.length; s++) {
        if (typeof _segments[s] === 'string') {
          segments.push(_segments[s]);
        }

        if (_segments[s]) {
          nonEmptySegments++;
        }
      }
    }

    if (!segments.length || !nonEmptySegments) {
      return new URI('');
    }

    var uri = new URI('').segment(segments);

    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
      uri.path('/' + uri.path());
    }

    return uri.normalize();
  };

  URI.commonPath = function (one, two) {
    var length = Math.min(one.length, two.length);
    var pos; // find first non-matching character

    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    } // revert to last /


    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function (string, callback, options) {
    options || (options = {});

    var _start = options.start || URI.findUri.start;

    var _end = options.end || URI.findUri.end;

    var _trim = options.trim || URI.findUri.trim;

    var _parens = options.parens || URI.findUri.parens;

    var _attributeOpen = /[a-z0-9-]=["']?$/i;
    _start.lastIndex = 0;

    while (true) {
      var match = _start.exec(string);

      if (!match) {
        break;
      }

      var start = match.index;

      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);

        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end); // make sure we include well balanced parens

      var parensEnd = -1;

      while (true) {
        var parensMatch = _parens.exec(slice);

        if (!parensMatch) {
          break;
        }

        var parensMatchEnd = parensMatch.index + parensMatch[0].length;
        parensEnd = Math.max(parensEnd, parensMatchEnd);
      }

      if (parensEnd > -1) {
        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');
      } else {
        slice = slice.replace(_trim, '');
      }

      if (slice.length <= match[0].length) {
        // the extract only contains the starting marker of a URI,
        // e.g. "www" or "http://"
        continue;
      }

      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);

      if (result === undefined) {
        _start.lastIndex = end;
        continue;
      }

      result = String(result);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function (v, protocol) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js
    var hasHostname = !!v; // not null and not an empty string

    var hasProtocol = !!protocol;
    var rejectEmptyHostname = false;

    if (hasProtocol) {
      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
    }

    if (rejectEmptyHostname && !hasHostname) {
      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);
    } else if (v && v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
      }
    }
  };

  URI.ensureValidPort = function (v) {
    if (!v) {
      return;
    }

    var port = Number(v);

    if (isInteger(port) && port > 0 && port < 65536) {
      return;
    }

    throw new TypeError('Port "' + v + '" is not a valid port');
  }; // noConflict


  URI.noConflict = function (removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function (deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function () {
    return new URI(this);
  };

  p.valueOf = p.toString = function () {
    return this.build(false)._string;
  };

  function generateSimpleAccessor(_part) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';

          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function (v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? '?' + t : t;
  };

  p.hash = function (v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? '#' + t : t;
  };

  p.pathname = function (v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }

      this.build(!build);
      return this;
    }
  };

  p.path = p.pathname;

  p.href = function (href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;

    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);

    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    } // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)


    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;

      for (key in src) {
        if (key === 'query') {
          continue;
        }

        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }

      if (src.query) {
        this.query(src.query, false);
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  }; // identification accessors


  p.is = function (what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;
      // hostname identification

      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  }; // component specific input validation


  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function (v, build) {
    if (v) {
      // accept trailing ://
      v = v.replace(/:(\/\/)?$/, '');

      if (!v.match(URI.protocol_expression)) {
        throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
      }
    }

    return _protocol.call(this, v, build);
  };

  p.scheme = p.protocol;

  p.port = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';

        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        URI.ensureValidPort(v);
      }
    }

    return _port.call(this, v, build);
  };

  p.hostname = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {
        preventInvalidHostname: this._parts.preventInvalidHostname
      };
      var res = URI.parseHost(v, x);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;

      if (this._parts.preventInvalidHostname) {
        URI.ensureValidHostname(v, this._parts.protocol);
      }
    }

    return _hostname.call(this, v, build);
  }; // compound accessors


  p.origin = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();

      if (!authority) {
        return '';
      }

      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
      return this;
    }
  };

  p.host = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.authority = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.userinfo = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var t = URI.buildUserinfo(this._parts);
      return t ? t.substring(0, t.length - 1) : t;
    } else {
      if (v[v.length - 1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };

  p.resource = function (v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  }; // fraction accessors


  p.subdomain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    } // convenience, return "www" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // grab domain and add another segment


      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;

      var sub = this._parts.hostname.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v.indexOf(':') !== -1) {
        throw new TypeError('Domains cannot contain colons');
      }

      if (v) {
        URI.ensureValidHostname(v, this._parts.protocol);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.domain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // convenience, return "example.org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // if hostname consists of 1 or 2 segments, it must be the domain


      var t = this._parts.hostname.match(/\./g);

      if (t && t.length < 2) {
        return this._parts.hostname;
      } // grab tld and add another segment


      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end - 1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      if (v.indexOf(':') !== -1) {
        throw new TypeError('Domains cannot contain colons');
      }

      URI.ensureValidHostname(v, this._parts.protocol);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.tld = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // return "org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');

      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.directory = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
      return v ? URI.decodePath(res) : res;
    } else {
      var e = this._parts.path.length - this.filename().length;

      var directory = this._parts.path.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(directory)); // fully qualifier directories begin with a slash

      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      } // directories always end with a slash


      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.filename = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v !== 'string') {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');

      var res = this._parts.path.substring(pos + 1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };

  p.suffix = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      } // suffix may only contain alnum characters (yup, I made this up.)


      s = filename.substring(pos + 1);
      res = /^[a-z0-9%]+$/i.test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.segment = function (segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined ? segments : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = []; // collapse empty elements within array

        for (var i = 0, l = v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length - 1].length) {
            segments.pop();
          }

          segments.push(trimSlashes(v[i]));
        }
      } else if (v || typeof v === 'string') {
        v = trimSlashes(v);

        if (segments[segments.length - 1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length - 1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = trimSlashes(v);
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };

  p.segmentCoded = function (segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);

      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = typeof v === 'string' || v instanceof String ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  }; // mutating query string


  var q = p.query;

  p.query = function (v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };

  p.setQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.addQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.removeQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.hasQuery = function (name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };

  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery; // sanitizing URLs

  p.normalize = function () {
    if (this._parts.urn) {
      return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    }

    return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
  };

  p.normalizeProtocol = function (build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizeHostname = function (build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizePort = function (build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizePath = function (build) {
    var _path = this._parts.path;

    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    _path = URI.recodePath(_path);

    var _was_relative;

    var _leadingParents = '';

    var _parent, _pos; // handle relative paths


    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    } // handle relative files (as opposed to directories)


    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    } // resolve simples


    _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, '/').replace(/\/{2,}/g, '/'); // remember leading parents

    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';

      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    } // resolve parents


    while (true) {
      _parent = _path.search(/\/\.\.(\/|$)/);

      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');

      if (_pos === -1) {
        _pos = _parent;
      }

      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    } // revert to relative


    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    this._parts.path = _path;
    this.build(!build);
    return this;
  };

  p.normalizePathname = p.normalizePath;

  p.normalizeQuery = function (build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };

  p.normalizeFragment = function (build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function () {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = escape;
    URI.decode = decodeURIComponent;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.unicode = function () {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.readable = function () {
    var uri = this.clone(); // removing username, password, because they shouldn't be displayed according to RFC 3986

    uri.username('').password('').normalize();
    var t = '';

    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);

        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);

    if (uri._parts.query) {
      var q = '';

      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, '%26');
        }
      }

      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  }; // resolving relative and absolute URLs


  p.absoluteTo = function (base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (resolved._parts.protocol) {
      // Directly returns even if this._parts.hostname is empty.
      return resolved;
    } else {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; p = properties[i]; i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;

      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else {
      if (resolved._parts.path.substring(-2) === '..') {
        resolved._parts.path += '/';
      }

      if (resolved.path().charAt(0) !== '/') {
        basedir = base.directory();
        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
        resolved._parts.path = (basedir ? basedir + '/' : '') + resolved._parts.path;
        resolved.normalizePath();
      }
    }

    resolved.build();
    return resolved;
  };

  p.relativeTo = function (base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    } // determine common sub path


    common = URI.commonPath(relativePath, basePath); // If the paths have nothing in common, return a relative URL with the absolute path.

    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, '').replace(/.*?\//g, '../');
    relativeParts.path = parents + relativeParts.path.substring(common.length) || './';
    return relative.build();
  }; // comparing URIs


  p.equals = function (uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;
    one.normalize();
    two.normalize(); // exact match

    if (one.toString() === two.toString()) {
      return true;
    } // extract query string


    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query(''); // definitely not equal if not even non-query parts match

    if (one.toString() !== two.toString()) {
      return false;
    } // query parameters have the same length, even if they're permuted


    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  }; // state


  p.preventInvalidHostname = function (v) {
    this._parts.preventInvalidHostname = !!v;
    return this;
  };

  p.duplicateQueryParameters = function (v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function (v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
});

/***/ }),

/***/ "./node_modules/urijs/src/punycode.js":
/*!********************************************!*\
  !*** ./node_modules/urijs/src/punycode.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.0 by @mathias */
;

(function (root) {
  /** Detect free variables */
  var freeExports =  true && exports && !exports.nodeType && exports;
  var freeModule =  true && module && !module.nodeType && module;
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }
  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */


  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647,
      // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
      tMin = 1,
      tMax = 26,
      skew = 38,
      damp = 700,
      initialBias = 72,
      initialN = 128,
      // 0x80
  delimiter = '-',
      // '\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
      regexNonASCII = /[^\x20-\x7E]/,
      // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
      // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
      floor = Math.floor,
      stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
      return output;
    }).join('');
  }
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }

    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }

    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }

    return base;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,

    /** Cached calculation results */
    baseMinusT; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base;; k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;
      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output

      output.splice(i++, 0, n);
    }

    return ucs2encode(output);
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;; k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.3.2',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);

/***/ }),

/***/ "./src/headless/core.js":
/*!******************************!*\
  !*** ./src/headless/core.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_converse": () => (/* reexport safe */ _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "api": () => (/* binding */ api),
/* harmony export */   "clearSession": () => (/* binding */ clearSession),
/* harmony export */   "converse": () => (/* binding */ converse),
/* harmony export */   "i18n": () => (/* reexport safe */ _converse_headless_shared_i18n__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! urijs */ "./node_modules/urijs/src/URI.js");
/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(urijs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/shared/_converse */ "./src/headless/shared/_converse.js");
/* harmony import */ var dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs/plugin/advancedFormat */ "./node_modules/dayjs/plugin/advancedFormat.js");
/* harmony import */ var dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _converse_headless_shared_connection_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/shared/connection/api.js */ "./src/headless/shared/connection/api.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _converse_headless_shared_i18n__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/shared/i18n */ "./src/headless/shared/i18n.js");
/* harmony import */ var lodash_es_invoke__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! lodash-es/invoke */ "./node_modules/lodash-es/invoke.js");
/* harmony import */ var lodash_es_isFunction__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! lodash-es/isFunction */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var pluggable_js_src_pluggable_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! pluggable.js/src/pluggable.js */ "./node_modules/pluggable.js/src/pluggable.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shared/constants.js */ "./src/headless/shared/constants.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _converse_headless_shared_connection_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @converse/headless/shared/connection/index.js */ "./src/headless/shared/connection/index.js");
/* harmony import */ var _converse_skeletor_src_events_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @converse/skeletor/src/events.js */ "./node_modules/@converse/skeletor/src/events.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _converse_headless_shared_errors__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @converse/headless/shared/errors */ "./src/headless/shared/errors.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var _converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @converse/headless/shared/settings/utils.js */ "./src/headless/shared/settings/utils.js");
/* harmony import */ var _converse_headless_shared_settings_api_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @converse/headless/shared/settings/api.js */ "./src/headless/shared/settings/api.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! sprintf-js */ "./node_modules/sprintf-js/src/sprintf.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(sprintf_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var _utils_init_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/init.js */ "./src/headless/utils/init.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */



























dayjs__WEBPACK_IMPORTED_MODULE_4___default().extend((dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_2___default())); // Add Strophe Namespaces

strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('ACTIVITY', 'http://jabber.org/protocol/activity');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('CARBONS', 'urn:xmpp:carbons:2');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('CHATSTATES', 'http://jabber.org/protocol/chatstates');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('CSI', 'urn:xmpp:csi:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('DELAY', 'urn:xmpp:delay');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('EME', 'urn:xmpp:eme:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('FASTEN', 'urn:xmpp:fasten:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('FORWARD', 'urn:xmpp:forward:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('HINTS', 'urn:xmpp:hints');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('HTTPUPLOAD', 'urn:xmpp:http:upload:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('MAM', 'urn:xmpp:mam:2');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('MARKERS', 'urn:xmpp:chat-markers:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('MENTIONS', 'urn:xmpp:mmn:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('MESSAGE_CORRECT', 'urn:xmpp:message-correct:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('MODERATE', 'urn:xmpp:message-moderate:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('NICK', 'http://jabber.org/protocol/nick');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('OCCUPANTID', 'urn:xmpp:occupant-id:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('OMEMO', 'eu.siacs.conversations.axolotl');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('OUTOFBAND', 'jabber:x:oob');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('PUBSUB', 'http://jabber.org/protocol/pubsub');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('RAI', 'urn:xmpp:rai:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('RECEIPTS', 'urn:xmpp:receipts');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('REFERENCE', 'urn:xmpp:reference:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('REGISTER', 'jabber:iq:register');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('RETRACT', 'urn:xmpp:message-retract:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('ROSTERX', 'http://jabber.org/protocol/rosterx');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('RSM', 'http://jabber.org/protocol/rsm');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('SID', 'urn:xmpp:sid:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('SPOILER', 'urn:xmpp:spoiler:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('STANZAS', 'urn:ietf:params:xml:ns:xmpp-stanzas');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('STYLING', 'urn:xmpp:styling:0');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('VCARD', 'vcard-temp');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('VCARDUPDATE', 'vcard-temp:x:update');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('XFORM', 'jabber:x:data');
strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.addNamespace('XHTML', 'http://www.w3.org/1999/xhtml');
_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].VERSION_NAME = "v9.1.1";
Object.assign(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"], _converse_skeletor_src_events_js__WEBPACK_IMPORTED_MODULE_13__.Events); // Make converse pluggable

pluggable_js_src_pluggable_js__WEBPACK_IMPORTED_MODULE_7__["default"].enable(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"], '_converse', 'pluggable');
/**
 * ### The private API
 *
 * The private API methods are only accessible via the closured {@link _converse}
 * object, which is only available to plugins.
 *
 * These methods are kept private (i.e. not global) because they may return
 * sensitive data which should be kept off-limits to other 3rd-party scripts
 * that might be running in the page.
 *
 * @namespace _converse.api
 * @memberOf _converse
 */

const api = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].api = {
  connection: _converse_headless_shared_connection_api_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  settings: _converse_headless_shared_settings_api_js__WEBPACK_IMPORTED_MODULE_20__.settings_api,

  /**
   * Lets you trigger events, which can be listened to via
   * {@link _converse.api.listen.on} or {@link _converse.api.listen.once}
   * (see [_converse.api.listen](http://localhost:8000/docs/html/api/-_converse.api.listen.html)).
   *
   * Some events also double as promises and can be waited on via {@link _converse.api.waitUntil}.
   *
   * @method _converse.api.trigger
   * @param {string} name - The event name
   * @param {...any} [argument] - Argument to be passed to the event handler
   * @param {object} [options]
   * @param {boolean} [options.synchronous] - Whether the event is synchronous or not.
   *  When a synchronous event is fired, a promise will be returned
   *  by {@link _converse.api.trigger} which resolves once all the
   *  event handlers' promises have been resolved.
   */
  async trigger(name) {
    if (!_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]._events) {
      return;
    }

    const args = Array.from(arguments);
    const options = args.pop();

    if (options && options.synchronous) {
      const events = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]._events[name] || [];
      const event_args = args.splice(1);
      await Promise.all(events.map(e => e.callback.apply(e.ctx, event_args)));
    } else {
      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].trigger.apply(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"], arguments);
    }

    const promise = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].promises[name];

    if (promise !== undefined) {
      promise.resolve();
    }
  },

  /**
   * Triggers a hook which can be intercepted by registered listeners via
   * {@link _converse.api.listen.on} or {@link _converse.api.listen.once}.
   * (see [_converse.api.listen](http://localhost:8000/docs/html/api/-_converse.api.listen.html)).
   * A hook is a special kind of event which allows you to intercept a data
   * structure in order to modify it, before passing it back.
   * @async
   * @param {string} name - The hook name
   * @param {...any} context - The context to which the hook applies (could be for example, a {@link _converse.ChatBox)).
   * @param {...any} data - The data structure to be intercepted and modified by the hook listeners.
   * @returns {Promise<any>} - A promise that resolves with the modified data structure.
   */
  hook(name, context, data) {
    const events = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]._events[name] || [];

    if (events.length) {
      // Create a chain of promises, with each one feeding its output to
      // the next. The first input is a promise with the original data
      // sent to this hook.
      return events.reduce((o, e) => o.then(d => e.callback(context, d)), Promise.resolve(data));
    } else {
      return data;
    }
  },

  /**
   * This grouping collects API functions related to the current logged in user.
   *
   * @namespace _converse.api.user
   * @memberOf _converse.api
   */
  user: {
    settings: _converse_headless_shared_settings_api_js__WEBPACK_IMPORTED_MODULE_20__.user_settings_api,

    /**
     * @method _converse.api.user.jid
     * @returns {string} The current user's full JID (Jabber ID)
     * @example _converse.api.user.jid())
     */
    jid() {
      return _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.jid;
    },

    /**
     * Logs the user in.
     *
     * If called without any parameters, Converse will try
     * to log the user in by calling the `prebind_url` or `credentials_url` depending
     * on whether prebinding is used or not.
     *
     * @method _converse.api.user.login
     * @param {string} [jid]
     * @param {string} [password]
     * @param {boolean} [automatic=false] - An internally used flag that indicates whether
     *  this method was called automatically once the connection has been
     *  initialized. It's used together with the `auto_login` configuration flag
     *  to determine whether Converse should try to log the user in if it
     *  fails to restore a previous auth'd session.
     *  @returns  {void}
     */
    async login(jid, password) {
      var _converse$connection, _api$settings$get;

      let automatic = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      jid = jid || api.settings.get('jid');

      if (!((_converse$connection = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection) !== null && _converse$connection !== void 0 && _converse$connection.jid) || jid && !_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__["default"].isSameDomain(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.jid, jid)) {
        await _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].initConnection();
      }

      if ((_api$settings$get = api.settings.get("connection_options")) !== null && _api$settings$get !== void 0 && _api$settings$get.worker && (await _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.restoreWorkerSession())) {
        return;
      }

      if (jid) {
        jid = await (0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.setUserJID)(jid);
      } // See whether there is a BOSH session to re-attach to


      const bosh_plugin = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].pluggable.plugins["converse-bosh"];

      if (bosh_plugin !== null && bosh_plugin !== void 0 && bosh_plugin.enabled()) {
        if (await _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].restoreBOSHSession()) {
          return;
        } else if (api.settings.get("authentication") === _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].PREBIND && (!automatic || api.settings.get("auto_login"))) {
          return _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].startNewPreboundBOSHSession();
        }
      }

      password = password || api.settings.get("password");
      const credentials = jid && password ? {
        jid,
        password
      } : null;
      (0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.attemptNonPreboundSession)(credentials, automatic);
    },

    /**
     * Logs the user out of the current XMPP session.
     * @method _converse.api.user.logout
     * @example _converse.api.user.logout();
     */
    async logout() {
      /**
       * Triggered before the user is logged out
       * @event _converse#beforeLogout
       */
      await api.trigger('beforeLogout', {
        'synchronous': true
      });
      const promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_17__.getOpenPromise)();

      const complete = () => {
        // Recreate all the promises
        Object.keys(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].promises).forEach(_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__.replacePromise);
        delete _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].jid;
        /**
         * Triggered once the user has logged out.
         * @event _converse#logout
         */

        api.trigger('logout');
        promise.resolve();
      };

      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.setDisconnectionCause(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].LOGOUT, undefined, true);

      if (_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection !== undefined) {
        api.listen.once('disconnected', () => complete());

        _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.disconnect();
      } else {
        complete();
      }

      return promise;
    }

  },

  /**
   * Converse and its plugins trigger various events which you can listen to via the
   * {@link _converse.api.listen} namespace.
   *
   * Some of these events are also available as [ES2015 Promises](http://es6-features.org/#PromiseUsage)
   * although not all of them could logically act as promises, since some events
   * might be fired multpile times whereas promises are to be resolved (or
   * rejected) only once.
   *
   * Events which are also promises include:
   *
   * * [cachedRoster](/docs/html/events.html#cachedroster)
   * * [chatBoxesFetched](/docs/html/events.html#chatBoxesFetched)
   * * [pluginsInitialized](/docs/html/events.html#pluginsInitialized)
   * * [roster](/docs/html/events.html#roster)
   * * [rosterContactsFetched](/docs/html/events.html#rosterContactsFetched)
   * * [rosterGroupsFetched](/docs/html/events.html#rosterGroupsFetched)
   * * [rosterInitialized](/docs/html/events.html#rosterInitialized)
   *
   * The various plugins might also provide promises, and they do this by using the
   * `promises.add` api method.
   *
   * @namespace _converse.api.promises
   * @memberOf _converse.api
   */
  promises: {
    /**
     * By calling `promises.add`, a new [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)
     * is made available for other code or plugins to depend on via the
     * {@link _converse.api.waitUntil} method.
     *
     * Generally, it's the responsibility of the plugin which adds the promise to
     * also resolve it.
     *
     * This is done by calling {@link _converse.api.trigger}, which not only resolves the
     * promise, but also emits an event with the same name (which can be listened to
     * via {@link _converse.api.listen}).
     *
     * @method _converse.api.promises.add
     * @param {string|array} [name|names] The name or an array of names for the promise(s) to be added
     * @param {boolean} [replace=true] Whether this promise should be replaced with a new one when the user logs out.
     * @example _converse.api.promises.add('foo-completed');
     */
    add(promises) {
      let replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      promises = Array.isArray(promises) ? promises : [promises];
      promises.forEach(name => {
        const promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_17__.getOpenPromise)();
        promise.replace = replace;
        _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].promises[name] = promise;
      });
    }

  },

  /**
   * Converse emits events to which you can subscribe to.
   *
   * The `listen` namespace exposes methods for creating event listeners
   * (aka handlers) for these events.
   *
   * @namespace _converse.api.listen
   * @memberOf _converse
   */
  listen: {
    /**
     * Lets you listen to an event exactly once.
     * @method _converse.api.listen.once
     * @param {string} name The event's name
     * @param {function} callback The callback method to be called when the event is emitted.
     * @param {object} [context] The value of the `this` parameter for the callback.
     * @example _converse.api.listen.once('message', function (messageXML) { ... });
     */
    once: _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].once.bind(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]),

    /**
     * Lets you subscribe to an event.
     * Every time the event fires, the callback method specified by `callback` will be called.
     * @method _converse.api.listen.on
     * @param {string} name The event's name
     * @param {function} callback The callback method to be called when the event is emitted.
     * @param {object} [context] The value of the `this` parameter for the callback.
     * @example _converse.api.listen.on('message', function (messageXML) { ... });
     */
    on: _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].on.bind(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]),

    /**
     * To stop listening to an event, you can use the `not` method.
     * @method _converse.api.listen.not
     * @param {string} name The event's name
     * @param {function} callback The callback method that is to no longer be called when the event fires
     * @example _converse.api.listen.not('message', function (messageXML);
     */
    not: _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].off.bind(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]),

    /**
     * Subscribe to an incoming stanza
     * Every a matched stanza is received, the callback method specified by
     * `callback` will be called.
     * @method _converse.api.listen.stanza
     * @param {string} name The stanza's name
     * @param {object} options Matching options (e.g. 'ns' for namespace, 'type' for stanza type, also 'id' and 'from');
     * @param {function} handler The callback method to be called when the stanza appears
     */
    stanza(name, options, handler) {
      if ((0,lodash_es_isFunction__WEBPACK_IMPORTED_MODULE_23__["default"])(options)) {
        handler = options;
        options = {};
      } else {
        options = options || {};
      }

      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.addHandler(handler, options.ns, name, options.type, options.id, options.from, options);
    }

  },

  /**
   * Wait until a promise is resolved or until the passed in function returns
   * a truthy value.
   * @method _converse.api.waitUntil
   * @param {string|function} condition - The name of the promise to wait for,
   * or a function which should eventually return a truthy value.
   * @returns {Promise}
   */
  waitUntil(condition) {
    if ((0,lodash_es_isFunction__WEBPACK_IMPORTED_MODULE_23__["default"])(condition)) {
      return _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__["default"].waitUntil(condition);
    } else {
      const promise = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].promises[condition];

      if (promise === undefined) {
        return null;
      }

      return promise;
    }
  },

  /**
   * Allows you to send XML stanzas.
   * @method _converse.api.send
   * @param {XMLElement} stanza
   * @return {void}
   * @example
   * const msg = converse.env.$msg({
   *     'from': 'juliet@example.com/balcony',
   *     'to': 'romeo@example.net',
   *     'type':'chat'
   * });
   * _converse.api.send(msg);
   */
  send(stanza) {
    var _stanza;

    if (!api.connection.connected()) {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].warn("Not sending stanza because we're not connected!");
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].warn(strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.serialize(stanza));
      return;
    }

    if (typeof stanza === 'string') {
      stanza = _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__["default"].toStanza(stanza);
    } else if ((_stanza = stanza) !== null && _stanza !== void 0 && _stanza.nodeTree) {
      stanza = stanza.nodeTree;
    }

    if (stanza.tagName === 'iq') {
      return api.sendIQ(stanza);
    } else {
      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.send(stanza);

      api.trigger('send', stanza);
    }
  },

  /**
   * Send an IQ stanza
   * @method _converse.api.sendIQ
   * @param {XMLElement} stanza
   * @param {Integer} [timeout=_converse.STANZA_TIMEOUT]
   * @param {Boolean} [reject=true] - Whether an error IQ should cause the promise
   *  to be rejected. If `false`, the promise will resolve instead of being rejected.
   * @returns {Promise} A promise which resolves (or potentially rejected) once we
   *  receive a `result` or `error` stanza or once a timeout is reached.
   *  If the IQ stanza being sent is of type `result` or `error`, there's
   *  nothing to wait for, so an already resolved promise is returned.
   */
  sendIQ(stanza) {
    var _stanza2;

    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].STANZA_TIMEOUT;
    let reject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    let promise;
    stanza = ((_stanza2 = stanza) === null || _stanza2 === void 0 ? void 0 : _stanza2.nodeTree) ?? stanza;

    if (['get', 'set'].includes(stanza.getAttribute('type'))) {
      timeout = timeout || _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].STANZA_TIMEOUT;

      if (reject) {
        promise = new Promise((resolve, reject) => _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.sendIQ(stanza, resolve, reject, timeout));
        promise.catch(e => {
          if (e === null) {
            throw new _converse_headless_shared_errors__WEBPACK_IMPORTED_MODULE_16__.TimeoutError(`Timeout error after ${timeout}ms for the following IQ stanza: ${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.serialize(stanza)}`);
          }
        });
      } else {
        promise = new Promise(resolve => _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.sendIQ(stanza, resolve, resolve, timeout));
      }
    } else {
      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.sendIQ(stanza);

      promise = Promise.resolve();
    }

    api.trigger('send', stanza);
    return promise;
  }

};

_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].shouldClearCache = () => !_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].config.get('trusted') || api.settings.get('clear_cache_on_logout') || _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].isTestEnv();

function clearSession() {
  var _converse$session;

  (_converse$session = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].session) === null || _converse$session === void 0 ? void 0 : _converse$session.destroy();
  delete _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].session;
  _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].shouldClearCache() && _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].api.user.settings.clear();
  /**
   * Synchronouse event triggered once the user session has been cleared,
   * for example when the user has logged out or when Converse has
   * disconnected for some other reason.
   * @event _converse#clearSession
   */

  return _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].api.trigger('clearSession', {
    'synchronous': true
  });
}

_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].initConnection = function () {
  const api = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].api;

  if (!api.settings.get('bosh_service_url')) {
    if (api.settings.get("authentication") === _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].PREBIND) {
      throw new Error("authentication is set to 'prebind' but we don't have a BOSH connection");
    }
  }

  const XMPPConnection = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].isTestEnv() ? _converse_headless_shared_connection_index_js__WEBPACK_IMPORTED_MODULE_12__.MockConnection : _converse_headless_shared_connection_index_js__WEBPACK_IMPORTED_MODULE_12__.Connection;
  _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection = new XMPPConnection((0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.getConnectionServiceURL)(), Object.assign(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].default_connection_options, api.settings.get("connection_options"), {
    'keepalive': api.settings.get("keepalive")
  }));
  setUpXMLLogging();
  /**
   * Triggered once the `Connection` constructor has been initialized, which
   * will be responsible for managing the connection to the XMPP server.
   *
   * @event _converse#connectionInitialized
   */

  api.trigger('connectionInitialized');
};

function setUpXMLLogging() {
  const lmap = {};
  lmap[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.LogLevel.DEBUG] = 'debug';
  lmap[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.LogLevel.INFO] = 'info';
  lmap[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.LogLevel.WARN] = 'warn';
  lmap[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.LogLevel.ERROR] = 'error';
  lmap[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.LogLevel.FATAL] = 'fatal';

  strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.log = (level, msg) => _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].log(msg, lmap[level]);

  strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.error = msg => _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].error(msg);

  _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.xmlInput = body => _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].debug(body.outerHTML, 'color: darkgoldenrod');

  _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.xmlOutput = body => _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].debug(body.outerHTML, 'color: darkcyan');
}

_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].saveWindowState = function (ev) {
  // XXX: eventually we should be able to just use
  // document.visibilityState (when we drop support for older
  // browsers).
  let state;
  const event_map = {
    'focus': "visible",
    'focusin': "visible",
    'pageshow': "visible",
    'blur': "hidden",
    'focusout': "hidden",
    'pagehide': "hidden"
  };
  ev = ev || document.createEvent('Events');

  if (ev.type in event_map) {
    state = event_map[ev.type];
  } else {
    state = document.hidden ? "hidden" : "visible";
  }

  _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].windowState = state;
  /**
      * Triggered when window state has changed.
      * Used to determine when a user left the page and when came back.
      * @event _converse#windowStateChanged
      * @type { object }
      * @property{ string } state - Either "hidden" or "visible"
      * @example _converse.api.listen.on('windowStateChanged', obj => { ... });
      */

  api.trigger('windowStateChanged', {
    state
  });
};

_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].ConnectionFeedback = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_14__.Model.extend({
  defaults: {
    'connection_status': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe.Status.DISCONNECTED,
    'message': ''
  },

  initialize() {
    this.on('change', () => api.trigger('connfeedback', _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connfeedback));
  }

});
const converse = window.converse || {};
/**
 * ### The Public API
 *
 * This namespace contains public API methods which are are
 * accessible on the global `converse` object.
 * They are public, because any JavaScript in the
 * page can call them. Public methods therefore don’t expose any sensitive
 * or closured data. To do that, you’ll need to create a plugin, which has
 * access to the private API method.
 *
 * @global
 * @namespace converse
 */

Object.assign(converse, {
  CHAT_STATES: _shared_constants_js__WEBPACK_IMPORTED_MODULE_10__.CHAT_STATES,
  keycodes: _shared_constants_js__WEBPACK_IMPORTED_MODULE_10__.KEYCODES,

  /**
   * Public API method which initializes Converse.
   * This method must always be called when using Converse.
   * @async
   * @memberOf converse
   * @method initialize
   * @param {object} config A map of [configuration-settings](https://conversejs.org/docs/html/configuration.html#configuration-settings).
   * @example
   * converse.initialize({
   *     auto_list_rooms: false,
   *     auto_subscribe: false,
   *     bosh_service_url: 'https://bind.example.com',
   *     hide_muc_server: false,
   *     i18n: 'en',
   *     play_sounds: true,
   *     show_controlbox_by_default: true,
   *     debug: false,
   *     roster_groups: true
   * });
   */
  async initialize(settings) {
    var _api$elements;

    await (0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.cleanup)(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]);
    (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__.setUnloadEvent)();
    (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_19__.initAppSettings)(settings);
    _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].strict_plugin_dependencies = settings.strict_plugin_dependencies; // Needed by pluggable.js

    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].setLogLevel(api.settings.get("loglevel"));

    if (api.settings.get("authentication") === _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].ANONYMOUS) {
      if (api.settings.get("auto_login") && !api.settings.get('jid')) {
        throw new Error("Config Error: you need to provide the server's " + "domain via the 'jid' option when using anonymous " + "authentication with auto_login.");
      }
    }

    _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].router.route(/^converse\?loglevel=(debug|info|warn|error|fatal)$/, 'loglevel', l => _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].setLogLevel(l));

    _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connfeedback = new _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].ConnectionFeedback();
    /* When reloading the page:
     * For new sessions, we need to send out a presence stanza to notify
     * the server/network that we're online.
     * When re-attaching to an existing session we don't need to again send out a presence stanza,
     * because it's as if "we never left" (see onConnectStatusChanged).
     * https://github.com/conversejs/converse.js/issues/521
     */

    _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].send_initial_presence = true;
    await (0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.initSessionStorage)(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]);
    await (0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.initClientConfig)(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]);
    await _converse_headless_shared_i18n__WEBPACK_IMPORTED_MODULE_5__["default"].initialize();
    (0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.initPlugins)(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]); // Register all custom elements
    // XXX: api.elements is defined in the UI part of Converse, outside of @converse/headless.
    // This line should probably be moved to the UI code as part of a larger refactoring.

    (_api$elements = api.elements) === null || _api$elements === void 0 ? void 0 : _api$elements.register();
    (0,_utils_init_js__WEBPACK_IMPORTED_MODULE_22__.registerGlobalEventHandlers)(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"]);

    try {
      !History.started && _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].router.history.start();
    } catch (e) {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"].error(e);
    }

    const plugins = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].pluggable.plugins;

    if (api.settings.get("auto_login") || api.settings.get("keepalive") && (0,lodash_es_invoke__WEBPACK_IMPORTED_MODULE_24__["default"])(plugins['converse-bosh'], 'enabled')) {
      await api.user.login(null, null, true);
    }
    /**
     * Triggered once converse.initialize has finished.
     * @event _converse#initialized
     */


    api.trigger('initialized');

    if (_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].isTestEnv()) {
      return _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"];
    }
  },

  /**
   * Exposes methods for adding and removing plugins. You'll need to write a plugin
   * if you want to have access to the private API methods defined further down below.
   *
   * For more information on plugins, read the documentation on [writing a plugin](/docs/html/plugin_development.html).
   * @namespace plugins
   * @memberOf converse
   */
  plugins: {
    /**
     * Registers a new plugin.
     * @method converse.plugins.add
     * @param {string} name The name of the plugin
     * @param {object} plugin The plugin object
     * @example
     *  const plugin = {
     *      initialize: function () {
     *          // Gets called as soon as the plugin has been loaded.
     *
     *          // Inside this method, you have access to the private
     *          // API via `_covnerse.api`.
     *
     *          // The private _converse object contains the core logic
     *          // and data-structures of Converse.
     *      }
     *  }
     *  converse.plugins.add('myplugin', plugin);
     */
    add(name, plugin) {
      plugin.__name__ = name;

      if (_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].pluggable.plugins[name] !== undefined) {
        throw new TypeError(`Error: plugin with name "${name}" has already been ` + 'registered!');
      } else {
        _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].pluggable.plugins[name] = plugin;
      }
    }

  },

  /**
   * Utility methods and globals from bundled 3rd party libraries.
   * @typedef ConverseEnv
   * @property {function} converse.env.$build    - Creates a Strophe.Builder, for creating stanza objects.
   * @property {function} converse.env.$iq       - Creates a Strophe.Builder with an <iq/> element as the root.
   * @property {function} converse.env.$msg      - Creates a Strophe.Builder with an <message/> element as the root.
   * @property {function} converse.env.$pres     - Creates a Strophe.Builder with an <presence/> element as the root.
   * @property {function} converse.env.Promise   - The Promise implementation used by Converse.
   * @property {function} converse.env.Strophe   - The [Strophe](http://strophe.im/strophejs) XMPP library used by Converse.
   * @property {function} converse.env.f         - And instance of Lodash with its methods wrapped to produce immutable auto-curried iteratee-first data-last methods.
   * @property {function} converse.env.sizzle    - [Sizzle](https://sizzlejs.com) CSS selector engine.
   * @property {function} converse.env.sprintf
   * @property {object} converse.env._           - The instance of [lodash-es](http://lodash.com) used by Converse.
   * @property {object} converse.env.dayjs       - [DayJS](https://github.com/iamkun/dayjs) date manipulation library.
   * @property {object} converse.env.utils       - Module containing common utility methods used by Converse.
   * @memberOf converse
   */
  'env': {
    $build: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.$build,
    $iq: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.$iq,
    $msg: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.$msg,
    $pres: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.$pres,
    'utils': _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__["default"],
    Collection: _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_11__.Collection,
    Model: _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_14__.Model,
    Promise,
    Strophe: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_15__.Strophe,
    URI: (urijs__WEBPACK_IMPORTED_MODULE_0___default()),
    dayjs: (dayjs__WEBPACK_IMPORTED_MODULE_4___default()),
    html: lit__WEBPACK_IMPORTED_MODULE_18__.html,
    log: _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_6__["default"],
    sizzle: (sizzle__WEBPACK_IMPORTED_MODULE_8___default()),
    sprintf: sprintf_js__WEBPACK_IMPORTED_MODULE_21__.sprintf,
    u: _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__["default"]
  }
});

/***/ }),

/***/ "./src/headless/log.js":
/*!*****************************!*\
  !*** ./src/headless/log.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_es_isElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash-es/isElement */ "./node_modules/lodash-es/isElement.js");
var _console, _console2, _console3, _console4;


const LEVELS = {
  'debug': 0,
  'info': 1,
  'warn': 2,
  'error': 3,
  'fatal': 4
};
const logger = Object.assign({
  'debug': (_console = console) !== null && _console !== void 0 && _console.log ? console.log.bind(console) : function noop() {},
  'error': (_console2 = console) !== null && _console2 !== void 0 && _console2.log ? console.log.bind(console) : function noop() {},
  'info': (_console3 = console) !== null && _console3 !== void 0 && _console3.log ? console.log.bind(console) : function noop() {},
  'warn': (_console4 = console) !== null && _console4 !== void 0 && _console4.log ? console.log.bind(console) : function noop() {}
}, console);
/**
 * The log namespace
 * @namespace log
 */

const log = {
  /**
   * The the log-level, which determines how verbose the logging is.
   * @method log#setLogLevel
   * @param { integer } level - The loglevel which allows for filtering of log messages
   */
  setLogLevel(level) {
    if (!['debug', 'info', 'warn', 'error', 'fatal'].includes(level)) {
      throw new Error(`Invalid loglevel: ${level}`);
    }

    this.loglevel = level;
  },

  /**
   * Logs messages to the browser's developer console.
   * Available loglevels are 0 for 'debug', 1 for 'info', 2 for 'warn',
   * 3 for 'error' and 4 for 'fatal'.
   * When using the 'error' or 'warn' loglevels, a full stacktrace will be
   * logged as well.
   * @method log#log
   * @param { string | Error } message - The message to be logged
   * @param { integer } level - The loglevel which allows for filtering of log messages
   */
  log(message, level) {
    let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    if (LEVELS[level] < LEVELS[this.loglevel]) {
      return;
    }

    if (level === 'error' || level === 'fatal') {
      style = style || 'color: maroon';
    } else if (level === 'debug') {
      style = style || 'color: green';
    }

    if (message instanceof Error) {
      message = message.stack;
    } else if ((0,lodash_es_isElement__WEBPACK_IMPORTED_MODULE_0__["default"])(message)) {
      message = message.outerHTML;
    }

    const prefix = style ? '%c' : '';

    if (level === 'error') {
      logger.error(`${prefix} ERROR: ${message}`, style);
    } else if (level === 'warn') {
      logger.warn(`${prefix} ${new Date().toISOString()} WARNING: ${message}`, style);
    } else if (level === 'fatal') {
      logger.error(`${prefix} FATAL: ${message}`, style);
    } else if (level === 'debug') {
      logger.debug(`${prefix} ${new Date().toISOString()} DEBUG: ${message}`, style);
    } else {
      logger.info(`${prefix} ${new Date().toISOString()} INFO: ${message}`, style);
    }
  },

  debug(message, style) {
    this.log(message, 'debug', style);
  },

  error(message, style) {
    this.log(message, 'error', style);
  },

  info(message, style) {
    this.log(message, 'info', style);
  },

  warn(message, style) {
    this.log(message, 'warn', style);
  },

  fatal(message, style) {
    this.log(message, 'fatal', style);
  }

};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (log);

/***/ }),

/***/ "./src/headless/plugins/adhoc.js":
/*!***************************************!*\
  !*** ./src/headless/plugins/adhoc.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/shared/parsers */ "./src/headless/shared/parsers.js");




const {
  Strophe
} = _core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;

let _converse, api;

Strophe.addNamespace('ADHOC', 'http://jabber.org/protocol/commands');

function parseForCommands(stanza) {
  const items = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`query[xmlns="${Strophe.NS.DISCO_ITEMS}"][node="${Strophe.NS.ADHOC}"] item`, stanza);
  return items.map(_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_3__.getAttributes);
}

const adhoc_api = {
  /**
   * The XEP-0050 Ad-Hoc Commands API
   *
   * This API lets you discover ad-hoc commands available for an entity in the XMPP network.
   *
   * @namespace api.adhoc
   * @memberOf api
   */
  adhoc: {
    /**
     * @method api.adhoc.getCommands
     * @param { String } to_jid
     */
    async getCommands(to_jid) {
      let commands = [];

      try {
        commands = parseForCommands(await api.disco.items(to_jid, Strophe.NS.ADHOC));
      } catch (e) {
        if (e === null) {
          _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(`Error: timeout while fetching ad-hoc commands for ${to_jid}`);
        } else {
          _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(`Error while fetching ad-hoc commands for ${to_jid}`);
          _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(e);
        }
      }

      return commands;
    }

  }
};
_core_js__WEBPACK_IMPORTED_MODULE_0__.converse.plugins.add('converse-adhoc', {
  dependencies: ["converse-disco"],

  initialize() {
    _converse = this._converse;
    api = _converse.api;
    Object.assign(api, adhoc_api);
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (adhoc_api);

/***/ }),

/***/ "./src/headless/plugins/bookmarks/collection.js":
/*!******************************************************!*\
  !*** ./src/headless/plugins/bookmarks/collection.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/plugins/muc/index.js */ "./src/headless/plugins/muc/index.js");
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model.js */ "./src/headless/plugins/bookmarks/model.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");






const {
  Strophe,
  $iq,
  sizzle
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.converse.env;
const Bookmarks = {
  model: _model_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  comparator: item => item.get('name').toLowerCase(),

  async initialize() {
    this.on('add', bm => this.openBookmarkedRoom(bm).then(bm => this.markRoomAsBookmarked(bm)).catch(e => _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].fatal(e)));
    this.on('remove', this.markRoomAsUnbookmarked, this);
    this.on('remove', this.sendBookmarkStanza, this);
    const cache_key = `converse.room-bookmarks${_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid}`;
    this.fetched_flag = cache_key + 'fetched';
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_5__.initStorage)(this, cache_key);
    await this.fetchBookmarks();
    /**
     * Triggered once the _converse.Bookmarks collection
     * has been created and cached bookmarks have been fetched.
     * @event _converse#bookmarksInitialized
     * @type { _converse.Bookmarks }
     * @example _converse.api.listen.on('bookmarksInitialized', (bookmarks) => { ... });
     */

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.trigger('bookmarksInitialized', this);
  },

  async openBookmarkedRoom(bookmark) {
    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('muc_respect_autojoin') && bookmark.get('autojoin')) {
      const groupchat = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.rooms.create(bookmark.get('jid'), {
        'nick': bookmark.get('nick')
      });
      groupchat.maybeShow();
    }

    return bookmark;
  },

  fetchBookmarks() {
    const deferred = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_4__.getOpenPromise)();

    if (window.sessionStorage.getItem(this.fetched_flag)) {
      this.fetch({
        'success': () => deferred.resolve(),
        'error': () => deferred.resolve()
      });
    } else {
      this.fetchBookmarksFromServer(deferred);
    }

    return deferred;
  },

  createBookmark(options) {
    this.create(options);
    this.sendBookmarkStanza().catch(iq => this.onBookmarkError(iq, options));
  },

  sendBookmarkStanza() {
    const stanza = $iq({
      'type': 'set',
      'from': _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.jid
    }).c('pubsub', {
      'xmlns': Strophe.NS.PUBSUB
    }).c('publish', {
      'node': Strophe.NS.BOOKMARKS
    }).c('item', {
      'id': 'current'
    }).c('storage', {
      'xmlns': Strophe.NS.BOOKMARKS
    });
    this.forEach(model => {
      stanza.c('conference', {
        'name': model.get('name'),
        'autojoin': model.get('autojoin'),
        'jid': model.get('jid')
      }).c('nick').t(model.get('nick')).up().up();
    });
    stanza.up().up().up();
    stanza.c('publish-options').c('x', {
      'xmlns': Strophe.NS.XFORM,
      'type': 'submit'
    }).c('field', {
      'var': 'FORM_TYPE',
      'type': 'hidden'
    }).c('value').t('http://jabber.org/protocol/pubsub#publish-options').up().up().c('field', {
      'var': 'pubsub#persist_items'
    }).c('value').t('true').up().up().c('field', {
      'var': 'pubsub#access_model'
    }).c('value').t('whitelist');
    return _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.sendIQ(stanza);
  },

  onBookmarkError(iq, options) {
    var _this$get;

    const {
      __
    } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse;
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error("Error while trying to add bookmark");
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(iq);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.alert('error', __('Error'), [__("Sorry, something went wrong while trying to save your bookmark.")]);
    (_this$get = this.get(options.jid)) === null || _this$get === void 0 ? void 0 : _this$get.destroy();
  },

  fetchBookmarksFromServer(deferred) {
    const stanza = $iq({
      'from': _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.jid,
      'type': 'get'
    }).c('pubsub', {
      'xmlns': Strophe.NS.PUBSUB
    }).c('items', {
      'node': Strophe.NS.BOOKMARKS
    });
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.sendIQ(stanza).then(iq => this.onBookmarksReceived(deferred, iq)).catch(iq => this.onBookmarksReceivedError(deferred, iq));
  },

  markRoomAsBookmarked(bookmark) {
    const groupchat = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.get(bookmark.get('jid'));

    groupchat === null || groupchat === void 0 ? void 0 : groupchat.save('bookmarked', true);
  },

  markRoomAsUnbookmarked(bookmark) {
    const groupchat = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.get(bookmark.get('jid'));

    groupchat === null || groupchat === void 0 ? void 0 : groupchat.save('bookmarked', false);
  },

  createBookmarksFromStanza(stanza) {
    const xmlns = Strophe.NS.BOOKMARKS;
    const sel = `items[node="${xmlns}"] item storage[xmlns="${xmlns}"] conference`;
    sizzle(sel, stanza).forEach(el => {
      var _el$querySelector;

      const jid = el.getAttribute('jid');
      const bookmark = this.get(jid);
      const attrs = {
        'jid': jid,
        'name': el.getAttribute('name') || jid,
        'autojoin': el.getAttribute('autojoin') === 'true',
        'nick': ((_el$querySelector = el.querySelector('nick')) === null || _el$querySelector === void 0 ? void 0 : _el$querySelector.textContent) || ''
      };
      bookmark ? bookmark.save(attrs) : this.create(attrs);
    });
  },

  onBookmarksReceived(deferred, iq) {
    this.createBookmarksFromStanza(iq);
    window.sessionStorage.setItem(this.fetched_flag, true);

    if (deferred !== undefined) {
      return deferred.resolve();
    }
  },

  onBookmarksReceivedError(deferred, iq) {
    const {
      __
    } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse;

    if (iq === null) {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error('Error: timeout while fetching bookmarks');
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.alert('error', __('Timeout Error'), [__("The server did not return your bookmarks within the allowed time. " + "You can reload the page to request them again.")]);
    } else if (deferred) {
      if (iq.querySelector('error[type="cancel"] item-not-found')) {
        // Not an exception, the user simply doesn't have any bookmarks.
        window.sessionStorage.setItem(this.fetched_flag, true);
        return deferred.resolve();
      } else {
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error('Error while fetching bookmarks');
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(iq);
        return deferred.reject(new Error("Could not fetch bookmarks"));
      }
    } else {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error('Error while fetching bookmarks');
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(iq);
    }
  },

  async getUnopenedBookmarks() {
    await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.waitUntil('bookmarksInitialized');
    await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.waitUntil('chatBoxesFetched');
    return this.filter(b => !_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.get(b.get('jid')));
  }

};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Bookmarks);

/***/ }),

/***/ "./src/headless/plugins/bookmarks/index.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/bookmarks/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/plugins/muc/index.js */ "./src/headless/plugins/muc/index.js");
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model.js */ "./src/headless/plugins/bookmarks/model.js");
/* harmony import */ var _collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collection.js */ "./src/headless/plugins/bookmarks/collection.js");
/* harmony import */ var _converse_skeletor_src_collection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/skeletor/src/collection.js */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/bookmarks/utils.js");
/**
 * @description
 * Converse.js plugin which adds views for bookmarks specified in XEP-0048.
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */







const {
  Strophe
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.converse.env;
Strophe.addNamespace('BOOKMARKS', 'storage:bookmarks');
_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.converse.plugins.add('converse-bookmarks', {
  dependencies: ["converse-chatboxes", "converse-muc"],
  overrides: {
    // Overrides mentioned here will be picked up by converse.js's
    // plugin architecture they will replace existing methods on the
    // relevant objects or classes.
    // New functions which don't exist yet can also be added.
    ChatRoom: {
      getDisplayName() {
        var _converse$bookmarks;

        const {
          _converse,
          getDisplayName
        } = this.__super__;
        const bookmark = this.get('bookmarked') ? (_converse$bookmarks = _converse.bookmarks) === null || _converse$bookmarks === void 0 ? void 0 : _converse$bookmarks.get(this.get('jid')) : null;
        return (bookmark === null || bookmark === void 0 ? void 0 : bookmark.get('name')) || getDisplayName.apply(this, arguments);
      },

      getAndPersistNickname(nick) {
        nick = nick || (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.getNicknameFromBookmark)(this.get('jid'));
        return this.__super__.getAndPersistNickname.call(this, nick);
      }

    }
  },

  initialize() {
    // Configuration values for this plugin
    // ====================================
    // Refer to docs/source/configuration.rst for explanations of these
    // configuration settings.
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.settings.extend({
      allow_bookmarks: true,
      allow_public_bookmarks: false,
      muc_respect_autojoin: true
    });
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.promises.add('bookmarksInitialized');
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.Bookmark = _model_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.Bookmarks = _converse_skeletor_src_collection_js__WEBPACK_IMPORTED_MODULE_3__.Collection.extend(_collection_js__WEBPACK_IMPORTED_MODULE_2__["default"]);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.BookmarksList = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__.Model.extend({
      defaults: {
        "toggle-state": _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.OPENED
      }
    });
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('addClientFeatures', () => {
      if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.settings.get('allow_bookmarks')) {
        _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.disco.own.features.add(Strophe.NS.BOOKMARKS + '+notify');
      }
    });
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('clearSession', () => {
      if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.bookmarks) {
        _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.bookmarks.clearStore({
          'silent': true
        });

        window.sessionStorage.removeItem(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.bookmarks.fetched_flag);
        delete _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.bookmarks;
      }
    });
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('connected', async () => {
      // Add a handler for bookmarks pushed from other connected clients
      const {
        connection
      } = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse;
      connection.addHandler(_utils_js__WEBPACK_IMPORTED_MODULE_6__.handleBookmarksPush, null, 'message', 'headline', null, _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__._converse.bare_jid);
      await Promise.all([_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_5__.api.waitUntil('chatBoxesFetched')]);
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.initBookmarks)();
    });
  }

});

/***/ }),

/***/ "./src/headless/plugins/bookmarks/model.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/bookmarks/model.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");


const {
  Strophe
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.converse.env;
const Bookmark = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_1__.Model.extend({
  idAttribute: 'jid',

  getDisplayName() {
    return Strophe.xmlunescape(this.get('name'));
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Bookmark);

/***/ }),

/***/ "./src/headless/plugins/bookmarks/utils.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/bookmarks/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkBookmarksSupport": () => (/* binding */ checkBookmarksSupport),
/* harmony export */   "getNicknameFromBookmark": () => (/* binding */ getNicknameFromBookmark),
/* harmony export */   "handleBookmarksPush": () => (/* binding */ handleBookmarksPush),
/* harmony export */   "initBookmarks": () => (/* binding */ initBookmarks)
/* harmony export */ });
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");


const {
  Strophe,
  sizzle
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;
async function checkBookmarksSupport() {
  const identity = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.getIdentity('pubsub', 'pep', _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid);

  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('allow_public_bookmarks')) {
    return !!identity;
  } else {
    return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.supports(Strophe.NS.PUBSUB + '#publish-options', _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid);
  }
}
async function initBookmarks() {
  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('allow_bookmarks')) {
    return;
  }

  if (await checkBookmarksSupport()) {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bookmarks = new _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.Bookmarks();
  }
}
function getNicknameFromBookmark(jid) {
  var _converse$bookmarks, _converse$bookmarks$g;

  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('allow_bookmarks')) {
    return null;
  }

  return (_converse$bookmarks = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bookmarks) === null || _converse$bookmarks === void 0 ? void 0 : (_converse$bookmarks$g = _converse$bookmarks.get(jid)) === null || _converse$bookmarks$g === void 0 ? void 0 : _converse$bookmarks$g.get('nick');
}
function handleBookmarksPush(message) {
  if (sizzle(`event[xmlns="${Strophe.NS.PUBSUB}#event"] items[node="${Strophe.NS.BOOKMARKS}"]`, message).length) {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('bookmarksInitialized').then(() => _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bookmarks.createBookmarksFromStanza(message)).catch(e => _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].fatal(e));
  }

  return true;
}

/***/ }),

/***/ "./src/headless/plugins/bosh.js":
/*!**************************************!*\
  !*** ./src/headless/plugins/bosh.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var strophe_js_src_bosh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! strophe.js/src/bosh */ "./node_modules/strophe.js/src/bosh.js");
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/shared/constants.js */ "./src/headless/shared/constants.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/utils/init.js */ "./src/headless/utils/init.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description Converse.js plugin which add support for XEP-0206: XMPP Over BOSH
 */






const {
  Strophe
} = _core_js__WEBPACK_IMPORTED_MODULE_4__.converse.env;
const BOSH_SESSION_ID = 'converse.bosh-session';
_core_js__WEBPACK_IMPORTED_MODULE_4__.converse.plugins.add('converse-bosh', {
  enabled() {
    return !_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.api.settings.get("blacklisted_plugins").includes('converse-bosh');
  },

  initialize() {
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.extend({
      bosh_service_url: undefined,
      prebind_url: null
    });

    async function initBOSHSession() {
      const id = BOSH_SESSION_ID;

      if (!_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session) {
        _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_3__.Model({
          id
        });
        _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.browserStorage = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.createStore(id, "session");
        await new Promise(resolve => _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.fetch({
          'success': resolve,
          'error': resolve
        }));
      }

      if (_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.jid) {
        if (_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.get('jid') !== _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.jid) {
          const jid = await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_5__.setUserJID)(_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.jid);

          _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.clear({
            'silent': true
          });

          _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.save({
            jid
          });
        }
      } else {
        // Keepalive
        const jid = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.get('jid');

        jid && (await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_5__.setUserJID)(jid));
      }

      return _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session;
    }

    _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.startNewPreboundBOSHSession = function () {
      if (!_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('prebind_url')) {
        throw new Error("startNewPreboundBOSHSession: If you use prebind then you MUST supply a prebind_url");
      }

      const xhr = new XMLHttpRequest();
      xhr.open('GET', _core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('prebind_url'), true);
      xhr.setRequestHeader('Accept', 'application/json, text/javascript');

      xhr.onload = async function () {
        if (xhr.status >= 200 && xhr.status < 400) {
          const data = JSON.parse(xhr.responseText);
          const jid = await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_5__.setUserJID)(data.jid);

          _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.attach(jid, data.sid, data.rid, _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.onConnectStatusChanged, _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_2__.BOSH_WAIT);
        } else {
          xhr.onerror();
        }
      };

      xhr.onerror = function () {
        delete _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection;
        /**
         * Triggered when fetching prebind tokens failed
         * @event _converse#noResumeableBOSHSession
         * @type { _converse }
         * @example _converse.api.listen.on('noResumeableBOSHSession', _converse => { ... });
         */

        _core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('noResumeableBOSHSession', _core_js__WEBPACK_IMPORTED_MODULE_4__._converse);
      };

      xhr.send();
    };

    _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.restoreBOSHSession = async function () {
      const jid = (await initBOSHSession()).get('jid');

      if (jid && _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection._proto instanceof Strophe.Bosh) {
        try {
          _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.restore(jid, _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.onConnectStatusChanged);

          return true;
        } catch (e) {
          !_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.isTestEnv() && _log_js__WEBPACK_IMPORTED_MODULE_1__["default"].warn("Could not restore session for jid: " + jid + " Error message: " + e.message);
          return false;
        }
      }

      return false;
    };
    /************************ BEGIN Event Handlers ************************/


    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('clearSession', () => {
      if (_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session === undefined) {
        // Remove manually, even if we don't have the corresponding
        // model, to avoid trying to reconnect to a stale BOSH session
        const id = BOSH_SESSION_ID;
        sessionStorage.removeItem(id);
        sessionStorage.removeItem(`${id}-${id}`);
      } else {
        _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.destroy();

        delete _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session;
      }
    });
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('setUserJID', () => {
      if (_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session !== undefined) {
        _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bosh_session.save({
          'jid': _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.jid
        });
      }
    });
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('addClientFeatures', () => _core_js__WEBPACK_IMPORTED_MODULE_4__.api.disco.own.features.add(Strophe.NS.BOSH));
    /************************ END Event Handlers ************************/

    /************************ BEGIN API ************************/

    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_4__.api, {
      /**
       * This namespace lets you access the BOSH tokens
       *
       * @namespace api.tokens
       * @memberOf api
       */
      tokens: {
        /**
         * @method api.tokens.get
         * @param {string} [id] The type of token to return ('rid' or 'sid').
         * @returns 'string' A token, either the RID or SID token depending on what's asked for.
         * @example _converse.api.tokens.get('rid');
         */
        get(id) {
          if (_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection === undefined) {
            return null;
          }

          if (id.toLowerCase() === 'rid') {
            return _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.rid || _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection._proto.rid;
          } else if (id.toLowerCase() === 'sid') {
            return _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.sid || _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection._proto.sid;
          }
        }

      }
    });
    /************************ end api ************************/
  }

});

/***/ }),

/***/ "./src/headless/plugins/caps/index.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/caps/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/caps/utils.js");
/**
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */


const {
  Strophe
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.converse.env;
Strophe.addNamespace('CAPS', "http://jabber.org/protocol/caps");
_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.converse.plugins.add('converse-caps', {
  dependencies: ['converse-status'],

  initialize() {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.listen.on('constructedPresence', (_, p) => p.root().cnode((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCapsNode)()).up() && p);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.listen.on('constructedMUCPresence', (_, p) => p.root().cnode((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCapsNode)()).up() && p);
  }

});

/***/ }),

/***/ "./src/headless/plugins/caps/utils.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/caps/utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCapsNode": () => (/* binding */ createCapsNode)
/* harmony export */ });
/* harmony import */ var strophe_js_src_sha1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! strophe.js/src/sha1 */ "./node_modules/strophe.js/src/sha1.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");


const {
  Strophe,
  $build
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.converse.env;

function propertySort(array, property) {
  return array.sort((a, b) => {
    return a[property] > b[property] ? -1 : 1;
  });
}

function generateVerificationString() {
  const identities = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.api.disco.own.identities.get();

  const features = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.api.disco.own.features.get();

  if (identities.length > 1) {
    propertySort(identities, "category");
    propertySort(identities, "type");
    propertySort(identities, "lang");
  }

  let S = identities.reduce((result, id) => `${result}${id.category}/${id.type}/${(id === null || id === void 0 ? void 0 : id.lang) ?? ''}/${id.name}<`, "");
  features.sort();
  S = features.reduce((result, feature) => `${result}${feature}<`, S);
  return strophe_js_src_sha1__WEBPACK_IMPORTED_MODULE_0__["default"].b64_sha1(S);
}

function createCapsNode() {
  return $build("c", {
    'xmlns': Strophe.NS.CAPS,
    'hash': "sha-1",
    'node': "https://conversejs.org",
    'ver': generateVerificationString()
  }).nodeTree;
}

/***/ }),

/***/ "./src/headless/plugins/chat/api.js":
/*!******************************************!*\
  !*** ./src/headless/plugins/chat/api.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../log.js */ "./src/headless/log.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * The "chats" namespace (used for one-on-one chats)
   *
   * @namespace api.chats
   * @memberOf api
   */
  chats: {
    /**
     * @method api.chats.create
     * @param {string|string[]} jid|jids An jid or array of jids
     * @param {object} [attrs] An object containing configuration attributes.
     */
    async create(jids, attrs) {
      if (typeof jids === 'string') {
        if (attrs && !(attrs !== null && attrs !== void 0 && attrs.fullname)) {
          var _contact$attributes;

          const contact = await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.contacts.get(jids);
          attrs.fullname = contact === null || contact === void 0 ? void 0 : (_contact$attributes = contact.attributes) === null || _contact$attributes === void 0 ? void 0 : _contact$attributes.fullname;
        }

        const chatbox = _core_js__WEBPACK_IMPORTED_MODULE_0__.api.chats.get(jids, attrs, true);

        if (!chatbox) {
          _log_js__WEBPACK_IMPORTED_MODULE_1__["default"].error("Could not open chatbox for JID: " + jids);
          return;
        }

        return chatbox;
      }

      if (Array.isArray(jids)) {
        return Promise.all(jids.forEach(async jid => {
          var _contact$attributes2;

          const contact = await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.contacts.get(jids);
          attrs.fullname = contact === null || contact === void 0 ? void 0 : (_contact$attributes2 = contact.attributes) === null || _contact$attributes2 === void 0 ? void 0 : _contact$attributes2.fullname;
          return _core_js__WEBPACK_IMPORTED_MODULE_0__.api.chats.get(jid, attrs, true).maybeShow();
        }));
      }

      _log_js__WEBPACK_IMPORTED_MODULE_1__["default"].error("chats.create: You need to provide at least one JID");
      return null;
    },

    /**
     * Opens a new one-on-one chat.
     *
     * @method api.chats.open
     * @param {String|string[]} name - e.g. 'buddy@example.com' or ['buddy1@example.com', 'buddy2@example.com']
     * @param {Object} [attrs] - Attributes to be set on the _converse.ChatBox model.
     * @param {Boolean} [attrs.minimized] - Should the chat be created in minimized state.
     * @param {Boolean} [force=false] - By default, a minimized
     *   chat won't be maximized (in `overlayed` view mode) and in
     *   `fullscreen` view mode a newly opened chat won't replace
     *   another chat already in the foreground.
     *   Set `force` to `true` if you want to force the chat to be
     *   maximized or shown.
     * @returns {Promise} Promise which resolves with the
     *   _converse.ChatBox representing the chat.
     *
     * @example
     * // To open a single chat, provide the JID of the contact you're chatting with in that chat:
     * converse.plugins.add('myplugin', {
     *     initialize: function() {
     *         const _converse = this._converse;
     *         // Note, buddy@example.org must be in your contacts roster!
     *         api.chats.open('buddy@example.com').then(chat => {
     *             // Now you can do something with the chat model
     *         });
     *     }
     * });
     *
     * @example
     * // To open an array of chats, provide an array of JIDs:
     * converse.plugins.add('myplugin', {
     *     initialize: function () {
     *         const _converse = this._converse;
     *         // Note, these users must first be in your contacts roster!
     *         api.chats.open(['buddy1@example.com', 'buddy2@example.com']).then(chats => {
     *             // Now you can do something with the chat models
     *         });
     *     }
     * });
     */
    async open(jids, attrs, force) {
      if (typeof jids === 'string') {
        const chat = await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.chats.get(jids, attrs, true);

        if (chat) {
          return chat.maybeShow(force);
        }

        return chat;
      } else if (Array.isArray(jids)) {
        return Promise.all(jids.map(j => _core_js__WEBPACK_IMPORTED_MODULE_0__.api.chats.get(j, attrs, true).then(c => c && c.maybeShow(force))).filter(c => c));
      }

      const err_msg = "chats.open: You need to provide at least one JID";
      _log_js__WEBPACK_IMPORTED_MODULE_1__["default"].error(err_msg);
      throw new Error(err_msg);
    },

    /**
     * Retrieves a chat or all chats.
     *
     * @method api.chats.get
     * @param {String|string[]} jids - e.g. 'buddy@example.com' or ['buddy1@example.com', 'buddy2@example.com']
     * @param {Object} [attrs] - Attributes to be set on the _converse.ChatBox model.
     * @param {Boolean} [create=false] - Whether the chat should be created if it's not found.
     * @returns { Promise<_converse.ChatBox> }
     *
     * @example
     * // To return a single chat, provide the JID of the contact you're chatting with in that chat:
     * const model = await api.chats.get('buddy@example.com');
     *
     * @example
     * // To return an array of chats, provide an array of JIDs:
     * const models = await api.chats.get(['buddy1@example.com', 'buddy2@example.com']);
     *
     * @example
     * // To return all open chats, call the method without any parameters::
     * const models = await api.chats.get();
     *
     */
    async get(jids) {
      let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let create = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('chatBoxesFetched');

      async function _get(jid) {
        let model = await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.chatboxes.get(jid);

        if (!model && create) {
          model = await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.chatboxes.create(jid, attrs, _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.ChatBox);
        } else {
          model = model && model.get('type') === _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.PRIVATE_CHAT_TYPE ? model : null;

          if (model && Object.keys(attrs).length) {
            model.save(attrs);
          }
        }

        return model;
      }

      if (jids === undefined) {
        const chats = await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.chatboxes.get();
        return chats.filter(c => c.get('type') === _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.PRIVATE_CHAT_TYPE);
      } else if (typeof jids === 'string') {
        return _get(jids);
      }

      return Promise.all(jids.map(jid => _get(jid)));
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/chat/index.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/chat/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model.js */ "./src/headless/plugins/chat/model.js");
/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./message.js */ "./src/headless/plugins/chat/message.js");
/* harmony import */ var _model_with_contact_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model-with-contact.js */ "./src/headless/plugins/chat/model-with-contact.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/chat/api.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/chat/utils.js");
/**
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */







_core_js__WEBPACK_IMPORTED_MODULE_5__.converse.plugins.add('converse-chat', {
  dependencies: ['converse-chatboxes', 'converse-disco'],

  initialize() {
    // Configuration values for this plugin
    // ====================================
    // Refer to docs/source/configuration.rst for explanations of these
    // configuration settings.
    _core_js__WEBPACK_IMPORTED_MODULE_5__.api.settings.extend({
      'allow_message_corrections': 'all',
      'allow_message_retraction': 'all',
      'allow_message_styling': true,
      'auto_join_private_chats': [],
      'clear_messages_on_reconnection': false,
      'filter_by_resource': false,
      'prune_messages_above': undefined,
      'pruning_behavior': 'unscrolled',
      'send_chat_markers': ['received', 'displayed', 'acknowledged'],
      'send_chat_state_notifications': true
    });
    _core_js__WEBPACK_IMPORTED_MODULE_5__._converse.Message = _model_with_contact_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(_message_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
    _core_js__WEBPACK_IMPORTED_MODULE_5__._converse.Messages = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_4__.Collection.extend({
      model: _core_js__WEBPACK_IMPORTED_MODULE_5__._converse.Message,
      comparator: 'time'
    });
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_5__._converse, {
      ChatBox: _model_js__WEBPACK_IMPORTED_MODULE_0__["default"],
      handleMessageStanza: _utils_js__WEBPACK_IMPORTED_MODULE_6__.handleMessageStanza
    });
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_5__.api, _api_js__WEBPACK_IMPORTED_MODULE_3__["default"]);

    _core_js__WEBPACK_IMPORTED_MODULE_5__._converse.router.route('converse/chat?jid=:jid', _utils_js__WEBPACK_IMPORTED_MODULE_6__.openChat);

    _core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('chatBoxesFetched', _utils_js__WEBPACK_IMPORTED_MODULE_6__.autoJoinChats);
    _core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('presencesInitialized', _utils_js__WEBPACK_IMPORTED_MODULE_6__.registerMessageHandlers);
    _core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('clearSession', _utils_js__WEBPACK_IMPORTED_MODULE_6__.onClearSession);
    _core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('connected', () => (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.enableCarbons)());
    _core_js__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('reconnected', () => (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.enableCarbons)(true));
  }

});

/***/ }),

/***/ "./src/headless/plugins/chat/message.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/chat/message.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _model_with_contact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model-with-contact.js */ "./src/headless/plugins/chat/model-with-contact.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../log.js */ "./src/headless/log.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");





const {
  Strophe,
  sizzle,
  u
} = _core_js__WEBPACK_IMPORTED_MODULE_3__.converse.env;
/**
 * Mixin which turns a `ModelWithContact` model into a non-MUC message. These can be either `chat` messages or `headline` messages.
 * @mixin
 * @namespace _converse.Message
 * @memberOf _converse
 * @example const msg = new _converse.Message({'message': 'hello world!'});
 */

const MessageMixin = {
  defaults() {
    return {
      'msgid': u.getUniqueId(),
      'time': new Date().toISOString(),
      'is_ephemeral': false
    };
  },

  async initialize() {
    if (!this.checkValidity()) {
      return;
    }

    this.initialized = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_4__.getOpenPromise)();

    if (this.get('file')) {
      this.on('change:put', () => this.uploadFile());
    } // If `type` changes from `error` to `chat`, we want to set the contact. See #2733


    this.on('change:type', () => this.setContact());
    this.on('change:is_ephemeral', () => this.setTimerForEphemeralMessage());
    await this.setContact();
    this.setTimerForEphemeralMessage();
    /**
     * Triggered once a {@link _converse.Message} has been created and initialized.
     * @event _converse#messageInitialized
     * @type { _converse.Message}
     * @example _converse.api.listen.on('messageInitialized', model => { ... });
     */

    await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.trigger('messageInitialized', this, {
      'Synchronous': true
    });
    this.initialized.resolve();
  },

  setContact() {
    if (this.get('type') === 'chat') {
      _model_with_contact_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.initialize.apply(this, arguments);
      this.setRosterContact(Strophe.getBareJidFromJid(this.get('from')));
    }
  },

  /**
   * Sets an auto-destruct timer for this message, if it's is_ephemeral.
   * @private
   * @method _converse.Message#setTimerForEphemeralMessage
   */
  setTimerForEphemeralMessage() {
    if (this.ephemeral_timer) {
      clearTimeout(this.ephemeral_timer);
    }

    const is_ephemeral = this.isEphemeral();

    if (is_ephemeral) {
      const timeout = typeof is_ephemeral === "number" ? is_ephemeral : 10000;
      this.ephemeral_timer = window.setTimeout(() => this.safeDestroy(), timeout);
    }
  },

  checkValidity() {
    if (Object.keys(this.attributes).length === 3) {
      // XXX: This is an empty message with only the 3 default values.
      // This seems to happen when saving a newly created message
      // fails for some reason.
      // TODO: This is likely fixable by setting `wait` when
      // creating messages. See the wait-for-messages branch.
      this.validationError = 'Empty message';
      this.safeDestroy();
      return false;
    }

    return true;
  },

  /**
   * Determines whether this messsage may be retracted by the current user.
   * @private
   * @method _converse.Messages#mayBeRetracted
   * @returns { Boolean }
   */
  mayBeRetracted() {
    const is_own_message = this.get('sender') === 'me';
    const not_canceled = this.get('error_type') !== 'cancel';
    return is_own_message && not_canceled && ['all', 'own'].includes(_core_js__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('allow_message_retraction'));
  },

  safeDestroy() {
    try {
      this.destroy();
    } catch (e) {
      _log_js__WEBPACK_IMPORTED_MODULE_2__["default"].warn(`safeDestroy: ${e}`);
    }
  },

  /**
   * Returns a boolean indicating whether this message is ephemeral,
   * meaning it will get automatically removed after ten seconds.
   * @returns { boolean }
   */
  isEphemeral() {
    return this.get('is_ephemeral');
  },

  /**
   * Returns a boolean indicating whether this message is a XEP-0245 /me command.
   * @returns { boolean }
   */
  isMeCommand() {
    const text = this.getMessageText();

    if (!text) {
      return false;
    }

    return text.startsWith('/me ');
  },

  /**
   * Returns a boolean indicating whether this message is considered a followup
   * message from the previous one. Followup messages are shown grouped together
   * under one author heading.
   * A message is considered a followup of it's predecessor when it's a chat
   * message from the same author, within 10 minutes.
   * @returns { boolean }
   */
  isFollowup() {
    const messages = this.collection.models;
    const idx = messages.indexOf(this);
    const prev_model = idx ? messages[idx - 1] : null;

    if (prev_model === null) {
      return false;
    }

    const date = dayjs__WEBPACK_IMPORTED_MODULE_1___default()(this.get('time'));
    return this.get('from') === prev_model.get('from') && !this.isMeCommand() && !prev_model.isMeCommand() && this.get('type') !== 'info' && prev_model.get('type') !== 'info' && date.isBefore(dayjs__WEBPACK_IMPORTED_MODULE_1___default()(prev_model.get('time')).add(10, 'minutes')) && !!this.get('is_encrypted') === !!prev_model.get('is_encrypted');
  },

  getDisplayName() {
    if (this.contact) {
      return this.contact.getDisplayName();
    } else if (this.vcard) {
      return this.vcard.getDisplayName();
    } else {
      return this.get('from');
    }
  },

  getMessageText() {
    if (this.get('is_encrypted')) {
      const {
        __
      } = _core_js__WEBPACK_IMPORTED_MODULE_3__._converse;
      return this.get('plaintext') || this.get('body') || __('Undecryptable OMEMO message');
    } else if (['groupchat', 'chat'].includes(this.get('type'))) {
      return this.get('body');
    } else {
      return this.get('message');
    }
  },

  /**
   * Send out an IQ stanza to request a file upload slot.
   * https://xmpp.org/extensions/xep-0363.html#request
   * @private
   * @method _converse.Message#sendSlotRequestStanza
   */
  sendSlotRequestStanza() {
    if (!this.file) {
      return Promise.reject(new Error('file is undefined'));
    }

    const iq = _core_js__WEBPACK_IMPORTED_MODULE_3__.converse.env.$iq({
      'from': _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.jid,
      'to': this.get('slot_request_url'),
      'type': 'get'
    }).c('request', {
      'xmlns': Strophe.NS.HTTPUPLOAD,
      'filename': this.file.name,
      'size': this.file.size,
      'content-type': this.file.type
    });
    return _core_js__WEBPACK_IMPORTED_MODULE_3__.api.sendIQ(iq);
  },

  getUploadRequestMetadata(stanza) {
    const headers = sizzle(`slot[xmlns="${Strophe.NS.HTTPUPLOAD}"] put header`, stanza); // https://xmpp.org/extensions/xep-0363.html#request
    // TODO: Can't set the Cookie header in JavaScipt, instead cookies need
    // to be manually set via document.cookie, so we're leaving it out here.

    return {
      'headers': headers.map(h => ({
        'name': h.getAttribute('name'),
        'value': h.textContent
      })).filter(h => ['Authorization', 'Expires'].includes(h.name))
    };
  },

  async getRequestSlotURL() {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_3__._converse;
    let stanza;

    try {
      stanza = await this.sendSlotRequestStanza();
    } catch (e) {
      _log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(e);
      return this.save({
        'type': 'error',
        'message': __('Sorry, could not determine upload URL.'),
        'is_ephemeral': true
      });
    }

    const slot = sizzle(`slot[xmlns="${Strophe.NS.HTTPUPLOAD}"]`, stanza).pop();

    if (slot) {
      this.upload_metadata = this.getUploadRequestMetadata(stanza);
      this.save({
        'get': slot.querySelector('get').getAttribute('url'),
        'put': slot.querySelector('put').getAttribute('url')
      });
    } else {
      return this.save({
        'type': 'error',
        'message': __('Sorry, could not determine file upload URL.'),
        'is_ephemeral': true
      });
    }
  },

  uploadFile() {
    var _this$upload_metadata;

    const xhr = new XMLHttpRequest();

    xhr.onreadystatechange = async () => {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        _log_js__WEBPACK_IMPORTED_MODULE_2__["default"].info('Status: ' + xhr.status);

        if (xhr.status === 200 || xhr.status === 201) {
          let attrs = {
            'upload': _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.SUCCESS,
            'oob_url': this.get('get'),
            'message': this.get('get'),
            'body': this.get('get')
          };
          /**
           * *Hook* which allows plugins to change the attributes
           * saved on the message once a file has been uploaded.
           * @event _converse#afterFileUploaded
           */

          attrs = await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.hook('afterFileUploaded', this, attrs);
          this.save(attrs);
        } else {
          xhr.onerror();
        }
      }
    };

    xhr.upload.addEventListener('progress', evt => {
      if (evt.lengthComputable) {
        this.set('progress', evt.loaded / evt.total);
      }
    }, false);

    xhr.onerror = () => {
      const {
        __
      } = _core_js__WEBPACK_IMPORTED_MODULE_3__._converse;
      let message;

      if (xhr.responseText) {
        message = __('Sorry, could not succesfully upload your file. Your server’s response: "%1$s"', xhr.responseText);
      } else {
        message = __('Sorry, could not succesfully upload your file.');
      }

      this.save({
        'type': 'error',
        'upload': _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.FAILURE,
        'message': message,
        'is_ephemeral': true
      });
    };

    xhr.open('PUT', this.get('put'), true);
    xhr.setRequestHeader('Content-type', this.file.type);
    (_this$upload_metadata = this.upload_metadata.headers) === null || _this$upload_metadata === void 0 ? void 0 : _this$upload_metadata.forEach(h => xhr.setRequestHeader(h.name, h.value));
    xhr.send(this.file);
  }

};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MessageMixin);

/***/ }),

/***/ "./src/headless/plugins/chat/model-with-contact.js":
/*!*********************************************************!*\
  !*** ./src/headless/plugins/chat/model-with-contact.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");



const ModelWithContact = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.extend({
  initialize() {
    this.rosterContactAdded = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_2__.getOpenPromise)();
  },

  async setRosterContact(jid) {
    const contact = await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.contacts.get(jid);

    if (contact) {
      this.contact = contact;
      this.set('nickname', contact.get('nickname'));
      this.rosterContactAdded.resolve();
    }
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModelWithContact);

/***/ }),

/***/ "./src/headless/plugins/chat/model.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/chat/model.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _model_with_contact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model-with-contact.js */ "./src/headless/plugins/chat/model-with-contact.js");
/* harmony import */ var filesize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! filesize */ "./node_modules/filesize/lib/filesize.min.js");
/* harmony import */ var filesize__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(filesize__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_es_isMatch__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/isMatch */ "./node_modules/lodash-es/isMatch.js");
/* harmony import */ var lodash_es_isObject__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es/isObject */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var lodash_es_pick__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es/pick */ "./node_modules/lodash-es/pick.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_shared_chat_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/shared/chat/utils.js */ "./src/headless/shared/chat/utils.js");
/* harmony import */ var _converse_headless_shared_parsers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/headless/shared/parsers.js */ "./src/headless/shared/parsers.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");
/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers.js */ "./src/headless/plugins/chat/parsers.js");
/* harmony import */ var _converse_headless_shared_actions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @converse/headless/shared/actions.js */ "./src/headless/shared/actions.js");















const {
  Strophe,
  $msg
} = _core_js__WEBPACK_IMPORTED_MODULE_4__.converse.env;
const u = _core_js__WEBPACK_IMPORTED_MODULE_4__.converse.env.utils;
/**
 * Represents an open/ongoing chat conversation.
 *
 * @class
 * @namespace _converse.ChatBox
 * @memberOf _converse
 */

const ChatBox = _model_with_contact_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  defaults() {
    return {
      'bookmarked': false,
      'chat_state': undefined,
      'hidden': (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__.isUniView)() && !_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('singleton'),
      'message_type': 'chat',
      'nickname': undefined,
      'num_unread': 0,
      'time_opened': this.get('time_opened') || new Date().getTime(),
      'time_sent': new Date(0).toISOString(),
      'type': _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.PRIVATE_CHAT_TYPE,
      'url': ''
    };
  },

  async initialize() {
    this.initialized = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_7__.getOpenPromise)();
    _model_with_contact_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.initialize.apply(this, arguments);
    const jid = this.get('jid');

    if (!jid) {
      // XXX: The `validate` method will prevent this model
      // from being persisted if there's no jid, but that gets
      // called after model instantiation, so we have to deal
      // with invalid models here also.
      // This happens when the controlbox is in browser storage,
      // but we're in embedded mode.
      return;
    }

    this.set({
      'box_id': `box-${jid}`
    });
    this.initNotifications();
    this.initUI();
    this.initMessages();

    if (this.get('type') === _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.PRIVATE_CHAT_TYPE) {
      this.presence = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.presences.get(jid) || _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.presences.create({
        jid
      });
      await this.setRosterContact(jid);
      this.presence.on('change:show', item => this.onPresenceChanged(item));
    }

    this.on('change:chat_state', this.sendChatState, this);
    this.ui.on('change:scrolled', this.onScrolledChanged, this);
    await this.fetchMessages();
    /**
     * Triggered once a {@link _converse.ChatBox} has been created and initialized.
     * @event _converse#chatBoxInitialized
     * @type { _converse.ChatBox}
     * @example _converse.api.listen.on('chatBoxInitialized', model => { ... });
     */

    await _core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('chatBoxInitialized', this, {
      'Synchronous': true
    });
    this.initialized.resolve();
  },

  getMessagesCollection() {
    return new _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.Messages();
  },

  getMessagesCacheKey() {
    return `converse.messages-${this.get('jid')}-${_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bare_jid}`;
  },

  initMessages() {
    this.messages = this.getMessagesCollection();
    this.messages.fetched = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_7__.getOpenPromise)();
    this.messages.fetched.then(() => {
      this.pruneHistoryWhenScrolledDown();
      /**
       * Triggered whenever a { @link _converse.ChatBox } or ${ @link _converse.ChatRoom }
       * has fetched its messages from the local cache.
       * @event _converse#afterMessagesFetched
       * @type { _converse.ChatBox| _converse.ChatRoom }
       * @example _converse.api.listen.on('afterMessagesFetched', (chat) => { ... });
       */

      _core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('afterMessagesFetched', this);
    });
    this.messages.chatbox = this;
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_8__.initStorage)(this.messages, this.getMessagesCacheKey());
    this.listenTo(this.messages, 'change:upload', this.onMessageUploadChanged, this);
    this.listenTo(this.messages, 'add', this.onMessageAdded, this);
  },

  initUI() {
    this.ui = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_3__.Model();
  },

  initNotifications() {
    this.notifications = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_3__.Model();
  },

  getNotificationsText() {
    var _this$notifications, _this$notifications2, _this$notifications3;

    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse;

    if (((_this$notifications = this.notifications) === null || _this$notifications === void 0 ? void 0 : _this$notifications.get('chat_state')) === _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.COMPOSING) {
      return __('%1$s is typing', this.getDisplayName());
    } else if (((_this$notifications2 = this.notifications) === null || _this$notifications2 === void 0 ? void 0 : _this$notifications2.get('chat_state')) === _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.PAUSED) {
      return __('%1$s has stopped typing', this.getDisplayName());
    } else if (((_this$notifications3 = this.notifications) === null || _this$notifications3 === void 0 ? void 0 : _this$notifications3.get('chat_state')) === _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.GONE) {
      return __('%1$s has gone away', this.getDisplayName());
    } else {
      return '';
    }
  },

  afterMessagesFetched() {
    /**
     * Triggered whenever a `_converse.ChatBox` instance has fetched its messages from
     * `sessionStorage` but **NOT** from the server.
     * @event _converse#afterMessagesFetched
     * @type {_converse.ChatBox | _converse.ChatRoom}
     * @example _converse.api.listen.on('afterMessagesFetched', view => { ... });
     */
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('afterMessagesFetched', this);
  },

  fetchMessages() {
    if (this.messages.fetched_flag) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(`Not re-fetching messages for ${this.get('jid')}`);
      return;
    }

    this.messages.fetched_flag = true;
    const resolve = this.messages.fetched.resolve;
    this.messages.fetch({
      'add': true,
      'success': msgs => {
        this.afterMessagesFetched(msgs);
        resolve();
      },
      'error': () => {
        this.afterMessagesFetched();
        resolve();
      }
    });
    return this.messages.fetched;
  },

  async handleErrorMessageStanza(stanza) {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse;
    const attrs = await (0,_parsers_js__WEBPACK_IMPORTED_MODULE_10__.parseMessage)(stanza, _core_js__WEBPACK_IMPORTED_MODULE_4__._converse);

    if (!(await this.shouldShowErrorMessage(attrs))) {
      return;
    }

    const message = this.getMessageReferencedByError(attrs);

    if (message) {
      const new_attrs = {
        'error': attrs.error,
        'error_condition': attrs.error_condition,
        'error_text': attrs.error_text,
        'error_type': attrs.error_type,
        'editable': false
      };

      if (attrs.msgid === message.get('retraction_id')) {
        // The error message refers to a retraction
        new_attrs.retraction_id = undefined;

        if (!attrs.error) {
          if (attrs.error_condition === 'forbidden') {
            new_attrs.error = __("You're not allowed to retract your message.");
          } else {
            new_attrs.error = __('Sorry, an error occurred while trying to retract your message.');
          }
        }
      } else if (!attrs.error) {
        if (attrs.error_condition === 'forbidden') {
          new_attrs.error = __("You're not allowed to send a message.");
        } else {
          new_attrs.error = __('Sorry, an error occurred while trying to send your message.');
        }
      }

      message.save(new_attrs);
    } else {
      this.createMessage(attrs);
    }
  },

  /**
   * Queue an incoming `chat` message stanza for processing.
   * @async
   * @private
   * @method _converse.ChatBox#queueMessage
   * @param { Promise<MessageAttributes> } attrs - A promise which resolves to the message attributes
   */
  queueMessage(attrs) {
    this.msg_chain = (this.msg_chain || this.messages.fetched).then(() => this.onMessage(attrs)).catch(e => _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(e));
    return this.msg_chain;
  },

  /**
   * @async
   * @private
   * @method _converse.ChatBox#onMessage
   * @param { MessageAttributes } attrs_promse - A promise which resolves to the message attributes.
   */
  async onMessage(attrs) {
    attrs = await attrs;

    if (u.isErrorObject(attrs)) {
      attrs.stanza && _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(attrs.stanza);
      return _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(attrs.message);
    }

    const message = this.getDuplicateMessage(attrs);

    if (message) {
      this.updateMessage(message, attrs);
    } else if (!this.handleReceipt(attrs) && !this.handleChatMarker(attrs) && !(await this.handleRetraction(attrs))) {
      this.setEditable(attrs, attrs.time);

      if (attrs['chat_state'] && attrs.sender === 'them') {
        this.notifications.set('chat_state', attrs.chat_state);
      }

      if (u.shouldCreateMessage(attrs)) {
        const msg = this.handleCorrection(attrs) || (await this.createMessage(attrs));
        this.notifications.set({
          'chat_state': null
        });
        this.handleUnreadMessage(msg);
      }
    }
  },

  async onMessageUploadChanged(message) {
    if (message.get('upload') === _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.SUCCESS) {
      const attrs = {
        'body': message.get('body'),
        'spoiler_hint': message.get('spoiler_hint'),
        'oob_url': message.get('oob_url')
      };
      await this.sendMessage(attrs);
      message.destroy();
    }
  },

  onMessageAdded(message) {
    if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('prune_messages_above') && (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('pruning_behavior') === 'scrolled' || !this.ui.get('scrolled')) && !u.isEmptyMessage(message)) {
      (0,_converse_headless_shared_chat_utils_js__WEBPACK_IMPORTED_MODULE_5__.debouncedPruneHistory)(this);
    }
  },

  async clearMessages() {
    try {
      await this.messages.clearStore();
    } catch (e) {
      this.messages.trigger('reset');
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(e);
    } finally {
      // No point in fetching messages from the cache if it's been cleared.
      // Make sure to resolve the fetched promise to avoid freezes.
      this.messages.fetched.resolve();
    }
  },

  async close() {
    if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.connection.connected()) {
      // Immediately sending the chat state, because the
      // model is going to be destroyed afterwards.
      this.setChatState(_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.INACTIVE);
      this.sendChatState();
    }

    try {
      await new Promise((success, reject) => {
        return this.destroy({
          success,
          'error': (m, e) => reject(e)
        });
      });
    } catch (e) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(e);
    } finally {
      if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('clear_messages_on_reconnection')) {
        await this.clearMessages();
      }
    }
    /**
     * Triggered once a chatbox has been closed.
     * @event _converse#chatBoxClosed
     * @type {_converse.ChatBox | _converse.ChatRoom}
     * @example _converse.api.listen.on('chatBoxClosed', chat => { ... });
     */


    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('chatBoxClosed', this);
  },

  announceReconnection() {
    /**
     * Triggered whenever a `_converse.ChatBox` instance has reconnected after an outage
     * @event _converse#onChatReconnected
     * @type {_converse.ChatBox | _converse.ChatRoom}
     * @example _converse.api.listen.on('onChatReconnected', chat => { ... });
     */
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('chatReconnected', this);
  },

  async onReconnection() {
    if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('clear_messages_on_reconnection')) {
      await this.clearMessages();
    }

    this.announceReconnection();
  },

  onPresenceChanged(item) {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse;
    const show = item.get('show');
    const fullname = this.getDisplayName();
    let text;

    if (show === 'offline') {
      text = __('%1$s has gone offline', fullname);
    } else if (show === 'away') {
      text = __('%1$s has gone away', fullname);
    } else if (show === 'dnd') {
      text = __('%1$s is busy', fullname);
    } else if (show === 'online') {
      text = __('%1$s is online', fullname);
    }

    text && this.createMessage({
      'message': text,
      'type': 'info'
    });
  },

  onScrolledChanged() {
    if (!this.ui.get('scrolled')) {
      this.clearUnreadMsgCounter();
      this.pruneHistoryWhenScrolledDown();
    }
  },

  pruneHistoryWhenScrolledDown() {
    if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('prune_messages_above') && _core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('pruning_behavior') === 'unscrolled' && !this.ui.get('scrolled')) {
      (0,_converse_headless_shared_chat_utils_js__WEBPACK_IMPORTED_MODULE_5__.debouncedPruneHistory)(this);
    }
  },

  validate(attrs) {
    if (!attrs.jid) {
      return 'Ignored ChatBox without JID';
    }

    const room_jids = _core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('auto_join_rooms').map(s => (0,lodash_es_isObject__WEBPACK_IMPORTED_MODULE_12__["default"])(s) ? s.jid : s);
    const auto_join = _core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('auto_join_private_chats').concat(room_jids);

    if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("singleton") && !auto_join.includes(attrs.jid) && !_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('auto_join_on_invite')) {
      const msg = `${attrs.jid} is not allowed because singleton is true and it's not being auto_joined`;
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(msg);
      return msg;
    }
  },

  getDisplayName() {
    if (this.contact) {
      return this.contact.getDisplayName();
    } else if (this.vcard) {
      return this.vcard.getDisplayName();
    } else {
      return this.get('jid');
    }
  },

  async createMessageFromError(error) {
    if (error instanceof _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.TimeoutError) {
      const msg = await this.createMessage({
        'type': 'error',
        'message': error.message,
        'retry_event_id': error.retry_event_id,
        'is_ephemeral': 30000
      });
      msg.error = error;
    }
  },

  editEarlierMessage() {
    let message;
    let idx = this.messages.findLastIndex('correcting');

    if (idx >= 0) {
      this.messages.at(idx).save('correcting', false);

      while (idx > 0) {
        idx -= 1;
        const candidate = this.messages.at(idx);

        if (candidate.get('editable')) {
          message = candidate;
          break;
        }
      }
    }

    message = message || this.messages.filter({
      'sender': 'me'
    }).reverse().find(m => m.get('editable'));

    if (message) {
      message.save('correcting', true);
    }
  },

  editLaterMessage() {
    let message;
    let idx = this.messages.findLastIndex('correcting');

    if (idx >= 0) {
      this.messages.at(idx).save('correcting', false);

      while (idx < this.messages.length - 1) {
        idx += 1;
        const candidate = this.messages.at(idx);

        if (candidate.get('editable')) {
          message = candidate;
          message.save('correcting', true);
          break;
        }
      }
    }

    return message;
  },

  getOldestMessage() {
    for (let i = 0; i < this.messages.length; i++) {
      const message = this.messages.at(i);

      if (message.get('type') === this.get('message_type')) {
        return message;
      }
    }
  },

  getMostRecentMessage() {
    for (let i = this.messages.length - 1; i >= 0; i--) {
      const message = this.messages.at(i);

      if (message.get('type') === this.get('message_type')) {
        return message;
      }
    }
  },

  getUpdatedMessageAttributes(message, attrs) {
    if (!attrs.error_type && message.get('error_type') === 'Decryption') {
      // Looks like we have a failed decrypted message stored, and now
      // we have a properly decrypted version of the same message.
      // See issue: https://github.com/conversejs/converse.js/issues/2733#issuecomment-1035493594
      return Object.assign({}, attrs, {
        error_condition: undefined,
        error_message: undefined,
        error_text: undefined,
        error_type: undefined,
        is_archived: attrs.is_archived,
        is_ephemeral: false,
        is_error: false
      });
    } else {
      return {
        is_archived: attrs.is_archived
      };
    }
  },

  updateMessage(message, attrs) {
    const new_attrs = this.getUpdatedMessageAttributes(message, attrs);
    new_attrs && message.save(new_attrs);
  },

  /**
   * Mutator for setting the chat state of this chat session.
   * Handles clearing of any chat state notification timeouts and
   * setting new ones if necessary.
   * Timeouts are set when the  state being set is COMPOSING or PAUSED.
   * After the timeout, COMPOSING will become PAUSED and PAUSED will become INACTIVE.
   * See XEP-0085 Chat State Notifications.
   * @private
   * @method _converse.ChatBox#setChatState
   * @param { string } state - The chat state (consts ACTIVE, COMPOSING, PAUSED, INACTIVE, GONE)
   */
  setChatState(state, options) {
    if (this.chat_state_timeout !== undefined) {
      window.clearTimeout(this.chat_state_timeout);
      delete this.chat_state_timeout;
    }

    if (state === _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.COMPOSING) {
      this.chat_state_timeout = window.setTimeout(this.setChatState.bind(this), _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.TIMEOUTS.PAUSED, _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.PAUSED);
    } else if (state === _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.PAUSED) {
      this.chat_state_timeout = window.setTimeout(this.setChatState.bind(this), _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.TIMEOUTS.INACTIVE, _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.INACTIVE);
    }

    this.set('chat_state', state, options);
    return this;
  },

  /**
   * Given an error `<message>` stanza's attributes, find the saved message model which is
   * referenced by that error.
   * @param { Object } attrs
   */
  getMessageReferencedByError(attrs) {
    const id = attrs.msgid;
    return id && this.messages.models.find(m => [m.get('msgid'), m.get('retraction_id')].includes(id));
  },

  /**
   * @private
   * @method _converse.ChatBox#shouldShowErrorMessage
   * @returns {boolean}
   */
  shouldShowErrorMessage(attrs) {
    const msg = this.getMessageReferencedByError(attrs);

    if (!msg && attrs.chat_state) {
      // If the error refers to a message not included in our store,
      // and it has a chat state tag, we assume that this was a
      // CSI message (which we don't store).
      // See https://github.com/conversejs/converse.js/issues/1317
      return;
    } // Gets overridden in ChatRoom


    return true;
  },

  isSameUser(jid1, jid2) {
    return u.isSameBareJID(jid1, jid2);
  },

  /**
   * Looks whether we already have a retraction for this
   * incoming message. If so, it's considered "dangling" because it
   * probably hasn't been applied to anything yet, given that the
   * relevant message is only coming in now.
   * @private
   * @method _converse.ChatBox#findDanglingRetraction
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMessage}
   * @returns { _converse.Message }
   */
  findDanglingRetraction(attrs) {
    if (!attrs.origin_id || !this.messages.length) {
      return null;
    } // Only look for dangling retractions if there are newer
    // messages than this one, since retractions come after.


    if (this.messages.last().get('time') > attrs.time) {
      // Search from latest backwards
      const messages = Array.from(this.messages.models);
      messages.reverse();
      return messages.find(_ref => {
        let {
          attributes
        } = _ref;
        return attributes.retracted_id === attrs.origin_id && attributes.from === attrs.from && !attributes.moderated_by;
      });
    }
  },

  /**
   * Handles message retraction based on the passed in attributes.
   * @private
   * @method _converse.ChatBox#handleRetraction
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMessage}
   * @returns { Boolean } Returns `true` or `false` depending on
   *  whether a message was retracted or not.
   */
  async handleRetraction(attrs) {
    const RETRACTION_ATTRIBUTES = ['retracted', 'retracted_id', 'editable'];

    if (attrs.retracted) {
      if (attrs.is_tombstone) {
        return false;
      }

      const message = this.messages.findWhere({
        'origin_id': attrs.retracted_id,
        'from': attrs.from
      });

      if (!message) {
        attrs['dangling_retraction'] = true;
        await this.createMessage(attrs);
        return true;
      }

      message.save((0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_13__["default"])(attrs, RETRACTION_ATTRIBUTES));
      return true;
    } else {
      // Check if we have dangling retraction
      const message = this.findDanglingRetraction(attrs);

      if (message) {
        const retraction_attrs = (0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_13__["default"])(message.attributes, RETRACTION_ATTRIBUTES);
        const new_attrs = Object.assign({
          'dangling_retraction': false
        }, attrs, retraction_attrs);
        delete new_attrs['id']; // Delete id, otherwise a new cache entry gets created

        message.save(new_attrs);
        return true;
      }
    }

    return false;
  },

  /**
   * Determines whether the passed in message attributes represent a
   * message which corrects a previously received message, or an
   * older message which has already been corrected.
   * In both cases, update the corrected message accordingly.
   * @private
   * @method _converse.ChatBox#handleCorrection
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMessage}
   * @returns { _converse.Message|undefined } Returns the corrected
   *  message or `undefined` if not applicable.
   */
  handleCorrection(attrs) {
    if (!attrs.replace_id || !attrs.from) {
      return;
    }

    const message = this.messages.findWhere({
      'msgid': attrs.replace_id,
      'from': attrs.from
    });

    if (!message) {
      return;
    }

    const older_versions = message.get('older_versions') || {};

    if (attrs.time < message.get('time') && message.get('edited')) {
      // This is an older message which has been corrected afterwards
      older_versions[attrs.time] = attrs['message'];
      message.save({
        'older_versions': older_versions
      });
    } else {
      // This is a correction of an earlier message we already received
      if (Object.keys(older_versions).length) {
        older_versions[message.get('edited')] = message.getMessageText();
      } else {
        older_versions[message.get('time')] = message.getMessageText();
      }

      attrs = Object.assign(attrs, {
        older_versions
      });
      delete attrs['msgid']; // We want to keep the msgid of the original message

      delete attrs['id']; // Delete id, otherwise a new cache entry gets created

      attrs['time'] = message.get('time');
      message.save(attrs);
    }

    return message;
  },

  /**
   * Returns an already cached message (if it exists) based on the
   * passed in attributes map.
   * @private
   * @method _converse.ChatBox#getDuplicateMessage
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMessage}
   * @returns {Promise<_converse.Message>}
   */
  getDuplicateMessage(attrs) {
    const queries = [...this.getStanzaIdQueryAttrs(attrs), this.getOriginIdQueryAttrs(attrs), this.getMessageBodyQueryAttrs(attrs)].filter(s => s);
    const msgs = this.messages.models;
    return msgs.find(m => queries.reduce((out, q) => out || (0,lodash_es_isMatch__WEBPACK_IMPORTED_MODULE_14__["default"])(m.attributes, q), false));
  },

  getOriginIdQueryAttrs(attrs) {
    return attrs.origin_id && {
      'origin_id': attrs.origin_id,
      'from': attrs.from
    };
  },

  getStanzaIdQueryAttrs(attrs) {
    const keys = Object.keys(attrs).filter(k => k.startsWith('stanza_id '));
    return keys.map(key => {
      const by_jid = key.replace(/^stanza_id /, '');
      const query = {};
      query[`stanza_id ${by_jid}`] = attrs[key];
      return query;
    });
  },

  getMessageBodyQueryAttrs(attrs) {
    if (attrs.msgid) {
      const query = {
        'from': attrs.from,
        'msgid': attrs.msgid
      }; // XXX: Need to take XEP-428 <fallback> into consideration

      if (!attrs.is_encrypted && attrs.body) {
        // We can't match the message if it's a reflected
        // encrypted message (e.g. via MAM or in a MUC)
        query['body'] = attrs.body;
      }

      return query;
    }
  },

  /**
   * Retract one of your messages in this chat
   * @private
   * @method _converse.ChatBoxView#retractOwnMessage
   * @param { _converse.Message } message - The message which we're retracting.
   */
  retractOwnMessage(message) {
    this.sendRetractionMessage(message);
    message.save({
      'retracted': new Date().toISOString(),
      'retracted_id': message.get('origin_id'),
      'retraction_id': message.get('id'),
      'is_ephemeral': true,
      'editable': false
    });
  },

  /**
   * Sends a message stanza to retract a message in this chat
   * @private
   * @method _converse.ChatBox#sendRetractionMessage
   * @param { _converse.Message } message - The message which we're retracting.
   */
  sendRetractionMessage(message) {
    const origin_id = message.get('origin_id');

    if (!origin_id) {
      throw new Error("Can't retract message without a XEP-0359 Origin ID");
    }

    const msg = $msg({
      'id': u.getUniqueId(),
      'to': this.get('jid'),
      'type': "chat"
    }).c('store', {
      xmlns: Strophe.NS.HINTS
    }).up().c("apply-to", {
      'id': origin_id,
      'xmlns': Strophe.NS.FASTEN
    }).c('retract', {
      xmlns: Strophe.NS.RETRACT
    });
    return _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.send(msg);
  },

  /**
   * Finds the last eligible message and then sends a XEP-0333 chat marker for it.
   * @param { ('received'|'displayed'|'acknowledged') } [type='displayed']
   * @param { Boolean } force - Whether a marker should be sent for the
   *  message, even if it didn't include a `markable` element.
   */
  sendMarkerForLastMessage() {
    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'displayed';
    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const msgs = Array.from(this.messages.models);
    msgs.reverse();
    const msg = msgs.find(m => m.get('sender') === 'them' && (force || m.get('is_markable')));
    msg && this.sendMarkerForMessage(msg, type, force);
  },

  /**
   * Given the passed in message object, send a XEP-0333 chat marker.
   * @param { _converse.Message } msg
   * @param { ('received'|'displayed'|'acknowledged') } [type='displayed']
   * @param { Boolean } force - Whether a marker should be sent for the
   *  message, even if it didn't include a `markable` element.
   */
  sendMarkerForMessage(msg) {
    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'displayed';
    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!msg || !_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('send_chat_markers').includes(type)) {
      return;
    }

    if (msg !== null && msg !== void 0 && msg.get('is_markable') || force) {
      const from_jid = Strophe.getBareJidFromJid(msg.get('from'));
      (0,_converse_headless_shared_actions_js__WEBPACK_IMPORTED_MODULE_11__.sendMarker)(from_jid, msg.get('msgid'), type, msg.get('type'));
    }
  },

  handleChatMarker(attrs) {
    const to_bare_jid = Strophe.getBareJidFromJid(attrs.to);

    if (to_bare_jid !== _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bare_jid) {
      return false;
    }

    if (attrs.is_markable) {
      if (this.contact && !attrs.is_archived && !attrs.is_carbon) {
        (0,_converse_headless_shared_actions_js__WEBPACK_IMPORTED_MODULE_11__.sendMarker)(attrs.from, attrs.msgid, 'received');
      }

      return false;
    } else if (attrs.marker_id) {
      const message = this.messages.findWhere({
        'msgid': attrs.marker_id
      });
      const field_name = `marker_${attrs.marker}`;

      if (message && !message.get(field_name)) {
        message.save({
          field_name: new Date().toISOString()
        });
      }

      return true;
    }
  },

  sendReceiptStanza(to_jid, id) {
       //TOFIND REMOVE DEFAULT RECEIPT CONVERSE
       return
    const receipt_stanza = $msg({
      'from': _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.jid,
      'id': u.getUniqueId(),
      'to': to_jid,
      'type': 'chat'
    }).c('received', {
      'xmlns': Strophe.NS.RECEIPTS,
      'id': id
    }).up().c('store', {
      'xmlns': Strophe.NS.HINTS
    }).up();
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.send(receipt_stanza);
  },

  handleReceipt(attrs) {
    if (attrs.sender === 'them') {
      if (attrs.is_valid_receipt_request) {
        this.sendReceiptStanza(attrs.from, attrs.msgid);
      } else if (attrs.receipt_id) {
        const message = this.messages.findWhere({
          'msgid': attrs.receipt_id
        });

        if (message && !message.get('received')) {
          message.save({
            'received': new Date().toISOString()
          });
        }

        return true;
      }
    }

    return false;
  },

  /**
   * Given a {@link _converse.Message} return the XML stanza that represents it.
   * @private
   * @method _converse.ChatBox#createMessageStanza
   * @param { _converse.Message } message - The message object
   */
  async createMessageStanza(message) {
    const stanza = $msg({
      'from': _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection.jid,
      'to': this.get('jid'),
      'type': this.get('message_type'),
      'id': message.get('edited') && u.getUniqueId() || message.get('msgid')
    }).c('body').t(message.get('body')).up().c(_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.ACTIVE, {
      'xmlns': Strophe.NS.CHATSTATES
    }).root();

    if (message.get('type') === 'chat') {
      stanza.c('request', {
        'xmlns': Strophe.NS.RECEIPTS
      }).root();
    }

    if (!message.get('is_encrypted')) {
      if (message.get('is_spoiler')) {
        if (message.get('spoiler_hint')) {
          stanza.c('spoiler', {
            'xmlns': Strophe.NS.SPOILER
          }, message.get('spoiler_hint')).root();
        } else {
          stanza.c('spoiler', {
            'xmlns': Strophe.NS.SPOILER
          }).root();
        }
      }

      (message.get('references') || []).forEach(reference => {
        const attrs = {
          'xmlns': Strophe.NS.REFERENCE,
          'begin': reference.begin,
          'end': reference.end,
          'type': reference.type
        };

        if (reference.uri) {
          attrs.uri = reference.uri;
        }

        stanza.c('reference', attrs).root();
      });

      if (message.get('oob_url')) {
        stanza.c('x', {
          'xmlns': Strophe.NS.OUTOFBAND
        }).c('url').t(message.get('oob_url')).root();
      }
    }

    if (message.get('edited')) {
      stanza.c('replace', {
        'xmlns': Strophe.NS.MESSAGE_CORRECT,
        'id': message.get('msgid')
      }).root();
    }

    if (message.get('origin_id')) {
      stanza.c('origin-id', {
        'xmlns': Strophe.NS.SID,
        'id': message.get('origin_id')
      }).root();
    }

    stanza.root();
    /**
     * *Hook* which allows plugins to update an outgoing message stanza
     * @event _converse#createMessageStanza
     * @param { _converse.ChatBox | _converse.ChatRoom } - The chat from
     *      which this message stanza is being sent.
     * @param { Object } data - Message data
     * @param { _converse.Message | _converse.ChatRoomMessage } data.message
     *      The message object from which the stanza is created and which gets persisted to storage.
     * @param { Strophe.Builder } data.stanza
     *      The stanza that will be sent out, as a Strophe.Builder object.
     *      You can use the Strophe.Builder functions to extend the stanza.
     *      See http://strophe.im/strophejs/doc/1.4.3/files/strophe-umd-js.html#Strophe.Builder.Functions
     */

    const data = await _core_js__WEBPACK_IMPORTED_MODULE_4__.api.hook('createMessageStanza', this, {
      message,
      stanza
    });
    return data.stanza;
  },

  async getOutgoingMessageAttributes(attrs) {
    var _attrs;

    const is_spoiler = !!this.get('composing_spoiler');
    const origin_id = u.getUniqueId();
    const text = (_attrs = attrs) === null || _attrs === void 0 ? void 0 : _attrs.body;
    const body = text ? u.shortnamesToUnicode(text) : undefined;
    attrs = Object.assign({}, attrs, {
      'from': _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bare_jid,
      'fullname': _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.xmppstatus.get('fullname'),
      'id': origin_id,
      'is_only_emojis':   false,
      'jid': this.get('jid'),
      'message': body,
      'msgid': origin_id,
      'nickname': this.get('nickname'),
      'sender': 'me',
      'time': new Date().toISOString(),
      'type': this.get('message_type'),
      body,
      is_spoiler,
      origin_id
    }, (0,_converse_headless_shared_parsers_js__WEBPACK_IMPORTED_MODULE_6__.getMediaURLsMetadata)(text));
    /**
     * *Hook* which allows plugins to update the attributes of an outgoing message.
     * These attributes get set on the { @link _converse.Message } or
     * { @link _converse.ChatRoomMessage } and persisted to storage.
     * @event _converse#getOutgoingMessageAttributes
     * @param { _converse.ChatBox | _converse.ChatRoom } chat
     *      The chat from which this message will be sent.
     * @param { MessageAttributes } attrs
     *      The message attributes, from which the stanza will be created.
     */

    attrs = await _core_js__WEBPACK_IMPORTED_MODULE_4__.api.hook('getOutgoingMessageAttributes', this, attrs);
    return attrs;
  },

  /**
   * Responsible for setting the editable attribute of messages.
   * If api.settings.get('allow_message_corrections') is "last", then only the last
   * message sent from me will be editable. If set to "all" all messages
   * will be editable. Otherwise no messages will be editable.
   * @method _converse.ChatBox#setEditable
   * @memberOf _converse.ChatBox
   * @param { Object } attrs An object containing message attributes.
   * @param { String } send_time - time when the message was sent
   */
  setEditable(attrs, send_time) {
    if (attrs.is_headline || u.isEmptyMessage(attrs) || attrs.sender !== 'me') {
      return;
    }

    if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('allow_message_corrections') === 'all') {
      attrs.editable = !(attrs.file || attrs.retracted || 'oob_url' in attrs);
    } else if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('allow_message_corrections') === 'last' && send_time > this.get('time_sent')) {
      this.set({
        'time_sent': send_time
      });
      const msg = this.messages.findWhere({
        'editable': true
      });

      if (msg) {
        msg.save({
          'editable': false
        });
      }

      attrs.editable = !(attrs.file || attrs.retracted || 'oob_url' in attrs);
    }
  },

  /**
   * Queue the creation of a message, to make sure that we don't run
   * into a race condition whereby we're creating a new message
   * before the collection has been fetched.
   * @async
   * @private
   * @method _converse.ChatBox#createMessage
   * @param { Object } attrs
   */
  async createMessage(attrs, options) {
       //TOFIND COMMENTED OUT await this.messages.fetched
    
    attrs.time = attrs.time || new Date().toISOString();
    // await this.messages.fetched;
    return this.messages.create(attrs, options);
  },

  /**
   * Responsible for sending off a text message inside an ongoing chat conversation.
   * @private
   * @method _converse.ChatBox#sendMessage
   * @memberOf _converse.ChatBox
   * @param { Object } [attrs] - A map of attributes to be saved on the message
   * @returns { _converse.Message }
   * @example
   * const chat = api.chats.get('buddy1@example.org');
   * chat.sendMessage({'body': 'hello world'});
   */
  async sendMessage(attrs) {
    attrs = await this.getOutgoingMessageAttributes(attrs);
    let message = this.messages.findWhere('correcting');

    if (message) {
      const older_versions = message.get('older_versions') || {};
      const edited_time = message.get('edited') || message.get('time');
      older_versions[edited_time] = message.getMessageText();
      const plaintext = attrs.is_encrypted ? attrs.message : undefined;
      message.save({
        'body': attrs.body,
        'message': attrs.body,
        'correcting': false,
        'edited': new Date().toISOString(),
        'is_only_emojis': attrs.is_only_emojis,
        'origin_id': u.getUniqueId(),
        'received': undefined,
        'references': attrs.references,
        older_versions,
        plaintext
      });
    } else {
      this.setEditable(attrs, new Date().toISOString());
      message = await this.createMessage(attrs);
    }

    try {
      const stanza = await this.createMessageStanza(message);
      _core_js__WEBPACK_IMPORTED_MODULE_4__.api.send(stanza);
    } catch (e) {
      message.destroy();
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(e);
      return;
    }
    /**
     * Triggered when a message is being sent out
     * @event _converse#sendMessage
     * @type { Object }
     * @param { Object } data
     * @property { (_converse.ChatBox | _converse.ChatRoom) } data.chatbox
     * @property { (_converse.Message | _converse.ChatRoomMessage) } data.message
     */


    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('sendMessage', {
      'chatbox': this,
      message
    });
    return message;
  },

  /**
   * Sends a message with the current XEP-0085 chat state of the user
   * as taken from the `chat_state` attribute of the {@link _converse.ChatBox}.
   * @private
   * @method _converse.ChatBox#sendChatState
   */
  sendChatState() {
    if (_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('send_chat_state_notifications') && this.get('chat_state')) {
      const allowed = _core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('send_chat_state_notifications');

      if (Array.isArray(allowed) && !allowed.includes(this.get('chat_state'))) {
        return;
      }

      _core_js__WEBPACK_IMPORTED_MODULE_4__.api.send($msg({
        'id': u.getUniqueId(),
        'to': this.get('jid'),
        'type': 'chat'
      }).c(this.get('chat_state'), {
        'xmlns': Strophe.NS.CHATSTATES
      }).up().c('no-store', {
        'xmlns': Strophe.NS.HINTS
      }).up().c('no-permanent-store', {
        'xmlns': Strophe.NS.HINTS
      }));
    }
  },

  async sendFiles(files) {
    var _maxFileSize;

    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse;
    const result = await _core_js__WEBPACK_IMPORTED_MODULE_4__.api.disco.features.get(Strophe.NS.HTTPUPLOAD, _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.domain);
    const item = result.pop();

    if (!item) {
      this.createMessage({
        'message': __("Sorry, looks like file upload is not supported by your server."),
        'type': 'error',
        'is_ephemeral': true
      });
      return;
    }

    const data = item.dataforms.where({
      'FORM_TYPE': {
        'value': Strophe.NS.HTTPUPLOAD,
        'type': "hidden"
      }
    }).pop();
    const max_file_size = window.parseInt((_maxFileSize = ((data === null || data === void 0 ? void 0 : data.attributes) || {})['max-file-size']) === null || _maxFileSize === void 0 ? void 0 : _maxFileSize.value);
    const slot_request_url = item === null || item === void 0 ? void 0 : item.id;

    if (!slot_request_url) {
      this.createMessage({
        'message': __("Sorry, looks like file upload is not supported by your server."),
        'type': 'error',
        'is_ephemeral': true
      });
      return;
    }

    Array.from(files).forEach(async file => {
      /**
       * *Hook* which allows plugins to transform files before they'll be
       * uploaded. The main use-case is to encrypt the files.
       * @event _converse#beforeFileUpload
       * @param { _converse.ChatBox | _converse.ChatRoom } chat
       *      The chat from which this file will be uploaded.
       * @param { File } file
       *      The file that will be uploaded
       */
      file = await _core_js__WEBPACK_IMPORTED_MODULE_4__.api.hook('beforeFileUpload', this, file);

      if (!window.isNaN(max_file_size) && window.parseInt(file.size) > max_file_size) {
        return this.createMessage({
          'message': __('The size of your file, %1$s, exceeds the maximum allowed by your server, which is %2$s.', file.name, filesize__WEBPACK_IMPORTED_MODULE_1___default()(max_file_size)),
          'type': 'error',
          'is_ephemeral': true
        });
      } else {
        const initial_attrs = await this.getOutgoingMessageAttributes();
        const attrs = Object.assign(initial_attrs, {
          'file': true,
          'progress': 0,
          'slot_request_url': slot_request_url
        });
        this.setEditable(attrs, new Date().toISOString());
        const message = await this.createMessage(attrs, {
          'silent': true
        });
        message.file = file;
        this.messages.trigger('add', message);
        message.getRequestSlotURL();
      }
    });
  },

  maybeShow(force) {
    if ((0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__.isUniView)()) {
      const filter = c => !c.get('hidden') && c.get('jid') !== this.get('jid') && c.get('id') !== 'controlbox';

      const other_chats = _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.chatboxes.filter(filter);

      if (force || other_chats.length === 0) {
        // We only have one chat visible at any one time.
        // So before opening a chat, we make sure all other chats are hidden.
        other_chats.forEach(c => u.safeSave(c, {
          'hidden': true
        }));
        u.safeSave(this, {
          'hidden': false
        });
      }

      return;
    }

    u.safeSave(this, {
      'hidden': false
    });
    this.trigger('show');
    return this;
  },

  /**
   * Indicates whether the chat is hidden and therefore
   * whether a newly received message will be visible
   * to the user or not.
   * @returns {boolean}
   */
  isHidden() {
    // Note: This methods gets overridden by converse-minimize
    return this.get('hidden') || this.isScrolledUp() || _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.windowState === 'hidden';
  },

  /**
   * Given a newly received {@link _converse.Message} instance,
   * update the unread counter if necessary.
   * @private
   * @method _converse.ChatBox#handleUnreadMessage
   * @param {_converse.Message} message
   */
  handleUnreadMessage(message) {
    if (!(message !== null && message !== void 0 && message.get('body'))) {
      return;
    }

    if (u.isNewMessage(message)) {
      if (message.get('sender') === 'me') {
        // We remove the "scrolled" flag so that the chat area
        // gets scrolled down. We always want to scroll down
        // when the user writes a message as opposed to when a
        // message is received.
        this.ui.set('scrolled', false);
      } else if (this.isHidden()) {
        this.incrementUnreadMsgsCounter(message);
      } else {
        this.sendMarkerForMessage(message);
      }
    }
  },

  incrementUnreadMsgsCounter(message) {
    const settings = {
      'num_unread': this.get('num_unread') + 1
    };

    if (this.get('num_unread') === 0) {
      settings['first_unread_id'] = message.get('id');
    }

    this.save(settings);
  },

  clearUnreadMsgCounter() {
    if (this.get('num_unread') > 0) {
      this.sendMarkerForMessage(this.messages.last());
    }

    u.safeSave(this, {
      'num_unread': 0
    });
  },

  isScrolledUp() {
    return this.ui.get('scrolled');
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatBox);

/***/ }),

/***/ "./src/headless/plugins/chat/parsers.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/chat/parsers.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseMessage": () => (/* binding */ parseMessage)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_utils_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/utils/core */ "./src/headless/utils/core.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_shared_actions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/shared/actions */ "./src/headless/shared/actions.js");
/* harmony import */ var _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/shared/parsers */ "./src/headless/shared/parsers.js");






const {
  Strophe,
  sizzle
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.converse.env;
/**
 * Parses a passed in message stanza and returns an object of attributes.
 * @method st#parseMessage
 * @param { XMLElement } stanza - The message stanza
 * @param { _converse } _converse
 * @returns { (MessageAttributes|Error) }
 */

async function parseMessage(stanza) {
  var _stanza$querySelector, _stanza$querySelector2, _contact, _contact$attributes, _stanza$querySelector3, _stanza$querySelector4;

  (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.throwErrorIfInvalidForward)(stanza);
  let to_jid = stanza.getAttribute('to');
  const to_resource = Strophe.getResourceFromJid(to_jid);

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('filter_by_resource') && to_resource && to_resource !== _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.resource) {
    return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.StanzaParseError(`Ignoring incoming message intended for a different resource: ${to_jid}`, stanza);
  }

  const original_stanza = stanza;

  let from_jid = stanza.getAttribute('from') || _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid;

  if ((0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.isCarbon)(stanza)) {
    if (from_jid === _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid) {
      const selector = `[xmlns="${Strophe.NS.CARBONS}"] > forwarded[xmlns="${Strophe.NS.FORWARD}"] > message`;
      stanza = sizzle(selector, stanza).pop();
      to_jid = stanza.getAttribute('to');
      from_jid = stanza.getAttribute('from');
    } else {
      // Prevent message forging via carbons: https://xmpp.org/extensions/xep-0280.html#security
      (0,_converse_headless_shared_actions__WEBPACK_IMPORTED_MODULE_4__.rejectMessage)(stanza, 'Rejecting carbon from invalid JID');
      return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.StanzaParseError(`Rejecting carbon from invalid JID ${to_jid}`, stanza);
    }
  }

  const is_archived = (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.isArchived)(stanza);

  if (is_archived) {
    if (from_jid === _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid) {
      const selector = `[xmlns="${Strophe.NS.MAM}"] > forwarded[xmlns="${Strophe.NS.FORWARD}"] > message`;
      stanza = sizzle(selector, stanza).pop();
      to_jid = stanza.getAttribute('to');
      from_jid = stanza.getAttribute('from');
    } else {
      return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.StanzaParseError(`Invalid Stanza: alleged MAM message from ${stanza.getAttribute('from')}`, stanza);
    }
  }

  const from_bare_jid = Strophe.getBareJidFromJid(from_jid);
  const is_me = from_bare_jid === _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid;

  if (is_me && to_jid === null) {
    return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.StanzaParseError(`Don't know how to handle message stanza without 'to' attribute. ${stanza.outerHTML}`, stanza);
  }

  const is_headline = (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.isHeadline)(stanza);
  const is_server_message = (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.isServerMessage)(stanza);
  let contact, contact_jid;

  if (!is_headline && !is_server_message) {
    contact_jid = is_me ? Strophe.getBareJidFromJid(to_jid) : from_bare_jid;
    contact = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.contacts.get(contact_jid);

    if (contact === undefined && !_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('allow_non_roster_messaging')) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(stanza);
      return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.StanzaParseError(`Blocking messaging with a JID not in our roster because allow_non_roster_messaging is false.`, stanza);
    }
  }
  /**
   * @typedef { Object } MessageAttributes
   * The object which {@link parseMessage} returns
   * @property { ('me'|'them') } sender - Whether the message was sent by the current user or someone else
   * @property { Array<Object> } references - A list of objects representing XEP-0372 references
   * @property { Boolean } editable - Is this message editable via XEP-0308?
   * @property { Boolean } is_archived -  Is this message from a XEP-0313 MAM archive?
   * @property { Boolean } is_carbon - Is this message a XEP-0280 Carbon?
   * @property { Boolean } is_delayed - Was delivery of this message was delayed as per XEP-0203?
   * @property { Boolean } is_encrypted -  Is this message XEP-0384  encrypted?
   * @property { Boolean } is_error - Whether an error was received for this message
   * @property { Boolean } is_headline - Is this a "headline" message?
   * @property { Boolean } is_markable - Can this message be marked with a XEP-0333 chat marker?
   * @property { Boolean } is_marker - Is this message a XEP-0333 Chat Marker?
   * @property { Boolean } is_only_emojis - Does the message body contain only emojis?
   * @property { Boolean } is_spoiler - Is this a XEP-0382 spoiler message?
   * @property { Boolean } is_tombstone - Is this a XEP-0424 tombstone?
   * @property { Boolean } is_unstyled - Whether XEP-0393 styling hints should be ignored
   * @property { Boolean } is_valid_receipt_request - Does this message request a XEP-0184 receipt (and is not from us or a carbon or archived message)
   * @property { Object } encrypted -  XEP-0384 encryption payload attributes
   * @property { String } body - The contents of the <body> tag of the message stanza
   * @property { String } chat_state - The XEP-0085 chat state notification contained in this message
   * @property { String } contact_jid - The JID of the other person or entity
   * @property { String } edited - An ISO8601 string recording the time that the message was edited per XEP-0308
   * @property { String } error_condition - The defined error condition
   * @property { String } error_text - The error text received from the server
   * @property { String } error_type - The type of error received from the server
   * @property { String } from - The sender JID
   * @property { String } fullname - The full name of the sender
   * @property { String } marker - The XEP-0333 Chat Marker value
   * @property { String } marker_id - The `id` attribute of a XEP-0333 chat marker
   * @property { String } msgid - The root `id` attribute of the stanza
   * @property { String } nick - The roster nickname of the sender
   * @property { String } oob_desc - The description of the XEP-0066 out of band data
   * @property { String } oob_url - The URL of the XEP-0066 out of band data
   * @property { String } origin_id - The XEP-0359 Origin ID
   * @property { String } receipt_id - The `id` attribute of a XEP-0184 <receipt> element
   * @property { String } received - An ISO8601 string recording the time that the message was received
   * @property { String } replace_id - The `id` attribute of a XEP-0308 <replace> element
   * @property { String } retracted - An ISO8601 string recording the time that the message was retracted
   * @property { String } retracted_id - The `id` attribute of a XEP-424 <retracted> element
   * @property { String } spoiler_hint  The XEP-0382 spoiler hint
   * @property { String } stanza_id - The XEP-0359 Stanza ID. Note: the key is actualy `stanza_id ${by_jid}` and there can be multiple.
   * @property { String } subject - The <subject> element value
   * @property { String } thread - The <thread> element value
   * @property { String } time - The time (in ISO8601 format), either given by the XEP-0203 <delay> element, or of receipt.
   * @property { String } to - The recipient JID
   * @property { String } type - The type of message
   */


  const delay = sizzle(`delay[xmlns="${Strophe.NS.DELAY}"]`, original_stanza).pop();
  const marker = (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getChatMarker)(stanza);
  const now = new Date().toISOString();
  let attrs = Object.assign({
    contact_jid,
    is_archived,
    is_headline,
    is_server_message,
    'body': (_stanza$querySelector = stanza.querySelector('body')) === null || _stanza$querySelector === void 0 ? void 0 : (_stanza$querySelector2 = _stanza$querySelector.textContent) === null || _stanza$querySelector2 === void 0 ? void 0 : _stanza$querySelector2.trim(),
    'chat_state': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getChatState)(stanza),
    'from': Strophe.getBareJidFromJid(stanza.getAttribute('from')),
    'is_carbon': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.isCarbon)(original_stanza),
    'is_delayed': !!delay,
    'is_markable': !!sizzle(`markable[xmlns="${Strophe.NS.MARKERS}"]`, stanza).length,
    'is_marker': !!marker,
    'is_unstyled': !!sizzle(`unstyled[xmlns="${Strophe.NS.STYLING}"]`, stanza).length,
    'marker_id': marker && marker.getAttribute('id'),
    'msgid': stanza.getAttribute('id') || original_stanza.getAttribute('id'),
    'nick': (_contact = contact) === null || _contact === void 0 ? void 0 : (_contact$attributes = _contact.attributes) === null || _contact$attributes === void 0 ? void 0 : _contact$attributes.nickname,
    'receipt_id': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getReceiptId)(stanza),
    'received': new Date().toISOString(),
    'references': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getReferences)(stanza),
    'sender': is_me ? 'me' : 'them',
    'subject': (_stanza$querySelector3 = stanza.querySelector('subject')) === null || _stanza$querySelector3 === void 0 ? void 0 : _stanza$querySelector3.textContent,
    'thread': (_stanza$querySelector4 = stanza.querySelector('thread')) === null || _stanza$querySelector4 === void 0 ? void 0 : _stanza$querySelector4.textContent,
    'time': delay ? dayjs__WEBPACK_IMPORTED_MODULE_0___default()(delay.getAttribute('stamp')).toISOString() : now,
    'to': stanza.getAttribute('to'),
    'type': stanza.getAttribute('type')
  }, (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getErrorAttributes)(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getOutOfBandAttributes)(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getSpoilerAttributes)(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getCorrectionAttributes)(stanza, original_stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getStanzaIDs)(stanza, original_stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getRetractionAttributes)(stanza, original_stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getEncryptionAttributes)(stanza, _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse));

  if (attrs.is_archived) {
    const from = original_stanza.getAttribute('from');

    if (from && from !== _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid) {
      return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.StanzaParseError(`Invalid Stanza: Forged MAM message from ${from}`, stanza);
    }
  }

  //TOFIND COMMENTED OUT AWAIT
  // await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.emojis.initialize();
  attrs = Object.assign({
    'message': attrs.body || attrs.error,
    // TODO: Remove and use body and error attributes instead
    'is_only_emojis':   false,
    'is_valid_receipt_request': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.isValidReceiptRequest)(stanza, attrs)
  }, attrs); // We prefer to use one of the XEP-0359 unique and stable stanza IDs
  // as the Model id, to avoid duplicates.

  attrs['id'] = attrs['origin_id'] || attrs[`stanza_id ${attrs.from}`] || _converse_headless_utils_core__WEBPACK_IMPORTED_MODULE_2__["default"].getUniqueId();
  /**
   * *Hook* which allows plugins to add additional parsing
   * @event _converse#parseMessage
   */

  attrs = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.hook('parseMessage', stanza, attrs); // We call this after the hook, to allow plugins (like omemo) to decrypt encrypted
  // messages, since we need to parse the message text to determine whether
  // there are media urls.

  return Object.assign(attrs, (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_5__.getMediaURLsMetadata)(attrs.is_encrypted ? attrs.plaintext : attrs.body));
}

/***/ }),

/***/ "./src/headless/plugins/chat/utils.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/chat/utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "autoJoinChats": () => (/* binding */ autoJoinChats),
/* harmony export */   "enableCarbons": () => (/* binding */ enableCarbons),
/* harmony export */   "handleMessageStanza": () => (/* binding */ handleMessageStanza),
/* harmony export */   "onClearSession": () => (/* binding */ onClearSession),
/* harmony export */   "openChat": () => (/* binding */ openChat),
/* harmony export */   "registerMessageHandlers": () => (/* binding */ registerMessageHandlers)
/* harmony export */ });
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/shared/parsers */ "./src/headless/shared/parsers.js");
/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parsers.js */ "./src/headless/plugins/chat/parsers.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");




const {
  Strophe,
  sizzle,
  u
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;
function openChat(jid) {
  if (!u.isValidJID(jid)) {
    return _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].warn(`Invalid JID "${jid}" provided in URL fragment`);
  }

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.chats.open(jid);
}
async function onClearSession() {
  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.shouldClearCache()) {
    await Promise.all(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.map(c => c.messages && c.messages.clearStore({
      'silent': true
    })));

    const filter = o => o.get('type') !== _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.CONTROLBOX_TYPE;

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.clearStore({
      'silent': true
    }, filter);
  }
}

async function handleErrorMessage(stanza) {
  const from_jid = Strophe.getBareJidFromJid(stanza.getAttribute('from'));

  if (u.isSameBareJID(from_jid, _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.bare_jid)) {
    return;
  }

  const chatbox = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.chatboxes.get(from_jid);

  if (chatbox.get('type') === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.PRIVATE_CHAT_TYPE) {
    chatbox === null || chatbox === void 0 ? void 0 : chatbox.handleErrorMessageStanza(stanza);
  }
}

function autoJoinChats() {
  // Automatically join private chats, based on the
  // "auto_join_private_chats" configuration setting.
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.settings.get('auto_join_private_chats').forEach(jid => {
    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.where({
      'jid': jid
    }).length) {
      return;
    }

    if (typeof jid === 'string') {
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.chats.open(jid);
    } else {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].error('Invalid jid criteria specified for "auto_join_private_chats"');
    }
  });
  /**
      * Triggered once any private chats have been automatically joined as
      * specified by the `auto_join_private_chats` setting.
      * See: https://conversejs.org/docs/html/configuration.html#auto-join-private-chats
      * @event _converse#privateChatsAutoJoined
      * @example _converse.api.listen.on('privateChatsAutoJoined', () => { ... });
      * @example _converse.api.waitUntil('privateChatsAutoJoined').then(() => { ... });
      */

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.trigger('privateChatsAutoJoined');
}
function registerMessageHandlers() {
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.addHandler(stanza => {
    if (sizzle(`message > result[xmlns="${Strophe.NS.MAM}"]`, stanza).pop()) {
      // MAM messages are handled in converse-mam.
      // We shouldn't get MAM messages here because
      // they shouldn't have a `type` attribute.
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].warn(`Received a MAM message with type "chat".`);
      return true;
    }

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.handleMessageStanza(stanza);

    return true;
  }, null, 'message', 'chat');

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.addHandler(stanza => {
    // Message receipts are usually without the `type` attribute. See #1353
    if (stanza.getAttribute('type') !== null) {
      // TODO: currently Strophe has no way to register a handler
      // for stanzas without a `type` attribute.
      // We could update it to accept null to mean no attribute,
      // but that would be a backward-incompatible change
      return true; // Gets handled above.
    }

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.handleMessageStanza(stanza);

    return true;
  }, Strophe.NS.RECEIPTS, 'message');

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.addHandler(stanza => {
    handleErrorMessage(stanza);
    return true;
  }, null, 'message', 'error');
}
/**
 * Handler method for all incoming single-user chat "message" stanzas.
 * @param { MessageAttributes } attrs - The message attributes
 */

async function handleMessageStanza(stanza) {
  if ((0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.isServerMessage)(stanza)) {
    // Prosody sends headline messages with type `chat`, so we need to filter them out here.
    const from = stanza.getAttribute('from');
    return _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].info(`handleMessageStanza: Ignoring incoming server message from JID: ${from}`);
  }

  let attrs;

  try {
    attrs = await (0,_parsers_js__WEBPACK_IMPORTED_MODULE_2__.parseMessage)(stanza, _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse);
  } catch (e) {
    return _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].error(e);
  }

  if (u.isErrorObject(attrs)) {
    attrs.stanza && _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].error(attrs.stanza);
    return _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].error(attrs.message);
  } // XXX: Need to take XEP-428 <fallback> into consideration


  const has_body = !!(attrs.body || attrs.plaintext);
//TOFIND MADE attrs optional
  const chatbox = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.chats.get(attrs?.contact_jid, {
    'nickname': attrs.nick
  }, has_body);


  await (chatbox === null || chatbox === void 0 ? void 0 : chatbox.queueMessage(attrs));
  /**
   * @typedef { Object } MessageData
   * An object containing the original message stanza, as well as the
   * parsed attributes.
   * @property { XMLElement } stanza
   * @property { MessageAttributes } stanza
   * @property { ChatBox } chatbox
   */

  const data = {
    stanza,
    attrs,
    chatbox
  };
  /**
   * Triggered when a message stanza is been received and processed.
   * @event _converse#message
   * @type { object }
   * @property { module:converse-chat~MessageData } data
   */

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.trigger('message', data);
}
/**
 * Ask the XMPP server to enable Message Carbons
 * See [XEP-0280](https://xmpp.org/extensions/xep-0280.html#enabling)
 * @param { Boolean } reconnecting
 */

async function enableCarbons(reconnecting) {
  var _converse$session;

  if (reconnecting && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.session.get('carbons_enabled')) {
    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.session.get('smacks_enabled')) {
      // No need to re-enable carbons when resuming a XEP-0198 stream
      return;
    }

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.session.set({
      'carbons_enabled': false
    });
  }

  if ((_converse$session = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.session) !== null && _converse$session !== void 0 && _converse$session.get('carbons_enabled')) {
    return;
  }

  const iq = new Strophe.Builder('iq', {
    'from': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.jid,
    'type': 'set'
  }).c('enable', {
    xmlns: Strophe.NS.CARBONS
  });
  const result = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.sendIQ(iq, null, false);

  if (result === null) {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].warn(`A timeout occurred while trying to enable carbons`);
  } else if (u.isErrorStanza(result)) {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].warn('An error occurred while trying to enable message carbons.');
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].error(result);
  } else {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.session.set({
      'carbons_enabled': true
    });

    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_3__["default"].debug('Message carbons have been enabled.');
  }

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.session.save(); // Gather multiple sets into one save

}

/***/ }),

/***/ "./src/headless/plugins/chatboxes/api.js":
/*!***********************************************!*\
  !*** ./src/headless/plugins/chatboxes/api.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/chatboxes/utils.js");


/**
 * The "chatboxes" namespace.
 *
 * @namespace api.chatboxes
 * @memberOf api
 */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * @method api.chats.create
   * @param { String|String[] } jids - A JID or array of JIDs
   * @param { Object } [attrs] An object containing configuration attributes
   * @param { Model } model - The type of chatbox that should be created
   */
  async create() {
    let jids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let model = arguments.length > 2 ? arguments[2] : undefined;
    await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('chatBoxesFetched');

    if (typeof jids === 'string') {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createChatBox)(jids, attrs, model);
    } else {
      return Promise.all(jids.map(jid => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createChatBox)(jid, attrs, model)));
    }
  },

  /**
   * @method api.chats.get
   * @param { String|String[] } jids - A JID or array of JIDs
   */
  async get(jids) {
    await _core_js__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('chatBoxesFetched');

    if (jids === undefined) {
      return _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.models;
    } else if (typeof jids === 'string') {
      return _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.get(jids.toLowerCase());
    } else {
      jids = jids.map(j => j.toLowerCase());
      return _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.models.filter(m => jids.includes(m.get('jid')));
    }
  }

});

/***/ }),

/***/ "./src/headless/plugins/chatboxes/chatboxes.js":
/*!*****************************************************!*\
  !*** ./src/headless/plugins/chatboxes/chatboxes.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");



const ChatBoxes = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_0__.Collection.extend({
  comparator: 'time_opened',

  model(attrs, options) {
    return new _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.ChatBox(attrs, options);
  },

  onChatBoxesFetched(collection) {
    collection.filter(c => !c.isValid()).forEach(c => c.destroy());
    /**
     * Triggered once all chat boxes have been recreated from the browser cache
     * @event _converse#chatBoxesFetched
     * @type { object }
     * @property { _converse.ChatBox | _converse.ChatRoom } chatbox
     * @property { XMLElement } stanza
     * @example _converse.api.listen.on('chatBoxesFetched', obj => { ... });
     * @example _converse.api.waitUntil('chatBoxesFetched').then(() => { ... });
     */

    _core_js__WEBPACK_IMPORTED_MODULE_1__.api.trigger('chatBoxesFetched');
  },

  onConnected(reconnecting) {
    if (reconnecting) {
      return;
    }

    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_2__.initStorage)(this, `converse.chatboxes-${_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid}`);
    this.fetch({
      'add': true,
      'success': c => this.onChatBoxesFetched(c)
    });
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatBoxes);

/***/ }),

/***/ "./src/headless/plugins/chatboxes/index.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/chatboxes/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emoji_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../emoji/index.js */ "./src/headless/plugins/emoji/index.js");
/* harmony import */ var _chatboxes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatboxes.js */ "./src/headless/plugins/chatboxes/chatboxes.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/chatboxes/api.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/**
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */




const {
  Strophe
} = _core_js__WEBPACK_IMPORTED_MODULE_3__.converse.env;
_core_js__WEBPACK_IMPORTED_MODULE_3__.converse.plugins.add('converse-chatboxes', {
  dependencies: ["converse-emoji", "converse-roster", "converse-vcard"],

  initialize() {
    _core_js__WEBPACK_IMPORTED_MODULE_3__.api.promises.add(['chatBoxesFetched', 'chatBoxesInitialized', 'privateChatsAutoJoined']);
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_3__.api, {
      'chatboxes': _api_js__WEBPACK_IMPORTED_MODULE_2__["default"]
    });
    _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.ChatBoxes = _chatboxes_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    _core_js__WEBPACK_IMPORTED_MODULE_3__.api.listen.on('addClientFeatures', () => {
      _core_js__WEBPACK_IMPORTED_MODULE_3__.api.disco.own.features.add(Strophe.NS.MESSAGE_CORRECT);
      _core_js__WEBPACK_IMPORTED_MODULE_3__.api.disco.own.features.add(Strophe.NS.HTTPUPLOAD);
      _core_js__WEBPACK_IMPORTED_MODULE_3__.api.disco.own.features.add(Strophe.NS.OUTOFBAND);
    });
    _core_js__WEBPACK_IMPORTED_MODULE_3__.api.listen.on('pluginsInitialized', () => {
      _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes = new _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.ChatBoxes();
      /**
       * Triggered once the _converse.ChatBoxes collection has been initialized.
       * @event _converse#chatBoxesInitialized
       * @example _converse.api.listen.on('chatBoxesInitialized', () => { ... });
       * @example _converse.api.waitUntil('chatBoxesInitialized').then(() => { ... });
       */

      _core_js__WEBPACK_IMPORTED_MODULE_3__.api.trigger('chatBoxesInitialized');
    });
    _core_js__WEBPACK_IMPORTED_MODULE_3__.api.listen.on('presencesInitialized', reconnecting => _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.onConnected(reconnecting));
    _core_js__WEBPACK_IMPORTED_MODULE_3__.api.listen.on('reconnected', () => _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.forEach(m => m.onReconnection()));
  }

});

/***/ }),

/***/ "./src/headless/plugins/chatboxes/utils.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/chatboxes/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createChatBox": () => (/* binding */ createChatBox)
/* harmony export */ });
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../log */ "./src/headless/log.js");


const {
  Strophe
} = _core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;
async function createChatBox(jid, attrs, Model) {
  jid = Strophe.getBareJidFromJid(jid.toLowerCase());
  Object.assign(attrs, {
    'jid': jid,
    'id': jid
  });
  let chatbox;

  try {
    chatbox = new Model(attrs, {
      'collection': _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes
    });
  } catch (e) {
    _log__WEBPACK_IMPORTED_MODULE_1__["default"].error(e);
    return null;
  }

  await chatbox.initialized;

  if (!chatbox.isValid()) {
    chatbox.destroy();
    return null;
  }

  _core_js__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.add(chatbox);

  return chatbox;
}

/***/ }),

/***/ "./src/headless/plugins/disco/api.js":
/*!*******************************************!*\
  !*** ./src/headless/plugins/disco/api.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_es_isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/isObject */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");




const {
  Strophe,
  $iq
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * The XEP-0030 service discovery API
   *
   * This API lets you discover information about entities on the
   * XMPP network.
   *
   * @namespace api.disco
   * @memberOf api
   */
  disco: {
    /**
     * @namespace api.disco.stream
     * @memberOf api.disco
     */
    stream: {
      /**
       * @method api.disco.stream.getFeature
       * @param {String} name The feature name
       * @param {String} xmlns The XML namespace
       * @example _converse.api.disco.stream.getFeature('ver', 'urn:xmpp:features:rosterver')
       */
      async getFeature(name, xmlns) {
        await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('streamFeaturesAdded');

        if (!name || !xmlns) {
          throw new Error("name and xmlns need to be provided when calling disco.stream.getFeature");
        }

        if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.stream_features === undefined && !_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.connection.connected()) {
          // Happens during tests when disco lookups happen asynchronously after teardown.
          const msg = `Tried to get feature ${name} ${xmlns} but _converse.stream_features has been torn down`;
          _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn(msg);
          return;
        }

        return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.stream_features.findWhere({
          'name': name,
          'xmlns': xmlns
        });
      }

    },

    /**
     * @namespace api.disco.own
     * @memberOf api.disco
     */
    own: {
      /**
       * @namespace api.disco.own.identities
       * @memberOf api.disco.own
       */
      identities: {
        /**
         * Lets you add new identities for this client (i.e. instance of Converse)
         * @method api.disco.own.identities.add
         *
         * @param {String} category - server, client, gateway, directory, etc.
         * @param {String} type - phone, pc, web, etc.
         * @param {String} name - "Converse"
         * @param {String} lang - en, el, de, etc.
         *
         * @example _converse.api.disco.own.identities.clear();
         */
        add(category, type, name, lang) {
          for (var i = 0; i < _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities.length; i++) {
            if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities[i].category == category && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities[i].type == type && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities[i].name == name && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities[i].lang == lang) {
              return false;
            }
          }

          _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities.push({
            category: category,
            type: type,
            name: name,
            lang: lang
          });
        },

        /**
         * Clears all previously registered identities.
         * @method api.disco.own.identities.clear
         * @example _converse.api.disco.own.identities.clear();
         */
        clear() {
          _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities = [];
        },

        /**
         * Returns all of the identities registered for this client
         * (i.e. instance of Converse).
         * @method api.disco.identities.get
         * @example const identities = api.disco.own.identities.get();
         */
        get() {
          return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._identities;
        }

      },

      /**
       * @namespace api.disco.own.features
       * @memberOf api.disco.own
       */
      features: {
        /**
         * Lets you register new disco features for this client (i.e. instance of Converse)
         * @method api.disco.own.features.add
         * @param {String} name - e.g. http://jabber.org/protocol/caps
         * @example _converse.api.disco.own.features.add("http://jabber.org/protocol/caps");
         */
        add(name) {
          for (var i = 0; i < _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._features.length; i++) {
            if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._features[i] == name) {
              return false;
            }
          }

          _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._features.push(name);
        },

        /**
         * Clears all previously registered features.
         * @method api.disco.own.features.clear
         * @example _converse.api.disco.own.features.clear();
         */
        clear() {
          _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._features = [];
        },

        /**
         * Returns all of the features registered for this client (i.e. instance of Converse).
         * @method api.disco.own.features.get
         * @example const features = api.disco.own.features.get();
         */
        get() {
          return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco._features;
        }

      }
    },

    /**
     * Query for information about an XMPP entity
     *
     * @method api.disco.info
     * @param {string} jid The Jabber ID of the entity to query
     * @param {string} [node] A specific node identifier associated with the JID
     * @returns {promise} Promise which resolves once we have a result from the server.
     */
    info(jid, node) {
      const attrs = {
        xmlns: Strophe.NS.DISCO_INFO
      };

      if (node) {
        attrs.node = node;
      }

      const info = $iq({
        'from': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection.jid,
        'to': jid,
        'type': 'get'
      }).c('query', attrs);
      return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ(info);
    },

    /**
     * Query for items associated with an XMPP entity
     *
     * @method api.disco.items
     * @param {string} jid The Jabber ID of the entity to query for items
     * @param {string} [node] A specific node identifier associated with the JID
     * @returns {promise} Promise which resolves once we have a result from the server.
     */
    items(jid, node) {
      const attrs = {
        'xmlns': Strophe.NS.DISCO_ITEMS
      };

      if (node) {
        attrs.node = node;
      }

      return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ($iq({
        'from': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection.jid,
        'to': jid,
        'type': 'get'
      }).c('query', attrs));
    },

    /**
     * Namespace for methods associated with disco entities
     *
     * @namespace api.disco.entities
     * @memberOf api.disco
     */
    entities: {
      /**
       * Get the corresponding `DiscoEntity` instance.
       *
       * @method api.disco.entities.get
       * @param {string} jid The Jabber ID of the entity
       * @param {boolean} [create] Whether the entity should be created if it doesn't exist.
       * @example _converse.api.disco.entities.get(jid);
       */
      async get(jid) {
        let create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('discoInitialized');

        if (!jid) {
          return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco_entities;
        }

        if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco_entities === undefined) {
          // Happens during tests when disco lookups happen asynchronously after teardown.
          const msg = `Tried to look up entity ${jid} but _converse.disco_entities has been torn down`;
          _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn(msg);
          return;
        }

        const entity = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco_entities.get(jid);

        if (entity || !create) {
          return entity;
        }

        return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.entities.create(jid);
      },

      /**
       * Create a new disco entity. It's identity and features
       * will automatically be fetched from cache or from the
       * XMPP server.
       *
       * Fetching from cache can be disabled by passing in
       * `ignore_cache: true` in the options parameter.
       *
       * @method api.disco.entities.create
       * @param {string} jid The Jabber ID of the entity
       * @param {object} [options] Additional options
       * @param {boolean} [options.ignore_cache]
       *     If true, fetch all features from the XMPP server instead of restoring them from cache
       * @example _converse.api.disco.entities.create(jid, {'ignore_cache': true});
       */
      create(jid, options) {
        return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco_entities.create({
          'jid': jid
        }, options);
      }

    },

    /**
     * @namespace api.disco.features
     * @memberOf api.disco
     */
    features: {
      /**
       * Return a given feature of a disco entity
       *
       * @method api.disco.features.get
       * @param {string} feature The feature that might be
       *     supported. In the XML stanza, this is the `var`
       *     attribute of the `<feature>` element. For
       *     example: `http://jabber.org/protocol/muc`
       * @param {string} jid The JID of the entity
       *     (and its associated items) which should be queried
       * @returns {promise} A promise which resolves with a list containing
       *     _converse.Entity instances representing the entity
       *     itself or those items associated with the entity if
       *     they support the given feature.
       * @example
       * api.disco.features.get(Strophe.NS.MAM, _converse.bare_jid);
       */
      async get(feature, jid) {
        if (!jid) {
          throw new TypeError('You need to provide an entity JID');
        }

        await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('discoInitialized');
        let entity = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.entities.get(jid, true);

        if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.disco_entities === undefined && !_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.connection.connected()) {
          // Happens during tests when disco lookups happen asynchronously after teardown.
          const msg = `Tried to get feature ${feature} for ${jid} but _converse.disco_entities has been torn down`;
          _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn(msg);
          return;
        }

        entity = await entity.waitUntilFeaturesDiscovered;
        const promises = [...entity.items.map(i => i.hasFeature(feature)), entity.hasFeature(feature)];
        const result = await Promise.all(promises);
        return result.filter(lodash_es_isObject__WEBPACK_IMPORTED_MODULE_3__["default"]);
      }

    },

    /**
     * Used to determine whether an entity supports a given feature.
     *
     * @method api.disco.supports
     * @param {string} feature The feature that might be
     *     supported. In the XML stanza, this is the `var`
     *     attribute of the `<feature>` element. For
     *     example: `http://jabber.org/protocol/muc`
     * @param {string} jid The JID of the entity
     *     (and its associated items) which should be queried
     * @returns {promise} A promise which resolves with `true` or `false`.
     * @example
     * if (await api.disco.supports(Strophe.NS.MAM, _converse.bare_jid)) {
     *     // The feature is supported
     * } else {
     *     // The feature is not supported
     * }
     */
    async supports(feature, jid) {
      const features = (await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.features.get(feature, jid)) || [];
      return features.length > 0;
    },

    /**
     * Refresh the features, fields and identities associated with a
     * disco entity by refetching them from the server
     * @method api.disco.refresh
     * @param {string} jid The JID of the entity whose features are refreshed.
     * @returns {promise} A promise which resolves once the features have been refreshed
     * @example
     * await api.disco.refresh('room@conference.example.org');
     */
    async refresh(jid) {
      if (!jid) {
        throw new TypeError('api.disco.refresh: You need to provide an entity JID');
      }

      await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('discoInitialized');
      let entity = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.entities.get(jid);

      if (entity) {
        entity.features.reset();
        entity.fields.reset();
        entity.identities.reset();

        if (!entity.waitUntilFeaturesDiscovered.isPending) {
          entity.waitUntilFeaturesDiscovered = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_2__.getOpenPromise)();
        }

        entity.queryInfo();
      } else {
        // Create it if it doesn't exist
        entity = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.entities.create(jid, {
          'ignore_cache': true
        });
      }

      return entity.waitUntilFeaturesDiscovered;
    },

    /**
     * @deprecated Use {@link api.disco.refresh} instead.
     * @method api.disco.refreshFeatures
     */
    refreshFeatures(jid) {
      return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.refresh(jid);
    },

    /**
     * Return all the features associated with a disco entity
     *
     * @method api.disco.getFeatures
     * @param {string} jid The JID of the entity whose features are returned.
     * @returns {promise} A promise which resolves with the returned features
     * @example
     * const features = await api.disco.getFeatures('room@conference.example.org');
     */
    async getFeatures(jid) {
      if (!jid) {
        throw new TypeError('api.disco.getFeatures: You need to provide an entity JID');
      }

      await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('discoInitialized');
      let entity = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.entities.get(jid, true);
      entity = await entity.waitUntilFeaturesDiscovered;
      return entity.features;
    },

    /**
     * Return all the service discovery extensions fields
     * associated with an entity.
     *
     * See [XEP-0129: Service Discovery Extensions](https://xmpp.org/extensions/xep-0128.html)
     *
     * @method api.disco.getFields
     * @param {string} jid The JID of the entity whose fields are returned.
     * @example
     * const fields = await api.disco.getFields('room@conference.example.org');
     */
    async getFields(jid) {
      if (!jid) {
        throw new TypeError('api.disco.getFields: You need to provide an entity JID');
      }

      await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('discoInitialized');
      let entity = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.entities.get(jid, true);
      entity = await entity.waitUntilFeaturesDiscovered;
      return entity.fields;
    },

    /**
     * Get the identity (with the given category and type) for a given disco entity.
     *
     * For example, when determining support for PEP (personal eventing protocol), you
     * want to know whether the user's own JID has an identity with
     * `category='pubsub'` and `type='pep'` as explained in this section of
     * XEP-0163: https://xmpp.org/extensions/xep-0163.html#support
     *
     * @method api.disco.getIdentity
     * @param {string} The identity category.
     *     In the XML stanza, this is the `category`
     *     attribute of the `<identity>` element.
     *     For example: 'pubsub'
     * @param {string} type The identity type.
     *     In the XML stanza, this is the `type`
     *     attribute of the `<identity>` element.
     *     For example: 'pep'
     * @param {string} jid The JID of the entity which might have the identity
     * @returns {promise} A promise which resolves with a map indicating
     *     whether an identity with a given type is provided by the entity.
     * @example
     * api.disco.getIdentity('pubsub', 'pep', _converse.bare_jid).then(
     *     function (identity) {
     *         if (identity) {
     *             // The entity DOES have this identity
     *         } else {
     *             // The entity DOES NOT have this identity
     *         }
     *     }
     * ).catch(e => log.error(e));
     */
    async getIdentity(category, type, jid) {
      const e = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.entities.get(jid, true);

      if (e === undefined && !_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.connection.connected()) {
        // Happens during tests when disco lookups happen asynchronously after teardown.
        const msg = `Tried to look up category ${category} for ${jid} but _converse.disco_entities has been torn down`;
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn(msg);
        return;
      }

      return e.getIdentity(category, type);
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/disco/entities.js":
/*!************************************************!*\
  !*** ./src/headless/plugins/disco/entities.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entity.js */ "./src/headless/plugins/disco/entity.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");



const DiscoEntities = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__.Collection.extend({
  model: _entity_js__WEBPACK_IMPORTED_MODULE_0__["default"],

  fetchEntities() {
    return new Promise((resolve, reject) => {
      this.fetch({
        add: true,
        success: resolve,

        error(_m, e) {
          _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_1__["default"].error(e);
          reject(new Error("Could not fetch disco entities"));
        }

      });
    });
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DiscoEntities);

/***/ }),

/***/ "./src/headless/plugins/disco/entity.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/disco/entity.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");






const {
  Strophe
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.converse.env;
/**
 * @class
 * @namespace _converse.DiscoEntity
 * @memberOf _converse
 *
 * A Disco Entity is a JID addressable entity that can be queried for features.
 *
 * See XEP-0030: https://xmpp.org/extensions/xep-0030.html
 */

const DiscoEntity = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_3__.Model.extend({
  idAttribute: 'jid',

  async initialize(_, options) {
    this.waitUntilFeaturesDiscovered = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_5__.getOpenPromise)();
    this.dataforms = new _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__.Collection();
    let id = `converse.dataforms-${this.get('jid')}`;
    this.dataforms.browserStorage = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.createStore(id, 'session');
    this.features = new _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__.Collection();
    id = `converse.features-${this.get('jid')}`;
    this.features.browserStorage = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.createStore(id, 'session');
    this.listenTo(this.features, 'add', this.onFeatureAdded);
    this.fields = new _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__.Collection();
    id = `converse.fields-${this.get('jid')}`;
    this.fields.browserStorage = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.createStore(id, 'session');
    this.listenTo(this.fields, 'add', this.onFieldAdded);
    this.items = new _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.DiscoEntities();
    id = `converse.disco-items-${this.get('jid')}`;
    this.items.browserStorage = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.createStore(id, 'session');
    await new Promise(f => this.items.fetch({
      'success': f,
      'error': f
    }));
    this.identities = new _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__.Collection();
    id = `converse.identities-${this.get('jid')}`;
    this.identities.browserStorage = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.createStore(id, 'session');
    this.fetchFeatures(options);
  },

  /**
   * Returns a Promise which resolves with a map indicating
   * whether a given identity is provided by this entity.
   * @private
   * @method _converse.DiscoEntity#getIdentity
   * @param { String } category - The identity category
   * @param { String } type - The identity type
   */
  async getIdentity(category, type) {
    await this.waitUntilFeaturesDiscovered;
    return this.identities.findWhere({
      'category': category,
      'type': type
    });
  },

  /**
   * Returns a Promise which resolves with a map indicating
   * whether a given feature is supported.
   * @private
   * @method _converse.DiscoEntity#hasFeature
   * @param { String } feature - The feature that might be supported.
   */
  async hasFeature(feature) {
    await this.waitUntilFeaturesDiscovered;

    if (this.features.findWhere({
      'var': feature
    })) {
      return this;
    }
  },

  onFeatureAdded(feature) {
    feature.entity = this;
    /**
     * Triggered when Converse has learned of a service provided by the XMPP server.
     * See XEP-0030.
     * @event _converse#serviceDiscovered
     * @type { Model }
     * @example _converse.api.listen.on('featuresDiscovered', feature => { ... });
     */

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('serviceDiscovered', feature);
  },

  onFieldAdded(field) {
    field.entity = this;
    /**
     * Triggered when Converse has learned of a disco extension field.
     * See XEP-0030.
     * @event _converse#discoExtensionFieldDiscovered
     * @example _converse.api.listen.on('discoExtensionFieldDiscovered', () => { ... });
     */

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('discoExtensionFieldDiscovered', field);
  },

  async fetchFeatures(options) {
    if (options.ignore_cache) {
      this.queryInfo();
    } else {
      const store_id = this.features.browserStorage.name;
      const result = await this.features.browserStorage.store.getItem(store_id);

      if (result && result.length === 0 || result === null) {
        this.queryInfo();
      } else {
        this.features.fetch({
          add: true,
          success: () => {
            this.waitUntilFeaturesDiscovered.resolve(this);
            this.trigger('featuresDiscovered');
          }
        });
        this.identities.fetch({
          add: true
        });
      }
    }
  },

  async queryInfo() {
    let stanza;

    try {
      stanza = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.disco.info(this.get('jid'), null);
    } catch (iq) {
      iq === null ? _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Timeout for disco#info query for ${this.get('jid')}`) : _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(iq);
      this.waitUntilFeaturesDiscovered.resolve(this);
      return;
    }

    this.onInfo(stanza);
  },

  onDiscoItems(stanza) {
    sizzle__WEBPACK_IMPORTED_MODULE_1___default()(`query[xmlns="${Strophe.NS.DISCO_ITEMS}"] item`, stanza).forEach(item => {
      if (item.getAttribute("node")) {
        // XXX: Ignore nodes for now.
        // See: https://xmpp.org/extensions/xep-0030.html#items-nodes
        return;
      }

      const jid = item.getAttribute('jid');

      if (this.items.get(jid) === undefined) {
        const entities = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.disco_entities;
        const entity = entities.get(jid) || entities.create({
          jid,
          name: item.getAttribute('name')
        });
        this.items.add(entity);
      }
    });
  },

  async queryForItems() {
    if (this.identities.where({
      'category': 'server'
    }).length === 0) {
      // Don't fetch features and items if this is not a
      // server or a conference component.
      return;
    }

    const stanza = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.disco.items(this.get('jid'));
    this.onDiscoItems(stanza);
  },

  onInfo(stanza) {
    Array.from(stanza.querySelectorAll('identity')).forEach(identity => {
      this.identities.create({
        'category': identity.getAttribute('category'),
        'type': identity.getAttribute('type'),
        'name': identity.getAttribute('name')
      });
    });
    sizzle__WEBPACK_IMPORTED_MODULE_1___default()(`x[type="result"][xmlns="${Strophe.NS.XFORM}"]`, stanza).forEach(form => {
      const data = {};
      sizzle__WEBPACK_IMPORTED_MODULE_1___default()('field', form).forEach(field => {
        var _field$querySelector;

        data[field.getAttribute('var')] = {
          'value': (_field$querySelector = field.querySelector('value')) === null || _field$querySelector === void 0 ? void 0 : _field$querySelector.textContent,
          'type': field.getAttribute('type')
        };
      });
      this.dataforms.create(data);
    });

    if (stanza.querySelector(`feature[var="${Strophe.NS.DISCO_ITEMS}"]`)) {
      this.queryForItems();
    }

    Array.from(stanza.querySelectorAll('feature')).forEach(feature => {
      this.features.create({
        'var': feature.getAttribute('var'),
        'from': stanza.getAttribute('from')
      });
    }); // XEP-0128 Service Discovery Extensions

    sizzle__WEBPACK_IMPORTED_MODULE_1___default()('x[type="result"][xmlns="jabber:x:data"] field', stanza).forEach(field => {
      var _field$querySelector2;

      this.fields.create({
        'var': field.getAttribute('var'),
        'value': (_field$querySelector2 = field.querySelector('value')) === null || _field$querySelector2 === void 0 ? void 0 : _field$querySelector2.textContent,
        'from': stanza.getAttribute('from')
      });
    });
    this.waitUntilFeaturesDiscovered.resolve(this);
    this.trigger('featuresDiscovered');
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DiscoEntity);

/***/ }),

/***/ "./src/headless/plugins/disco/index.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/disco/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _entities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entities.js */ "./src/headless/plugins/disco/entities.js");
/* harmony import */ var _entity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity.js */ "./src/headless/plugins/disco/entity.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/disco/utils.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/disco/api.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description Converse plugin which add support for XEP-0030: Service Discovery
 */





const {
  Strophe
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.converse.env;
_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.converse.plugins.add('converse-disco', {
  initialize() {
    Object.assign(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api, _api_js__WEBPACK_IMPORTED_MODULE_4__["default"]);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.promises.add('discoInitialized');
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.promises.add('streamFeaturesAdded');
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.DiscoEntity = _entity_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.DiscoEntities = _entities_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.disco = {
      _identities: [],
      _features: []
    };
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('userSessionInitialized', async () => {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.initStreamFeatures)();

      if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.connfeedback.get('connection_status') === Strophe.Status.ATTACHED) {
        // When re-attaching to a BOSH session, we fetch the stream features from the cache.
        await new Promise((success, error) => _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.stream_features.fetch({
          success,
          error
        }));
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.notifyStreamFeaturesAdded)();
      }
    });
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('beforeResourceBinding', _utils_js__WEBPACK_IMPORTED_MODULE_3__.populateStreamFeatures);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('reconnected', _utils_js__WEBPACK_IMPORTED_MODULE_3__.initializeDisco);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('connected', _utils_js__WEBPACK_IMPORTED_MODULE_3__.initializeDisco);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('beforeTearDown', async () => {
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.promises.add('streamFeaturesAdded');

      if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.stream_features) {
        await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.stream_features.clearStore();
        delete _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.stream_features;
      }
    }); // All disco entities stored in sessionStorage and are refetched
    // upon login or reconnection and then stored with new ids, so to
    // avoid sessionStorage filling up, we remove them.

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('will-reconnect', _utils_js__WEBPACK_IMPORTED_MODULE_3__.clearSession);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('clearSession', _utils_js__WEBPACK_IMPORTED_MODULE_3__.clearSession);
  }

});

/***/ }),

/***/ "./src/headless/plugins/disco/utils.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/disco/utils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clearSession": () => (/* binding */ clearSession),
/* harmony export */   "initStreamFeatures": () => (/* binding */ initStreamFeatures),
/* harmony export */   "initializeDisco": () => (/* binding */ initializeDisco),
/* harmony export */   "notifyStreamFeaturesAdded": () => (/* binding */ notifyStreamFeaturesAdded),
/* harmony export */   "populateStreamFeatures": () => (/* binding */ populateStreamFeatures)
/* harmony export */ });
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");


const {
  Strophe,
  $iq
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;

function onDiscoInfoRequest(stanza) {
  const node = stanza.getElementsByTagName('query')[0].getAttribute('node');
  const attrs = {
    xmlns: Strophe.NS.DISCO_INFO
  };

  if (node) {
    attrs.node = node;
  }

  const iqresult = $iq({
    'type': 'result',
    'id': stanza.getAttribute('id')
  });
  const from = stanza.getAttribute('from');

  if (from !== null) {
    iqresult.attrs({
      'to': from
    });
  }

  iqresult.c('query', attrs);

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco._identities.forEach(identity => {
    const attrs = {
      'category': identity.category,
      'type': identity.type
    };

    if (identity.name) {
      attrs.name = identity.name;
    }

    if (identity.lang) {
      attrs['xml:lang'] = identity.lang;
    }

    iqresult.c('identity', attrs).up();
  });

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco._features.forEach(f => iqresult.c('feature', {
    'var': f
  }).up());

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.send(iqresult.tree());
  return true;
}

function addClientFeatures() {
  // See https://xmpp.org/registrar/disco-categories.html
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.disco.own.identities.add('client', 'web', 'Converse');
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.disco.own.features.add(Strophe.NS.CHATSTATES);
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.disco.own.features.add(Strophe.NS.DISCO_INFO);
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.disco.own.features.add(Strophe.NS.ROSTERX); // Limited support

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.disco.own.features.add(Strophe.NS.CARBONS);
  /**
   * Triggered in converse-disco once the core disco features of
   * Converse have been added.
   * @event _converse#addClientFeatures
   * @example _converse.api.listen.on('addClientFeatures', () => { ... });
   */

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.trigger('addClientFeatures');
  return this;
}

async function initializeDisco() {
  addClientFeatures();

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.addHandler(stanza => onDiscoInfoRequest(stanza), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities = new _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.DiscoEntities();
  const id = `converse.disco-entities-${_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.bare_jid}`;
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities.browserStorage = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.createStore(id, 'session');
  const collection = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities.fetchEntities();

  if (collection.length === 0 || !collection.get(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.domain)) {
    // If we don't have an entity for our own XMPP server, create one.
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities.create({
      'jid': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.domain
    });
  }
  /**
   * Triggered once the `converse-disco` plugin has been initialized and the
   * `_converse.disco_entities` collection will be available and populated with at
   * least the service discovery features of the user's own server.
   * @event _converse#discoInitialized
   * @example _converse.api.listen.on('discoInitialized', () => { ... });
   */


  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.trigger('discoInitialized');
}
function initStreamFeatures() {
  // Initialize the stream_features collection, and if we're
  // re-attaching to a pre-existing BOSH session, we restore the
  // features from cache.
  // Otherwise the features will be created once we've received them
  // from the server (see populateStreamFeatures).
  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.stream_features) {
    const bare_jid = Strophe.getBareJidFromJid(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.jid);
    const id = `converse.stream-features-${bare_jid}`;
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.promises.add('streamFeaturesAdded');
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.stream_features = new _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_1__.Collection();
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.stream_features.browserStorage = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.createStore(id, "session");
  }
}
function notifyStreamFeaturesAdded() {
  /**
   * Triggered as soon as the stream features are known.
   * If you want to check whether a stream feature is supported before proceeding,
   * then you'll first want to wait for this event.
   * @event _converse#streamFeaturesAdded
   * @example _converse.api.listen.on('streamFeaturesAdded', () => { ... });
   */
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.trigger('streamFeaturesAdded');
}
function populateStreamFeatures() {
  // Strophe.js sets the <stream:features> element on the
  // Strophe.Connection instance (_converse.connection).
  //
  // Once this is we populate the _converse.stream_features collection
  // and trigger streamFeaturesAdded.
  initStreamFeatures();
  Array.from(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.features.childNodes).forEach(feature => {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.stream_features.create({
      'name': feature.nodeName,
      'xmlns': feature.getAttribute('xmlns')
    });
  });
  notifyStreamFeaturesAdded();
}
function clearSession() {
  var _converse$disco_entit, _converse$disco_entit2, _converse$disco_entit3, _converse$disco_entit4, _converse$disco_entit5;

  (_converse$disco_entit = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities) === null || _converse$disco_entit === void 0 ? void 0 : _converse$disco_entit.forEach(e => e.features.clearStore());
  (_converse$disco_entit2 = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities) === null || _converse$disco_entit2 === void 0 ? void 0 : _converse$disco_entit2.forEach(e => e.identities.clearStore());
  (_converse$disco_entit3 = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities) === null || _converse$disco_entit3 === void 0 ? void 0 : _converse$disco_entit3.forEach(e => e.dataforms.clearStore());
  (_converse$disco_entit4 = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities) === null || _converse$disco_entit4 === void 0 ? void 0 : _converse$disco_entit4.forEach(e => e.fields.clearStore());
  (_converse$disco_entit5 = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities) === null || _converse$disco_entit5 === void 0 ? void 0 : _converse$disco_entit5.clearStore();
  delete _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.disco_entities;
}

/***/ }),

/***/ "./src/headless/plugins/emoji/index.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/emoji/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/**
 * @module converse-emoji
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */



_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis = {
  'initialized': false,
  'initialized_promise': (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_2__.getOpenPromise)()
};
_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.plugins.add('converse-emoji', {
  initialize() {
    /* The initialize function gets called as soon as the plugin is
     * loaded by converse.js's plugin machinery.
     */
    const {
      ___
    } = _core_js__WEBPACK_IMPORTED_MODULE_1__._converse;
    _core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.extend({
      'emoji_image_path': 'https://twemoji.maxcdn.com/v/12.1.6/',
      'emoji_categories': {
        "smileys": ":grinning:",
        "people": ":thumbsup:",
        "activity": ":soccer:",
        "travel": ":motorcycle:",
        "objects": ":bomb:",
        "nature": ":rainbow:",
        "food": ":hotdog:",
        "symbols": ":musical_note:",
        "flags": ":flag_ac:",
        "custom": null
      },
      // We use the triple-underscore method which doesn't actually
      // translate but does signify to gettext that these strings should
      // go into the POT file. The translation then happens in the
      // template. We do this so that users can pass in their own
      // strings via converse.initialize, which is before __ is
      // available.
      'emoji_category_labels': {
        "smileys": ___("Smileys and emotions"),
        "people": ___("People"),
        "activity": ___("Activities"),
        "travel": ___("Travel"),
        "objects": ___("Objects"),
        "nature": ___("Animals and nature"),
        "food": ___("Food and drink"),
        "symbols": ___("Symbols"),
        "flags": ___("Flags"),
        "custom": ___("Stickers")
      }
    });
    /**
     * Model for storing data related to the Emoji picker widget
     * @class
     * @namespace _converse.EmojiPicker
     * @memberOf _converse
     */

    _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.EmojiPicker = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.extend({
      defaults: {
        'current_category': 'smileys',
        'current_skintone': '',
        'scroll_position': 0
      }
    }); // We extend the default converse.js API to add methods specific to MUC groupchats.

    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_1__.api, {
      /**
       * @namespace api.emojis
       * @memberOf api
       */
      emojis: {
        /**
         * Initializes Emoji support by downloading the emojis JSON (and any applicable images).
         * @method api.emojis.initialize
         * @returns {Promise}
         */
        async initialize() {
          //REMOVED Emojis initialization from converse
          return;
          if (!_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.initialized) {
            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.initialized = true;
            const {
              default: json
            } = await __webpack_require__.e(/*! import() | emojis */ "emojis").then(__webpack_require__.t.bind(__webpack_require__, /*! ./emoji.json */ "./src/headless/plugins/emoji/emoji.json", 19));
            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.json = json;
            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.by_sn = Object.keys(json).reduce((result, cat) => Object.assign(result, json[cat]), {});
            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.list = Object.values(_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.by_sn);
            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.list.sort((a, b) => a.sn < b.sn ? -1 : a.sn > b.sn ? 1 : 0);
            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.shortnames = _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.list.map(m => m.sn);

            const getShortNames = () => _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.shortnames.map(s => s.replace(/[+]/g, "\\$&")).join('|');

            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.shortnames_regex = new RegExp(getShortNames(), "gi");
            _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.initialized_promise.resolve();
          }

          return _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.emojis.initialized_promise;
        }

      }
    });
  }

});

/***/ }),

/***/ "./src/headless/plugins/headlines/api.js":
/*!***********************************************!*\
  !*** ./src/headless/plugins/headlines/api.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * The "headlines" namespace, which is used for headline-channels
   * which are read-only channels containing messages of type
   * "headline".
   *
   * @namespace api.headlines
   * @memberOf api
   */
  headlines: {
    /**
     * Retrieves a headline-channel or all headline-channels.
     *
     * @method api.headlines.get
     * @param {String|String[]} jids - e.g. 'buddy@example.com' or ['buddy1@example.com', 'buddy2@example.com']
     * @param {Object} [attrs] - Attributes to be set on the _converse.ChatBox model.
     * @param {Boolean} [create=false] - Whether the chat should be created if it's not found.
     * @returns { Promise<_converse.HeadlinesFeed> }
     */
    async get(jids) {
      let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let create = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      async function _get(jid) {
        let model = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.chatboxes.get(jid);

        if (!model && create) {
          model = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.chatboxes.create(jid, attrs, _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.HeadlinesFeed);
        } else {
          model = model && model.get('type') === _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.HEADLINES_TYPE ? model : null;

          if (model && Object.keys(attrs).length) {
            model.save(attrs);
          }
        }

        return model;
      }

      if (jids === undefined) {
        const chats = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.chatboxes.get();
        return chats.filter(c => c.get('type') === _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.HEADLINES_TYPE);
      } else if (typeof jids === 'string') {
        return _get(jids);
      }

      return Promise.all(jids.map(jid => _get(jid)));
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/headlines/feed.js":
/*!************************************************!*\
  !*** ./src/headless/plugins/headlines/feed.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HeadlinesFeed)
/* harmony export */ });
/* harmony import */ var _converse_headless_plugins_chat_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/plugins/chat/model.js */ "./src/headless/plugins/chat/model.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");


class HeadlinesFeed extends _converse_headless_plugins_chat_model_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  defaults() {
    return {
      'bookmarked': false,
      'hidden': ['mobile', 'fullscreen'].includes(_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.get("view_mode")),
      'message_type': 'headline',
      'num_unread': 0,
      'time_opened': this.get('time_opened') || new Date().getTime(),
      'type': _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.HEADLINES_TYPE
    };
  }

  async initialize() {
    this.set({
      'box_id': `box-${this.get('jid')}`
    });
    this.initUI();
    this.initMessages();
    await this.fetchMessages();
    /**
     * Triggered once a { @link _converse.HeadlinesFeed } has been created and initialized.
     * @event _converse#headlinesFeedInitialized
     * @type { _converse.HeadlinesFeed }
     * @example _converse.api.listen.on('headlinesFeedInitialized', model => { ... });
     */

    _core_js__WEBPACK_IMPORTED_MODULE_1__.api.trigger('headlinesFeedInitialized', this);
  }

}

/***/ }),

/***/ "./src/headless/plugins/headlines/index.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/headlines/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _feed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./feed.js */ "./src/headless/plugins/headlines/feed.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/headlines/api.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/headlines/utils.js");
/**
 * @module converse-headlines
 * @copyright 2022, the Converse.js contributors
 * @description XEP-0045 Multi-User Chat Views
 */




_converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.converse.plugins.add('converse-headlines', {
  /* Plugin dependencies are other plugins which might be
   * overridden or relied upon, and therefore need to be loaded before
   * this plugin.
   *
   * If the setting "strict_plugin_dependencies" is set to true,
   * an error will be raised if the plugin is not found. By default it's
   * false, which means these plugins are only loaded opportunistically.
   *
   * NB: These plugins need to have already been loaded via require.js.
   */
  dependencies: ["converse-chat"],
  overrides: {
    // Overrides mentioned here will be picked up by converse.js's
    // plugin architecture they will replace existing methods on the
    // relevant objects or classes.
    //
    // New functions which don't exist yet can also be added.
    ChatBoxes: {
      model(attrs, options) {
        const {
          _converse
        } = this.__super__;

        if (attrs.type == _converse.HEADLINES_TYPE) {
          return new _converse.HeadlinesFeed(attrs, options);
        } else {
          return this.__super__.model.apply(this, arguments);
        }
      }

    }
  },

  initialize() {
    /**
     * Shows headline messages
     * @class
     * @namespace _converse.HeadlinesFeed
     * @memberOf _converse
     */
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.HeadlinesFeed = _feed_js__WEBPACK_IMPORTED_MODULE_0__["default"];

    function registerHeadlineHandler() {
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.connection.addHandler(m => (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.onHeadlineMessage)(m) || true, null, 'message');
    }

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('connected', registerHeadlineHandler);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('reconnected', registerHeadlineHandler);
    Object.assign(_converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api, _api_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
  }

});

/***/ }),

/***/ "./src/headless/plugins/headlines/utils.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/headlines/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onHeadlineMessage": () => (/* binding */ onHeadlineMessage)
/* harmony export */ });
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/shared/parsers */ "./src/headless/shared/parsers.js");
/* harmony import */ var _converse_headless_plugins_chat_parsers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/plugins/chat/parsers */ "./src/headless/plugins/chat/parsers.js");



/**
 * Handler method for all incoming messages of type "headline".
 * @param { XMLElement } stanza
 */

async function onHeadlineMessage(stanza) {
  if ((0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.isHeadline)(stanza) || (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.isServerMessage)(stanza)) {
    const from_jid = stanza.getAttribute('from');
    await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('rosterInitialized');
    //TOFIND added _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.roster && (Incase converse/roster is null)
    if (from_jid.includes('@') && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.roster&& !_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.roster.get(from_jid) && !_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("allow_non_roster_messaging")) {
      return;
    }

    if (stanza.querySelector('body') === null) {
      // Avoid creating a chat box if we have nothing to show inside it.
      return;
    }

    const chatbox = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.chatboxes.create({
      'id': from_jid,
      'jid': from_jid,
      'type': _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.HEADLINES_TYPE,
      'from': from_jid
    });

    const attrs = await (0,_converse_headless_plugins_chat_parsers__WEBPACK_IMPORTED_MODULE_2__.parseMessage)(stanza, _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse);
    await chatbox.createMessage(attrs);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.trigger('message', {
      chatbox,
      stanza,
      attrs
    });
  }
}

/***/ }),

/***/ "./src/headless/plugins/mam/api.js":
/*!*****************************************!*\
  !*** ./src/headless/plugins/mam/api.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_shared_rsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/shared/rsm */ "./src/headless/shared/rsm.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");




const {
  Strophe,
  $iq,
  dayjs
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.converse.env;
const {
  NS
} = Strophe;
const u = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.converse.env.utils;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * The [XEP-0313](https://xmpp.org/extensions/xep-0313.html) Message Archive Management API
   *
   * Enables you to query an XMPP server for archived messages.
   *
   * See also the [message-archiving](/docs/html/configuration.html#message-archiving)
   * option in the configuration settings section, which you'll
   * usually want to use in conjunction with this API.
   *
   * @namespace _converse.api.archive
   * @memberOf _converse.api
   */
  archive: {
    /**
     * @typedef { module:converse-rsm~RSMQueryParameters } MAMFilterParameters
     * Filter parameters which can be used to filter a MAM XEP-0313 archive
     * @property { String } [end] - A date string in ISO-8601 format, before which messages should be returned. Implies backward paging.
     * @property { String } [start] - A date string in ISO-8601 format, after which messages should be returned. Implies forward paging.
     * @property { String } [with] - A JID against which to match messages, according to either their `to` or `from` attributes.
     *     An item in a MUC archive matches if the publisher of the item matches the JID.
     *     If `with` is omitted, all messages that match the rest of the query will be returned, regardless of to/from
     *     addresses of each message.
     */

    /**
     * The options that can be passed in to the {@link _converse.api.archive.query } method
     * @typedef { module:converse-mam~MAMFilterParameters } ArchiveQueryOptions
     * @property { Boolean } [groupchat=false] - Whether the MAM archive is for a groupchat.
     */

    /**
     * Query for archived messages.
     *
     * The options parameter can also be an instance of
     * RSM to enable easy querying between results pages.
     *
     * @method _converse.api.archive.query
     * @param { module:converse-mam~ArchiveQueryOptions } options - An object containing query parameters
     * @throws {Error} An error is thrown if the XMPP server responds with an error.
     * @returns { Promise<module:converse-mam~MAMQueryResult> } A promise which resolves
     *     to a {@link module:converse-mam~MAMQueryResult } object.
     *
     * @example
     * // Requesting all archived messages
     * // ================================
     * //
     * // The simplest query that can be made is to simply not pass in any parameters.
     * // Such a query will return all archived messages for the current user.
     *
     * let result;
     * try {
     *     result = await api.archive.query();
     * } catch (e) {
     *     // The query was not successful, perhaps inform the user?
     *     // The IQ stanza returned by the XMPP server is passed in, so that you
     *     // may inspect it and determine what the problem was.
     * }
     * // Do something with the messages, like showing them in your webpage.
     * result.messages.forEach(m => this.showMessage(m));
     *
     * @example
     * // Requesting all archived messages for a particular contact or room
     * // =================================================================
     * //
     * // To query for messages sent between the current user and another user or room,
     * // the query options need to contain the the JID (Jabber ID) of the user or
     * // room under the  `with` key.
     *
     * // For a particular user
     * let result;
     * try {
     *    result = await api.archive.query({'with': 'john@doe.net'});
     * } catch (e) {
     *     // The query was not successful
     * }
     *
     * // For a particular room
     * let result;
     * try {
     *    result = await api.archive.query({'with': 'discuss@conference.doglovers.net', 'groupchat': true});
     * } catch (e) {
     *     // The query was not successful
     * }
     *
     * @example
     * // Requesting all archived messages before or after a certain date
     * // ===============================================================
     * //
     * // The `start` and `end` parameters are used to query for messages
     * // within a certain timeframe. The passed in date values may either be ISO8601
     * // formatted date strings, or JavaScript Date objects.
     *
     *  const options = {
     *      'with': 'john@doe.net',
     *      'start': '2010-06-07T00:00:00Z',
     *      'end': '2010-07-07T13:23:54Z'
     *  };
     * let result;
     * try {
     *    result = await api.archive.query(options);
     * } catch (e) {
     *     // The query was not successful
     * }
     *
     * @example
     * // Limiting the amount of messages returned
     * // ========================================
     * //
     * // The amount of returned messages may be limited with the `max` parameter.
     * // By default, the messages are returned from oldest to newest.
     *
     * // Return maximum 10 archived messages
     * let result;
     * try {
     *     result = await api.archive.query({'with': 'john@doe.net', 'max':10});
     * } catch (e) {
     *     // The query was not successful
     * }
     *
     * @example
     * // Paging forwards through a set of archived messages
     * // ==================================================
     * //
     * // When limiting the amount of messages returned per query, you might want to
     * // repeatedly make a further query to fetch the next batch of messages.
     * //
     * // To simplify this usecase for you, the callback method receives not only an array
     * // with the returned archived messages, but also a special RSM (*Result Set Management*)
     * // object which contains the query parameters you passed in, as well
     * // as two utility methods `next`, and `previous`.
     * //
     * // When you call one of these utility methods on the returned RSM object, and then
     * // pass the result into a new query, you'll receive the next or previous batch of
     * // archived messages. Please note, when calling these methods, pass in an integer
     * // to limit your results.
     *
     * const options = {'with': 'john@doe.net', 'max':10};
     * let result;
     * try {
     *     result = await api.archive.query(options);
     * } catch (e) {
     *     // The query was not successful
     * }
     * // Do something with the messages, like showing them in your webpage.
     * result.messages.forEach(m => this.showMessage(m));
     *
     * while (!result.complete) {
     *     try {
     *         result = await api.archive.query(Object.assign(options, rsm.next(10).query));
     *     } catch (e) {
     *         // The query was not successful
     *     }
     *     // Do something with the messages, like showing them in your webpage.
     *     result.messages.forEach(m => this.showMessage(m));
     * }
     *
     * @example
     * // Paging backwards through a set of archived messages
     * // ===================================================
     * //
     * // To page backwards through the archive, you need to know the UID of the message
     * // which you'd like to page backwards from and then pass that as value for the
     * // `before` parameter. If you simply want to page backwards from the most recent
     * // message, pass in the `before` parameter with an empty string value `''`.
     *
     * let result;
     * const options = {'before': '', 'max':5};
     * try {
     *     result = await api.archive.query(options);
     * } catch (e) {
     *     // The query was not successful
     * }
     * // Do something with the messages, like showing them in your webpage.
     * result.messages.forEach(m => this.showMessage(m));
     *
     * // Now we query again, to get the previous batch.
     * try {
     *      result = await api.archive.query(Object.assign(options, rsm.previous(5).query));
     * } catch (e) {
     *     // The query was not successful
     * }
     * // Do something with the messages, like showing them in your webpage.
     * result.messages.forEach(m => this.showMessage(m));
     *
     */
    async query(options) {
      if (!_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.connection.connected()) {
        throw new Error('Can\'t call `api.archive.query` before having established an XMPP session');
      }

      const attrs = {
        'type': 'set'
      };

      if (options && options.groupchat) {
        if (!options['with']) {
          throw new Error('You need to specify a "with" value containing ' + 'the chat room JID, when querying groupchat messages.');
        }

        attrs.to = options['with'];
      }

      const jid = attrs.to || _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid;
      const supported = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.disco.supports(NS.MAM, jid);

      if (!supported) {
        _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(`Did not fetch MAM archive for ${jid} because it doesn't support ${NS.MAM}`);
        return {
          'messages': []
        };
      }

      const queryid = u.getUniqueId();
      const stanza = $iq(attrs).c('query', {
        'xmlns': NS.MAM,
        'queryid': queryid
      });

      if (options) {
        stanza.c('x', {
          'xmlns': NS.XFORM,
          'type': 'submit'
        }).c('field', {
          'var': 'FORM_TYPE',
          'type': 'hidden'
        }).c('value').t(NS.MAM).up().up();

        if (options['with'] && !options.groupchat) {
          stanza.c('field', {
            'var': 'with'
          }).c('value').t(options['with']).up().up();
        }

        ['start', 'end'].forEach(t => {
          if (options[t]) {
            const date = dayjs(options[t]);

            if (date.isValid()) {
              stanza.c('field', {
                'var': t
              }).c('value').t(date.toISOString()).up().up();
            } else {
              throw new TypeError(`archive.query: invalid date provided for: ${t}`);
            }
          }
        });
        stanza.up();
        const rsm = new _converse_headless_shared_rsm__WEBPACK_IMPORTED_MODULE_0__.RSM(options);

        if (Object.keys(rsm.query).length) {
          stanza.cnode(rsm.toXML());
        }
      }

      const messages = [];

      const message_handler = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.addHandler(stanza => {
        const result = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`message > result[xmlns="${NS.MAM}"]`, stanza).pop();

        if (result === undefined || result.getAttribute('queryid') !== queryid) {
          return true;
        }

        const from = stanza.getAttribute('from') || _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid;

        if (options.groupchat) {
          if (from !== options['with']) {
            _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(`Ignoring alleged groupchat MAM message from ${stanza.getAttribute('from')}`);
            return true;
          }
        } else if (from !== _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid) {
          _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(`Ignoring alleged MAM message from ${stanza.getAttribute('from')}`);
          return true;
        }

        messages.push(stanza);
        return true;
      }, NS.MAM);

      let error;
      const timeout = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('message_archiving_timeout');
      const iq_result = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.sendIQ(stanza, timeout, false);

      if (iq_result === null) {
        const {
          __
        } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse;

        const err_msg = __("Timeout while trying to fetch archived messages.");

        _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(err_msg);
        error = new _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.TimeoutError(err_msg);
        return {
          messages,
          error
        };
      } else if (u.isErrorStanza(iq_result)) {
        const {
          __
        } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse;

        const err_msg = __('An error occurred while querying for archived messages.');

        _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(err_msg);
        _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(iq_result);
        error = new Error(err_msg);
        return {
          messages,
          error
        };
      }

      _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.deleteHandler(message_handler);

      let rsm;
      const fin = iq_result && sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`fin[xmlns="${NS.MAM}"]`, iq_result).pop();
      const complete = (fin === null || fin === void 0 ? void 0 : fin.getAttribute('complete')) === 'true';
      const set = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`set[xmlns="${NS.RSM}"]`, fin).pop();

      if (set) {
        rsm = new _converse_headless_shared_rsm__WEBPACK_IMPORTED_MODULE_0__.RSM({ ...options,
          'xml': set
        });
      }
      /**
       * @typedef { Object } MAMQueryResult
       * @property { Array } messages
       * @property { RSM } [rsm] - An instance of {@link RSM}.
       *  You can call `next()` or `previous()` on this instance,
       *  to get the RSM query parameters for the next or previous
       *  page in the result set.
       * @property { Boolean } complete
       * @property { Error } [error]
       */


      return {
        messages,
        rsm,
        complete
      };
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/mam/index.js":
/*!*******************************************!*\
  !*** ./src/headless/plugins/mam/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _disco_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../disco/index.js */ "./src/headless/plugins/disco/index.js");
/* harmony import */ var _placeholder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholder.js */ "./src/headless/plugins/mam/placeholder.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/mam/api.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/mam/utils.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/**
 * @description XEP-0313 Message Archive Management
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */





const {
  Strophe
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.converse.env;
const {
  NS
} = Strophe;
_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.converse.plugins.add('converse-mam', {
  dependencies: ['converse-disco', 'converse-muc'],

  initialize() {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.settings.extend({
      archived_messages_page_size: '50',
      mam_request_all_pages: true,
      message_archiving: undefined,
      // Supported values are 'always', 'never', 'roster' (https://xmpp.org/extensions/xep-0313.html#prefs)
      message_archiving_timeout: 20000 // Time (in milliseconds) to wait before aborting MAM request

    });
    Object.assign(_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api, _api_js__WEBPACK_IMPORTED_MODULE_2__["default"]); // This is mainly done to aid with tests

    Object.assign(_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse, {
      onMAMError: _utils_js__WEBPACK_IMPORTED_MODULE_3__.onMAMError,
      onMAMPreferences: _utils_js__WEBPACK_IMPORTED_MODULE_3__.onMAMPreferences,
      handleMAMResult: _utils_js__WEBPACK_IMPORTED_MODULE_3__.handleMAMResult,
      MAMPlaceholderMessage: _placeholder_js__WEBPACK_IMPORTED_MODULE_1__["default"]
    });
    /************************ Event Handlers ************************/

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('addClientFeatures', () => _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.disco.own.features.add(NS.MAM));
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('serviceDiscovered', _utils_js__WEBPACK_IMPORTED_MODULE_3__.getMAMPrefsFromFeature);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('chatRoomViewInitialized', view => {
      if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('muc_show_logs_before_join')) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.preMUCJoinMAMFetch)(view.model); // If we want to show MAM logs before entering the MUC, we need
        // to be informed once it's clear that this MUC supports MAM.

        view.model.features.on('change:mam_enabled', () => (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.preMUCJoinMAMFetch)(view.model));
      }
    });
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('enteredNewRoom', muc => muc.features.get('mam_enabled') && (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchNewestMessages)(muc));
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('chatReconnected', chat => {
      // XXX: For MUCs, we listen to enteredNewRoom instead
      if (chat.get('type') === _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.PRIVATE_CHAT_TYPE) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchNewestMessages)(chat);
      }
    });
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('afterMessagesFetched', chat => {
      // XXX: We don't want to query MAM every time this is triggered
      // since it's not necessary when the chat is restored from cache.
      // (given that BOSH or SMACKS will ensure that you get messages
      // sent during the reload).
      // With MUCs we can listen for `enteredNewRoom`.
      if (chat.get('type') === _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.PRIVATE_CHAT_TYPE && !_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.connection.restored) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchNewestMessages)(chat);
      }
    });
  }

});

/***/ }),

/***/ "./src/headless/plugins/mam/placeholder.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/mam/placeholder.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MAMPlaceholderMessage)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");


const u = _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env.utils;
class MAMPlaceholderMessage extends _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model {
  defaults() {
    // eslint-disable-line class-methods-use-this
    return {
      'msgid': u.getUniqueId(),
      'is_ephemeral': false
    };
  }

}

/***/ }),

/***/ "./src/headless/plugins/mam/utils.js":
/*!*******************************************!*\
  !*** ./src/headless/plugins/mam/utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fetchArchivedMessages": () => (/* binding */ fetchArchivedMessages),
/* harmony export */   "fetchNewestMessages": () => (/* binding */ fetchNewestMessages),
/* harmony export */   "getMAMPrefsFromFeature": () => (/* binding */ getMAMPrefsFromFeature),
/* harmony export */   "handleMAMResult": () => (/* binding */ handleMAMResult),
/* harmony export */   "onMAMError": () => (/* binding */ onMAMError),
/* harmony export */   "onMAMPreferences": () => (/* binding */ onMAMPreferences),
/* harmony export */   "preMUCJoinMAMFetch": () => (/* binding */ preMUCJoinMAMFetch)
/* harmony export */ });
/* harmony import */ var _placeholder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./placeholder.js */ "./src/headless/plugins/mam/placeholder.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_plugins_muc_parsers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/plugins/muc/parsers */ "./src/headless/plugins/muc/parsers.js");
/* harmony import */ var _converse_headless_plugins_chat_parsers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/plugins/chat/parsers */ "./src/headless/plugins/chat/parsers.js");






const {
  Strophe,
  $iq
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.converse.env;
const {
  NS
} = Strophe;
const u = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.converse.env.utils;
function onMAMError(iq) {
  if (iq !== null && iq !== void 0 && iq.querySelectorAll('feature-not-implemented').length) {
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(`Message Archive Management (XEP-0313) not supported by ${iq.getAttribute('from')}`);
  } else {
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(`Error while trying to set archiving preferences for ${iq.getAttribute('from')}.`);
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(iq);
  }
}
/**
 * Handle returned IQ stanza containing Message Archive
 * Management (XEP-0313) preferences.
 *
 * XXX: For now we only handle the global default preference.
 * The XEP also provides for per-JID preferences, which is
 * currently not supported in converse.js.
 *
 * Per JID preferences will be set in chat boxes, so it'll
 * probbaly be handled elsewhere in any case.
 */

function onMAMPreferences(iq, feature) {
  const preference = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`prefs[xmlns="${NS.MAM}"]`, iq).pop();
  const default_pref = preference.getAttribute('default');

  if (default_pref !== _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('message_archiving')) {
    const stanza = $iq({
      'type': 'set'
    }).c('prefs', {
      'xmlns': NS.MAM,
      'default': _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('message_archiving')
    });
    Array.from(preference.children).forEach(child => stanza.cnode(child).up()); // XXX: Strictly speaking, the server should respond with the updated prefs
    // (see example 18: https://xmpp.org/extensions/xep-0313.html#config)
    // but Prosody doesn't do this, so we don't rely on it.

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.sendIQ(stanza).then(() => feature.save({
      'preferences': {
        'default': _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('message_archiving')
      }
    })).catch(_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.onMAMError);
  } else {
    feature.save({
      'preferences': {
        'default': _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('message_archiving')
      }
    });
  }
}
function getMAMPrefsFromFeature(feature) {
  const prefs = feature.get('preferences') || {};

  if (feature.get('var') !== NS.MAM || _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('message_archiving') === undefined) {
    return;
  }

  if (prefs['default'] !== _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('message_archiving')) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.sendIQ($iq({
      'type': 'get'
    }).c('prefs', {
      'xmlns': NS.MAM
    })).then(iq => _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.onMAMPreferences(iq, feature)).catch(_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.onMAMError);
  }
}
function preMUCJoinMAMFetch(muc) {
  if (!_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('muc_show_logs_before_join') || !muc.features.get('mam_enabled') || muc.get('prejoin_mam_fetched')) {
    return;
  }

  fetchNewestMessages(muc);
  muc.save({
    'prejoin_mam_fetched': true
  });
}
async function handleMAMResult(model, result, query, options, should_page) {
  await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.emojis.initialize();

  const is_muc = model.get('type') === _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.CHATROOMS_TYPE;

  const doParseMessage = s => is_muc ? (0,_converse_headless_plugins_muc_parsers__WEBPACK_IMPORTED_MODULE_4__.parseMUCMessage)(s, model) : (0,_converse_headless_plugins_chat_parsers__WEBPACK_IMPORTED_MODULE_5__.parseMessage)(s);

  const messages = await Promise.all(result.messages.map(doParseMessage));
  result.messages = messages;
  /**
   * Synchronous event which allows listeners to first do some
   * work based on the MAM result before calling the handlers here.
   * @event _converse#MAMResult
   */

  const data = {
    query,
    'chatbox': model,
    messages
  };
  await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.trigger('MAMResult', data, {
    'synchronous': true
  });
  messages.forEach(m => model.queueMessage(m));

  if (result.error) {
    const event_id = result.error.retry_event_id = u.getUniqueId();
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.listen.once(event_id, () => fetchArchivedMessages(model, options, should_page));
    model.createMessageFromError(result.error);
  }
}
/**
 * @typedef { Object } MAMOptions
 * A map of MAM related options that may be passed to fetchArchivedMessages
 * @param { integer } [options.max] - The maximum number of items to return.
 *  Defaults to "archived_messages_page_size"
 * @param { string } [options.after] - The XEP-0359 stanza ID of a message
 *  after which messages should be returned. Implies forward paging.
 * @param { string } [options.before] - The XEP-0359 stanza ID of a message
 *  before which messages should be returned. Implies backward paging.
 * @param { string } [options.end] - A date string in ISO-8601 format,
 *  before which messages should be returned. Implies backward paging.
 * @param { string } [options.start] - A date string in ISO-8601 format,
 *  after which messages should be returned. Implies forward paging.
 * @param { string } [options.with] - The JID of the entity with
 *  which messages were exchanged.
 * @param { boolean } [options.groupchat] - True if archive in groupchat.
 */

/**
 * Fetch XEP-0313 archived messages based on the passed in criteria.
 * @param { _converse.ChatBox | _converse.ChatRoom } model
 * @param { MAMOptions } [options]
 * @param { ('forwards'|'backwards'|null)} [should_page=null] - Determines whether
 *  this function should recursively page through the entire result set if a limited
 *  number of results were returned.
 */

async function fetchArchivedMessages(model) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let should_page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (model.disable_mam) {
    return;
  }

  const is_muc = model.get('type') === _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.CHATROOMS_TYPE;

  const mam_jid = is_muc ? model.get('jid') : _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid;

  if (!(await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.disco.supports(NS.MAM, mam_jid))) {
    return;
  }

  const max = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('archived_messages_page_size');
  const query = Object.assign({
    'groupchat': is_muc,
    'max': max,
    'with': model.get('jid')
  }, options);
  const result = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.archive.query(query);
  await handleMAMResult(model, result, query, options, should_page);

  if (result.rsm && !result.complete) {
    if (should_page) {
      if (should_page === 'forwards') {
        options = result.rsm.next(max, options.before).query;
      } else if (should_page === 'backwards') {
        options = result.rsm.previous(max, options.after).query;
      }

      return fetchArchivedMessages(model, options, should_page);
    } else {
      createPlaceholder(model, options, result);
    }
  }
}
/**
 * Create a placeholder message which is used to indicate gaps in the history.
 * @param { _converse.ChatBox | _converse.ChatRoom } model
 * @param { MAMOptions } options
 * @param { object } result - The RSM result object
 */

async function createPlaceholder(model, options, result) {
  if (options.before == '' && (model.messages.length === 0 || !options.start)) {
    // Fetching the latest MAM messages with an empty local cache
    return;
  }

  if (options.before && !options.start) {
    // Infinite scrolling upward
    return;
  }

  if (options.before == null) {
    // eslint-disable-line no-eq-null
    // Adding placeholders when paging forwards is not supported yet,
    // since currently with standard Converse, we only page forwards
    // when fetching the entire history (i.e. no gaps should arise).
    return;
  }

  const msgs = await Promise.all(result.messages);
  const {
    rsm
  } = result;
  const key = `stanza_id ${model.get('jid')}`;
  const adjacent_message = msgs.find(m => m[key] === rsm.result.first);
  const msg_data = {
    'template_hook': 'getMessageTemplate',
    'time': new Date(new Date(adjacent_message['time']) - 1).toISOString(),
    'before': rsm.result.first,
    'start': options.start
  };
  model.messages.add(new _placeholder_js__WEBPACK_IMPORTED_MODULE_0__["default"](msg_data));
}
/**
 * Fetches messages that might have been archived *after*
 * the last archived message in our local cache.
 * @param { _converse.ChatBox | _converse.ChatRoom }
 */


function fetchNewestMessages(model) {
  if (model.disable_mam) {
    return;
  }

  const most_recent_msg = model.getMostRecentMessage(); // if clear_messages_on_reconnection is true, than any recent messages
  // must have been received *after* connection and we instead must query
  // for earlier messages

  if (most_recent_msg && !_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('clear_messages_on_reconnection')) {
    const should_page = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('mam_request_all_pages');

    if (should_page) {
      const stanza_id = most_recent_msg.get(`stanza_id ${model.get('jid')}`);

      if (stanza_id) {
        fetchArchivedMessages(model, {
          'after': stanza_id
        }, 'forwards');
      } else {
        fetchArchivedMessages(model, {
          'start': most_recent_msg.get('time')
        }, 'forwards');
      }
    } else {
      fetchArchivedMessages(model, {
        'before': '',
        'start': most_recent_msg.get('time')
      });
    }
  } else {
    fetchArchivedMessages(model, {
      'before': ''
    });
  }
}

/***/ }),

/***/ "./src/headless/plugins/muc/affiliations/api.js":
/*!******************************************************!*\
  !*** ./src/headless/plugins/muc/affiliations/api.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/muc/affiliations/utils.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * The "affiliations" namespace groups methods relevant to setting and
   * getting MUC affiliations.
   *
   * @namespace api.rooms.affiliations
   * @memberOf api.rooms
   */
  affiliations: {
    /**
     * Set the given affliation for the given JIDs in the specified MUCs
     *
     * @param { String|Array<String> } muc_jids - The JIDs of the MUCs in
     *  which the affiliation should be set.
     * @param { Object[] } users - An array of objects representing users
     *  for whom the affiliation is to be set.
     * @param { String } users[].jid - The JID of the user whose affiliation will change
     * @param { ('outcast'|'member'|'admin'|'owner') } users[].affiliation - The new affiliation for this user
     * @param { String } [users[].reason] - An optional reason for the affiliation change
     * @returns { Promise }
     *
     * @example
     *  api.rooms.affiliations.set(
     *      [
     *          'muc1@muc.example.org',
     *          'muc2@muc.example.org'
     *      ], [
     *          {
     *              'jid': 'user@example.org',
     *              'affiliation': 'member',
     *              'reason': "You're one of us now!"
     *          }
     *      ]
     *  )
     */
    set(muc_jids, users) {
      users = !Array.isArray(users) ? [users] : users;
      muc_jids = !Array.isArray(muc_jids) ? [muc_jids] : muc_jids;
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setAffiliations)(muc_jids, users);
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/muc/affiliations/utils.js":
/*!********************************************************!*\
  !*** ./src/headless/plugins/muc/affiliations/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "computeAffiliationsDelta": () => (/* binding */ computeAffiliationsDelta),
/* harmony export */   "getAffiliationList": () => (/* binding */ getAffiliationList),
/* harmony export */   "getAssignableAffiliations": () => (/* binding */ getAssignableAffiliations),
/* harmony export */   "setAffiliation": () => (/* binding */ setAffiliation),
/* harmony export */   "setAffiliations": () => (/* binding */ setAffiliations)
/* harmony export */ });
/* harmony import */ var _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/plugins/muc/index.js */ "./src/headless/plugins/muc/index.js");
/* harmony import */ var lodash_es_difference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/difference */ "./node_modules/lodash-es/difference.js");
/* harmony import */ var lodash_es_indexOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/indexOf */ "./node_modules/lodash-es/indexOf.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parsers.js */ "./src/headless/plugins/muc/parsers.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */






const {
  Strophe,
  $iq,
  u
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.converse.env;
/**
 * Sends an IQ stanza to the server, asking it for the relevant affiliation list .
 * Returns an array of {@link MemberListItem} objects, representing occupants
 * that have the given affiliation.
 * See: https://xmpp.org/extensions/xep-0045.html#modifymember
 * @param { ("admin"|"owner"|"member") } affiliation
 * @param { String } muc_jid - The JID of the MUC for which the affiliation list should be fetched
 * @returns { Promise<MemberListItem[]> }
 */

async function getAffiliationList(affiliation, muc_jid) {
  const {
    __
  } = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse;
  const iq = $iq({
    'to': muc_jid,
    'type': 'get'
  }).c('query', {
    xmlns: Strophe.NS.MUC_ADMIN
  }).c('item', {
    'affiliation': affiliation
  });
  const result = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.sendIQ(iq, null, false);

  if (result === null) {
    const err_msg = __('Error: timeout while fetching %1s list for MUC %2s', affiliation, muc_jid);

    const err = new Error(err_msg);
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(err_msg);
    return err;
  }

  if (u.isErrorStanza(result)) {
    const err_msg = __('Error: not allowed to fetch %1s list for MUC %2s', affiliation, muc_jid);

    const err = new Error(err_msg);
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(err_msg);
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(result);
    return err;
  }

  return (0,_parsers_js__WEBPACK_IMPORTED_MODULE_3__.parseMemberListIQ)(result).filter(p => p).sort((a, b) => a.nick < b.nick ? -1 : a.nick > b.nick ? 1 : 0);
}
/**
 * Given an occupant model, see which affiliations may be assigned to that user.
 * @param { Model } occupant
 * @returns { Array<('owner'|'admin'|'member'|'outcast'|'none')> } - An array of assignable affiliations
 */

function getAssignableAffiliations(occupant) {
  let disabled = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('modtools_disable_assign');

  if (!Array.isArray(disabled)) {
    disabled = disabled ? _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_0__.AFFILIATIONS : [];
  }

  if (occupant.get('affiliation') === 'owner') {
    return _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_0__.AFFILIATIONS.filter(a => !disabled.includes(a));
  } else if (occupant.get('affiliation') === 'admin') {
    return _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_0__.AFFILIATIONS.filter(a => !['owner', 'admin', ...disabled].includes(a));
  } else {
    return [];
  }
} // Necessary for tests

_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.getAssignableAffiliations = getAssignableAffiliations;
/**
 * Send IQ stanzas to the server to modify affiliations for users in this groupchat.
 * See: https://xmpp.org/extensions/xep-0045.html#modifymember
 * @param { Array<Object> } users
 * @param { string } users[].jid - The JID of the user whose affiliation will change
 * @param { Array } users[].affiliation - The new affiliation for this user
 * @param { string } [users[].reason] - An optional reason for the affiliation change
 * @returns { Promise }
 */

function setAffiliations(muc_jid, users) {
  const affiliations = [...new Set(users.map(u => u.affiliation))];
  return Promise.all(affiliations.map(a => setAffiliation(a, muc_jid, users)));
}
/**
 * Send IQ stanzas to the server to set an affiliation for
 * the provided JIDs.
 * See: https://xmpp.org/extensions/xep-0045.html#modifymember
 *
 * Prosody doesn't accept multiple JIDs' affiliations
 * being set in one IQ stanza, so as a workaround we send
 * a separate stanza for each JID.
 * Related ticket: https://issues.prosody.im/345
 *
 * @param { ('outcast'|'member'|'admin'|'owner') } affiliation - The affiliation to be set
 * @param { String|Array<String> } jids - The JID(s) of the MUCs in which the
 *  affiliations need to be set.
 * @param { object } members - A map of jids, affiliations and
 *  optionally reasons. Only those entries with the
 *  same affiliation as being currently set will be considered.
 * @returns { Promise } A promise which resolves and fails depending on the XMPP server response.
 */

function setAffiliation(affiliation, muc_jids, members) {
  if (!Array.isArray(muc_jids)) {
    muc_jids = [muc_jids];
  }

  members = members.filter(m => [undefined, affiliation].includes(m.affiliation));
  return Promise.all(muc_jids.reduce((acc, jid) => [...acc, ...members.map(m => sendAffiliationIQ(affiliation, jid, m))], []));
}
/**
 * Send an IQ stanza specifying an affiliation change.
 * @private
 * @param { String } affiliation: affiliation (could also be stored on the member object).
 * @param { String } muc_jid: The JID of the MUC in which the affiliation should be set.
 * @param { Object } member: Map containing the member's jid and optionally a reason and affiliation.
 */

function sendAffiliationIQ(affiliation, muc_jid, member) {
  const iq = $iq({
    to: muc_jid,
    type: 'set'
  }).c('query', {
    xmlns: Strophe.NS.MUC_ADMIN
  }).c('item', {
    'affiliation': member.affiliation || affiliation,
    'nick': member.nick,
    'jid': member.jid
  });

  if (member.reason !== undefined) {
    iq.c('reason', member.reason);
  }

  return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.sendIQ(iq);
}
/**
 * Given two lists of objects with 'jid', 'affiliation' and
 * 'reason' properties, return a new list containing
 * those objects that are new, changed or removed
 * (depending on the 'remove_absentees' boolean).
 *
 * The affiliations for new and changed members stay the
 * same, for removed members, the affiliation is set to 'none'.
 *
 * The 'reason' property is not taken into account when
 * comparing whether affiliations have been changed.
 * @param { boolean } exclude_existing - Indicates whether JIDs from
 *      the new list which are also in the old list
 *      (regardless of affiliation) should be excluded
 *      from the delta. One reason to do this
 *      would be when you want to add a JID only if it
 *      doesn't have *any* existing affiliation at all.
 * @param { boolean } remove_absentees - Indicates whether JIDs
 *      from the old list which are not in the new list
 *      should be considered removed and therefore be
 *      included in the delta with affiliation set
 *      to 'none'.
 * @param { array } new_list - Array containing the new affiliations
 * @param { array } old_list - Array containing the old affiliations
 * @returns { array }
 */


function computeAffiliationsDelta(exclude_existing, remove_absentees, new_list, old_list) {
  const new_jids = new_list.map(o => o.jid);
  const old_jids = old_list.map(o => o.jid); // Get the new affiliations

  let delta = (0,lodash_es_difference__WEBPACK_IMPORTED_MODULE_4__["default"])(new_jids, old_jids).map(jid => new_list[(0,lodash_es_indexOf__WEBPACK_IMPORTED_MODULE_5__["default"])(new_jids, jid)]);

  if (!exclude_existing) {
    // Get the changed affiliations
    delta = delta.concat(new_list.filter(item => {
      const idx = (0,lodash_es_indexOf__WEBPACK_IMPORTED_MODULE_5__["default"])(old_jids, item.jid);
      return idx >= 0 ? item.affiliation !== old_list[idx].affiliation : false;
    }));
  }

  if (remove_absentees) {
    // Get the removed affiliations
    delta = delta.concat((0,lodash_es_difference__WEBPACK_IMPORTED_MODULE_4__["default"])(old_jids, new_jids).map(jid => ({
      'jid': jid,
      'affiliation': 'none'
    })));
  }

  return delta;
}

/***/ }),

/***/ "./src/headless/plugins/muc/api.js":
/*!*****************************************!*\
  !*** ./src/headless/plugins/muc/api.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../log */ "./src/headless/log.js");
/* harmony import */ var _utils_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/form */ "./src/headless/utils/form.js");
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * The "rooms" namespace groups methods relevant to chatrooms
   * (aka groupchats).
   *
   * @namespace api.rooms
   * @memberOf api
   */
  rooms: {
    /**
     * Creates a new MUC chatroom (aka groupchat)
     *
     * Similar to {@link api.rooms.open}, but creates
     * the chatroom in the background (i.e. doesn't cause a view to open).
     *
     * @method api.rooms.create
     * @param {(string[]|string)} jid|jids The JID or array of
     *     JIDs of the chatroom(s) to create
     * @param {object} [attrs] attrs The room attributes
     * @returns {Promise} Promise which resolves with the Model representing the chat.
     */
    create(jids) {
      let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      attrs = typeof attrs === 'string' ? {
        'nick': attrs
      } : attrs || {};

      if (!attrs.nick && _core_js__WEBPACK_IMPORTED_MODULE_3__.api.settings.get('muc_nickname_from_jid')) {
        attrs.nick = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_2__.Strophe.getNodeFromJid(_core_js__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid);
      }

      if (jids === undefined) {
        throw new TypeError('rooms.create: You need to provide at least one JID');
      } else if (typeof jids === 'string') {
        return _core_js__WEBPACK_IMPORTED_MODULE_3__.api.rooms.get(_utils_form__WEBPACK_IMPORTED_MODULE_1__["default"].getJIDFromURI(jids), attrs, true);
      }

      return jids.map(jid => _core_js__WEBPACK_IMPORTED_MODULE_3__.api.rooms.get(_utils_form__WEBPACK_IMPORTED_MODULE_1__["default"].getJIDFromURI(jid), attrs, true));
    },

    /**
     * Opens a MUC chatroom (aka groupchat)
     *
     * Similar to {@link api.chats.open}, but for groupchats.
     *
     * @method api.rooms.open
     * @param {string} jid The room JID or JIDs (if not specified, all
     *     currently open rooms will be returned).
     * @param {string} attrs A map  containing any extra room attributes.
     * @param {string} [attrs.nick] The current user's nickname for the MUC
     * @param {boolean} [attrs.auto_configure] A boolean, indicating
     *     whether the room should be configured automatically or not.
     *     If set to `true`, then it makes sense to pass in configuration settings.
     * @param {object} [attrs.roomconfig] A map of configuration settings to be used when the room gets
     *     configured automatically. Currently it doesn't make sense to specify
     *     `roomconfig` values if `auto_configure` is set to `false`.
     *     For a list of configuration values that can be passed in, refer to these values
     *     in the [XEP-0045 MUC specification](https://xmpp.org/extensions/xep-0045.html#registrar-formtype-owner).
     *     The values should be named without the `muc#roomconfig_` prefix.
     * @param {boolean} [attrs.minimized] A boolean, indicating whether the room should be opened minimized or not.
     * @param {boolean} [attrs.bring_to_foreground] A boolean indicating whether the room should be
     *     brought to the foreground and therefore replace the currently shown chat.
     *     If there is no chat currently open, then this option is ineffective.
     * @param {Boolean} [force=false] - By default, a minimized
     *   room won't be maximized (in `overlayed` view mode) and in
     *   `fullscreen` view mode a newly opened room won't replace
     *   another chat already in the foreground.
     *   Set `force` to `true` if you want to force the room to be
     *   maximized or shown.
     * @returns {Promise} Promise which resolves with the Model representing the chat.
     *
     * @example
     * api.rooms.open('group@muc.example.com')
     *
     * @example
     * // To return an array of rooms, provide an array of room JIDs:
     * api.rooms.open(['group1@muc.example.com', 'group2@muc.example.com'])
     *
     * @example
     * // To setup a custom nickname when joining the room, provide the optional nick argument:
     * api.rooms.open('group@muc.example.com', {'nick': 'mycustomnick'})
     *
     * @example
     * // For example, opening a room with a specific default configuration:
     * api.rooms.open(
     *     'myroom@conference.example.org',
     *     { 'nick': 'coolguy69',
     *       'auto_configure': true,
     *       'roomconfig': {
     *           'changesubject': false,
     *           'membersonly': true,
     *           'persistentroom': true,
     *           'publicroom': true,
     *           'roomdesc': 'Comfy room for hanging out',
     *           'whois': 'anyone'
     *       }
     *     }
     * );
     */
    async open(jids) {
      let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.waitUntil('chatBoxesFetched');

      if (jids === undefined) {
        const err_msg = 'rooms.open: You need to provide at least one JID';
        _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(err_msg);
        throw new TypeError(err_msg);
      } else if (typeof jids === 'string') {
        const room = await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.rooms.get(jids, attrs, true);
        !attrs.hidden && (room === null || room === void 0 ? void 0 : room.maybeShow(force));
        return room;
      } else {
        const rooms = await Promise.all(jids.map(jid => _core_js__WEBPACK_IMPORTED_MODULE_3__.api.rooms.get(jid, attrs, true)));
        rooms.forEach(r => !attrs.hidden && r.maybeShow(force));
        return rooms;
      }
    },

    /**
     * Fetches the object representing a MUC chatroom (aka groupchat)
     *
     * @method api.rooms.get
     * @param { String } [jid] The room JID (if not specified, all rooms will be returned).
     * @param { Object } [attrs] A map containing any extra room attributes
     *  to be set if `create` is set to `true`
     * @param { String } [attrs.nick] Specify the nickname
     * @param { String } [attrs.password ] Specify a password if needed to enter a new room
     * @param { Boolean } create A boolean indicating whether the room should be created
     *     if not found (default: `false`)
     * @returns { Promise<_converse.ChatRoom> }
     * @example
     * api.waitUntil('roomsAutoJoined').then(() => {
     *     const create_if_not_found = true;
     *     api.rooms.get(
     *         'group@muc.example.com',
     *         {'nick': 'dread-pirate-roberts', 'password': 'secret'},
     *         create_if_not_found
     *     )
     * });
     */
    async get(jids) {
      let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let create = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.waitUntil('chatBoxesFetched');

      async function _get(jid) {
        jid = _utils_form__WEBPACK_IMPORTED_MODULE_1__["default"].getJIDFromURI(jid);
        let model = await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.chatboxes.get(jid);

        if (!model && create) {
          model = await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.chatboxes.create(jid, attrs, _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.ChatRoom);
        } else {
          model = model && model.get('type') === _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.CHATROOMS_TYPE ? model : null;

          if (model && Object.keys(attrs).length) {
            model.save(attrs);
          }
        }

        return model;
      }

      if (jids === undefined) {
        const chats = await _core_js__WEBPACK_IMPORTED_MODULE_3__.api.chatboxes.get();
        return chats.filter(c => c.get('type') === _core_js__WEBPACK_IMPORTED_MODULE_3__._converse.CHATROOMS_TYPE);
      } else if (typeof jids === 'string') {
        return _get(jids);
      }

      return Promise.all(jids.map(jid => _get(jid)));
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/muc/constants.js":
/*!***********************************************!*\
  !*** ./src/headless/plugins/muc/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MUC_ROLE_WEIGHTS": () => (/* binding */ MUC_ROLE_WEIGHTS)
/* harmony export */ });
const MUC_ROLE_WEIGHTS = {
  'moderator': 1,
  'participant': 2,
  'visitor': 3,
  'none': 2
};

/***/ }),

/***/ "./src/headless/plugins/muc/index.js":
/*!*******************************************!*\
  !*** ./src/headless/plugins/muc/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AFFILIATIONS": () => (/* binding */ AFFILIATIONS),
/* harmony export */   "ROLES": () => (/* binding */ ROLES)
/* harmony export */ });
/* harmony import */ var _chat_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chat/index.js */ "./src/headless/plugins/chat/index.js");
/* harmony import */ var _disco_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../disco/index.js */ "./src/headless/plugins/disco/index.js");
/* harmony import */ var _emoji_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../emoji/index.js */ "./src/headless/plugins/emoji/index.js");
/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message.js */ "./src/headless/plugins/muc/message.js");
/* harmony import */ var _muc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./muc.js */ "./src/headless/plugins/muc/muc.js");
/* harmony import */ var _occupant_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./occupant.js */ "./src/headless/plugins/muc/occupant.js");
/* harmony import */ var _occupants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./occupants.js */ "./src/headless/plugins/muc/occupants.js");
/* harmony import */ var _affiliations_api_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./affiliations/api.js */ "./src/headless/plugins/muc/affiliations/api.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/muc/api.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/muc/utils.js");
/* harmony import */ var _affiliations_utils_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./affiliations/utils.js */ "./src/headless/plugins/muc/affiliations/utils.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description Implements the non-view logic for XEP-0045 Multi-User Chat
 */













const ROLES = ['moderator', 'participant', 'visitor'];
const AFFILIATIONS = ['owner', 'admin', 'member', 'outcast', 'none'];
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.AFFILIATION_CHANGES = {
  OWNER: 'owner',
  ADMIN: 'admin',
  MEMBER: 'member',
  EXADMIN: 'exadmin',
  EXOWNER: 'exowner',
  EXOUTCAST: 'exoutcast',
  EXMEMBER: 'exmember'
};
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.AFFILIATION_CHANGES_LIST = Object.values(_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.AFFILIATION_CHANGES);
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_TRAFFIC_STATES = {
  ENTERED: 'entered',
  EXITED: 'exited'
};
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_TRAFFIC_STATES_LIST = Object.values(_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_TRAFFIC_STATES);
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_ROLE_CHANGES = {
  OP: 'op',
  DEOP: 'deop',
  VOICE: 'voice',
  MUTE: 'mute'
};
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_ROLE_CHANGES_LIST = Object.values(_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_ROLE_CHANGES);
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC = {};
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES = {
  'visibility_changes': ['100', '102', '103', '172', '173', '174'],
  'self': ['110'],
  'non_privacy_changes': ['104', '201'],
  'muc_logging_changes': ['170', '171'],
  'nickname_changes': ['210', '303'],
  'disconnected': ['301', '307', '321', '322', '332', '333'],
  'affiliation_changes': [..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.AFFILIATION_CHANGES_LIST],
  'join_leave_events': [..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_TRAFFIC_STATES_LIST],
  'role_changes': [..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_ROLE_CHANGES_LIST]
};
const {
  Strophe
} = _core_js__WEBPACK_IMPORTED_MODULE_10__.converse.env; // Add Strophe Namespaces

Strophe.addNamespace('MUC_ADMIN', Strophe.NS.MUC + '#admin');
Strophe.addNamespace('MUC_OWNER', Strophe.NS.MUC + '#owner');
Strophe.addNamespace('MUC_REGISTER', 'jabber:iq:register');
Strophe.addNamespace('MUC_ROOMCONF', Strophe.NS.MUC + '#roomconfig');
Strophe.addNamespace('MUC_USER', Strophe.NS.MUC + '#user');
Strophe.addNamespace('MUC_HATS', 'xmpp:prosody.im/protocol/hats:1');
Strophe.addNamespace('CONFINFO', 'urn:ietf:params:xml:ns:conference-info');
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC_NICK_CHANGED_CODE = '303';
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.ROOM_FEATURES = ['passwordprotected', 'unsecured', 'hidden', 'publicroom', 'membersonly', 'open', 'persistent', 'temporary', 'nonanonymous', 'semianonymous', 'moderated', 'unmoderated', 'mam_enabled']; // No longer used in code, but useful as reference.
//
// const ROOM_FEATURES_MAP = {
//     'passwordprotected': 'unsecured',
//     'unsecured': 'passwordprotected',
//     'hidden': 'publicroom',
//     'publicroom': 'hidden',
//     'membersonly': 'open',
//     'open': 'membersonly',
//     'persistent': 'temporary',
//     'temporary': 'persistent',
//     'nonanonymous': 'semianonymous',
//     'semianonymous': 'nonanonymous',
//     'moderated': 'unmoderated',
//     'unmoderated': 'moderated'
// };

_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.ROOMSTATUS = {
  CONNECTED: 0,
  CONNECTING: 1,
  NICKNAME_REQUIRED: 2,
  PASSWORD_REQUIRED: 3,
  DISCONNECTED: 4,
  ENTERED: 5,
  DESTROYED: 6,
  BANNED: 7,
  CLOSING: 8
};
_core_js__WEBPACK_IMPORTED_MODULE_10__.converse.plugins.add('converse-muc', {
  /* Optional dependencies are other plugins which might be
   * overridden or relied upon, and therefore need to be loaded before
   * this plugin. They are called "optional" because they might not be
   * available, in which case any overrides applicable to them will be
   * ignored.
   *
   * It's possible however to make optional dependencies non-optional.
   * If the setting "strict_plugin_dependencies" is set to true,
   * an error will be raised if the plugin is not found.
   *
   * NB: These plugins need to have already been loaded via require.js.
   */
  dependencies: ['converse-chatboxes', 'converse-chat', 'converse-disco'],
  overrides: {
    ChatBoxes: {
      model(attrs, options) {
        const {
          _converse
        } = this.__super__;

        if (attrs && attrs.type == _converse.CHATROOMS_TYPE) {
          return new _converse.ChatRoom(attrs, options);
        } else {
          return this.__super__.model.apply(this, arguments);
        }
      }

    }
  },

  initialize() {
    /* The initialize function gets called as soon as the plugin is
     * loaded by converse.js's plugin machinery.
     */
    const {
      __,
      ___
    } = _core_js__WEBPACK_IMPORTED_MODULE_10__._converse; // Configuration values for this plugin
    // ====================================
    // Refer to docs/source/configuration.rst for explanations of these
    // configuration settings.

    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.settings.extend({
      'allow_muc_invitations': true,
      'auto_join_on_invite': false,
      'auto_join_rooms': [],
      'auto_register_muc_nickname': false,
      'hide_muc_participants': false,
      'locked_muc_domain': false,
      'modtools_disable_assign': false,
      'muc_clear_messages_on_leave': true,
      'muc_domain': undefined,
      'muc_fetch_members': true,
      'muc_history_max_stanzas': undefined,
      'muc_instant_rooms': true,
      'muc_nickname_from_jid': false,
      'muc_send_probes': false,
      'muc_show_info_messages': [..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.visibility_changes, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.self, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.non_privacy_changes, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.muc_logging_changes, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.nickname_changes, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.disconnected, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.affiliation_changes, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.join_leave_events, ..._core_js__WEBPACK_IMPORTED_MODULE_10__.converse.MUC.INFO_CODES.role_changes],
      'muc_show_logs_before_join': false,
      'muc_subscribe_to_rai': false
    });
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.promises.add(['roomsAutoJoined']);

    if (_core_js__WEBPACK_IMPORTED_MODULE_10__.api.settings.get('locked_muc_domain') && typeof _core_js__WEBPACK_IMPORTED_MODULE_10__.api.settings.get('muc_domain') !== 'string') {
      throw new Error('Config Error: it makes no sense to set locked_muc_domain ' + 'to true when muc_domain is not set');
    } // This is for tests (at least until we can import modules inside tests)


    _core_js__WEBPACK_IMPORTED_MODULE_10__.converse.env.muc_utils = {
      computeAffiliationsDelta: _affiliations_utils_js__WEBPACK_IMPORTED_MODULE_12__.computeAffiliationsDelta
    };
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_10__.api, _api_js__WEBPACK_IMPORTED_MODULE_8__["default"]);
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_10__.api.rooms, _affiliations_api_js__WEBPACK_IMPORTED_MODULE_7__["default"]);
    /* https://xmpp.org/extensions/xep-0045.html
     * ----------------------------------------
     * 100 message      Entering a groupchat         Inform user that any occupant is allowed to see the user's full JID
     * 101 message (out of band)                     Affiliation change  Inform user that his or her affiliation changed while not in the groupchat
     * 102 message      Configuration change         Inform occupants that groupchat now shows unavailable members
     * 103 message      Configuration change         Inform occupants that groupchat now does not show unavailable members
     * 104 message      Configuration change         Inform occupants that a non-privacy-related groupchat configuration change has occurred
     * 110 presence     Any groupchat presence       Inform user that presence refers to one of its own groupchat occupants
     * 170 message or initial presence               Configuration change    Inform occupants that groupchat logging is now enabled
     * 171 message      Configuration change         Inform occupants that groupchat logging is now disabled
     * 172 message      Configuration change         Inform occupants that the groupchat is now non-anonymous
     * 173 message      Configuration change         Inform occupants that the groupchat is now semi-anonymous
     * 174 message      Configuration change         Inform occupants that the groupchat is now fully-anonymous
     * 201 presence     Entering a groupchat         Inform user that a new groupchat has been created
     * 210 presence     Entering a groupchat         Inform user that the service has assigned or modified the occupant's roomnick
     * 301 presence     Removal from groupchat       Inform user that he or she has been banned from the groupchat
     * 303 presence     Exiting a groupchat          Inform all occupants of new groupchat nickname
     * 307 presence     Removal from groupchat       Inform user that he or she has been kicked from the groupchat
     * 321 presence     Removal from groupchat       Inform user that he or she is being removed from the groupchat because of an affiliation change
     * 322 presence     Removal from groupchat       Inform user that he or she is being removed from the groupchat because the groupchat has been changed to members-only and the user is not a member
     * 332 presence     Removal from groupchat       Inform user that he or she is being removed from the groupchat because of a system shutdown
     */

    _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.muc = {
      info_messages: {
        100: __('This groupchat is not anonymous'),
        102: __('This groupchat now shows unavailable members'),
        103: __('This groupchat does not show unavailable members'),
        104: __('The groupchat configuration has changed'),
        170: __('Groupchat logging is now enabled'),
        171: __('Groupchat logging is now disabled'),
        172: __('This groupchat is now no longer anonymous'),
        173: __('This groupchat is now semi-anonymous'),
        174: __('This groupchat is now fully-anonymous'),
        201: __('A new groupchat has been created')
      },
      new_nickname_messages: {
        // XXX: Note the triple underscore function and not double underscore.
        210: ___('Your nickname has been automatically set to %1$s'),
        303: ___('Your nickname has been changed to %1$s')
      },
      disconnect_messages: {
        301: __('You have been banned from this groupchat'),
        333: __('You have exited this groupchat due to a technical problem'),
        307: __('You have been kicked from this groupchat'),
        321: __('You have been removed from this groupchat because of an affiliation change'),
        322: __("You have been removed from this groupchat because the groupchat has changed to members-only and you're not a member"),
        332: __('You have been removed from this groupchat because the service hosting it is being shut down')
      }
    };

    _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.router.route('converse/room?jid=:jid', _utils_js__WEBPACK_IMPORTED_MODULE_11__.routeToRoom);

    _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.ChatRoom = _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.ChatBox.extend(_muc_js__WEBPACK_IMPORTED_MODULE_4__["default"]);
    _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.ChatRoomMessage = _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.Message.extend(_message_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
    _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.ChatRoomOccupants = _occupants_js__WEBPACK_IMPORTED_MODULE_6__["default"];
    _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.ChatRoomOccupant = _occupant_js__WEBPACK_IMPORTED_MODULE_5__["default"];
    /**
     * Collection which stores MUC messages
     * @class
     * @namespace _converse.ChatRoomMessages
     * @memberOf _converse
     */

    _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.ChatRoomMessages = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_9__.Collection.extend({
      model: _core_js__WEBPACK_IMPORTED_MODULE_10__._converse.ChatRoomMessage,
      comparator: 'time'
    });
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_10__._converse, {
      getDefaultMUCNickname: _utils_js__WEBPACK_IMPORTED_MODULE_11__.getDefaultMUCNickname,
      isInfoVisible: _utils_js__WEBPACK_IMPORTED_MODULE_11__.isInfoVisible,
      onDirectMUCInvitation: _utils_js__WEBPACK_IMPORTED_MODULE_11__.onDirectMUCInvitation
    });
    /************************ BEGIN Event Handlers ************************/

    if (_core_js__WEBPACK_IMPORTED_MODULE_10__.api.settings.get('allow_muc_invitations')) {
      _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('connected', _utils_js__WEBPACK_IMPORTED_MODULE_11__.registerDirectInvitationHandler);
      _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('reconnected', _utils_js__WEBPACK_IMPORTED_MODULE_11__.registerDirectInvitationHandler);
    }

    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('addClientFeatures', () => _core_js__WEBPACK_IMPORTED_MODULE_10__.api.disco.own.features.add(`${Strophe.NS.CONFINFO}+notify`));
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('addClientFeatures', _utils_js__WEBPACK_IMPORTED_MODULE_11__.onAddClientFeatures);
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('beforeResourceBinding', _utils_js__WEBPACK_IMPORTED_MODULE_11__.onBeforeResourceBinding);
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('beforeTearDown', _utils_js__WEBPACK_IMPORTED_MODULE_11__.onBeforeTearDown);
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('chatBoxesFetched', _utils_js__WEBPACK_IMPORTED_MODULE_11__.autoJoinRooms);
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('disconnected', _utils_js__WEBPACK_IMPORTED_MODULE_11__.disconnectChatRooms);
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('statusInitialized', _utils_js__WEBPACK_IMPORTED_MODULE_11__.onStatusInitialized);
    _core_js__WEBPACK_IMPORTED_MODULE_10__.api.listen.on('windowStateChanged', _utils_js__WEBPACK_IMPORTED_MODULE_11__.onWindowStateChanged);
  }

});

/***/ }),

/***/ "./src/headless/plugins/muc/message.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/muc/message.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../log */ "./src/headless/log.js");
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");



/**
 * Mixing that turns a Message model into a ChatRoomMessage model.
 * @class
 * @namespace _converse.ChatRoomMessage
 * @memberOf _converse
 */

const ChatRoomMessageMixin = {
  initialize() {
    if (!this.checkValidity()) {
      return;
    }

    if (this.get('file')) {
      this.on('change:put', () => this.uploadFile());
    } // If `type` changes from `error` to `groupchat`, we want to set the occupant. See #2733


    this.on('change:type', () => this.setOccupant());
    this.on('change:is_ephemeral', () => this.setTimerForEphemeralMessage());
    this.setTimerForEphemeralMessage();
    this.setOccupant();
    /**
     * Triggered once a { @link _converse.ChatRoomMessage } has been created and initialized.
     * @event _converse#chatRoomMessageInitialized
     * @type { _converse.ChatRoomMessages}
     * @example _converse.api.listen.on('chatRoomMessageInitialized', model => { ... });
     */

    _core_js__WEBPACK_IMPORTED_MODULE_2__.api.trigger('chatRoomMessageInitialized', this);
  },

  getDisplayName() {
    var _this$occupant;

    return ((_this$occupant = this.occupant) === null || _this$occupant === void 0 ? void 0 : _this$occupant.getDisplayName()) || this.get('nick');
  },

  /**
   * Determines whether this messsage may be moderated,
   * based on configuration settings and server support.
   * @async
   * @private
   * @method _converse.ChatRoomMessages#mayBeModerated
   * @returns { Boolean }
   */
  mayBeModerated() {
    if (typeof this.get('from_muc') === 'undefined') {
      // If from_muc is not defined, then this message hasn't been
      // reflected yet, which means we won't have a XEP-0359 stanza id.
      return;
    }

    return ['all', 'moderator'].includes(_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('allow_message_retraction')) && this.get(`stanza_id ${this.get('from_muc')}`) && this.collection.chatbox.canModerateMessages();
  },

  checkValidity() {
    const result = _core_js__WEBPACK_IMPORTED_MODULE_2__._converse.Message.prototype.checkValidity.call(this);

    !result && this.collection.chatbox.debouncedRejoin();
    return result;
  },

  onOccupantRemoved() {
    var _this$collection;

    this.stopListening(this.occupant);
    delete this.occupant;
    const chatbox = this === null || this === void 0 ? void 0 : (_this$collection = this.collection) === null || _this$collection === void 0 ? void 0 : _this$collection.chatbox;

    if (!chatbox) {
      return _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Could not get collection.chatbox for message: ${JSON.stringify(this.toJSON())}`);
    }

    this.listenTo(chatbox.occupants, 'add', this.onOccupantAdded);
  },

  onOccupantAdded(occupant) {
    var _this$collection2;

    if (this.get('occupant_id')) {
      if (occupant.get('occupant_id') !== this.get('occupant_id')) {
        return;
      }
    } else if (occupant.get('nick') !== strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_1__.Strophe.getResourceFromJid(this.get('from'))) {
      return;
    }

    const chatbox = this === null || this === void 0 ? void 0 : (_this$collection2 = this.collection) === null || _this$collection2 === void 0 ? void 0 : _this$collection2.chatbox;

    if (!chatbox) {
      return _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Could not get collection.chatbox for message: ${JSON.stringify(this.toJSON())}`);
    }

    this.occupant = occupant;

    if (occupant.get('jid')) {
      this.save('from_real_jid', occupant.get('jid'));
    }

    this.trigger('occupantAdded');
    this.listenTo(this.occupant, 'destroy', this.onOccupantRemoved);
    this.stopListening(chatbox.occupants, 'add', this.onOccupantAdded);
  },

  setOccupant() {
    var _this$collection3;

    if (this.get('type') !== 'groupchat' || this.isEphemeral() || this.occupant) {
      return;
    }

    const chatbox = this === null || this === void 0 ? void 0 : (_this$collection3 = this.collection) === null || _this$collection3 === void 0 ? void 0 : _this$collection3.chatbox;

    if (!chatbox) {
      return _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Could not get collection.chatbox for message: ${JSON.stringify(this.toJSON())}`);
    }

    const nick = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_1__.Strophe.getResourceFromJid(this.get('from'));
    const occupant_id = this.get('occupant_id');
    this.occupant = chatbox.occupants.findOccupant({
      nick,
      occupant_id
    });

    if (!this.occupant && _core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('muc_send_probes')) {
      this.occupant = chatbox.occupants.create({
        nick,
        occupant_id,
        'type': 'unavailable'
      });
      const jid = `${chatbox.get('jid')}/${nick}`;
      _core_js__WEBPACK_IMPORTED_MODULE_2__.api.user.presence.send('probe', jid);
    }

    if (this.occupant) {
      this.listenTo(this.occupant, 'destroy', this.onOccupantRemoved);
    } else {
      this.listenTo(chatbox.occupants, 'add', this.onOccupantAdded);
    }
  }

};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatRoomMessageMixin);

/***/ }),

/***/ "./src/headless/plugins/muc/muc.js":
/*!*****************************************!*\
  !*** ./src/headless/plugins/muc/muc.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_es_debounce__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/debounce */ "./node_modules/lodash-es/debounce.js");
/* harmony import */ var lodash_es_invoke__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es/invoke */ "./node_modules/lodash-es/invoke.js");
/* harmony import */ var lodash_es_isElement__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es/isElement */ "./node_modules/lodash-es/isElement.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../log */ "./src/headless/log.js");
/* harmony import */ var _utils_parse_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/parse-helpers */ "./src/headless/utils/parse-helpers.js");
/* harmony import */ var lodash_es_pick__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es/pick */ "./node_modules/lodash-es/pick.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/form */ "./src/headless/utils/form.js");
/* harmony import */ var lodash_es_zipObject__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es/zipObject */ "./node_modules/lodash-es/zipObject.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _affiliations_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./affiliations/utils.js */ "./src/headless/plugins/muc/affiliations/utils.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");
/* harmony import */ var _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @converse/headless/shared/parsers */ "./src/headless/shared/parsers.js");
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");
/* harmony import */ var _parsers_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers.js */ "./src/headless/plugins/muc/parsers.js");
/* harmony import */ var _converse_headless_shared_actions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @converse/headless/shared/actions */ "./src/headless/shared/actions.js");



















const OWNER_COMMANDS = ['owner'];
const ADMIN_COMMANDS = ['admin', 'ban', 'deop', 'destroy', 'member', 'op', 'revoke'];
const MODERATOR_COMMANDS = ['kick', 'mute', 'voice', 'modtools'];
const VISITOR_COMMANDS = ['nick'];
const METADATA_ATTRIBUTES = ["og:article:author", "og:article:published_time", "og:description", "og:image", "og:image:height", "og:image:width", "og:site_name", "og:title", "og:type", "og:url", "og:video:height", "og:video:secure_url", "og:video:tag", "og:video:type", "og:video:url", "og:video:width"];
const ACTION_INFO_CODES = ['301', '303', '333', '307', '321', '322'];
const MUCSession = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__.Model.extend({
  defaults() {
    return {
      'connection_status': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DISCONNECTED
    };
  }

});
/**
 * Represents an open/ongoing groupchat conversation.
 * @mixin
 * @namespace _converse.ChatRoom
 * @memberOf _converse
 */

const ChatRoomMixin = {
  defaults() {
    return {
      'bookmarked': false,
      'chat_state': undefined,
      'has_activity': false,
      // XEP-437
      'hidden': (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.isUniView)() && !_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('singleton'),
      'hidden_occupants': !!_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('hide_muc_participants'),
      'message_type': 'groupchat',
      'name': '',
      // For group chats, we distinguish between generally unread
      // messages and those ones that specifically mention the
      // user.
      //
      // To keep things simple, we reuse `num_unread` from
      // _converse.ChatBox to indicate unread messages which
      // mention the user and `num_unread_general` to indicate
      // generally unread messages (which *includes* mentions!).
      'num_unread_general': 0,
      'num_unread': 0,
      'roomconfig': {},
      'time_opened': this.get('time_opened') || new Date().getTime(),
      'time_sent': new Date(0).toISOString(),
      'type': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.CHATROOMS_TYPE
    };
  },

  async initialize() {
    this.initialized = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_8__.getOpenPromise)();
    this.debouncedRejoin = (0,lodash_es_debounce__WEBPACK_IMPORTED_MODULE_14__["default"])(this.rejoin, 250);
    this.set('box_id', `box-${this.get('jid')}`);
    this.initNotifications();
    this.initMessages();
    this.initUI();
    this.initOccupants();
    this.initDiscoModels(); // sendChatState depends on this.features

    this.registerHandlers();
    this.on('change:chat_state', this.sendChatState, this);
    this.on('change:hidden', this.onHiddenChange, this);
    this.on('destroy', this.removeHandlers, this);
    this.ui.on('change:scrolled', this.onScrolledChanged, this);
    await this.restoreSession();
    this.session.on('change:connection_status', this.onConnectionStatusChanged, this);
    this.listenTo(this.occupants, 'add', this.onOccupantAdded);
    this.listenTo(this.occupants, 'remove', this.onOccupantRemoved);
    this.listenTo(this.occupants, 'change:show', this.onOccupantShowChanged);
    this.listenTo(this.occupants, 'change:affiliation', this.createAffiliationChangeMessage);
    this.listenTo(this.occupants, 'change:role', this.createRoleChangeMessage);
    const restored = await this.restoreFromCache();

    if (!restored) {
      this.join();
    }
    /**
     * Triggered once a {@link _converse.ChatRoom} has been created and initialized.
     * @event _converse#chatRoomInitialized
     * @type { _converse.ChatRoom }
     * @example _converse.api.listen.on('chatRoomInitialized', model => { ... });
     */


    await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.trigger('chatRoomInitialized', this, {
      'Synchronous': true
    });
    this.initialized.resolve();
  },

  isEntered() {
    return this.session.get('connection_status') === _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.ENTERED;
  },

  /**
   * Checks whether we're still joined and if so, restores the MUC state from cache.
   * @private
   * @method _converse.ChatRoom#restoreFromCache
   * @returns { Boolean } Returns `true` if we're still joined, otherwise returns `false`.
   */
  async restoreFromCache() {
    if (this.isEntered() && (await this.isJoined())) {
      // We've restored the room from cache and we're still joined.
      await new Promise(r => this.features.fetch({
        'success': r,
        'error': r
      }));
      await new Promise(r => this.config.fetch({
        'success': r,
        'error': r
      }));
      await this.fetchOccupants().catch(e => _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e));
      await this.fetchMessages().catch(e => _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e));
      return true;
    } else {
      this.session.save('connection_status', _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DISCONNECTED);
      this.clearOccupantsCache();
      return false;
    }
  },

  /**
   * Join the MUC
   * @private
   * @method _converse.ChatRoom#join
   * @param { String } nick - The user's nickname
   * @param { String } [password] - Optional password, if required by the groupchat.
   *  Will fall back to the `password` value stored in the room
   *  model (if available).
   */
  async join(nick, password) {
    if (this.isEntered()) {
      // We have restored a groupchat from session storage,
      // so we don't send out a presence stanza again.
      return this;
    } // Set this early, so we don't rejoin in onHiddenChange


    this.session.save('connection_status', _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.CONNECTING);
    await this.refreshDiscoInfo();
    nick = await this.getAndPersistNickname(nick);

    if (!nick) {
      (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.safeSave)(this.session, {
        'connection_status': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.NICKNAME_REQUIRED
      });

      if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_show_logs_before_join')) {
        await this.fetchMessages();
      }

      return this;
    }
 //TOFIND blocked from sending converse presence
    return;
    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.send(await this.constructJoinPresence(password));
    return this;
  },

  /**
   * Clear stale cache and re-join a MUC we've been in before.
   * @private
   * @method _converse.ChatRoom#rejoin
   */
  rejoin() {
    this.session.save('connection_status', _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DISCONNECTED);
    this.registerHandlers();
    this.clearOccupantsCache();
    return this.join();
  },

  async constructJoinPresence(password) {
    let stanza = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$pres)({
      'id': (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.getUniqueId)(),
      'from': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.jid,
      'to': this.getRoomJIDAndNick()
    }).c('x', {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC
    }).c('history', {
      'maxstanzas': this.features.get('mam_enabled') ? 0 : _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_history_max_stanzas')
    }).up();
    password = password || this.get('password');

    if (password) {
      stanza.cnode(strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.xmlElement('password', [], password));
    }

    stanza.up(); // Go one level up, out of the `x` element.

    /**
     * *Hook* which allows plugins to update an outgoing MUC join presence stanza
     * @event _converse#constructedMUCPresence
     * @param { _converse.ChatRoom } - The MUC from which this message stanza is being sent.
     * @param { XMLElement } stanza - The stanza which will be sent out
     */

    stanza = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.hook('constructedMUCPresence', this, stanza);
    return stanza;
  },

  clearOccupantsCache() {
    if (this.occupants.length) {
      // Remove non-members when reconnecting
      this.occupants.filter(o => !o.isMember()).forEach(o => o.destroy());
    } else {
      // Looks like we haven't restored occupants from cache, so we clear it.
      this.occupants.clearStore();
    }
  },

  /**
   * Given the passed in MUC message, send a XEP-0333 chat marker.
   * @param { _converse.MUCMessage } msg
   * @param { ('received'|'displayed'|'acknowledged') } [type='displayed']
   * @param { Boolean } force - Whether a marker should be sent for the
   *  message, even if it didn't include a `markable` element.
   */
  sendMarkerForMessage(msg) {
    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'displayed';
    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!msg || !_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('send_chat_markers').includes(type) || (msg === null || msg === void 0 ? void 0 : msg.get('type')) !== 'groupchat') {
      return;
    }

    if (msg !== null && msg !== void 0 && msg.get('is_markable') || force) {
      const key = `stanza_id ${this.get('jid')}`;
      const id = msg.get(key);

      if (!id) {
        _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Can't send marker for message without stanza ID: ${key}`);
        return;
      }

      const from_jid = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(msg.get('from'));
      (0,_converse_headless_shared_actions__WEBPACK_IMPORTED_MODULE_13__.sendMarker)(from_jid, id, type, msg.get('type'));
    }
  },

  /**
   * Ensures that the user is subscribed to XEP-0437 Room Activity Indicators
   * if `muc_subscribe_to_rai` is set to `true`.
   * Only affiliated users can subscribe to RAI, but this method doesn't
   * check whether the current user is affiliated because it's intended to be
   * called after the MUC has been left and we don't have that information
   * anymore.
   * @private
   * @method _converse.ChatRoom#enableRAI
   */
  enableRAI() {
    if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_subscribe_to_rai')) {
      const muc_domain = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getDomainFromJid(this.get('jid'));
      _core_js__WEBPACK_IMPORTED_MODULE_6__.api.user.presence.send(null, muc_domain, null, (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$build)('rai', {
        'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.RAI
      }));
    }
  },

  /**
   * Handler that gets called when the 'hidden' flag is toggled.
   * @private
   * @method _converse.ChatRoom#onHiddenChange
   */
  async onHiddenChange() {
    const roomstatus = _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS;
    const conn_status = this.session.get('connection_status');

    if (this.get('hidden')) {
      if (conn_status === roomstatus.ENTERED && _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_subscribe_to_rai') && this.getOwnAffiliation() !== 'none') {
        this.sendMarkerForLastMessage('received', true);
        await this.leave();
        this.enableRAI();
      }
    } else {
      if (conn_status === roomstatus.DISCONNECTED) {
        this.rejoin();
      }

      this.clearUnreadMsgCounter();
    }
  },

  onOccupantAdded(occupant) {
    if (_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.ENTERED) && this.session.get('connection_status') === _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.ENTERED && occupant.get('show') === 'online') {
      this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.ENTERED);
    }
  },

  onOccupantRemoved(occupant) {
    if (_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.EXITED) && this.isEntered() && occupant.get('show') === 'online') {
      this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.EXITED);
    }
  },

  onOccupantShowChanged(occupant) {
    if (occupant.get('states').includes('303')) {
      return;
    }

    if (occupant.get('show') === 'offline' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.EXITED)) {
      this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.EXITED);
    } else if (occupant.get('show') === 'online' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.ENTERED)) {
      this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES.ENTERED);
    }
  },

  async onRoomEntered() {
    await this.occupants.fetchMembers();

    if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('clear_messages_on_reconnection')) {
      await this.clearMessages();
    } else {
      await this.fetchMessages();
    }
    /**
     * Triggered when the user has entered a new MUC
     * @event _converse#enteredNewRoom
     * @type { _converse.ChatRoom}
     * @example _converse.api.listen.on('enteredNewRoom', model => { ... });
     */


    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.trigger('enteredNewRoom', this);

    if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('auto_register_muc_nickname') && (await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.supports(strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_REGISTER, this.get('jid')))) {
      this.registerNickname();
    }
  },

  async onConnectionStatusChanged() {
    if (this.isEntered()) {
      if (this.get('hidden') && _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_subscribe_to_rai') && this.getOwnAffiliation() !== 'none') {
        try {
          await this.leave();
        } catch (e) {
          _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
        }

        this.enableRAI();
      } else {
        await this.onRoomEntered();
      }
    }
  },

  async onReconnection() {
    await this.rejoin();
    this.announceReconnection();
  },

  getMessagesCollection() {
    return new _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.ChatRoomMessages();
  },

  restoreSession() {
    const id = `muc.session-${_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid}-${this.get('jid')}`;
    this.session = new MUCSession({
      id
    });
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_9__.initStorage)(this.session, id, 'session');
    return new Promise(r => this.session.fetch({
      'success': r,
      'error': r
    }));
  },

  initDiscoModels() {
    let id = `converse.muc-features-${_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid}-${this.get('jid')}`;
    this.features = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__.Model(Object.assign({
      id
    }, (0,lodash_es_zipObject__WEBPACK_IMPORTED_MODULE_15__["default"])(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOM_FEATURES, _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOM_FEATURES.map(() => false))));
    this.features.browserStorage = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.createStore(id, 'session');
    this.features.listenTo(_core_js__WEBPACK_IMPORTED_MODULE_6__._converse, 'beforeLogout', () => this.features.browserStorage.flush());
    id = `converse.muc-config-${_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid}-${this.get('jid')}`;
    this.config = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__.Model({
      id
    });
    this.config.browserStorage = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.createStore(id, 'session');
    this.config.listenTo(_core_js__WEBPACK_IMPORTED_MODULE_6__._converse, 'beforeLogout', () => this.config.browserStorage.flush());
  },

  initOccupants() {
    this.occupants = new _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.ChatRoomOccupants();
    const id = `converse.occupants-${_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid}${this.get('jid')}`;
    this.occupants.browserStorage = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.createStore(id, 'session');
    this.occupants.chatroom = this;
    this.occupants.listenTo(_core_js__WEBPACK_IMPORTED_MODULE_6__._converse, 'beforeLogout', () => this.occupants.browserStorage.flush());
  },

  fetchOccupants() {
    this.occupants.fetched = new Promise(resolve => {
      this.occupants.fetch({
        'add': true,
        'silent': true,
        'success': resolve,
        'error': resolve
      });
    });
    return this.occupants.fetched;
  },

  handleAffiliationChangedMessage(stanza) {
    const item = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`x[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_USER}"] item`, stanza).pop();

    if (item) {
      const from = stanza.getAttribute('from');
      const type = stanza.getAttribute('type');
      const affiliation = item.getAttribute('affiliation');
      const jid = item.getAttribute('jid');
      const data = {
        from,
        type,
        affiliation,
        'states': [],
        'show': type == 'unavailable' ? 'offline' : 'online',
        'role': item.getAttribute('role'),
        'jid': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(jid),
        'resource': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getResourceFromJid(jid)
      };
      const occupant = this.occupants.findOccupant({
        'jid': data.jid
      });

      if (occupant) {
        occupant.save(data);
      } else {
        this.occupants.create(data);
      }
    }
  },

  async handleErrorMessageStanza(stanza) {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;
    const attrs = await (0,_parsers_js__WEBPACK_IMPORTED_MODULE_12__.parseMUCMessage)(stanza, this, _core_js__WEBPACK_IMPORTED_MODULE_6__._converse);

    if (!(await this.shouldShowErrorMessage(attrs))) {
      return;
    }

    const message = this.getMessageReferencedByError(attrs);

    if (message) {
      const new_attrs = {
        'error': attrs.error,
        'error_condition': attrs.error_condition,
        'error_text': attrs.error_text,
        'error_type': attrs.error_type,
        'editable': false
      };

      if (attrs.msgid === message.get('retraction_id')) {
        // The error message refers to a retraction
        new_attrs.retracted = undefined;
        new_attrs.retraction_id = undefined;
        new_attrs.retracted_id = undefined;

        if (!attrs.error) {
          if (attrs.error_condition === 'forbidden') {
            new_attrs.error = __("You're not allowed to retract your message.");
          } else if (attrs.error_condition === 'not-acceptable') {
            new_attrs.error = __("Your retraction was not delivered because you're not present in the groupchat.");
          } else {
            new_attrs.error = __('Sorry, an error occurred while trying to retract your message.');
          }
        }
      } else if (!attrs.error) {
        if (attrs.error_condition === 'forbidden') {
          new_attrs.error = __("Your message was not delivered because you weren't allowed to send it.");
        } else if (attrs.error_condition === 'not-acceptable') {
          new_attrs.error = __("Your message was not delivered because you're not present in the groupchat.");
        } else {
          new_attrs.error = __('Sorry, an error occurred while trying to send your message.');
        }
      }

      message.save(new_attrs);
    } else {
      this.createMessage(attrs);
    }
  },

  /**
   * Handles incoming message stanzas from the service that hosts this MUC
   * @private
   * @method _converse.ChatRoom#handleMessageFromMUCHost
   * @param { XMLElement } stanza
   */
  handleMessageFromMUCHost(stanza) {
    if (this.isEntered()) {
      // We're not interested in activity indicators when already joined to the room
      return;
    }

    const rai = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`rai[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.RAI}"]`, stanza).pop();
    const active_mucs = Array.from((rai === null || rai === void 0 ? void 0 : rai.querySelectorAll('activity')) || []).map(m => m.textContent);

    if (active_mucs.includes(this.get('jid'))) {
      this.save({
        'has_activity': true,
        'num_unread_general': 0 // Either/or between activity and unreads

      });
    }
  },

  /**
   * Handles XEP-0452 MUC Mention Notification messages
   * @private
   * @method _converse.ChatRoom#handleForwardedMentions
   * @param { XMLElement } stanza
   */
  handleForwardedMentions(stanza) {
    if (this.isEntered()) {
      // Avoid counting mentions twice
      return;
    }

    const msgs = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`mentions[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MENTIONS}"] forwarded[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.FORWARD}"] message[type="groupchat"]`, stanza);
    const muc_jid = this.get('jid');
    const mentions = msgs.filter(m => strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(m.getAttribute('from')) === muc_jid);

    if (mentions.length) {
      this.save({
        'has_activity': true,
        'num_unread': this.get('num_unread') + mentions.length
      });
      mentions.forEach(async stanza => {
        const attrs = await (0,_parsers_js__WEBPACK_IMPORTED_MODULE_12__.parseMUCMessage)(stanza, this, _core_js__WEBPACK_IMPORTED_MODULE_6__._converse);
        const data = {
          stanza,
          attrs,
          'chatbox': this
        };
        _core_js__WEBPACK_IMPORTED_MODULE_6__.api.trigger('message', data);
      });
    }
  },

  /**
   * Parses an incoming message stanza and queues it for processing.
   * @private
   * @method _converse.ChatRoom#handleMessageStanza
   * @param { XMLElement } stanza
   */
  async handleMessageStanza(stanza) {
    const type = stanza.getAttribute('type');

    if (type === 'error') {
      return this.handleErrorMessageStanza(stanza);
    }

    if (type === 'groupchat') {
      if ((0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_10__.isArchived)(stanza)) {
        // MAM messages are handled in converse-mam.
        // We shouldn't get MAM messages here because
        // they shouldn't have a `type` attribute.
        return _log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Received a MAM message with type "groupchat"`);
      }

      this.createInfoMessages(stanza);
      this.fetchFeaturesIfConfigurationChanged(stanza);
    } else if (!type) {
      return this.handleForwardedMentions(stanza);
    }
    /**
     * @typedef { Object } MUCMessageData
     * An object containing the parsed {@link MUCMessageAttributes} and
     * current {@link ChatRoom}.
     * @property { MUCMessageAttributes } attrs
     * @property { ChatRoom } chatbox
     */


    let attrs;

    try {
      attrs = await (0,_parsers_js__WEBPACK_IMPORTED_MODULE_12__.parseMUCMessage)(stanza, this, _core_js__WEBPACK_IMPORTED_MODULE_6__._converse);
    } catch (e) {
      return _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
    }

    const data = {
      stanza,
      attrs,
      'chatbox': this
    };
    /**
     * Triggered when a groupchat message stanza has been received and parsed.
     * @event _converse#message
     * @type { object }
     * @property { module:converse-muc~MUCMessageData } data
     */

    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.trigger('message', data);
    return attrs && this.queueMessage(attrs);
  },

  /**
   * Register presence and message handlers relevant to this groupchat
   * @private
   * @method _converse.ChatRoom#registerHandlers
   */
  registerHandlers() {
    const muc_jid = this.get('jid');
    const muc_domain = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getDomainFromJid(muc_jid);
    this.removeHandlers();
    this.presence_handler = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.addHandler(stanza => this.onPresence(stanza) || true, null, 'presence', null, null, muc_jid, {
      'ignoreNamespaceFragment': true,
      'matchBareFromJid': true
    });
    this.domain_presence_handler = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.addHandler(stanza => this.onPresenceFromMUCHost(stanza) || true, null, 'presence', null, null, muc_domain);
    this.message_handler = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.addHandler(stanza => !!this.handleMessageStanza(stanza) || true, null, 'message', null, null, muc_jid, {
      'matchBareFromJid': true
    });
    this.domain_message_handler = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.addHandler(stanza => this.handleMessageFromMUCHost(stanza) || true, null, 'message', null, null, muc_domain);
    this.affiliation_message_handler = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.addHandler(stanza => this.handleAffiliationChangedMessage(stanza) || true, strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_USER, 'message', null, null, muc_jid);
  },

  removeHandlers() {
    // Remove the presence and message handlers that were
    // registered for this groupchat.
    if (this.message_handler) {
      _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.deleteHandler(this.message_handler);
      delete this.message_handler;
    }

    if (this.domain_message_handler) {
      _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.deleteHandler(this.domain_message_handler);
      delete this.domain_message_handler;
    }

    if (this.presence_handler) {
      _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.deleteHandler(this.presence_handler);
      delete this.presence_handler;
    }

    if (this.domain_presence_handler) {
      _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.deleteHandler(this.domain_presence_handler);
      delete this.domain_presence_handler;
    }

    if (this.affiliation_message_handler) {
      _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.deleteHandler(this.affiliation_message_handler);
      delete this.affiliation_message_handler;
    }

    return this;
  },

  invitesAllowed() {
    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('allow_muc_invitations') && (this.features.get('open') || this.getOwnAffiliation() === 'owner');
  },

  getDisplayName() {
    const name = this.get('name');

    if (name) {
      return name;
    } else if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('locked_muc_domain') === 'hidden') {
      return strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getNodeFromJid(this.get('jid'));
    } else {
      return this.get('jid');
    }
  },

  /**
   * Sends a message stanza to the XMPP server and expects a reflection
   * or error message within a specific timeout period.
   * @private
   * @method _converse.ChatRoom#sendTimedMessage
   * @param { _converse.Message|XMLElement } message
   * @returns { Promise<XMLElement>|Promise<_converse.TimeoutError> } Returns a promise
   *  which resolves with the reflected message stanza or with an error stanza or {@link _converse.TimeoutError}.
   */
  sendTimedMessage(el) {
    if (typeof el.tree === 'function') {
      el = el.tree();
    }

    let id = el.getAttribute('id');

    if (!id) {
      // inject id if not found
      id = this.getUniqueId('sendIQ');
      el.setAttribute('id', id);
    }

    const promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_8__.getOpenPromise)();

    const timeoutHandler = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.addTimedHandler(_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.STANZA_TIMEOUT, () => {
      _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.deleteHandler(handler);

      const err = new _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.TimeoutError('Timeout Error: No response from server');
      promise.resolve(err);
      return false;
    });

    const handler = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.addHandler(stanza => {
      timeoutHandler && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.deleteTimedHandler(timeoutHandler);
      promise.resolve(stanza);
    }, null, 'message', ['error', 'groupchat'], id);

    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.send(el);
    return promise;
  },

  /**
   * Retract one of your messages in this groupchat
   * @private
   * @method _converse.ChatRoom#retractOwnMessage
   * @param { _converse.Message } message - The message which we're retracting.
   */
  async retractOwnMessage(message) {
    const __ = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.__;
    const origin_id = message.get('origin_id');

    if (!origin_id) {
      throw new Error("Can't retract message without a XEP-0359 Origin ID");
    }

    const editable = message.get('editable');
    const stanza = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$msg)({
      'id': (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.getUniqueId)(),
      'to': this.get('jid'),
      'type': 'groupchat'
    }).c('store', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.HINTS
    }).up().c('apply-to', {
      'id': origin_id,
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.FASTEN
    }).c('retract', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.RETRACT
    }); // Optimistic save

    message.set({
      'retracted': new Date().toISOString(),
      'retracted_id': origin_id,
      'retraction_id': stanza.nodeTree.getAttribute('id'),
      'editable': false
    });
    const result = await this.sendTimedMessage(stanza);

    if (_utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isErrorStanza(result)) {
      _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(result);
    } else if (result instanceof _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.TimeoutError) {
      _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(result);
      message.save({
        editable,
        'error_type': 'timeout',
        'error': __('A timeout happened while while trying to retract your message.'),
        'retracted': undefined,
        'retracted_id': undefined,
        'retraction_id': undefined
      });
    }
  },

  /**
   * Retract someone else's message in this groupchat.
   * @private
   * @method _converse.ChatRoom#retractOtherMessage
   * @param { _converse.Message } message - The message which we're retracting.
   * @param { string } [reason] - The reason for retracting the message.
   * @example
   *  const room = await api.rooms.get(jid);
   *  const message = room.messages.findWhere({'body': 'Get rich quick!'});
   *  room.retractOtherMessage(message, 'spam');
   */
  async retractOtherMessage(message, reason) {
    const editable = message.get('editable'); // Optimistic save

    message.save({
      'moderated': 'retracted',
      'moderated_by': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid,
      'moderated_id': message.get('msgid'),
      'moderation_reason': reason,
      'editable': false
    });
    const result = await this.sendRetractionIQ(message, reason);

    if (result === null || _utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isErrorStanza(result)) {
      // Undo the save if something went wrong
      message.save({
        editable,
        'moderated': undefined,
        'moderated_by': undefined,
        'moderated_id': undefined,
        'moderation_reason': undefined
      });
    }

    return result;
  },

  /**
   * Sends an IQ stanza to the XMPP server to retract a message in this groupchat.
   * @private
   * @method _converse.ChatRoom#sendRetractionIQ
   * @param { _converse.Message } message - The message which we're retracting.
   * @param { string } [reason] - The reason for retracting the message.
   */
  sendRetractionIQ(message, reason) {
    const iq = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      'to': this.get('jid'),
      'type': 'set'
    }).c('apply-to', {
      'id': message.get(`stanza_id ${this.get('jid')}`),
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.FASTEN
    }).c('moderate', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MODERATE
    }).c('retract', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.RETRACT
    }).up().c('reason').t(reason || '');
    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ(iq, null, false);
  },

  /**
   * Sends an IQ stanza to the XMPP server to destroy this groupchat. Not
   * to be confused with the {@link _converse.ChatRoom#destroy}
   * method, which simply removes the room from the local browser storage cache.
   * @private
   * @method _converse.ChatRoom#sendDestroyIQ
   * @param { string } [reason] - The reason for destroying the groupchat.
   * @param { string } [new_jid] - The JID of the new groupchat which replaces this one.
   */
  sendDestroyIQ(reason, new_jid) {
    const destroy = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$build)('destroy');

    if (new_jid) {
      destroy.attrs({
        'jid': new_jid
      });
    }

    const iq = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      'to': this.get('jid'),
      'type': 'set'
    }).c('query', {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_OWNER
    }).cnode(destroy.node);

    if (reason && reason.length > 0) {
      iq.c('reason', reason);
    }

    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ(iq);
  },

  /**
   * Leave the groupchat.
   * @private
   * @method _converse.ChatRoom#leave
   * @param { string } [exit_msg] - Message to indicate your reason for leaving
   */
  async leave(exit_msg) {
    var _converse$disco_entit;

    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.connection.connected() && _core_js__WEBPACK_IMPORTED_MODULE_6__.api.user.presence.send('unavailable', this.getRoomJIDAndNick(), exit_msg); // Delete the features model

    if (this.features) {
      await new Promise(resolve => this.features.destroy({
        'success': resolve,
        'error': (_, e) => {
          _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
          resolve();
        }
      }));
    } // Delete disco entity


    const disco_entity = (_converse$disco_entit = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.disco_entities) === null || _converse$disco_entit === void 0 ? void 0 : _converse$disco_entit.get(this.get('jid'));

    if (disco_entity) {
      await new Promise(resolve => disco_entity.destroy({
        'success': resolve,
        'error': (_, e) => {
          _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
          resolve();
        }
      }));
    }

    (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.safeSave)(this.session, {
      'connection_status': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DISCONNECTED
    });
  },

  async close(ev) {
    (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.safeSave)(this.session, {
      'connection_status': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.CLOSING
    });
    this.sendMarkerForLastMessage('received', true);
    await this.unregisterNickname();
    await this.leave();
    this.occupants.clearStore();

    if ((ev === null || ev === void 0 ? void 0 : ev.name) !== 'closeAllChatBoxes' && _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_clear_messages_on_leave')) {
      this.clearMessages();
    } // Delete the session model


    await new Promise(resolve => this.session.destroy({
      'success': resolve,
      'error': (_, e) => {
        _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
        resolve();
      }
    }));
    return _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.ChatBox.prototype.close.call(this);
  },

  canModerateMessages() {
    const self = this.getOwnOccupant();
    return self && self.isModerator() && _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.supports(strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MODERATE, this.get('jid'));
  },

  /**
   * Return an array of unique nicknames based on all occupants and messages in this MUC.
   * @private
   * @method _converse.ChatRoom#getAllKnownNicknames
   * @returns { String[] }
   */
  getAllKnownNicknames() {
    return [...new Set([...this.occupants.map(o => o.get('nick')), ...this.messages.map(m => m.get('nick'))])].filter(n => n);
  },

  getAllKnownNicknamesRegex() {
    const longNickString = this.getAllKnownNicknames().map(n => _utils_parse_helpers__WEBPACK_IMPORTED_MODULE_1__["default"].escapeRegexString(n)).join('|');
    return RegExp(`(?:\\p{P}|\\p{Z}|^)@(${longNickString})(?![\\w@-])`, 'uig');
  },

  getOccupantByJID(jid) {
    return this.occupants.findOccupant({
      jid
    });
  },

  getOccupantByNickname(nick) {
    return this.occupants.findOccupant({
      nick
    });
  },

  /**
   * Given a text message, look for `@` mentions and turn them into
   * XEP-0372 references
   * @param { String } text
   */
  parseTextForReferences(text) {
    const mentions_regex = /(\p{P}|\p{Z}|^)([@][\w_-]+(?:\.\w+)*)/giu;

    if (!text || !mentions_regex.test(text)) {
      return [text, []];
    }

    const getMatchingNickname = _utils_parse_helpers__WEBPACK_IMPORTED_MODULE_1__["default"].findFirstMatchInArray(this.getAllKnownNicknames());

    const uriFromNickname = nickname => {
      const jid = this.get('jid');
      const occupant = this.getOccupant(nickname) || this.getOccupant(jid);
      const uri = this.features.get('nonanonymous') && (occupant === null || occupant === void 0 ? void 0 : occupant.get('jid')) || `${jid}/${nickname}`;
      return encodeURI(`xmpp:${uri}`);
    };

    const matchToReference = match => {
      let at_sign_index = match[0].indexOf('@');

      if (match[0][at_sign_index + 1] === '@') {
        // edge-case
        at_sign_index += 1;
      }

      const begin = match.index + at_sign_index;
      const end = begin + match[0].length - at_sign_index;
      const value = getMatchingNickname(match[1]);
      const type = 'mention';
      const uri = uriFromNickname(value);
      return {
        begin,
        end,
        value,
        type,
        uri
      };
    };

    const regex = this.getAllKnownNicknamesRegex();
    const mentions = [...text.matchAll(regex)].filter(m => !m[0].startsWith('/'));
    const references = mentions.map(matchToReference);
    const [updated_message, updated_references] = _utils_parse_helpers__WEBPACK_IMPORTED_MODULE_1__["default"].reduceTextFromReferences(text, references);
    return [updated_message, updated_references];
  },

  async getOutgoingMessageAttributes(attrs) {
    var _attrs;

    const is_spoiler = this.get('composing_spoiler');
    let text = '',
        references;

    if ((_attrs = attrs) !== null && _attrs !== void 0 && _attrs.body) {
      [text, references] = this.parseTextForReferences(attrs.body);
    }

    const origin_id = (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.getUniqueId)();
    const body = text ? _utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].shortnamesToUnicode(text) : undefined;
    attrs = Object.assign({}, attrs, {
      body,
      is_spoiler,
      origin_id,
      references,
      'id': origin_id,
      'msgid': origin_id,
      'from': `${this.get('jid')}/${this.get('nick')}`,
      'fullname': this.get('nick'),
      'is_only_emojis':  false,
      'message': body,
      'nick': this.get('nick'),
      'sender': 'me',
      'type': 'groupchat'
    }, (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_10__.getMediaURLsMetadata)(text));
    /**
     * *Hook* which allows plugins to update the attributes of an outgoing
     * message.
     * @event _converse#getOutgoingMessageAttributes
     */

    attrs = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.hook('getOutgoingMessageAttributes', this, attrs);
    return attrs;
  },

  /**
   * Utility method to construct the JID for the current user as occupant of the groupchat.
   * @private
   * @method _converse.ChatRoom#getRoomJIDAndNick
   * @returns {string} - The groupchat JID with the user's nickname added at the end.
   * @example groupchat@conference.example.org/nickname
   */
  getRoomJIDAndNick() {
    const nick = this.get('nick');
    const jid = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(this.get('jid'));
    return jid + (nick !== null ? `/${nick}` : '');
  },

  /**
   * Sends a message with the current XEP-0085 chat state of the user
   * as taken from the `chat_state` attribute of the {@link _converse.ChatRoom}.
   * @private
   * @method _converse.ChatRoom#sendChatState
   */
  sendChatState() {
    if (!_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('send_chat_state_notifications') || !this.get('chat_state') || !this.isEntered() || this.features.get('moderated') && this.getOwnRole() === 'visitor') {
      return;
    }

    const allowed = _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('send_chat_state_notifications');

    if (Array.isArray(allowed) && !allowed.includes(this.get('chat_state'))) {
      return;
    }

    const chat_state = this.get('chat_state');

    if (chat_state === _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.GONE) {
      // <gone/> is not applicable within MUC context
      return;
    }

    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.send((0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$msg)({
      'to': this.get('jid'),
      'type': 'groupchat'
    }).c(chat_state, {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.CHATSTATES
    }).up().c('no-store', {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.HINTS
    }).up().c('no-permanent-store', {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.HINTS
    }));
  },

  /**
   * Send a direct invitation as per XEP-0249
   * @private
   * @method _converse.ChatRoom#directInvite
   * @param { String } recipient - JID of the person being invited
   * @param { String } [reason] - Reason for the invitation
   */
  directInvite(recipient, reason) {
    if (this.features.get('membersonly')) {
      // When inviting to a members-only groupchat, we first add
      // the person to the member list by giving them an
      // affiliation of 'member' otherwise they won't be able to join.
      this.updateMemberLists([{
        'jid': recipient,
        'affiliation': 'member',
        'reason': reason
      }]);
    }

    const attrs = {
      'xmlns': 'jabber:x:conference',
      'jid': this.get('jid')
    };

    if (reason !== null) {
      attrs.reason = reason;
    }

    if (this.get('password')) {
      attrs.password = this.get('password');
    }

    const invitation = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$msg)({
      'from': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.jid,
      'to': recipient,
      'id': (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.getUniqueId)()
    }).c('x', attrs);
    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.send(invitation);
    /**
     * After the user has sent out a direct invitation (as per XEP-0249),
     * to a roster contact, asking them to join a room.
     * @event _converse#chatBoxMaximized
     * @type {object}
     * @property {_converse.ChatRoom} room
     * @property {string} recipient - The JID of the person being invited
     * @property {string} reason - The original reason for the invitation
     * @example _converse.api.listen.on('chatBoxMaximized', view => { ... });
     */

    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.trigger('roomInviteSent', {
      'room': this,
      'recipient': recipient,
      'reason': reason
    });
  },

  /**
   * Refresh the disco identity, features and fields for this {@link _converse.ChatRoom}.
   * *features* are stored on the features {@link Model} attribute on this {@link _converse.ChatRoom}.
   * *fields* are stored on the config {@link Model} attribute on this {@link _converse.ChatRoom}.
   * @private
   * @returns {Promise}
   */
  refreshDiscoInfo() {
    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.refresh(this.get('jid')).then(() => this.getDiscoInfo()).catch(e => _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e));
  },

  /**
   * Fetch the *extended* MUC info from the server and cache it locally
   * https://xmpp.org/extensions/xep-0045.html#disco-roominfo
   * @private
   * @method _converse.ChatRoom#getDiscoInfo
   * @returns {Promise}
   */
  getDiscoInfo() {
    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.getIdentity('conference', 'text', this.get('jid')).then(identity => this.save({
      'name': identity === null || identity === void 0 ? void 0 : identity.get('name')
    })).then(() => this.getDiscoInfoFields()).then(() => this.getDiscoInfoFeatures()).catch(e => _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e));
  },

  /**
   * Fetch the *extended* MUC info fields from the server and store them locally
   * in the `config` {@link Model} attribute.
   * See: https://xmpp.org/extensions/xep-0045.html#disco-roominfo
   * @private
   * @method _converse.ChatRoom#getDiscoInfoFields
   * @returns {Promise}
   */
  async getDiscoInfoFields() {
    const fields = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.getFields(this.get('jid'));
    const config = fields.reduce((config, f) => {
      const name = f.get('var');

      if (name !== null && name !== void 0 && name.startsWith('muc#roominfo_')) {
        config[name.replace('muc#roominfo_', '')] = f.get('value');
      }

      return config;
    }, {});
    this.config.save(config);
  },

  /**
   * Use converse-disco to populate the features {@link Model} which
   * is stored as an attibute on this {@link _converse.ChatRoom}.
   * The results may be cached. If you want to force fetching the features from the
   * server, call {@link _converse.ChatRoom#refreshDiscoInfo} instead.
   * @private
   * @returns {Promise}
   */
  async getDiscoInfoFeatures() {
    const features = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.getFeatures(this.get('jid'));
    const attrs = Object.assign((0,lodash_es_zipObject__WEBPACK_IMPORTED_MODULE_15__["default"])(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOM_FEATURES, _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOM_FEATURES.map(() => false)), {
      'fetched': new Date().toISOString()
    });
    features.each(feature => {
      const fieldname = feature.get('var');

      if (!fieldname.startsWith('muc_')) {
        if (fieldname === strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MAM) {
          attrs.mam_enabled = true;
        } else {
          attrs[fieldname] = true;
        }

        return;
      }

      attrs[fieldname.replace('muc_', '')] = true;
    });
    this.features.save(attrs);
  },

  /**
   * Given a <field> element, return a copy with a <value> child if
   * we can find a value for it in this rooms config.
   * @private
   * @method _converse.ChatRoom#addFieldValue
   * @returns { Element }
   */
  addFieldValue(field) {
    const type = field.getAttribute('type');

    if (type === 'fixed') {
      return field;
    }

    const fieldname = field.getAttribute('var').replace('muc#roomconfig_', '');
    const config = this.get('roomconfig');

    if (fieldname in config) {
      let values;

      switch (type) {
        case 'boolean':
          values = [config[fieldname] ? 1 : 0];
          break;

        case 'list-multi':
          values = config[fieldname];
          break;

        default:
          values = [config[fieldname]];
      }

      field.innerHTML = values.map(v => (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$build)('value').t(v)).join('');
    }

    return field;
  },

  /**
   * Automatically configure the groupchat based on this model's
   * 'roomconfig' data.
   * @private
   * @method _converse.ChatRoom#autoConfigureChatRoom
   * @returns { Promise<XMLElement> }
   * Returns a promise which resolves once a response IQ has
   * been received.
   */
  async autoConfigureChatRoom() {
    const stanza = await this.fetchRoomConfiguration();
    const fields = sizzle__WEBPACK_IMPORTED_MODULE_2___default()('field', stanza);
    const configArray = fields.map(f => this.addFieldValue(f));

    if (configArray.length) {
      return this.sendConfiguration(configArray);
    }
  },

  /**
   * Send an IQ stanza to fetch the groupchat configuration data.
   * Returns a promise which resolves once the response IQ
   * has been received.
   * @private
   * @method _converse.ChatRoom#fetchRoomConfiguration
   * @returns { Promise<XMLElement> }
   */
  fetchRoomConfiguration() {
    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ((0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      'to': this.get('jid'),
      'type': 'get'
    }).c('query', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_OWNER
    }));
  },

  /**
   * Sends an IQ stanza with the groupchat configuration.
   * @private
   * @method _converse.ChatRoom#sendConfiguration
   * @param { Array } config - The groupchat configuration
   * @returns { Promise<XMLElement> } - A promise which resolves with
   * the `result` stanza received from the XMPP server.
   */
  sendConfiguration() {
    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    const iq = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      to: this.get('jid'),
      type: 'set'
    }).c('query', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_OWNER
    }).c('x', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.XFORM,
      type: 'submit'
    });
    config.forEach(node => iq.cnode(node).up());
    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ(iq);
  },

  onCommandError(err) {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;
    _log__WEBPACK_IMPORTED_MODULE_0__["default"].fatal(err);

    const message = __('Sorry, an error happened while running the command.') + ' ' + __("Check your browser's developer console for details.");

    this.createMessage({
      message,
      'type': 'error'
    });
  },

  getNickOrJIDFromCommandArgs(args) {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;

    if (_utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isValidJID(args.trim())) {
      return args.trim();
    }

    if (!args.startsWith('@')) {
      args = '@' + args;
    }

    const [text, references] = this.parseTextForReferences(args); // eslint-disable-line no-unused-vars

    if (!references.length) {
      const message = __("Error: couldn't find a groupchat participant based on your arguments");

      this.createMessage({
        message,
        'type': 'error'
      });
      return;
    }

    if (references.length > 1) {
      const message = __('Error: found multiple groupchat participant based on your arguments');

      this.createMessage({
        message,
        'type': 'error'
      });
      return;
    }

    const nick_or_jid = references.pop().value;
    const reason = args.split(nick_or_jid, 2)[1];

    if (reason && !reason.startsWith(' ')) {
      const message = __("Error: couldn't find a groupchat participant based on your arguments");

      this.createMessage({
        message,
        'type': 'error'
      });
      return;
    }

    return nick_or_jid;
  },

  validateRoleOrAffiliationChangeArgs(command, args) {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;

    if (!args) {
      const message = __('Error: the "%1$s" command takes two arguments, the user\'s nickname and optionally a reason.', command);

      this.createMessage({
        message,
        'type': 'error'
      });
      return false;
    }

    return true;
  },

  getAllowedCommands() {
    let allowed_commands = ['clear', 'help', 'me', 'nick', 'register'];

    if (this.config.get('changesubject') || ['owner', 'admin'].includes(this.getOwnAffiliation())) {
      allowed_commands = [...allowed_commands, ...['subject', 'topic']];
    }

    const occupant = this.occupants.findWhere({
      'jid': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid
    });

    if (this.verifyAffiliations(['owner'], occupant, false)) {
      allowed_commands = allowed_commands.concat(OWNER_COMMANDS).concat(ADMIN_COMMANDS);
    } else if (this.verifyAffiliations(['admin'], occupant, false)) {
      allowed_commands = allowed_commands.concat(ADMIN_COMMANDS);
    }

    if (this.verifyRoles(['moderator'], occupant, false)) {
      allowed_commands = allowed_commands.concat(MODERATOR_COMMANDS).concat(VISITOR_COMMANDS);
    } else if (!this.verifyRoles(['visitor', 'participant', 'moderator'], occupant, false)) {
      allowed_commands = allowed_commands.concat(VISITOR_COMMANDS);
    }

    allowed_commands.sort();

    if (Array.isArray(_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_disable_slash_commands'))) {
      return allowed_commands.filter(c => !_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_disable_slash_commands').includes(c));
    } else {
      return allowed_commands;
    }
  },

  verifyAffiliations(affiliations, occupant) {
    let show_error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;

    if (!Array.isArray(affiliations)) {
      throw new TypeError('affiliations must be an Array');
    }

    if (!affiliations.length) {
      return true;
    }

    occupant = occupant || this.occupants.findWhere({
      'jid': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid
    });

    if (occupant) {
      const a = occupant.get('affiliation');

      if (affiliations.includes(a)) {
        return true;
      }
    }

    if (show_error) {
      const message = __('Forbidden: you do not have the necessary affiliation in order to do that.');

      this.createMessage({
        message,
        'type': 'error'
      });
    }

    return false;
  },

  verifyRoles(roles, occupant) {
    let show_error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;

    if (!Array.isArray(roles)) {
      throw new TypeError('roles must be an Array');
    }

    if (!roles.length) {
      return true;
    }

    occupant = occupant || this.occupants.findWhere({
      'jid': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid
    });

    if (occupant) {
      const role = occupant.get('role');

      if (roles.includes(role)) {
        return true;
      }
    }

    if (show_error) {
      const message = __('Forbidden: you do not have the necessary role in order to do that.');

      this.createMessage({
        message,
        'type': 'error',
        'is_ephemeral': 20000
      });
    }

    return false;
  },

  /**
   * Returns the `role` which the current user has in this MUC
   * @private
   * @method _converse.ChatRoom#getOwnRole
   * @returns { ('none'|'visitor'|'participant'|'moderator') }
   */
  getOwnRole() {
    var _this$getOwnOccupant, _this$getOwnOccupant$;

    return (_this$getOwnOccupant = this.getOwnOccupant()) === null || _this$getOwnOccupant === void 0 ? void 0 : (_this$getOwnOccupant$ = _this$getOwnOccupant.attributes) === null || _this$getOwnOccupant$ === void 0 ? void 0 : _this$getOwnOccupant$.role;
  },

  /**
   * Returns the `affiliation` which the current user has in this MUC
   * @private
   * @method _converse.ChatRoom#getOwnAffiliation
   * @returns { ('none'|'outcast'|'member'|'admin'|'owner') }
   */
  getOwnAffiliation() {
    var _this$getOwnOccupant2, _this$getOwnOccupant3;

    return ((_this$getOwnOccupant2 = this.getOwnOccupant()) === null || _this$getOwnOccupant2 === void 0 ? void 0 : (_this$getOwnOccupant3 = _this$getOwnOccupant2.attributes) === null || _this$getOwnOccupant3 === void 0 ? void 0 : _this$getOwnOccupant3.affiliation) || 'none';
  },

  /**
   * Get the {@link _converse.ChatRoomOccupant} instance which
   * represents the current user.
   * @method _converse.ChatRoom#getOwnOccupant
   * @returns { _converse.ChatRoomOccupant }
   */
  getOwnOccupant() {
    return this.occupants.getOwnOccupant();
  },

  /**
   * Send a presence stanza to update the user's nickname in this MUC.
   * @param { String } nick
   */
  async setNickname(nick) {
    if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('auto_register_muc_nickname') && (await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.supports(strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_REGISTER, this.get('jid')))) {
      const old_nick = this.get('nick');
      this.set({
        nick
      });

      try {
        await this.registerNickname();
      } catch (e) {
        const {
          __
        } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;
        _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);

        const message = __("Error: couldn't register new nickname in members only room");

        this.createMessage({
          message,
          'type': 'error',
          'is_ephemeral': true
        });
        this.set({
          'nick': old_nick
        });
        return;
      }
    }

    const jid = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(this.get('jid'));
    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.send((0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$pres)({
      'from': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.jid,
      'to': `${jid}/${nick}`,
      'id': (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.getUniqueId)()
    }).tree());
  },

  /**
   * Send an IQ stanza to modify an occupant's role
   * @private
   * @method _converse.ChatRoom#setRole
   * @param { _converse.ChatRoomOccupant } occupant
   * @param { String } role
   * @param { String } reason
   * @param { function } onSuccess - callback for a succesful response
   * @param { function } onError - callback for an error response
   */
  setRole(occupant, role, reason, onSuccess, onError) {
    const item = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$build)('item', {
      'nick': occupant.get('nick'),
      role
    });
    const iq = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      'to': this.get('jid'),
      'type': 'set'
    }).c('query', {
      xmlns: strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_ADMIN
    }).cnode(item.node);

    if (reason !== null) {
      iq.c('reason', reason);
    }

    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ(iq).then(onSuccess).catch(onError);
  },

  /**
   * @private
   * @method _converse.ChatRoom#getOccupant
   * @param { String } nickname_or_jid - The nickname or JID of the occupant to be returned
   * @returns { _converse.ChatRoomOccupant }
   */
  getOccupant(nickname_or_jid) {
    return _utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isValidJID(nickname_or_jid) ? this.getOccupantByJID(nickname_or_jid) : this.getOccupantByNickname(nickname_or_jid);
  },

  /**
   * Return an array of occupant models that have the required role
   * @private
   * @method _converse.ChatRoom#getOccupantsWithRole
   * @param { String } role
   * @returns { _converse.ChatRoomOccupant[] }
   */
  getOccupantsWithRole(role) {
    return this.getOccupantsSortedBy('nick').filter(o => o.get('role') === role).map(item => {
      return {
        'jid': item.get('jid'),
        'nick': item.get('nick'),
        'role': item.get('role')
      };
    });
  },

  /**
   * Return an array of occupant models that have the required affiliation
   * @private
   * @method _converse.ChatRoom#getOccupantsWithAffiliation
   * @param { String } affiliation
   * @returns { _converse.ChatRoomOccupant[] }
   */
  getOccupantsWithAffiliation(affiliation) {
    return this.getOccupantsSortedBy('nick').filter(o => o.get('affiliation') === affiliation).map(item => {
      return {
        'jid': item.get('jid'),
        'nick': item.get('nick'),
        'affiliation': item.get('affiliation')
      };
    });
  },

  /**
   * Return an array of occupant models, sorted according to the passed-in attribute.
   * @private
   * @method _converse.ChatRoom#getOccupantsSortedBy
   * @param { String } attr - The attribute to sort the returned array by
   * @returns { _converse.ChatRoomOccupant[] }
   */
  getOccupantsSortedBy(attr) {
    return Array.from(this.occupants.models).sort((a, b) => a.get(attr) < b.get(attr) ? -1 : a.get(attr) > b.get(attr) ? 1 : 0);
  },

  /**
   * Fetch the lists of users with the given affiliations.
   * Then compute the delta between those users and
   * the passed in members, and if it exists, send the delta
   * to the XMPP server to update the member list.
   * @private
   * @method _converse.ChatRoom#updateMemberLists
   * @param { object } members - Map of member jids and affiliations.
   * @returns { Promise }
   *  A promise which is resolved once the list has been
   *  updated or once it's been established there's no need
   *  to update the list.
   */
  async updateMemberLists(members) {
    const muc_jid = this.get('jid');
    const all_affiliations = ['member', 'admin', 'owner'];
    const aff_lists = await Promise.all(all_affiliations.map(a => (0,_affiliations_utils_js__WEBPACK_IMPORTED_MODULE_7__.getAffiliationList)(a, muc_jid)));
    const old_members = aff_lists.reduce((acc, val) => _utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isErrorObject(val) ? acc : [...val, ...acc], []);
    await (0,_affiliations_utils_js__WEBPACK_IMPORTED_MODULE_7__.setAffiliations)(muc_jid, (0,_affiliations_utils_js__WEBPACK_IMPORTED_MODULE_7__.computeAffiliationsDelta)(true, false, members, old_members));
    await this.occupants.fetchMembers();
  },

  /**
   * Given a nick name, save it to the model state, otherwise, look
   * for a server-side reserved nickname or default configured
   * nickname and if found, persist that to the model state.
   * @private
   * @method _converse.ChatRoom#getAndPersistNickname
   * @returns { Promise<string> } A promise which resolves with the nickname
   */
  async getAndPersistNickname(nick) {
    nick = nick || this.get('nick') || (await this.getReservedNick()) || _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.getDefaultMUCNickname();
    if (nick) (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.safeSave)(this, {
      nick
    }, {
      'silent': true
    });
    return nick;
  },

  /**
   * Use service-discovery to ask the XMPP server whether
   * this user has a reserved nickname for this groupchat.
   * If so, we'll use that, otherwise we render the nickname form.
   * @private
   * @method _converse.ChatRoom#getReservedNick
   * @returns { Promise<string> } A promise which resolves with the reserved nick or null
   */
  async getReservedNick() {
    const stanza = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      'to': this.get('jid'),
      'from': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.jid,
      'type': 'get'
    }).c('query', {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.DISCO_INFO,
      'node': 'x-roomuser-item'
    });
    const result = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ(stanza, null, false);

    if (_utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isErrorObject(result)) {
      throw result;
    } // Result might be undefined due to a timeout


    const identity_el = result === null || result === void 0 ? void 0 : result.querySelector('query[node="x-roomuser-item"] identity');
    return identity_el ? identity_el.getAttribute('name') : null;
  },

  /**
   * Send an IQ stanza to the MUC to register this user's nickname.
   * This sets the user's affiliation to 'member' (if they weren't affiliated
   * before) and reserves the nickname for this user, thereby preventing other
   * users from using it in this MUC.
   * See https://xmpp.org/extensions/xep-0045.html#register
   * @private
   * @method _converse.ChatRoom#registerNickname
   */
  async registerNickname() {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;
    const nick = this.get('nick');
    const jid = this.get('jid');
    let iq, err_msg;

    try {
      iq = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ((0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
        'to': jid,
        'type': 'get'
      }).c('query', {
        'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_REGISTER
      }));
    } catch (e) {
      if (sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`not-allowed[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, e).length) {
        err_msg = __("You're not allowed to register yourself in this groupchat.");
      } else if (sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`registration-required[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, e).length) {
        err_msg = __("You're not allowed to register in this groupchat because it's members-only.");
      }

      _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
      return err_msg;
    }

    const required_fields = sizzle__WEBPACK_IMPORTED_MODULE_2___default()('field required', iq).map(f => f.parentElement);

    if (required_fields.length > 1 && required_fields[0].getAttribute('var') !== 'muc#register_roomnick') {
      return _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Can't register the user register in the groupchat ${jid} due to the required fields`);
    }

    try {
      await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ((0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
        'to': jid,
        'type': 'set'
      }).c('query', {
        'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_REGISTER
      }).c('x', {
        'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.XFORM,
        'type': 'submit'
      }).c('field', {
        'var': 'FORM_TYPE'
      }).c('value').t('http://jabber.org/protocol/muc#register').up().up().c('field', {
        'var': 'muc#register_roomnick'
      }).c('value').t(nick));
    } catch (e) {
      if (sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`service-unavailable[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, e).length) {
        err_msg = __("Can't register your nickname in this groupchat, it doesn't support registration.");
      } else if (sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`bad-request[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, e).length) {
        err_msg = __("Can't register your nickname in this groupchat, invalid data form supplied.");
      }

      _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(err_msg);
      _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
      return err_msg;
    }
  },

  /**
   * Check whether we should unregister the user from this MUC, and if so,
   * call { @link _converse.ChatRoom#sendUnregistrationIQ }
   * @method _converse.ChatRoom#unregisterNickname
   */
  async unregisterNickname() {
    if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('auto_register_muc_nickname') === 'unregister') {
      try {
        if (await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.disco.supports(strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_REGISTER, this.get('jid'))) {
          await this.sendUnregistrationIQ();
        }
      } catch (e) {
        _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
      }
    }
  },

  /**
   * Send an IQ stanza to the MUC to unregister this user's nickname.
   * If the user had a 'member' affiliation, it'll be removed and their
   * nickname will no longer be reserved and can instead be used (and
   * registered) by other users.
   * @method _converse.ChatRoom#sendUnregistrationIQ
   */
  sendUnregistrationIQ() {
    const iq = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      'to': this.get('jid'),
      'type': 'set'
    }).c('query', {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_REGISTER
    }).c('remove');
    return _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ(iq).catch(e => _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(e));
  },

  /**
   * Given a presence stanza, update the occupant model based on its contents.
   * @private
   * @method _converse.ChatRoom#updateOccupantsOnPresence
   * @param { XMLElement } pres - The presence stanza
   */
  updateOccupantsOnPresence(pres) {
    var _occupant$attributes, _occupant$attributes2;

    const data = (0,_parsers_js__WEBPACK_IMPORTED_MODULE_12__.parseMUCPresence)(pres, this);

    if (data.type === 'error' || !data.jid && !data.nick && !data.occupant_id) {
      return true;
    }

    const occupant = this.occupants.findOccupant(data); // Destroy an unavailable occupant if this isn't a nick change operation and if they're not affiliated

    if (data.type === 'unavailable' && occupant && !data.states.includes(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_NICK_CHANGED_CODE) && !['admin', 'owner', 'member'].includes(data['affiliation'])) {
      // Before destroying we set the new data, so that we can show the disconnection message
      occupant.set(data);
      occupant.destroy();
      return;
    }

    const jid = data.jid || '';
    const attributes = { ...data,
      'jid': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(jid) || (occupant === null || occupant === void 0 ? void 0 : (_occupant$attributes = occupant.attributes) === null || _occupant$attributes === void 0 ? void 0 : _occupant$attributes.jid),
      'resource': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getResourceFromJid(jid) || (occupant === null || occupant === void 0 ? void 0 : (_occupant$attributes2 = occupant.attributes) === null || _occupant$attributes2 === void 0 ? void 0 : _occupant$attributes2.resource)
    };

    if (occupant) {
      occupant.save(attributes);
    } else {
      this.occupants.create(attributes);
    }
  },

  fetchFeaturesIfConfigurationChanged(stanza) {
    // 104: configuration change
    // 170: logging enabled
    // 171: logging disabled
    // 172: room no longer anonymous
    // 173: room now semi-anonymous
    // 174: room now fully anonymous
    const codes = ['104', '170', '171', '172', '173', '174'];

    if (sizzle__WEBPACK_IMPORTED_MODULE_2___default()('status', stanza).filter(e => codes.includes(e.getAttribute('status'))).length) {
      this.refreshDiscoInfo();
    }
  },

  /**
   * Given two JIDs, which can be either user JIDs or MUC occupant JIDs,
   * determine whether they belong to the same user.
   * @private
   * @method _converse.ChatRoom#isSameUser
   * @param { String } jid1
   * @param { String } jid2
   * @returns { Boolean }
   */
  isSameUser(jid1, jid2) {
    const bare_jid1 = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(jid1);
    const bare_jid2 = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(jid2);
    const resource1 = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getResourceFromJid(jid1);
    const resource2 = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getResourceFromJid(jid2);

    if (_utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isSameBareJID(jid1, jid2)) {
      if (bare_jid1 === this.get('jid')) {
        // MUC JIDs
        return resource1 === resource2;
      } else {
        return true;
      }
    } else {
      const occupant1 = bare_jid1 === this.get('jid') ? this.occupants.findOccupant({
        'nick': resource1
      }) : this.occupants.findOccupant({
        'jid': bare_jid1
      });
      const occupant2 = bare_jid2 === this.get('jid') ? this.occupants.findOccupant({
        'nick': resource2
      }) : this.occupants.findOccupant({
        'jid': bare_jid2
      });
      return occupant1 === occupant2;
    }
  },

  async isSubjectHidden() {
    const jids = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.user.settings.get('mucs_with_hidden_subject', []);
    return jids.includes(this.get('jid'));
  },

  async toggleSubjectHiddenState() {
    const muc_jid = this.get('jid');
    const jids = await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.user.settings.get('mucs_with_hidden_subject', []);

    if (jids.includes(this.get('jid'))) {
      _core_js__WEBPACK_IMPORTED_MODULE_6__.api.user.settings.set('mucs_with_hidden_subject', jids.filter(jid => jid !== muc_jid));
    } else {
      _core_js__WEBPACK_IMPORTED_MODULE_6__.api.user.settings.set('mucs_with_hidden_subject', [...jids, muc_jid]);
    }
  },

  /**
   * Handle a possible subject change and return `true` if so.
   * @private
   * @method _converse.ChatRoom#handleSubjectChange
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMUCMessage}
   */
  async handleSubjectChange(attrs) {
    const __ = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.__;

    if (typeof attrs.subject === 'string' && !attrs.thread && !attrs.message) {
      // https://xmpp.org/extensions/xep-0045.html#subject-mod
      // -----------------------------------------------------
      // The subject is changed by sending a message of type "groupchat" to the <room@service>,
      // where the <message/> MUST contain a <subject/> element that specifies the new subject but
      // MUST NOT contain a <body/> element (or a <thread/> element).
      const subject = attrs.subject;
      const author = attrs.nick;
      (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.safeSave)(this, {
        'subject': {
          author,
          'text': attrs.subject || ''
        }
      });

      if (!attrs.is_delayed && author) {
        const message = subject ? __('Topic set by %1$s', author) : __('Topic cleared by %1$s', author);
        const prev_msg = this.messages.last();

        if ((prev_msg === null || prev_msg === void 0 ? void 0 : prev_msg.get('nick')) !== attrs.nick || (prev_msg === null || prev_msg === void 0 ? void 0 : prev_msg.get('type')) !== 'info' || (prev_msg === null || prev_msg === void 0 ? void 0 : prev_msg.get('message')) !== message) {
          this.createMessage({
            message,
            'nick': attrs.nick,
            'type': 'info',
            'is_ephemeral': true
          });
        }

        if (await this.isSubjectHidden()) {
          this.toggleSubjectHiddenState();
        }
      }

      return true;
    }

    return false;
  },

  /**
   * Set the subject for this {@link _converse.ChatRoom}
   * @private
   * @method _converse.ChatRoom#setSubject
   * @param { String } value
   */
  setSubject() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.send((0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$msg)({
      to: this.get('jid'),
      from: _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.connection.jid,
      type: 'groupchat'
    }).c('subject', {
      xmlns: 'jabber:client'
    }).t(value).tree());
  },

  /**
   * Is this a chat state notification that can be ignored,
   * because it's old or because it's from us.
   * @private
   * @method _converse.ChatRoom#ignorableCSN
   * @param { Object } attrs - The message attributes
   */
  ignorableCSN(attrs) {
    return attrs.chat_state && !attrs.body && (attrs.is_delayed || this.isOwnMessage(attrs));
  },

  /**
   * Determines whether the message is from ourselves by checking
   * the `from` attribute. Doesn't check the `type` attribute.
   * @private
   * @method _converse.ChatRoom#isOwnMessage
   * @param { Object|XMLElement|_converse.Message } msg
   * @returns { boolean }
   */
  isOwnMessage(msg) {
    let from;

    if ((0,lodash_es_isElement__WEBPACK_IMPORTED_MODULE_16__["default"])(msg)) {
      from = msg.getAttribute('from');
    } else if (msg instanceof _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.Message) {
      from = msg.get('from');
    } else {
      from = msg.from;
    }

    return strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getResourceFromJid(from) == this.get('nick');
  },

  getUpdatedMessageAttributes(message, attrs) {
    const new_attrs = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.ChatBox.prototype.getUpdatedMessageAttributes.call(this, message, attrs);

    new_attrs['from_muc'] = attrs['from_muc'];

    if (this.isOwnMessage(attrs)) {
      const stanza_id_keys = Object.keys(attrs).filter(k => k.startsWith('stanza_id'));
      Object.assign(new_attrs, (0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_17__["default"])(attrs, stanza_id_keys));

      if (!message.get('received')) {
        new_attrs.received = new Date().toISOString();
      }
    }

    return new_attrs;
  },

  /**
   * Send a MUC-0410 MUC Self-Ping stanza to room to determine
   * whether we're still joined.
   * @async
   * @private
   * @method _converse.ChatRoom#isJoined
   * @returns {Promise<boolean>}
   */
  async isJoined() {
  //TOFIND Returning true(Ping doesnt work on current server)
    return true;
    const jid = this.get('jid');
    const ping = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.$iq)({
      'to': `${jid}/${this.get('nick')}`,
      'type': 'get'
    }).c('ping', {
      'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.PING
    });

    try {
      await _core_js__WEBPACK_IMPORTED_MODULE_6__.api.sendIQ(ping);
    } catch (e) {
      if (e === null) {
        _log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`isJoined: Timeout error while checking whether we're joined to MUC: ${jid}`);
      } else {
        _log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`isJoined: Apparently we're no longer connected to MUC: ${jid}`);
      }

      return false;
    }

    return true;
  },

  /**
   * Sends a status update presence (i.e. based on the `<show>` element)
   * @method _converse.ChatRoom#sendStatusPresence
   * @param { String } type
   * @param { String } [status] - An optional status message
   * @param { Element[]|Strophe.Builder[]|Element|Strophe.Builder } [child_nodes]
   *  Nodes(s) to be added as child nodes of the `presence` XML element.
   */
  async sendStatusPresence(type, status, child_nodes) {
    if (this.session.get('connection_status') === _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.ENTERED) {
      const presence = await _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.xmppstatus.constructPresence(type, this.getRoomJIDAndNick(), status);
      child_nodes === null || child_nodes === void 0 ? void 0 : child_nodes.map(c => (c === null || c === void 0 ? void 0 : c.tree()) ?? c).forEach(c => presence.cnode(c).up());
      _core_js__WEBPACK_IMPORTED_MODULE_6__.api.send(presence);
    }
  },

  /**
   * Check whether we're still joined and re-join if not
   * @async
   * @method _converse.ChatRoom#rejoinIfNecessary
   */
  async rejoinIfNecessary() {
    if (!(await this.isJoined())) {
      this.rejoin();
      return true;
    }
  },

  /**
   * @private
   * @method _converse.ChatRoom#shouldShowErrorMessage
   * @returns {Promise<boolean>}
   */
  async shouldShowErrorMessage(attrs) {
    if (attrs.error_type === 'Decryption') {
      if (attrs.error_message === "Message key not found. The counter was repeated or the key was not filled.") {
        // OMEMO message which we already decrypted before
        return false;
      } else if (attrs.error_condition === 'not-encrypted-for-this-device') {
        return false;
      }
    } else if (attrs.error_condition === 'not-acceptable' && (await this.rejoinIfNecessary())) {
      return false;
    }

    return _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.ChatBox.prototype.shouldShowErrorMessage.call(this, attrs);
  },

  /**
   * Looks whether we already have a moderation message for this
   * incoming message. If so, it's considered "dangling" because
   * it probably hasn't been applied to anything yet, given that
   * the relevant message is only coming in now.
   * @private
   * @method _converse.ChatRoom#findDanglingModeration
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMUCMessage}
   * @returns { _converse.ChatRoomMessage }
   */
  findDanglingModeration(attrs) {
    if (!this.messages.length) {
      return null;
    } // Only look for dangling moderation if there are newer
    // messages than this one, since moderation come after.


    if (this.messages.last().get('time') > attrs.time) {
      // Search from latest backwards
      const messages = Array.from(this.messages.models);
      const stanza_id = attrs[`stanza_id ${this.get('jid')}`];

      if (!stanza_id) {
        return null;
      }

      messages.reverse();
      return messages.find(_ref => {
        let {
          attributes
        } = _ref;
        return attributes.moderated === 'retracted' && attributes.moderated_id === stanza_id && attributes.moderated_by;
      });
    }
  },

  /**
   * Handles message moderation based on the passed in attributes.
   * @private
   * @method _converse.ChatRoom#handleModeration
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMUCMessage}
   * @returns { Boolean } Returns `true` or `false` depending on
   *  whether a message was moderated or not.
   */
  async handleModeration(attrs) {
    const MODERATION_ATTRIBUTES = ['editable', 'moderated', 'moderated_by', 'moderated_id', 'moderation_reason'];

    if (attrs.moderated === 'retracted') {
      const query = {};
      const key = `stanza_id ${this.get('jid')}`;
      query[key] = attrs.moderated_id;
      const message = this.messages.findWhere(query);

      if (!message) {
        attrs['dangling_moderation'] = true;
        await this.createMessage(attrs);
        return true;
      }

      message.save((0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_17__["default"])(attrs, MODERATION_ATTRIBUTES));
      return true;
    } else {
      // Check if we have dangling moderation message
      const message = this.findDanglingModeration(attrs);

      if (message) {
        const moderation_attrs = (0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_17__["default"])(message.attributes, MODERATION_ATTRIBUTES);
        const new_attrs = Object.assign({
          'dangling_moderation': false
        }, attrs, moderation_attrs);
        delete new_attrs['id']; // Delete id, otherwise a new cache entry gets created

        message.save(new_attrs);
        return true;
      }
    }

    return false;
  },

  getNotificationsText() {
    const {
      __
    } = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse;
    const actors_per_state = this.notifications.toJSON();
    const role_changes = _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_show_info_messages').filter(role_change => _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES_LIST.includes(role_change));
    const join_leave_events = _core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_show_info_messages').filter(join_leave_event => _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES_LIST.includes(join_leave_event));
    const states = [..._core_js__WEBPACK_IMPORTED_MODULE_6__.converse.CHAT_STATES, ...join_leave_events, ...role_changes];
    return states.reduce((result, state) => {
      const existing_actors = actors_per_state[state];

      if (!(existing_actors !== null && existing_actors !== void 0 && existing_actors.length)) {
        return result;
      }

      const actors = existing_actors.map(a => {
        var _this$getOccupant;

        return ((_this$getOccupant = this.getOccupant(a)) === null || _this$getOccupant === void 0 ? void 0 : _this$getOccupant.getDisplayName()) || a;
      });

      if (actors.length === 1) {
        if (state === 'composing') {
          return `${result}${__('%1$s is typing', actors[0])}\n`;
        } else if (state === 'paused') {
          return `${result}${__('%1$s has stopped typing', actors[0])}\n`;
        } else if (state === _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.GONE) {
          return `${result}${__('%1$s has gone away', actors[0])}\n`;
        } else if (state === 'entered') {
          return `${result}${__('%1$s has entered the groupchat', actors[0])}\n`;
        } else if (state === 'exited') {
          return `${result}${__('%1$s has left the groupchat', actors[0])}\n`;
        } else if (state === 'op') {
          return `${result}${__('%1$s is now a moderator', actors[0])}\n`;
        } else if (state === 'deop') {
          return `${result}${__('%1$s is no longer a moderator', actors[0])}\n`;
        } else if (state === 'voice') {
          return `${result}${__('%1$s has been given a voice', actors[0])}\n`;
        } else if (state === 'mute') {
          return `${result}${__('%1$s has been muted', actors[0])}\n`;
        }
      } else if (actors.length > 1) {
        let actors_str;

        if (actors.length > 3) {
          actors_str = `${Array.from(actors).slice(0, 2).join(', ')} and others`;
        } else {
          const last_actor = actors.pop();
          actors_str = __('%1$s and %2$s', actors.join(', '), last_actor);
        }

        if (state === 'composing') {
          return `${result}${__('%1$s are typing', actors_str)}\n`;
        } else if (state === 'paused') {
          return `${result}${__('%1$s have stopped typing', actors_str)}\n`;
        } else if (state === _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.GONE) {
          return `${result}${__('%1$s have gone away', actors_str)}\n`;
        } else if (state === 'entered') {
          return `${result}${__('%1$s have entered the groupchat', actors_str)}\n`;
        } else if (state === 'exited') {
          return `${result}${__('%1$s have left the groupchat', actors_str)}\n`;
        } else if (state === 'op') {
          return `${result}${__('%1$s are now moderators', actors[0])}\n`;
        } else if (state === 'deop') {
          return `${result}${__('%1$s are no longer moderators', actors[0])}\n`;
        } else if (state === 'voice') {
          return `${result}${__('%1$s have been given voices', actors[0])}\n`;
        } else if (state === 'mute') {
          return `${result}${__('%1$s have been muted', actors[0])}\n`;
        }
      }

      return result;
    }, '');
  },

  /**
   * @param {String} actor - The nickname of the actor that caused the notification
   * @param {String|Array<String>} states - The state or states representing the type of notificcation
   */
  removeNotification(actor, states) {
    const actors_per_state = this.notifications.toJSON();
    states = Array.isArray(states) ? states : [states];
    states.forEach(state => {
      const existing_actors = Array.from(actors_per_state[state] || []);

      if (existing_actors.includes(actor)) {
        const idx = existing_actors.indexOf(actor);
        existing_actors.splice(idx, 1);
        this.notifications.set(state, Array.from(existing_actors));
      }
    });
  },

  /**
   * Update the notifications model by adding the passed in nickname
   * to the array of nicknames that all match a particular state.
   *
   * Removes the nickname from any other states it might be associated with.
   *
   * The state can be a XEP-0085 Chat State or a XEP-0045 join/leave
   * state.
   * @param {String} actor - The nickname of the actor that causes the notification
   * @param {String} state - The state representing the type of notificcation
   */
  updateNotifications(actor, state) {
    const actors_per_state = this.notifications.toJSON();
    const existing_actors = actors_per_state[state] || [];

    if (existing_actors.includes(actor)) {
      return;
    }

    const reducer = (out, s) => {
      if (s === state) {
        out[s] = [...existing_actors, actor];
      } else {
        out[s] = (actors_per_state[s] || []).filter(a => a !== actor);
      }

      return out;
    };

    const actors_per_chat_state = _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.CHAT_STATES.reduce(reducer, {});
    const actors_per_traffic_state = _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_TRAFFIC_STATES_LIST.reduce(reducer, {});
    const actors_per_role_change = _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES_LIST.reduce(reducer, {});
    this.notifications.set(Object.assign(actors_per_chat_state, actors_per_traffic_state, actors_per_role_change));
    window.setTimeout(() => this.removeNotification(actor, state), 10000);
  },

  handleMetadataFastening(attrs) {
    if (attrs.ogp_for_id) {
      if (attrs.from !== this.get('jid')) {
        // For now we only allow metadata from the MUC itself and not
        // from individual users who are deemed less trustworthy.
        return false;
      }

      const message = this.messages.findWhere({
        'origin_id': attrs.ogp_for_id
      });

      if (message) {
        const old_list = message.get('ogp_metadata') || [];

        if (old_list.filter(m => m['og:url'] === attrs['og:url']).length) {
          // Don't add metadata for the same URL again
          return false;
        }

        const list = [...old_list, (0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_17__["default"])(attrs, METADATA_ATTRIBUTES)];
        message.save('ogp_metadata', list);
        return true;
      }
    }

    return false;
  },

  /**
   * Given {@link MessageAttributes} look for XEP-0316 Room Notifications and create info
   * messages for them.
   * @param { XMLElement } stanza
   */
  handleMEPNotification(attrs) {
    var _attrs$activities;

    if (attrs.from !== this.get('jid') || !attrs.activities) {
      return false;
    }

    (_attrs$activities = attrs.activities) === null || _attrs$activities === void 0 ? void 0 : _attrs$activities.forEach(activity_attrs => {
      const data = Object.assign(attrs, activity_attrs);
      this.createMessage(data); // Trigger so that notifications are shown

      _core_js__WEBPACK_IMPORTED_MODULE_6__.api.trigger('message', {
        'attrs': data,
        'chatbox': this
      });
    });
    return !!attrs.activities.length;
  },

  /**
   * Returns an already cached message (if it exists) based on the
   * passed in attributes map.
   * @method _converse.ChatRoom#getDuplicateMessage
   * @param { object } attrs - Attributes representing a received
   *  message, as returned by {@link parseMUCMessage}
   * @returns {Promise<_converse.Message>}
   */
  getDuplicateMessage(attrs) {
    var _attrs$activities2;

    if ((_attrs$activities2 = attrs.activities) !== null && _attrs$activities2 !== void 0 && _attrs$activities2.length) {
      return this.messages.findWhere({
        'type': 'mep',
        'msgid': attrs.msgid
      });
    } else {
      return _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.ChatBox.prototype.getDuplicateMessage.call(this, attrs);
    }
  },

  /**
   * Handler for all MUC messages sent to this groupchat. This method
   * shouldn't be called directly, instead {@link _converse.ChatRoom#queueMessage}
   * should be called.
   * @method _converse.ChatRoom#onMessage
   * @param { MessageAttributes } attrs - A promise which resolves to the message attributes.
   */
  async onMessage(attrs) {
    attrs = await attrs;

    if (_utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].isErrorObject(attrs)) {
      attrs.stanza && _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(attrs.stanza);
      return _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(attrs.message);
    } else if (attrs.type === 'error' && !(await this.shouldShowErrorMessage(attrs))) {
      return;
    }

    const message = this.getDuplicateMessage(attrs);

    if (message) {
      message.get('type') === 'groupchat' && this.updateMessage(message, attrs);
      return;
    } else if (attrs.receipt_id || attrs.is_marker || this.ignorableCSN(attrs)) {
      return;
    }

    if (this.handleMetadataFastening(attrs) || this.handleMEPNotification(attrs) || (await this.handleRetraction(attrs)) || (await this.handleModeration(attrs)) || (await this.handleSubjectChange(attrs))) {
      attrs.nick && this.removeNotification(attrs.nick, ['composing', 'paused']);
      return;
    }

    this.setEditable(attrs, attrs.time);

    if (attrs['chat_state']) {
      this.updateNotifications(attrs.nick, attrs.chat_state);
    }

    if (_utils_form__WEBPACK_IMPORTED_MODULE_3__["default"].shouldCreateGroupchatMessage(attrs)) {
      const msg = this.handleCorrection(attrs) || (await this.createMessage(attrs));
      this.removeNotification(attrs.nick, ['composing', 'paused']);
      this.handleUnreadMessage(msg);
    }
  },

  handleModifyError(pres) {
    var _pres$querySelector;

    const text = (_pres$querySelector = pres.querySelector('error text')) === null || _pres$querySelector === void 0 ? void 0 : _pres$querySelector.textContent;

    if (text) {
      if (this.session.get('connection_status') === _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.CONNECTING) {
        this.setDisconnectionState(text);
      } else {
        const attrs = {
          'type': 'error',
          'message': text,
          'is_ephemeral': true
        };
        this.createMessage(attrs);
      }
    }
  },

  /**
   * Handle a presence stanza that disconnects the user from the MUC
   * @param { XMLElement } stanza
   */
  handleDisconnection(stanza) {
    var _item$querySelector;

    const is_self = stanza.querySelector("status[code='110']") !== null;
    const x = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`x[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_USER}"]`, stanza).pop();

    if (!x) {
      return;
    }

    const disconnection_codes = Object.keys(_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.muc.disconnect_messages);
    const codes = sizzle__WEBPACK_IMPORTED_MODULE_2___default()('status', x).map(s => s.getAttribute('code')).filter(c => disconnection_codes.includes(c));
    const disconnected = is_self && codes.length > 0;

    if (!disconnected) {
      return;
    } // By using querySelector we assume here there is
    // one <item> per <x xmlns='http://jabber.org/protocol/muc#user'>
    // element. This appears to be a safe assumption, since
    // each <x/> element pertains to a single user.


    const item = x.querySelector('item');
    const reason = item ? (_item$querySelector = item.querySelector('reason')) === null || _item$querySelector === void 0 ? void 0 : _item$querySelector.textContent : undefined;
    const actor = item ? (0,lodash_es_invoke__WEBPACK_IMPORTED_MODULE_18__["default"])(item.querySelector('actor'), 'getAttribute', 'nick') : undefined;
    const message = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.muc.disconnect_messages[codes[0]];
    const status = codes.includes('301') ? _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.BANNED : _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DISCONNECTED;
    this.setDisconnectionState(message, reason, actor, status);
  },

  getActionInfoMessage(code, nick, actor) {
    const __ = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.__;

    if (code === '301') {
      return actor ? __('%1$s has been banned by %2$s', nick, actor) : __('%1$s has been banned', nick);
    } else if (code === '303') {
      return __("%1$s's nickname has changed", nick);
    } else if (code === '307') {
      return actor ? __('%1$s has been kicked out by %2$s', nick, actor) : __('%1$s has been kicked out', nick);
    } else if (code === '321') {
      return __('%1$s has been removed because of an affiliation change', nick);
    } else if (code === '322') {
      return __('%1$s has been removed for not being a member', nick);
    }
  },

  createAffiliationChangeMessage(occupant) {
    const __ = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.__;
    const previous_affiliation = occupant._previousAttributes.affiliation;

    if (!previous_affiliation) {
      // If no previous affiliation was set, then we don't
      // interpret this as an affiliation change.
      // For example, if muc_send_probes is true, then occupants
      // are created based on incoming messages, in which case
      // we don't yet know the affiliation
      return;
    }

    const current_affiliation = occupant.get('affiliation');

    if (previous_affiliation === 'admin' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.AFFILIATION_CHANGES.EXADMIN)) {
      this.createMessage({
        'type': 'info',
        'message': __('%1$s is no longer an admin of this groupchat', occupant.get('nick'))
      });
    } else if (previous_affiliation === 'owner' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.AFFILIATION_CHANGES.EXOWNER)) {
      this.createMessage({
        'type': 'info',
        'message': __('%1$s is no longer an owner of this groupchat', occupant.get('nick'))
      });
    } else if (previous_affiliation === 'outcast' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.AFFILIATION_CHANGES.EXOUTCAST)) {
      this.createMessage({
        'type': 'info',
        'message': __('%1$s is no longer banned from this groupchat', occupant.get('nick'))
      });
    }

    if (current_affiliation === 'none' && previous_affiliation === 'member' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.AFFILIATION_CHANGES.EXMEMBER)) {
      this.createMessage({
        'type': 'info',
        'message': __('%1$s is no longer a member of this groupchat', occupant.get('nick'))
      });
    }

    if (current_affiliation === 'member' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.AFFILIATION_CHANGES.MEMBER)) {
      this.createMessage({
        'type': 'info',
        'message': __('%1$s is now a member of this groupchat', occupant.get('nick'))
      });
    } else if (current_affiliation === 'admin' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.AFFILIATION_CHANGES.ADMIN) || current_affiliation == 'owner' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.AFFILIATION_CHANGES.OWNER)) {
      // For example: AppleJack is now an (admin|owner) of this groupchat
      this.createMessage({
        'type': 'info',
        'message': __('%1$s is now an %2$s of this groupchat', occupant.get('nick'), current_affiliation)
      });
    }
  },

  createRoleChangeMessage(occupant, changed) {
    if (changed === 'none' || occupant.changed.affiliation) {
      // We don't inform of role changes if they accompany affiliation changes.
      return;
    }

    const previous_role = occupant._previousAttributes.role;

    if (previous_role === 'moderator' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.DEOP)) {
      this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.DEOP);
    } else if (previous_role === 'visitor' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.VOICE)) {
      this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.VOICE);
    }

    if (occupant.get('role') === 'visitor' && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.MUTE)) {
      this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.MUTE);
    } else if (occupant.get('role') === 'moderator') {
      if (!['owner', 'admin'].includes(occupant.get('affiliation')) && _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(_core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.OP)) {
        // Oly show this message if the user isn't already
        // an admin or owner, otherwise this isn't new information.
        this.updateNotifications(occupant.get('nick'), _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC_ROLE_CHANGES.OP);
      }
    }
  },

  /**
   * Create an info message based on a received MUC status code
   * @private
   * @method _converse.ChatRoom#createInfoMessage
   * @param { string } code - The MUC status code
   * @param { XMLElement } stanza - The original stanza that contains the code
   * @param { Boolean } is_self - Whether this stanza refers to our own presence
   */
  createInfoMessage(code, stanza, is_self) {
    const __ = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.__;
    const data = {
      'type': 'info',
      'is_ephemeral': true
    };

    if (!_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.isInfoVisible(code)) {
      return;
    }

    if (code === '110' || code === '100' && !is_self) {
      return;
    } else if (code in _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.muc.info_messages) {
      data.message = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.muc.info_messages[code];
    } else if (!is_self && ACTION_INFO_CODES.includes(code)) {
      var _item$querySelector2, _item$querySelector3;

      const nick = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getResourceFromJid(stanza.getAttribute('from'));
      const item = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`x[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_USER}"] item`, stanza).pop();
      data.actor = item ? (_item$querySelector2 = item.querySelector('actor')) === null || _item$querySelector2 === void 0 ? void 0 : _item$querySelector2.getAttribute('nick') : undefined;
      data.reason = item ? (_item$querySelector3 = item.querySelector('reason')) === null || _item$querySelector3 === void 0 ? void 0 : _item$querySelector3.textContent : undefined;
      data.message = this.getActionInfoMessage(code, nick, data.actor);
    } else if (is_self && code in _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.muc.new_nickname_messages) {
      // XXX: Side-effect of setting the nick. Should ideally be refactored out of this method
      let nick;

      if (is_self && code === '210') {
        nick = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.getResourceFromJid(stanza.getAttribute('from'));
      } else if (is_self && code === '303') {
        nick = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`x[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_USER}"] item`, stanza).pop().getAttribute('nick');
      }

      this.save('nick', nick);
      data.message = __(_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.muc.new_nickname_messages[code], nick);
    }

    if (data.message) {
      if (code === '201' && this.messages.findWhere(data)) {
        return;
      }

      this.createMessage(data);
    }
  },

  /**
   * Create info messages based on a received presence or message stanza
   * @private
   * @method _converse.ChatRoom#createInfoMessages
   * @param { XMLElement } stanza
   */
  createInfoMessages(stanza) {
    const codes = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`x[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MUC_USER}"] status`, stanza).map(s => s.getAttribute('code'));

    if (codes.includes('333') && codes.includes('307')) {
      // See: https://github.com/xsf/xeps/pull/969/files#diff-ac5113766e59219806793c1f7d967f1bR4966
      codes.splice(codes.indexOf('307'), 1);
    }

    const is_self = codes.includes('110');
    codes.forEach(code => this.createInfoMessage(code, stanza, is_self));
  },

  /**
   * Set parameters regarding disconnection from this room. This helps to
   * communicate to the user why they were disconnected.
   * @param { String } message - The disconnection message, as received from (or
   *  implied by) the server.
   * @param { String } reason - The reason provided for the disconnection
   * @param { String } actor - The person (if any) responsible for this disconnection
   * @param { Integer } status - The status code (see `converse.ROOMSTATUS`)
   */
  setDisconnectionState(message, reason, actor) {
    let status = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DISCONNECTED;
    this.session.save({
      'connection_status': status,
      'disconnection_actor': actor,
      'disconnection_message': message,
      'disconnection_reason': reason
    });
  },

  onNicknameClash(presence) {
    const __ = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.__;

    if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_nickname_from_jid')) {
      const nick = presence.getAttribute('from').split('/')[1];

      if (nick === _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.getDefaultMUCNickname()) {
        this.join(nick + '-2');
      } else {
        const del = nick.lastIndexOf('-');
        const num = nick.substring(del + 1, nick.length);
        this.join(nick.substring(0, del + 1) + String(Number(num) + 1));
      }
    } else {
      this.save({
        'nickname_validation_message': __('The nickname you chose is reserved or ' + 'currently in use, please choose a different one.')
      });
      this.session.save({
        'connection_status': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.NICKNAME_REQUIRED
      });
    }
  },

  /**
   * Parses a <presence> stanza with type "error" and sets the proper
   * `connection_status` value for this {@link _converse.ChatRoom} as
   * well as any additional output that can be shown to the user.
   * @private
   * @param { XMLElement } stanza - The presence stanza
   */
  onErrorPresence(stanza) {
    var _sizzle$pop;

    const __ = _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.__;
    const error = stanza.querySelector('error');
    const error_type = error.getAttribute('type');
    const reason = (_sizzle$pop = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`text[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, error).pop()) === null || _sizzle$pop === void 0 ? void 0 : _sizzle$pop.textContent;

    if (error_type === 'modify') {
      this.handleModifyError(stanza);
    } else if (error_type === 'auth') {
      if (sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`not-authorized[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, error).length) {
        this.save({
          'password_validation_message': reason || __('Password incorrect')
        });
        this.session.save({
          'connection_status': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.PASSWORD_REQUIRED
        });
      }

      if (error.querySelector('registration-required')) {
        const message = __('You are not on the member list of this groupchat.');

        this.setDisconnectionState(message, reason);
      } else if (error.querySelector('forbidden')) {
        this.setDisconnectionState(_core_js__WEBPACK_IMPORTED_MODULE_6__._converse.muc.disconnect_messages[301], reason, null, _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.BANNED);
      }
    } else if (error_type === 'cancel') {
      if (error.querySelector('not-allowed')) {
        const message = __('You are not allowed to create new groupchats.');

        this.setDisconnectionState(message, reason);
      } else if (error.querySelector('not-acceptable')) {
        const message = __("Your nickname doesn't conform to this groupchat's policies.");

        this.setDisconnectionState(message, reason);
      } else if (sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`gone[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, error).length) {
        var _sizzle$pop2;

        const moved_jid = (_sizzle$pop2 = sizzle__WEBPACK_IMPORTED_MODULE_2___default()(`gone[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, error).pop()) === null || _sizzle$pop2 === void 0 ? void 0 : _sizzle$pop2.textContent.replace(/^xmpp:/, '').replace(/\?join$/, '');
        this.save({
          moved_jid,
          'destroyed_reason': reason
        });
        this.session.save({
          'connection_status': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DESTROYED
        });
      } else if (error.querySelector('conflict')) {
        this.onNicknameClash(stanza);
      } else if (error.querySelector('item-not-found')) {
        const message = __('This groupchat does not (yet) exist.');

        this.setDisconnectionState(message, reason);
      } else if (error.querySelector('service-unavailable')) {
        const message = __('This groupchat has reached its maximum number of participants.');

        this.setDisconnectionState(message, reason);
      } else if (error.querySelector('remote-server-not-found')) {
        const message = __('Remote server not found');

        this.setDisconnectionState(message, reason);
      } else if (error.querySelector('forbidden')) {
        const message = __("You're not allowed to enter this groupchat");

        this.setDisconnectionState(message, reason);
      } else {
        const message = __("An error happened while trying to enter this groupchat");

        this.setDisconnectionState(message, reason);
      }
    }
  },

  /**
   * Listens for incoming presence stanzas from the service that hosts this MUC
   * @private
   * @method _converse.ChatRoom#onPresenceFromMUCHost
   * @param { XMLElement } stanza - The presence stanza
   */
  onPresenceFromMUCHost(stanza) {
    if (stanza.getAttribute('type') === 'error') {
      const error = stanza.querySelector('error');

      if ((error === null || error === void 0 ? void 0 : error.getAttribute('type')) === 'wait' && error !== null && error !== void 0 && error.querySelector('resource-constraint')) {
        // If we get a <resource-constraint> error, we assume it's in context of XEP-0437 RAI.
        // We remove this MUC's host from the list of enabled domains and rejoin the MUC.
        if (this.session.get('connection_status') === _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.DISCONNECTED) {
          this.rejoin();
        }
      }
    }
  },

  /**
   * Handles incoming presence stanzas coming from the MUC
   * @private
   * @method _converse.ChatRoom#onPresence
   * @param { XMLElement } stanza
   */
  onPresence(stanza) {
    if (stanza.getAttribute('type') === 'error') {
      return this.onErrorPresence(stanza);
    }

    this.createInfoMessages(stanza);

    if (stanza.querySelector("status[code='110']")) {
      this.onOwnPresence(stanza);

      if (this.getOwnRole() !== 'none' && this.session.get('connection_status') === _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.CONNECTING) {
        this.session.save('connection_status', _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.CONNECTED);
      }
    } else {
      this.updateOccupantsOnPresence(stanza);
    }
  },

  /**
   * Handles a received presence relating to the current user.
   *
   * For locked groupchats (which are by definition "new"), the
   * groupchat will either be auto-configured or created instantly
   * (with default config) or a configuration groupchat will be
   * rendered.
   *
   * If the groupchat is not locked, then the groupchat will be
   * auto-configured only if applicable and if the current
   * user is the groupchat's owner.
   * @private
   * @method _converse.ChatRoom#onOwnPresence
   * @param { XMLElement } pres - The stanza
   */
  async onOwnPresence(stanza) {
    await this.occupants.fetched;
    const old_status = this.session.get('connection_status');

    if (stanza.getAttribute('type') !== 'unavailable' && old_status !== _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.ENTERED && old_status !== _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.CLOSING) {
      // Set connection_status before creating the occupant, but
      // only trigger afterwards, so that plugins can access the
      // occupant in their event handlers.
      this.session.save('connection_status', _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.ROOMSTATUS.ENTERED, {
        'silent': true
      });
      this.updateOccupantsOnPresence(stanza);
      this.session.trigger('change:connection_status', this.session, old_status);
    } else {
      this.updateOccupantsOnPresence(stanza);
    }

    if (stanza.getAttribute('type') === 'unavailable') {
      this.handleDisconnection(stanza);
      return;
    } else {
      const locked_room = stanza.querySelector("status[code='201']");

      if (locked_room) {
        if (this.get('auto_configure')) {
          this.autoConfigureChatRoom().then(() => this.refreshDiscoInfo());
        } else if (_core_js__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('muc_instant_rooms')) {
          // Accept default configuration
          this.sendConfiguration().then(() => this.refreshDiscoInfo());
        } else {
          this.session.save({
            'view': _core_js__WEBPACK_IMPORTED_MODULE_6__.converse.MUC.VIEWS.CONFIG
          });
          return;
        }
      } else if (!this.features.get('fetched')) {
        // The features for this groupchat weren't fetched.
        // That must mean it's a new groupchat without locking
        // (in which case Prosody doesn't send a 201 status),
        // otherwise the features would have been fetched in
        // the "initialize" method already.
        if (this.getOwnAffiliation() === 'owner' && this.get('auto_configure')) {
          this.autoConfigureChatRoom().then(() => this.refreshDiscoInfo());
        } else {
          this.getDiscoInfo();
        }
      }
    }
  },

  /**
   * Returns a boolean to indicate whether the current user
   * was mentioned in a message.
   * @private
   * @method _converse.ChatRoom#isUserMentioned
   * @param { String } - The text message
   */
  isUserMentioned(message) {
    const nick = this.get('nick');

    if (message.get('references').length) {
      const mentions = message.get('references').filter(ref => ref.type === 'mention').map(ref => ref.value);
      return mentions.includes(nick);
    } else {
      return new RegExp(`\\b${nick}\\b`).test(message.get('body'));
    }
  },

  incrementUnreadMsgsCounter(message) {
    const settings = {
      'num_unread_general': this.get('num_unread_general') + 1
    };

    if (this.get('num_unread_general') === 0) {
      settings['first_unread_id'] = message.get('id');
    }

    if (this.isUserMentioned(message)) {
      settings.num_unread = this.get('num_unread') + 1;
    }

    this.save(settings);
  },

  clearUnreadMsgCounter() {
    if (this.get('num_unread_general') > 0 || this.get('num_unread') > 0 || this.get('has_activity')) {
      this.sendMarkerForMessage(this.messages.last());
    }

    (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_11__.safeSave)(this, {
      'has_activity': false,
      'num_unread': 0,
      'num_unread_general': 0
    });
  }

};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatRoomMixin);

/***/ }),

/***/ "./src/headless/plugins/muc/occupant.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/muc/occupant.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");

/**
 * Represents a participant in a MUC
 * @class
 * @namespace _converse.ChatRoomOccupant
 * @memberOf _converse
 */

class ChatRoomOccupant extends _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model {
  defaults() {
    // eslint-disable-line class-methods-use-this
    return {
      'hats': [],
      'show': 'offline',
      'states': []
    };
  }

  save(key, val, options) {
    let attrs;

    if (key == null) {
      // eslint-disable-line no-eq-null
      return super.save(key, val, options);
    } else if (typeof key === 'object') {
      attrs = key;
      options = val;
    } else {
      (attrs = {})[key] = val;
    }

    if (attrs.occupant_id) {
      attrs.id = attrs.occupant_id;
    }

    return super.save(attrs, options);
  }

  getDisplayName() {
    return this.get('nick') || this.get('jid');
  }

  isMember() {
    return ['admin', 'owner', 'member'].includes(this.get('affiliation'));
  }

  isModerator() {
    return ['admin', 'owner'].includes(this.get('affiliation')) || this.get('role') === 'moderator';
  }

  isSelf() {
    return this.get('states').includes('110');
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatRoomOccupant);

/***/ }),

/***/ "./src/headless/plugins/muc/occupants.js":
/*!***********************************************!*\
  !*** ./src/headless/plugins/muc/occupants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _occupant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./occupant.js */ "./src/headless/plugins/muc/occupant.js");
/* harmony import */ var _utils_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/form */ "./src/headless/utils/form.js");
/* harmony import */ var _converse_skeletor_src_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/skeletor/src/collection.js */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ "./src/headless/plugins/muc/constants.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! strophe.js/src/strophe.js */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _affiliations_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./affiliations/utils.js */ "./src/headless/plugins/muc/affiliations/utils.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/muc/utils.js");
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











/**
 * A list of {@link _converse.ChatRoomOccupant} instances, representing participants in a MUC.
 * @class
 * @namespace _converse.ChatRoomOccupants
 * @memberOf _converse
 */

class ChatRoomOccupants extends _converse_skeletor_src_collection_js__WEBPACK_IMPORTED_MODULE_2__.Collection {
  constructor() {
    super(...arguments);

    _defineProperty(this, "model", _occupant_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
  }

  comparator(occupant1, occupant2) {
    // eslint-disable-line class-methods-use-this
    const role1 = occupant1.get('role') || 'none';
    const role2 = occupant2.get('role') || 'none';

    if (_constants_js__WEBPACK_IMPORTED_MODULE_3__.MUC_ROLE_WEIGHTS[role1] === _constants_js__WEBPACK_IMPORTED_MODULE_3__.MUC_ROLE_WEIGHTS[role2]) {
      const nick1 = occupant1.getDisplayName().toLowerCase();
      const nick2 = occupant2.getDisplayName().toLowerCase();
      return nick1 < nick2 ? -1 : nick1 > nick2 ? 1 : 0;
    } else {
      return _constants_js__WEBPACK_IMPORTED_MODULE_3__.MUC_ROLE_WEIGHTS[role1] < _constants_js__WEBPACK_IMPORTED_MODULE_3__.MUC_ROLE_WEIGHTS[role2] ? -1 : 1;
    }
  }

  create(attrs, options) {
    if (attrs.id || attrs instanceof _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__.Model) {
      return super.create(attrs, options);
    }

    attrs.id = attrs.occupant_id || (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_9__.getUniqueId)();
    return super.create(attrs, options);
  }
  /**
   * Get the {@link _converse.ChatRoomOccupant} instance which
   * represents the current user.
   * @method _converse.ChatRoomOccupants#getOwnOccupant
   * @returns { _converse.ChatRoomOccupant }
   */


  getOwnOccupant() {
    return this.findWhere({
      'jid': _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid
    });
  }

  async fetchMembers() {
    var _this$getOwnOccupant;

    if (!['member', 'admin', 'owner'].includes((_this$getOwnOccupant = this.getOwnOccupant()) === null || _this$getOwnOccupant === void 0 ? void 0 : _this$getOwnOccupant.get('affiliation'))) {
      // https://xmpp.org/extensions/xep-0045.html#affil-priv
      return;
    }

    const affiliations = (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.getAutoFetchedAffiliationLists)();

    if (affiliations.length === 0) {
      return;
    }

    const muc_jid = this.chatroom.get('jid');
    const aff_lists = await Promise.all(affiliations.map(a => (0,_affiliations_utils_js__WEBPACK_IMPORTED_MODULE_7__.getAffiliationList)(a, muc_jid)));
    const new_members = aff_lists.reduce((acc, val) => _utils_form__WEBPACK_IMPORTED_MODULE_1__["default"].isErrorObject(val) ? acc : [...val, ...acc], []);
    const known_affiliations = affiliations.filter(a => !_utils_form__WEBPACK_IMPORTED_MODULE_1__["default"].isErrorObject(aff_lists[affiliations.indexOf(a)]));
    const new_jids = new_members.map(m => m.jid).filter(m => m !== undefined);
    const new_nicks = new_members.map(m => !m.jid && m.nick || undefined).filter(m => m !== undefined);
    const removed_members = this.filter(m => {
      return known_affiliations.includes(m.get('affiliation')) && !new_nicks.includes(m.get('nick')) && !new_jids.includes(m.get('jid'));
    });
    removed_members.forEach(occupant => {
      if (occupant.get('jid') === _core_js__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid) {
        return;
      } else if (occupant.get('show') === 'offline') {
        occupant.destroy();
      } else {
        occupant.save('affiliation', null);
      }
    });
    new_members.forEach(attrs => {
      const occupant = this.findOccupant(attrs);
      occupant ? occupant.save(attrs) : this.create(attrs);
    });
    /**
     * Triggered once the member lists for this MUC have been fetched and processed.
     * @event _converse#membersFetched
     * @example _converse.api.listen.on('membersFetched', () => { ... });
     */

    _core_js__WEBPACK_IMPORTED_MODULE_6__.api.trigger('membersFetched');
  }
  /**
   * @typedef { Object} OccupantData
   * @property { String } [jid]
   * @property { String } [nick]
   * @property { String } [occupant_id]
   */

  /**
   * Try to find an existing occupant based on the passed in
   * data object.
   *
   * Fetching the user by occupant_id is the quickest, O(1),
   * since it's a dictionary lookup.
   *
   * Fetching by jid or nick is O(n), since it requires traversing an array.
   *
   * Lookup by occupant_id is done first, then jid, and then nick.
   *
   * @method _converse.ChatRoomOccupants#findOccupant
   * @param { OccupantData } data
   */


  findOccupant(data) {
    if (data.occupant_id && this.get(data.occupant_id)) {
      return this.get(data.occupant_id);
    }

    const jid = data.jid && strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(data.jid);
    return jid && this.findWhere({
      jid
    }) || data.nick && this.findWhere({
      'nick': data.nick
    });
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatRoomOccupants);

/***/ }),

/***/ "./src/headless/plugins/muc/parsers.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/muc/parsers.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMEPActivities": () => (/* binding */ getMEPActivities),
/* harmony export */   "parseMUCMessage": () => (/* binding */ parseMUCMessage),
/* harmony export */   "parseMUCPresence": () => (/* binding */ parseMUCPresence),
/* harmony export */   "parseMemberListIQ": () => (/* binding */ parseMemberListIQ)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/shared/parsers */ "./src/headless/shared/parsers.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");



const {
  Strophe,
  sizzle,
  u
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.converse.env;
const {
  NS
} = Strophe;
/**
 * Parses a message stanza for XEP-0317 MEP notification data
 * @param { XMLElement } stanza - The message stanza
 * @returns { Array } Returns an array of objects representing <activity> elements.
 */

function getMEPActivities(stanza) {
  const items_el = sizzle(`items[node="${Strophe.NS.CONFINFO}"]`, stanza).pop();

  if (!items_el) {
    return null;
  }

  const from = stanza.getAttribute('from');
  const msgid = stanza.getAttribute('id');
  const selector = `item ` + `conference-info[xmlns="${Strophe.NS.CONFINFO}"] ` + `activity[xmlns="${Strophe.NS.ACTIVITY}"]`;
  return sizzle(selector, items_el).map(el => {
    var _el$querySelector;

    const message = (_el$querySelector = el.querySelector('text')) === null || _el$querySelector === void 0 ? void 0 : _el$querySelector.textContent;

    if (message) {
      var _el$querySelector2;

      const references = (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getReferences)(stanza);
      const reason = (_el$querySelector2 = el.querySelector('reason')) === null || _el$querySelector2 === void 0 ? void 0 : _el$querySelector2.textContent;
      return {
        from,
        msgid,
        message,
        reason,
        references,
        'type': 'mep'
      };
    }

    return {};
  });
}
/**
 * Given a MUC stanza, check whether it has extended message information that
 * includes the sender's real JID, as described here:
 * https://xmpp.org/extensions/xep-0313.html#business-storeret-muc-archives
 *
 * If so, parse and return that data and return the user's JID
 *
 * Note, this function doesn't check whether this is actually a MAM archived stanza.
 *
 * @private
 * @param { XMLElement } stanza - The message stanza
 * @returns { Object }
 */

function getJIDFromMUCUserData(stanza) {
  const item = sizzle(`x[xmlns="${Strophe.NS.MUC_USER}"] item`, stanza).pop();
  return item === null || item === void 0 ? void 0 : item.getAttribute('jid');
}
/**
 * @private
 * @param { XMLElement } stanza - The message stanza
 * @param { XMLElement } original_stanza - The original stanza, that contains the
 *  message stanza, if it was contained, otherwise it's the message stanza itself.
 * @returns { Object }
 */


function getModerationAttributes(stanza) {
  const fastening = sizzle(`apply-to[xmlns="${Strophe.NS.FASTEN}"]`, stanza).pop();

  if (fastening) {
    const applies_to_id = fastening.getAttribute('id');
    const moderated = sizzle(`moderated[xmlns="${Strophe.NS.MODERATE}"]`, fastening).pop();

    if (moderated) {
      const retracted = sizzle(`retract[xmlns="${Strophe.NS.RETRACT}"]`, moderated).pop();

      if (retracted) {
        var _moderated$querySelec;

        return {
          'editable': false,
          'moderated': 'retracted',
          'moderated_by': moderated.getAttribute('by'),
          'moderated_id': applies_to_id,
          'moderation_reason': (_moderated$querySelec = moderated.querySelector('reason')) === null || _moderated$querySelec === void 0 ? void 0 : _moderated$querySelec.textContent
        };
      }
    }
  } else {
    const tombstone = sizzle(`> moderated[xmlns="${Strophe.NS.MODERATE}"]`, stanza).pop();

    if (tombstone) {
      const retracted = sizzle(`retracted[xmlns="${Strophe.NS.RETRACT}"]`, tombstone).pop();

      if (retracted) {
        var _tombstone$querySelec;

        return {
          'editable': false,
          'is_tombstone': true,
          'moderated_by': tombstone.getAttribute('by'),
          'retracted': tombstone.getAttribute('stamp'),
          'moderation_reason': (_tombstone$querySelec = tombstone.querySelector('reason')) === null || _tombstone$querySelec === void 0 ? void 0 : _tombstone$querySelec.textContent
        };
      }
    }
  }

  return {};
}

function getOccupantID(stanza, chatbox) {
  if (chatbox.features.get(Strophe.NS.OCCUPANTID)) {
    var _sizzle$pop;

    return (_sizzle$pop = sizzle(`occupant-id[xmlns="${Strophe.NS.OCCUPANTID}"]`, stanza).pop()) === null || _sizzle$pop === void 0 ? void 0 : _sizzle$pop.getAttribute('id');
  }
}
/**
 * Parses a passed in message stanza and returns an object of attributes.
 * @param { XMLElement } stanza - The message stanza
 * @param { XMLElement } original_stanza - The original stanza, that contains the
 *  message stanza, if it was contained, otherwise it's the message stanza itself.
 * @param { _converse.ChatRoom } chatbox
 * @param { _converse } _converse
 * @returns { Promise<MUCMessageAttributes|Error> }
 */


async function parseMUCMessage(stanza, chatbox) {
  var _stanza$querySelector, _stanza$querySelector2, _stanza$querySelector3, _stanza$querySelector4, _chatbox$occupants$fi;

  (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.throwErrorIfInvalidForward)(stanza);
  const selector = `[xmlns="${NS.MAM}"] > forwarded[xmlns="${NS.FORWARD}"] > message`;
  const original_stanza = stanza;
  stanza = sizzle(selector, stanza).pop() || stanza;

  if (sizzle(`message > forwarded[xmlns="${Strophe.NS.FORWARD}"]`, stanza).length) {
    return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.StanzaParseError(`Invalid Stanza: Forged MAM groupchat message from ${stanza.getAttribute('from')}`, stanza);
  }

  const delay = sizzle(`delay[xmlns="${Strophe.NS.DELAY}"]`, original_stanza).pop();
  const from = stanza.getAttribute('from');
  const from_muc = Strophe.getBareJidFromJid(from);
  const nick = Strophe.unescapeNode(Strophe.getResourceFromJid(from));
  const marker = (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getChatMarker)(stanza);
  const now = new Date().toISOString();
  /**
   * @typedef { Object } MUCMessageAttributes
   * The object which {@link parseMUCMessage} returns
   * @property { ('me'|'them') } sender - Whether the message was sent by the current user or someone else
   * @property { Array<Object> } activities - A list of objects representing XEP-0316 MEP notification data
   * @property { Array<Object> } references - A list of objects representing XEP-0372 references
   * @property { Boolean } editable - Is this message editable via XEP-0308?
   * @property { Boolean } is_archived -  Is this message from a XEP-0313 MAM archive?
   * @property { Boolean } is_carbon - Is this message a XEP-0280 Carbon?
   * @property { Boolean } is_delayed - Was delivery of this message was delayed as per XEP-0203?
   * @property { Boolean } is_encrypted -  Is this message XEP-0384  encrypted?
   * @property { Boolean } is_error - Whether an error was received for this message
   * @property { Boolean } is_headline - Is this a "headline" message?
   * @property { Boolean } is_markable - Can this message be marked with a XEP-0333 chat marker?
   * @property { Boolean } is_marker - Is this message a XEP-0333 Chat Marker?
   * @property { Boolean } is_only_emojis - Does the message body contain only emojis?
   * @property { Boolean } is_spoiler - Is this a XEP-0382 spoiler message?
   * @property { Boolean } is_tombstone - Is this a XEP-0424 tombstone?
   * @property { Boolean } is_unstyled - Whether XEP-0393 styling hints should be ignored
   * @property { Boolean } is_valid_receipt_request - Does this message request a XEP-0184 receipt (and is not from us or a carbon or archived message)
   * @property { Object } encrypted -  XEP-0384 encryption payload attributes
   * @property { String } body - The contents of the <body> tag of the message stanza
   * @property { String } chat_state - The XEP-0085 chat state notification contained in this message
   * @property { String } edited - An ISO8601 string recording the time that the message was edited per XEP-0308
   * @property { String } error_condition - The defined error condition
   * @property { String } error_text - The error text received from the server
   * @property { String } error_type - The type of error received from the server
   * @property { String } from - The sender JID (${muc_jid}/${nick})
   * @property { String } from_muc - The JID of the MUC from which this message was sent
   * @property { String } from_real_jid - The real JID of the sender, if available
   * @property { String } fullname - The full name of the sender
   * @property { String } marker - The XEP-0333 Chat Marker value
   * @property { String } marker_id - The `id` attribute of a XEP-0333 chat marker
   * @property { String } moderated - The type of XEP-0425 moderation (if any) that was applied
   * @property { String } moderated_by - The JID of the user that moderated this message
   * @property { String } moderated_id - The  XEP-0359 Stanza ID of the message that this one moderates
   * @property { String } moderation_reason - The reason provided why this message moderates another
   * @property { String } msgid - The root `id` attribute of the stanza
   * @property { String } nick - The MUC nickname of the sender
   * @property { String } occupant_id - The XEP-0421 occupant ID
   * @property { String } oob_desc - The description of the XEP-0066 out of band data
   * @property { String } oob_url - The URL of the XEP-0066 out of band data
   * @property { String } origin_id - The XEP-0359 Origin ID
   * @property { String } receipt_id - The `id` attribute of a XEP-0184 <receipt> element
   * @property { String } received - An ISO8601 string recording the time that the message was received
   * @property { String } replace_id - The `id` attribute of a XEP-0308 <replace> element
   * @property { String } retracted - An ISO8601 string recording the time that the message was retracted
   * @property { String } retracted_id - The `id` attribute of a XEP-424 <retracted> element
   * @property { String } spoiler_hint  The XEP-0382 spoiler hint
   * @property { String } stanza_id - The XEP-0359 Stanza ID. Note: the key is actualy `stanza_id ${by_jid}` and there can be multiple.
   * @property { String } subject - The <subject> element value
   * @property { String } thread - The <thread> element value
   * @property { String } time - The time (in ISO8601 format), either given by the XEP-0203 <delay> element, or of receipt.
   * @property { String } to - The recipient JID
   * @property { String } type - The type of message
   */

  let attrs = Object.assign({
    from,
    from_muc,
    nick,
    'is_forwarded': !!stanza.querySelector('forwarded'),
    'activities': getMEPActivities(stanza),
    'body': (_stanza$querySelector = stanza.querySelector('body')) === null || _stanza$querySelector === void 0 ? void 0 : (_stanza$querySelector2 = _stanza$querySelector.textContent) === null || _stanza$querySelector2 === void 0 ? void 0 : _stanza$querySelector2.trim(),
    'chat_state': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getChatState)(stanza),
    'is_archived': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.isArchived)(original_stanza),
    'is_carbon': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.isCarbon)(original_stanza),
    'is_delayed': !!delay,
    'is_headline': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.isHeadline)(stanza),
    'is_markable': !!sizzle(`markable[xmlns="${Strophe.NS.MARKERS}"]`, stanza).length,
    'is_marker': !!marker,
    'is_unstyled': !!sizzle(`unstyled[xmlns="${Strophe.NS.STYLING}"]`, stanza).length,
    'marker_id': marker && marker.getAttribute('id'),
    'msgid': stanza.getAttribute('id') || original_stanza.getAttribute('id'),
    'occupant_id': getOccupantID(stanza, chatbox),
    'receipt_id': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getReceiptId)(stanza),
    'received': new Date().toISOString(),
    'references': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getReferences)(stanza),
    'subject': (_stanza$querySelector3 = stanza.querySelector('subject')) === null || _stanza$querySelector3 === void 0 ? void 0 : _stanza$querySelector3.textContent,
    'thread': (_stanza$querySelector4 = stanza.querySelector('thread')) === null || _stanza$querySelector4 === void 0 ? void 0 : _stanza$querySelector4.textContent,
    'time': delay ? dayjs__WEBPACK_IMPORTED_MODULE_0___default()(delay.getAttribute('stamp')).toISOString() : now,
    'to': stanza.getAttribute('to'),
    'type': stanza.getAttribute('type')
  }, (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getErrorAttributes)(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getOutOfBandAttributes)(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getSpoilerAttributes)(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getCorrectionAttributes)(stanza, original_stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getStanzaIDs)(stanza, original_stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getOpenGraphMetadata)(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getRetractionAttributes)(stanza, original_stanza), getModerationAttributes(stanza), (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getEncryptionAttributes)(stanza, _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse));
  await _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.emojis.initialize();
  const from_real_jid = attrs.is_archived && getJIDFromMUCUserData(stanza, attrs) || ((_chatbox$occupants$fi = chatbox.occupants.findOccupant(attrs)) === null || _chatbox$occupants$fi === void 0 ? void 0 : _chatbox$occupants$fi.get('jid'));
  attrs = Object.assign({
    from_real_jid,
    'is_only_emojis': false,
    'is_valid_receipt_request': (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.isValidReceiptRequest)(stanza, attrs),
    'message': attrs.body || attrs.error,
    // TODO: Remove and use body and error attributes instead
    'sender': attrs.nick === chatbox.get('nick') ? 'me' : 'them'
  }, attrs);

  if (attrs.is_archived && original_stanza.getAttribute('from') !== attrs.from_muc) {
    return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.StanzaParseError(`Invalid Stanza: Forged MAM message from ${original_stanza.getAttribute('from')}`, stanza);
  } else if (attrs.is_archived && original_stanza.getAttribute('from') !== chatbox.get('jid')) {
    return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.StanzaParseError(`Invalid Stanza: Forged MAM groupchat message from ${stanza.getAttribute('from')}`, stanza);
  } else if (attrs.is_carbon) {
    return new _converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.StanzaParseError('Invalid Stanza: MUC messages SHOULD NOT be XEP-0280 carbon copied', stanza);
  } // We prefer to use one of the XEP-0359 unique and stable stanza IDs as the Model id, to avoid duplicates.


  attrs['id'] = attrs['origin_id'] || attrs[`stanza_id ${attrs.from_muc || attrs.from}`] || u.getUniqueId();
  /**
   * *Hook* which allows plugins to add additional parsing
   * @event _converse#parseMUCMessage
   */

  attrs = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.hook('parseMUCMessage', stanza, attrs); // We call this after the hook, to allow plugins to decrypt encrypted
  // messages, since we need to parse the message text to determine whether
  // there are media urls.

  return Object.assign(attrs, (0,_converse_headless_shared_parsers__WEBPACK_IMPORTED_MODULE_1__.getMediaURLsMetadata)(attrs.is_encrypted ? attrs.plaintext : attrs.body));
}
/**
 * Given an IQ stanza with a member list, create an array of objects containing
 * known member data (e.g. jid, nick, role, affiliation).
 * @private
 * @method muc_utils#parseMemberListIQ
 * @returns { MemberListItem[] }
 */

function parseMemberListIQ(iq) {
  return sizzle(`query[xmlns="${Strophe.NS.MUC_ADMIN}"] item`, iq).map(item => {
    /**
     * @typedef {Object} MemberListItem
     * Either the JID or the nickname (or both) will be available.
     * @property {string} affiliation
     * @property {string} [role]
     * @property {string} [jid]
     * @property {string} [nick]
     */
    const data = {
      'affiliation': item.getAttribute('affiliation')
    };
    const jid = item.getAttribute('jid');

    if (u.isValidJID(jid)) {
      data['jid'] = jid;
    } else {
      // XXX: Prosody sends nick for the jid attribute value
      // Perhaps for anonymous room?
      data['nick'] = jid;
    }

    const nick = item.getAttribute('nick');

    if (nick) {
      data['nick'] = nick;
    }

    const role = item.getAttribute('role');

    if (role) {
      data['role'] = nick;
    }

    return data;
  });
}
/**
 * Parses a passed in MUC presence stanza and returns an object of attributes.
 * @method parseMUCPresence
 * @param { XMLElement } stanza - The presence stanza
 * @param { _converse.ChatRoom } chatbox
 * @returns { MUCPresenceAttributes }
 */

function parseMUCPresence(stanza, chatbox) {
  /**
   * @typedef { Object } MUCPresenceAttributes
   * The object which {@link parseMUCPresence} returns
   * @property { ("offline|online") } show
   * @property { Array<MUCHat> } hats - An array of XEP-0317 hats
   * @property { Array<string> } states
   * @property { String } from - The sender JID (${muc_jid}/${nick})
   * @property { String } nick - The nickname of the sender
   * @property { String } occupant_id - The XEP-0421 occupant ID
   * @property { String } type - The type of presence
   */
  const from = stanza.getAttribute('from');
  const type = stanza.getAttribute('type');
  const data = {
    'from': from,
    'occupant_id': getOccupantID(stanza, chatbox),
    'nick': Strophe.getResourceFromJid(from),
    'type': type,
    'states': [],
    'hats': [],
    'show': type !== 'unavailable' ? 'online' : 'offline'
  };
  Array.from(stanza.children).forEach(child => {
    if (child.matches('status')) {
      data.status = child.textContent || null;
    } else if (child.matches('show')) {
      data.show = child.textContent || 'online';
    } else if (child.matches('x') && child.getAttribute('xmlns') === Strophe.NS.MUC_USER) {
      Array.from(child.children).forEach(item => {
        if (item.nodeName === 'item') {
          data.affiliation = item.getAttribute('affiliation');
          data.role = item.getAttribute('role');
          data.jid = item.getAttribute('jid');
          data.nick = item.getAttribute('nick') || data.nick;
        } else if (item.nodeName == 'status' && item.getAttribute('code')) {
          data.states.push(item.getAttribute('code'));
        }
      });
    } else if (child.matches('x') && child.getAttribute('xmlns') === Strophe.NS.VCARDUPDATE) {
      var _child$querySelector;

      data.image_hash = (_child$querySelector = child.querySelector('photo')) === null || _child$querySelector === void 0 ? void 0 : _child$querySelector.textContent;
    } else if (child.matches('hats') && child.getAttribute('xmlns') === Strophe.NS.MUC_HATS) {
      /**
       * @typedef { Object } MUCHat
       * Object representing a XEP-0371 Hat
       * @property { String } title
       * @property { String } uri
       */
      data['hats'] = Array.from(child.children).map(c => c.matches('hat') && {
        'title': c.getAttribute('title'),
        'uri': c.getAttribute('uri')
      });
    }
  });
  return data;
}

/***/ }),

/***/ "./src/headless/plugins/muc/utils.js":
/*!*******************************************!*\
  !*** ./src/headless/plugins/muc/utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "autoJoinRooms": () => (/* binding */ autoJoinRooms),
/* harmony export */   "disconnectChatRooms": () => (/* binding */ disconnectChatRooms),
/* harmony export */   "getAssignableRoles": () => (/* binding */ getAssignableRoles),
/* harmony export */   "getAutoFetchedAffiliationLists": () => (/* binding */ getAutoFetchedAffiliationLists),
/* harmony export */   "getDefaultMUCNickname": () => (/* binding */ getDefaultMUCNickname),
/* harmony export */   "isInfoVisible": () => (/* binding */ isInfoVisible),
/* harmony export */   "onAddClientFeatures": () => (/* binding */ onAddClientFeatures),
/* harmony export */   "onBeforeResourceBinding": () => (/* binding */ onBeforeResourceBinding),
/* harmony export */   "onBeforeTearDown": () => (/* binding */ onBeforeTearDown),
/* harmony export */   "onDirectMUCInvitation": () => (/* binding */ onDirectMUCInvitation),
/* harmony export */   "onStatusInitialized": () => (/* binding */ onStatusInitialized),
/* harmony export */   "onWindowStateChanged": () => (/* binding */ onWindowStateChanged),
/* harmony export */   "openChatRoom": () => (/* binding */ openChatRoom),
/* harmony export */   "registerDirectInvitationHandler": () => (/* binding */ registerDirectInvitationHandler),
/* harmony export */   "routeToRoom": () => (/* binding */ routeToRoom)
/* harmony export */ });
/* harmony import */ var lodash_es_isObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/isObject */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/plugins/muc/index.js */ "./src/headless/plugins/muc/index.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");





const {
  Strophe,
  sizzle,
  u
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.converse.env;
function getAutoFetchedAffiliationLists() {
  const affs = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('muc_fetch_members');
  return Array.isArray(affs) ? affs : affs ? ['member', 'admin', 'owner'] : [];
}
/**
 * Given an occupant model, see which roles may be assigned to that user.
 * @param { Model } occupant
 * @returns { Array<('moderator'|'participant'|'visitor')> } - An array of assignable roles
 */

function getAssignableRoles(occupant) {
  let disabled = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('modtools_disable_assign');

  if (!Array.isArray(disabled)) {
    disabled = disabled ? _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_1__.ROLES : [];
  }

  if (occupant.get('role') === 'moderator') {
    return _converse_headless_plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_1__.ROLES.filter(r => !disabled.includes(r));
  } else {
    return [];
  }
}
function registerDirectInvitationHandler() {
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.connection.addHandler(message => {
    //TOFIND RETURN SO ADDHANDLER FOR INVITES DOESNT KICK IN
    return
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.onDirectMUCInvitation(message);

    return true;
  }, 'jabber:x:conference', 'message');
}
function disconnectChatRooms() {
  /* When disconnecting, mark all groupchats as
   * disconnected, so that they will be properly entered again
   * when fetched from session storage.
   */
  return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.chatboxes.filter(m => m.get('type') === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.CHATROOMS_TYPE).forEach(m => m.session.save({
    'connection_status': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.converse.ROOMSTATUS.DISCONNECTED
  }));
}
async function onWindowStateChanged(data) {
  if (data.state === 'visible' && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.connection.connected()) {
    const rooms = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.rooms.get();
    rooms.forEach(room => room.rejoinIfNecessary());
  }
}
async function routeToRoom(jid) {
  if (!u.isValidMUCJID(jid)) {
    return _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`invalid jid "${jid}" provided in url fragment`);
  }

  await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.waitUntil('roomsAutoJoined');

  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('allow_bookmarks')) {
    await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.waitUntil('bookmarksInitialized');
  }

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.rooms.open(jid);
}
/* Opens a groupchat, making sure that certain attributes
 * are correct, for example that the "type" is set to
 * "chatroom".
 */

async function openChatRoom(jid, settings) {
  settings.type = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.CHATROOMS_TYPE;
  settings.id = jid;
  const chatbox = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.rooms.get(jid, settings, true);
  chatbox.maybeShow(true);
  return chatbox;
}
/**
 * A direct MUC invitation to join a groupchat has been received
 * See XEP-0249: Direct MUC invitations.
 * @private
 * @method _converse.ChatRoom#onDirectMUCInvitation
 * @param { XMLElement } message - The message stanza containing the invitation.
 */

async function onDirectMUCInvitation(message) {
  const {
    __
  } = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse;
  const x_el = sizzle('x[xmlns="jabber:x:conference"]', message).pop(),
        from = Strophe.getBareJidFromJid(message.getAttribute('from')),
        room_jid = x_el.getAttribute('jid'),
        reason = x_el.getAttribute('reason');
  let result;

  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('auto_join_on_invite')) {
    result = true;
  } else {
    // Invite request might come from someone not your roster list
    let contact = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.roster.get(from);

    contact = contact ? contact.getDisplayName() : from;

    if (!reason) {
      result = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.confirm(__('%1$s has invited you to join a groupchat: %2$s', contact, room_jid));
    } else {
      result = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.confirm(__('%1$s has invited you to join a groupchat: %2$s, and left the following reason: "%3$s"', contact, room_jid, reason));
    }
  }

  if (result) {
    const chatroom = await openChatRoom(room_jid, {
      'password': x_el.getAttribute('password')
    });

    if (chatroom.session.get('connection_status') === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.converse.ROOMSTATUS.DISCONNECTED) {
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.chatboxes.get(room_jid).rejoin();
    }
  }
}
function getDefaultMUCNickname() {
  // XXX: if anything changes here, update the docs for the
  // locked_muc_nickname setting.
  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.xmppstatus) {
    throw new Error("Can't call _converse.getDefaultMUCNickname before the statusInitialized has been fired.");
  }

  const nick = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.xmppstatus.getNickname();

  if (nick) {
    return nick;
  } else if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('muc_nickname_from_jid')) {
    return Strophe.unescapeNode(Strophe.getNodeFromJid(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.bare_jid));
  }
}
/**
 * Determines info message visibility based on
 * muc_show_info_messages configuration setting
 * @param {*} code
 * @memberOf _converse
 */

function isInfoVisible(code) {
  const info_messages = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('muc_show_info_messages');

  if (info_messages.includes(code)) {
    return true;
  }

  return false;
}
/**
 * Automatically join groupchats, based on the
 * "auto_join_rooms" configuration setting, which is an array
 * of strings (groupchat JIDs) or objects (with groupchat JID and other settings).
 */

async function autoJoinRooms() {
  await Promise.all(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('auto_join_rooms').map(muc => {
    if (typeof muc === 'string') {
      if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.chatboxes.where({
        'jid': muc
      }).length) {
        return Promise.resolve();
      }

      return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.rooms.open(muc);
    } else if ((0,lodash_es_isObject__WEBPACK_IMPORTED_MODULE_4__["default"])(muc)) {
      return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.rooms.open(muc.jid, { ...muc
      });
    } else {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error('Invalid muc criteria specified for "auto_join_rooms"');
      return Promise.resolve();
    }
  }));
  /**
   * Triggered once any rooms that have been configured to be automatically joined,
   * specified via the _`auto_join_rooms` setting, have been entered.
   * @event _converse#roomsAutoJoined
   * @example _converse.api.listen.on('roomsAutoJoined', () => { ... });
   * @example _converse.api.waitUntil('roomsAutoJoined').then(() => { ... });
   */

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.trigger('roomsAutoJoined');
}
function onAddClientFeatures() {
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.disco.own.features.add(Strophe.NS.MUC);

  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('allow_muc_invitations')) {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.disco.own.features.add('jabber:x:conference'); // Invites
  }
}
function onBeforeTearDown() {
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.chatboxes.where({
    'type': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.CHATROOMS_TYPE
  }).forEach(muc => (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_3__.safeSave)(muc.session, {
    'connection_status': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.converse.ROOMSTATUS.DISCONNECTED
  }));
}
function onStatusInitialized() {
  window.addEventListener(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.unloadevent, () => {
    const using_websocket = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.connection.isType('websocket');

    if (using_websocket && (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('enable_smacks') || !_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.session.get('smacks_stream_id'))) {
      // For non-SMACKS websocket connections, or non-resumeable
      // connections, we disconnect all chatrooms when the page unloads.
      // See issue #1111
      disconnectChatRooms();
    }
  });
}
function onBeforeResourceBinding() {
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.connection.addHandler(stanza => {
    const muc_jid = Strophe.getBareJidFromJid(stanza.getAttribute('from'));

    if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.chatboxes.get(muc_jid)) {
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__.api.waitUntil('chatBoxesFetched').then(async () => {
        const muc = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse.chatboxes.get(muc_jid);

        if (muc) {
          await muc.initialized;
          muc.message_handler.run(stanza);
        }
      });
    }

    return true;
  }, null, 'message', 'groupchat');
}
Object.assign(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_2__._converse, {
  getAssignableRoles
});

/***/ }),

/***/ "./src/headless/plugins/ping/api.js":
/*!******************************************!*\
  !*** ./src/headless/plugins/ping/api.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/ping/utils.js");



const {
  Strophe,
  $iq,
  u
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * Pings the service represented by the passed in JID by sending an IQ stanza.
   * @private
   * @method api.ping
   * @param { String } [jid] - The JID of the service to ping
   * @param { Integer } [timeout] - The amount of time in
   *  milliseconds to wait for a response. The default is 10000;
   */
  async ping(jid, timeout) {
    // XXX: We could first check here if the server advertised that it supports PING.
    // However, some servers don't advertise while still responding to pings
    //
    // const feature = _converse.disco_entities[_converse.domain].features.findWhere({'var': Strophe.NS.PING});
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.setLastStanzaDate)(new Date());
    jid = jid || Strophe.getDomainFromJid(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid);

    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection) {
      const iq = $iq({
        'type': 'get',
        'to': jid,
        'id': u.getUniqueId('ping')
      }).c('ping', {
        'xmlns': Strophe.NS.PING
      });
      const result = await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ(iq, timeout || 10000, false);

      if (result === null) {
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Timeout while pinging ${jid}`);

        if (jid === Strophe.getDomainFromJid(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid)) {
          _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.connection.reconnect();
        }
      } else if (u.isErrorStanza(result)) {
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Error while pinging ${jid}`);
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(result);
      }

      return true;
    }

    return false;
  }

});

/***/ }),

/***/ "./src/headless/plugins/ping/index.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/ping/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/ping/api.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/ping/utils.js");
/**
 * @description
 * Converse.js plugin which add support for application-level pings
 * as specified in XEP-0199 XMPP Ping.
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */



const {
  Strophe
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;
Strophe.addNamespace('PING', "urn:xmpp:ping");
_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.plugins.add('converse-ping', {
  initialize() {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.extend({
      ping_interval: 60 //in seconds

    });
    Object.assign(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api, _api_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
    setInterval(_utils_js__WEBPACK_IMPORTED_MODULE_2__.onEverySecond, 1000);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.listen.on('connected', _utils_js__WEBPACK_IMPORTED_MODULE_2__.onConnected);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.listen.on('reconnected', _utils_js__WEBPACK_IMPORTED_MODULE_2__.onConnected);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.listen.on('windowStateChanged', _utils_js__WEBPACK_IMPORTED_MODULE_2__.onWindowStateChanged);
  }

});

/***/ }),

/***/ "./src/headless/plugins/ping/utils.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/ping/utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onConnected": () => (/* binding */ onConnected),
/* harmony export */   "onEverySecond": () => (/* binding */ onEverySecond),
/* harmony export */   "onWindowStateChanged": () => (/* binding */ onWindowStateChanged),
/* harmony export */   "registerPingHandler": () => (/* binding */ registerPingHandler),
/* harmony export */   "registerPongHandler": () => (/* binding */ registerPongHandler),
/* harmony export */   "setLastStanzaDate": () => (/* binding */ setLastStanzaDate)
/* harmony export */ });
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");

const {
  Strophe,
  $iq
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;
let lastStanzaDate;
function onWindowStateChanged(data) {
  if (data.state === 'visible' && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.connection.connected()) {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.ping(null, 5000);
  }
}
function setLastStanzaDate(date) {
  lastStanzaDate = date;
}

function pong(ping) {
  lastStanzaDate = new Date();
  const from = ping.getAttribute('from');
  const id = ping.getAttribute('id');
  const iq = $iq({
    type: 'result',
    to: from,
    id: id
  });

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.sendIQ(iq);

  return true;
}

function registerPongHandler() {
  const {
    connection
  } = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse;

  if (connection.disco) {
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.disco.own.features.add(Strophe.NS.PING);
  }

  return connection.addHandler(pong, Strophe.NS.PING, "iq", "get");
}
function registerPingHandler() {
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.connection.addHandler(() => {
    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.settings.get('ping_interval') > 0) {
      // Handler on each stanza, saves the received date
      // in order to ping only when needed.
      lastStanzaDate = new Date();
      return true;
    }
  });
}
function onConnected() {
  // Wrapper so that we can spy on registerPingHandler in tests
  registerPongHandler();
  registerPingHandler();
}
function onEverySecond() {
  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.isTestEnv() || !_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.connection.connected()) {
    return;
  }

  const ping_interval = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.settings.get('ping_interval');

  if (ping_interval > 0) {
    const now = new Date();

    if (!lastStanzaDate) {
      lastStanzaDate = now;
    }

    if ((now - lastStanzaDate) / 1000 > ping_interval) {
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.ping();
    }
  }
}

/***/ }),

/***/ "./src/headless/plugins/pubsub.js":
/*!****************************************!*\
  !*** ./src/headless/plugins/pubsub.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _disco_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./disco/index.js */ "./src/headless/plugins/disco/index.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.js */ "./src/headless/core.js");
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../log.js */ "./src/headless/log.js");
/**
 * @module converse-pubsub
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */



const {
  Strophe,
  $iq
} = _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;
Strophe.addNamespace('PUBSUB_ERROR', Strophe.NS.PUBSUB + "#errors");
_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.plugins.add('converse-pubsub', {
  dependencies: ["converse-disco"],

  initialize() {
    /************************ BEGIN API ************************/
    // We extend the default converse.js API to add methods specific to MUC groupchats.
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.api, {
      /**
       * The "pubsub" namespace groups methods relevant to PubSub
       *
       * @namespace _converse.api.pubsub
       * @memberOf _converse.api
       */
      'pubsub': {
        /**
         * Publshes an item to a PubSub node
         *
         * @method _converse.api.pubsub.publish
         * @param {string} jid The JID of the pubsub service where the node resides.
         * @param {string} node The node being published to
         * @param {Strophe.Builder} item The Strophe.Builder representation of the XML element being published
         * @param {object} options An object representing the publisher options
         *      (see https://xmpp.org/extensions/xep-0060.html#publisher-publish-options)
         * @param {boolean} strict_options Indicates whether the publisher
         *      options are a strict requirement or not. If they're NOT
         *      strict, then Converse will publish to the node even if
         *      the publish options precondication cannot be met.
         */
        async 'publish'(jid, node, item, options) {
          let strict_options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
          const stanza = $iq({
            'from': _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid,
            'type': 'set',
            'to': jid
          }).c('pubsub', {
            'xmlns': Strophe.NS.PUBSUB
          }).c('publish', {
            'node': node
          }).cnode(item.tree()).up().up();

          if (options) {
            jid = jid || _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid;

            if (await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.supports(Strophe.NS.PUBSUB + '#publish-options', jid)) {
              stanza.c('publish-options').c('x', {
                'xmlns': Strophe.NS.XFORM,
                'type': 'submit'
              }).c('field', {
                'var': 'FORM_TYPE',
                'type': 'hidden'
              }).c('value').t(`${Strophe.NS.PUBSUB}#publish-options`).up().up();
              Object.keys(options).forEach(k => stanza.c('field', {
                'var': k
              }).c('value').t(options[k]).up().up());
            } else {
              _log_js__WEBPACK_IMPORTED_MODULE_2__["default"].warn(`_converse.api.publish: ${jid} does not support #publish-options, ` + `so we didn't set them even though they were provided.`);
            }
          }

          try {
            await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ(stanza);
          } catch (iq) {
            if (iq instanceof Element && strict_options && iq.querySelector(`precondition-not-met[xmlns="${Strophe.NS.PUBSUB_ERROR}"]`)) {
              // The publish-options precondition couldn't be
              // met. We re-publish but without publish-options.
              const el = stanza.nodeTree;
              el.querySelector('publish-options').outerHTML = '';
              _log_js__WEBPACK_IMPORTED_MODULE_2__["default"].warn(`PubSub: Republishing without publish options. ${el.outerHTML}`);
              await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ(el);
            } else {
              throw iq;
            }
          }
        }

      }
    });
    /************************ END API ************************/
  }

});

/***/ }),

/***/ "./src/headless/plugins/roster/api.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/roster/api.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");

const {
  Strophe
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.converse.env;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * @namespace _converse.api.contacts
   * @memberOf _converse.api
   */
  contacts: {
    /**
     * This method is used to retrieve roster contacts.
     *
     * @method _converse.api.contacts.get
     * @params {(string[]|string)} jid|jids The JID or JIDs of
     *      the contacts to be returned.
     * @returns {promise} Promise which resolves with the
     *  _converse.RosterContact (or an array of them) representing the contact.
     *
     * @example
     * // Fetch a single contact
     * _converse.api.listen.on('rosterContactsFetched', function () {
     *     const contact = await _converse.api.contacts.get('buddy@example.com')
     *     // ...
     * });
     *
     * @example
     * // To get multiple contacts, pass in an array of JIDs:
     * _converse.api.listen.on('rosterContactsFetched', function () {
     *     const contacts = await _converse.api.contacts.get(
     *         ['buddy1@example.com', 'buddy2@example.com']
     *     )
     *     // ...
     * });
     *
     * @example
     * // To return all contacts, simply call ``get`` without any parameters:
     * _converse.api.listen.on('rosterContactsFetched', function () {
     *     const contacts = await _converse.api.contacts.get();
     *     // ...
     * });
     */
    async get(jids) {
      await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('rosterContactsFetched');

      const _getter = jid => _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.roster.get(Strophe.getBareJidFromJid(jid));

      if (jids === undefined) {
        jids = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.roster.pluck('jid');
      } else if (typeof jids === 'string') {
        return _getter(jids);
      }

      return jids.map(_getter);
    },

    /**
     * Add a contact.
     *
     * @method _converse.api.contacts.add
     * @param {string} jid The JID of the contact to be added
     * @param {string} [name] A custom name to show the user by in the roster
     * @example
     *     _converse.api.contacts.add('buddy@example.com')
     * @example
     *     _converse.api.contacts.add('buddy@example.com', 'Buddy')
     */
    async add(jid, name) {
      await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('rosterContactsFetched');

      if (typeof jid !== 'string' || !jid.includes('@')) {
        throw new TypeError('contacts.add: invalid jid');
      }

      return _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.roster.addAndSubscribe(jid, name);
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/roster/contact.js":
/*!************************************************!*\
  !*** ./src/headless/plugins/roster/contact.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/roster/utils.js");




const {
  Strophe,
  $iq,
  $pres
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.converse.env;
/**
 * @class
 * @namespace RosterContact
 */

const RosterContact = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.extend({
  idAttribute: 'jid',
  defaults: {
    'chat_state': undefined,
    'groups': [],
    'image': _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.DEFAULT_IMAGE,
    'image_type': _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.DEFAULT_IMAGE_TYPE,
    'num_unread': 0,
    'status': undefined
  },

  async initialize(attributes) {
    this.initialized = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_2__.getOpenPromise)();
    this.setPresence();
    const {
      jid
    } = attributes;
    this.set({ ...attributes,
      ...{
        'jid': Strophe.getBareJidFromJid(jid).toLowerCase(),
        'user_id': Strophe.getNodeFromJid(jid)
      }
    });
    /**
     * When a contact's presence status has changed.
     * The presence status is either `online`, `offline`, `dnd`, `away` or `xa`.
     * @event _converse#contactPresenceChanged
     * @type { _converse.RosterContact }
     * @example _converse.api.listen.on('contactPresenceChanged', contact => { ... });
     */

    this.listenTo(this.presence, 'change:show', () => _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.trigger('contactPresenceChanged', this));
    this.listenTo(this.presence, 'change:show', () => this.trigger('presenceChanged'));
    /**
     * Synchronous event which provides a hook for further initializing a RosterContact
     * @event _converse#rosterContactInitialized
     * @param { _converse.RosterContact } contact
     */

    await _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.trigger('rosterContactInitialized', this, {
      'Synchronous': true
    });
    this.initialized.resolve();
  },

  setPresence() {
    const jid = this.get('jid');
    this.presence = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.presences.findWhere(jid) || _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.presences.create({
      jid
    });
  },

  openChat() {
    const attrs = this.attributes;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.chats.open(attrs.jid, attrs, true);
  },

  /**
   * Return a string of tab-separated values that are to be used when
   * matching against filter text.
   *
   * The goal is to be able to filter against the VCard fullname,
   * roster nickname and JID.
   * @returns { String } Lower-cased, tab-separated values
   */
  getFilterCriteria() {
    const nick = this.get('nickname');
    const jid = this.get('jid');
    let criteria = this.getDisplayName();
    criteria = !criteria.includes(jid) ? criteria.concat(`   ${jid}`) : criteria;
    criteria = !criteria.includes(nick) ? criteria.concat(`   ${nick}`) : criteria;
    return criteria.toLowerCase();
  },

  getDisplayName() {
    // Gets overridden in converse-vcard where the fullname is may be returned
    if (this.get('nickname')) {
      return this.get('nickname');
    } else {
      return this.get('jid');
    }
  },

  getFullname() {
    // Gets overridden in converse-vcard where the fullname may be returned
    return this.get('jid');
  },

  /**
   * Send a presence subscription request to this roster contact
   * @private
   * @method _converse.RosterContacts#subscribe
   * @param { String } message - An optional message to explain the
   *      reason for the subscription request.
   */
  subscribe(message) {
    const pres = $pres({
      to: this.get('jid'),
      type: "subscribe"
    });

    if (message && message !== "") {
      pres.c("status").t(message).up();
    }

    const nick = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.xmppstatus.getNickname() || _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.xmppstatus.getFullname();

    if (nick) {
      pres.c('nick', {
        'xmlns': Strophe.NS.NICK
      }).t(nick).up();
    }

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.send(pres);
    this.save('ask', "subscribe"); // ask === 'subscribe' Means we have asked to subscribe to them.

    return this;
  },

  /**
   * Upon receiving the presence stanza of type "subscribed",
   * the user SHOULD acknowledge receipt of that subscription
   * state notification by sending a presence stanza of type
   * "subscribe" to the contact
   * @private
   * @method _converse.RosterContacts#ackSubscribe
   */
  ackSubscribe() {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.send($pres({
      'type': 'subscribe',
      'to': this.get('jid')
    }));
  },

  /**
   * Upon receiving the presence stanza of type "unsubscribed",
   * the user SHOULD acknowledge receipt of that subscription state
   * notification by sending a presence stanza of type "unsubscribe"
   * this step lets the user's server know that it MUST no longer
   * send notification of the subscription state change to the user.
   * @private
   * @method _converse.RosterContacts#ackUnsubscribe
   * @param { String } jid - The Jabber ID of the user who is unsubscribing
   */
  ackUnsubscribe() {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.send($pres({
      'type': 'unsubscribe',
      'to': this.get('jid')
    }));
    this.removeFromRoster();
    this.destroy();
  },

  /**
   * Unauthorize this contact's presence subscription
   * @private
   * @method _converse.RosterContacts#unauthorize
   * @param { String } message - Optional message to send to the person being unauthorized
   */
  unauthorize(message) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.rejectPresenceSubscription)(this.get('jid'), message);
    return this;
  },

  /**
   * Authorize presence subscription
   * @private
   * @method _converse.RosterContacts#authorize
   * @param { String } message - Optional message to send to the person being authorized
   */
  authorize(message) {
    const pres = $pres({
      'to': this.get('jid'),
      'type': "subscribed"
    });

    if (message && message !== "") {
      pres.c("status").t(message);
    }

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.send(pres);
    return this;
  },

  /**
   * Instruct the XMPP server to remove this contact from our roster
   * @private
   * @method _converse.RosterContacts#
   * @returns { Promise }
   */
  removeFromRoster() {
    const iq = $iq({
      type: 'set'
    }).c('query', {
      xmlns: Strophe.NS.ROSTER
    }).c('item', {
      jid: this.get('jid'),
      subscription: "remove"
    });
    return _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ(iq);
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RosterContact);

/***/ }),

/***/ "./src/headless/plugins/roster/contacts.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/roster/contacts.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _contact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contact.js */ "./src/headless/plugins/roster/contact.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var lodash_es_sum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/sum */ "./node_modules/lodash-es/sum.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _converse_skeletor_src_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/skeletor/src/model */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/roster/utils.js");








const {
  Strophe,
  $iq,
  sizzle,
  u
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.converse.env;
const RosterContacts = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_2__.Collection.extend({
  model: _contact_js__WEBPACK_IMPORTED_MODULE_0__["default"],

  initialize() {
    const id = `roster.state-${_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.bare_jid}-${this.get('jid')}`;
    this.state = new _converse_skeletor_src_model__WEBPACK_IMPORTED_MODULE_3__.Model({
      id,
      'collapsed_groups': []
    });
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_5__.initStorage)(this.state, id);
    this.state.fetch();
  },

  onConnected() {
    // Called as soon as the connection has been established
    // (either after initial login, or after reconnection).
    // Use the opportunity to register stanza handlers.
    this.registerRosterHandler();
    this.registerRosterXHandler();
  },

  registerRosterHandler() {
    // Register a handler for roster IQ "set" stanzas, which update
    // roster contacts.
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.connection.addHandler(iq => {
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.roster.onRosterPush(iq);

      return true;
    }, Strophe.NS.ROSTER, 'iq', "set");
  },

  registerRosterXHandler() {
    // Register a handler for RosterX message stanzas, which are
    // used to suggest roster contacts to a user.
    let t = 0;

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.connection.addHandler(function (msg) {
      window.setTimeout(function () {
        _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.connection.flush();

        _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.roster.subscribeToSuggestedItems.bind(_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.roster)(msg);
      }, t);
      t += msg.querySelectorAll('item').length * 250;
      return true;
    }, Strophe.NS.ROSTERX, 'message', null);
  },

  /**
   * Fetches the roster contacts, first by trying the browser cache,
   * and if that's empty, then by querying the XMPP server.
   * @returns {promise} Promise which resolves once the contacts have been fetched.
   */
  async fetchRosterContacts() {
    const result = await new Promise((resolve, reject) => {
      this.fetch({
        'add': true,
        'silent': true,
        'success': resolve,
        'error': (_, e) => reject(e)
      });
    });

    if (u.isErrorObject(result)) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(result); // Force a full roster refresh

      _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.session.save('roster_cached', false);

      this.data.save('version', undefined);
    }

    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.session.get('roster_cached')) {
      /**
       * The contacts roster has been retrieved from the local cache (`sessionStorage`).
       * @event _converse#cachedRoster
       * @type { _converse.RosterContacts }
       * @example _converse.api.listen.on('cachedRoster', (items) => { ... });
       * @example _converse.api.waitUntil('cachedRoster').then(items => { ... });
       */
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.trigger('cachedRoster', result);
    } else {
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.send_initial_presence = true;
      return _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.roster.fetchFromServer();
    }
  },

  subscribeToSuggestedItems(msg) {
    Array.from(msg.querySelectorAll('item')).forEach(item => {
      if (item.getAttribute('action') === 'add') {
        _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.roster.addAndSubscribe(item.getAttribute('jid'), _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.xmppstatus.getNickname() || _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.xmppstatus.getFullname());
      }
    });
    return true;
  },

  isSelf(jid) {
    return u.isSameBareJID(jid, _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.connection.jid);
  },

  /**
   * Add a roster contact and then once we have confirmation from
   * the XMPP server we subscribe to that contact's presence updates.
   * @method _converse.RosterContacts#addAndSubscribe
   * @param { String } jid - The Jabber ID of the user being added and subscribed to.
   * @param { String } name - The name of that user
   * @param { Array.String } groups - Any roster groups the user might belong to
   * @param { String } message - An optional message to explain the reason for the subscription request.
   * @param { Object } attributes - Any additional attributes to be stored on the user's model.
   */
  async addAndSubscribe(jid, name, groups, message, attributes) {
    const contact = await this.addContactToRoster(jid, name, groups, attributes);

    if (contact instanceof _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.RosterContact) {
      contact.subscribe(message);
    }
  },

  /**
   * Send an IQ stanza to the XMPP server to add a new roster contact.
   * @method _converse.RosterContacts#sendContactAddIQ
   * @param { String } jid - The Jabber ID of the user being added
   * @param { String } name - The name of that user
   * @param { Array.String } groups - Any roster groups the user might belong to
   * @param { Function } callback - A function to call once the IQ is returned
   * @param { Function } errback - A function to call if an error occurred
   */
  sendContactAddIQ(jid, name, groups) {
    name = name ? name : null;
    const iq = $iq({
      'type': 'set'
    }).c('query', {
      'xmlns': Strophe.NS.ROSTER
    }).c('item', {
      jid,
      name
    });
    groups.forEach(g => iq.c('group').t(g).up());
    return _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.sendIQ(iq);
  },

  /**
   * Adds a RosterContact instance to _converse.roster and
   * registers the contact on the XMPP server.
   * Returns a promise which is resolved once the XMPP server has responded.
   * @method _converse.RosterContacts#addContactToRoster
   * @param { String } jid - The Jabber ID of the user being added and subscribed to.
   * @param { String } name - The name of that user
   * @param { Array.String } groups - Any roster groups the user might belong to
   * @param { Object } attributes - Any additional attributes to be stored on the user's model.
   */
  async addContactToRoster(jid, name, groups, attributes) {
    await _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.waitUntil('rosterContactsFetched');
    groups = groups || [];

    try {
      await this.sendContactAddIQ(jid, name, groups);
    } catch (e) {
      const {
        __
      } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse;
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(e);
      alert(__('Sorry, there was an error while trying to add %1$s as a contact.', name || jid));
      return e;
    }

    return this.create(Object.assign({
      'ask': undefined,
      'nickname': name,
      groups,
      jid,
      'requesting': false,
      'subscription': 'none'
    }, attributes), {
      'sort': false
    });
  },

  async subscribeBack(bare_jid, presence) {
    const contact = this.get(bare_jid);

    if (contact instanceof _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.RosterContact) {
      contact.authorize().subscribe();
    } else {
      var _sizzle$pop;

      // Can happen when a subscription is retried or roster was deleted
      const nickname = ((_sizzle$pop = sizzle(`nick[xmlns="${Strophe.NS.NICK}"]`, presence).pop()) === null || _sizzle$pop === void 0 ? void 0 : _sizzle$pop.textContent) || null;
      const contact = await this.addContactToRoster(bare_jid, nickname, [], {
        'subscription': 'from'
      });

      if (contact instanceof _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.RosterContact) {
        contact.authorize().subscribe();
      }
    }
  },

  getNumOnlineContacts() {
    const ignored = ['offline', 'unavailable'];
    return (0,lodash_es_sum__WEBPACK_IMPORTED_MODULE_7__["default"])(this.models.filter(m => !ignored.includes(m.presence.get('show'))));
  },

  /**
   * Handle roster updates from the XMPP server.
   * See: https://xmpp.org/rfcs/rfc6121.html#roster-syntax-actions-push
   * @method _converse.RosterContacts#onRosterPush
   * @param { XMLElement } IQ - The IQ stanza received from the XMPP server.
   */
  onRosterPush(iq) {
    const id = iq.getAttribute('id');
    const from = iq.getAttribute('from');

    if (from && from !== _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.bare_jid) {
      // https://tools.ietf.org/html/rfc6121#page-15
      //
      // A receiving client MUST ignore the stanza unless it has no 'from'
      // attribute (i.e., implicitly from the bare JID of the user's
      // account) or it has a 'from' attribute whose value matches the
      // user's bare JID <user@domainpart>.
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(`Ignoring roster illegitimate roster push message from ${iq.getAttribute('from')}`);
      return;
    }

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.send($iq({
      type: 'result',
      id,
      from: _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.connection.jid
    }));
    const query = sizzle(`query[xmlns="${Strophe.NS.ROSTER}"]`, iq).pop();
    this.data.save('version', query.getAttribute('ver'));
    const items = sizzle(`item`, query);

    if (items.length > 1) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(iq);
      throw new Error('Roster push query may not contain more than one "item" element.');
    }

    if (items.length === 0) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn(iq);
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn('Received a roster push stanza without an "item" element.');
      return;
    }

    this.updateContact(items.pop());
    /**
     * When the roster receives a push event from server (i.e. new entry in your contacts roster).
     * @event _converse#rosterPush
     * @type { XMLElement }
     * @example _converse.api.listen.on('rosterPush', iq => { ... });
     */

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.trigger('rosterPush', iq);
    return;
  },

  rosterVersioningSupported() {
    return _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.disco.stream.getFeature('ver', 'urn:xmpp:features:rosterver') && this.data.get('version');
  },

  /**
   * Fetch the roster from the XMPP server
   * @emits _converse#roster
   * @returns {promise}
   */
  async fetchFromServer() {
    const stanza = $iq({
      'type': 'get',
      'id': u.getUniqueId('roster')
    }).c('query', {
      xmlns: Strophe.NS.ROSTER
    });

    if (this.rosterVersioningSupported()) {
      stanza.attrs({
        'ver': this.data.get('version')
      });
    }

    const iq = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.sendIQ(stanza, null, false);

    if (iq.getAttribute('type') === 'result') {
      const query = sizzle(`query[xmlns="${Strophe.NS.ROSTER}"]`, iq).pop();

      if (query) {
        const items = sizzle(`item`, query);

        if (!this.data.get('version') && this.models.length) {
          // We're getting the full roster, so remove all cached
          // contacts that aren't included in it.
          const jids = items.map(item => item.getAttribute('jid'));
          this.forEach(m => !m.get('requesting') && !jids.includes(m.get('jid')) && m.destroy());
        }

        items.forEach(item => this.updateContact(item));
        this.data.save('version', query.getAttribute('ver'));
      }
    } else if (!u.isServiceUnavailableError(iq)) {
      // Some unknown error happened, so we will try to fetch again if the page reloads.
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(iq);
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error("Error while trying to fetch roster from the server");
      return;
    }

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.session.save('roster_cached', true);
    /**
     * When the roster has been received from the XMPP server.
     * See also the `cachedRoster` event further up, which gets called instead of
     * `roster` if its already in `sessionStorage`.
     * @event _converse#roster
     * @type { XMLElement }
     * @example _converse.api.listen.on('roster', iq => { ... });
     * @example _converse.api.waitUntil('roster').then(iq => { ... });
     */


    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.trigger('roster', iq);
  },

  /**
   * Update or create RosterContact models based on the given `item` XML
   * node received in the resulting IQ stanza from the server.
   * @param { XMLElement } item
   */
  updateContact(item) {
    const jid = item.getAttribute('jid');
    const contact = this.get(jid);
    const subscription = item.getAttribute("subscription");

    if (subscription === "remove") {
      return contact === null || contact === void 0 ? void 0 : contact.destroy();
    }

    const ask = item.getAttribute("ask");
    const nickname = item.getAttribute('name');
    const groups = [...new Set(sizzle('group', item).map(e => e.textContent))];

    if (contact) {
      // We only find out about requesting contacts via the
      // presence handler, so if we receive a contact
      // here, we know they aren't requesting anymore.
      contact.save({
        subscription,
        ask,
        nickname,
        groups,
        'requesting': null
      });
    } else {
      this.create({
        nickname,
        ask,
        groups,
        jid,
        subscription
      }, {
        sort: false
      });
    }
  },

  createRequestingContact(presence) {
    var _sizzle$pop2;

    const bare_jid = Strophe.getBareJidFromJid(presence.getAttribute('from'));
    const nickname = ((_sizzle$pop2 = sizzle(`nick[xmlns="${Strophe.NS.NICK}"]`, presence).pop()) === null || _sizzle$pop2 === void 0 ? void 0 : _sizzle$pop2.textContent) || null;
    const user_data = {
      'jid': bare_jid,
      'subscription': 'none',
      'ask': null,
      'requesting': true,
      'nickname': nickname
    };
    /**
     * Triggered when someone has requested to subscribe to your presence (i.e. to be your contact).
     * @event _converse#contactRequest
     * @type { _converse.RosterContact }
     * @example _converse.api.listen.on('contactRequest', contact => { ... });
     */

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.trigger('contactRequest', this.create(user_data));
  },

  handleIncomingSubscription(presence) {
    //TOFIND handled subscriptions ourselves now so added return
    return 
    const jid = presence.getAttribute('from'),
          bare_jid = Strophe.getBareJidFromJid(jid),
          contact = this.get(bare_jid);

    if (!_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('allow_contact_requests')) {
      const {
        __
      } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse;
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.rejectPresenceSubscription)(jid, __("This client does not allow presence subscriptions"));
    }

    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('auto_subscribe')) {
      if (!contact || contact.get('subscription') !== 'to') {
        this.subscribeBack(bare_jid, presence);
      } else {
        contact.authorize();
      }
    } else {
      if (contact) {
        if (contact.get('subscription') !== 'none') {
          contact.authorize();
        } else if (contact.get('ask') === "subscribe") {
          contact.authorize();
        }
      } else {
        this.createRequestingContact(presence);
      }
    }
  },

  handleOwnPresence(presence) {
    const jid = presence.getAttribute('from'),
          resource = Strophe.getResourceFromJid(jid),
          presence_type = presence.getAttribute('type');

    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.connection.jid !== jid && presence_type !== 'unavailable' && (_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('synchronize_availability') === true || _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('synchronize_availability') === resource)) {
      var _presence$querySelect, _presence$querySelect2;

      // Another resource has changed its status and
      // synchronize_availability option set to update,
      // we'll update ours as well.
      const show = ((_presence$querySelect = presence.querySelector('show')) === null || _presence$querySelect === void 0 ? void 0 : _presence$querySelect.textContent) || 'online';

      _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.xmppstatus.save({
        'status': show
      }, {
        'silent': true
      });

      const status_message = (_presence$querySelect2 = presence.querySelector('status')) === null || _presence$querySelect2 === void 0 ? void 0 : _presence$querySelect2.textContent;

      if (status_message) {
        _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.xmppstatus.save({
          'status_message': status_message
        });
      }
    }

    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_4__._converse.jid === jid && presence_type === 'unavailable') {
      // XXX: We've received an "unavailable" presence from our
      // own resource. Apparently this happens due to a
      // Prosody bug, whereby we send an IQ stanza to remove
      // a roster contact, and Prosody then sends
      // "unavailable" globally, instead of directed to the
      // particular user that's removed.
      //
      // Here is the bug report: https://prosody.im/issues/1121
      //
      // I'm not sure whether this might legitimately happen
      // in other cases.
      //
      // As a workaround for now we simply send our presence again,
      // otherwise we're treated as offline.
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_4__.api.user.presence.send();
    }
  },

  presenceHandler(presence) {
    var _presence$querySelect3;

    const presence_type = presence.getAttribute('type');
    if (presence_type === 'error') return true;
    const jid = presence.getAttribute('from');
    const bare_jid = Strophe.getBareJidFromJid(jid);

    if (this.isSelf(bare_jid)) {
      return this.handleOwnPresence(presence);
    } else if (sizzle(`query[xmlns="${Strophe.NS.MUC}"]`, presence).length) {
      return; // Ignore MUC
    }

    const status_message = (_presence$querySelect3 = presence.querySelector('status')) === null || _presence$querySelect3 === void 0 ? void 0 : _presence$querySelect3.textContent;
    const contact = this.get(bare_jid);

    if (contact && status_message !== contact.get('status')) {
      contact.save({
        'status': status_message
      });
    }

    if (presence_type === 'subscribed' && contact) {
      contact.ackSubscribe();
    } else if (presence_type === 'unsubscribed' && contact) {
      contact.ackUnsubscribe();
    } else if (presence_type === 'unsubscribe') {
      return;
    } else if (presence_type === 'subscribe') {
      this.handleIncomingSubscription(presence);
    } else if (presence_type === 'unavailable' && contact) {
      const resource = Strophe.getResourceFromJid(jid);
      contact.presence.removeResource(resource);
    } else if (contact) {
      // presence_type is undefined
      contact.presence.addResource(presence);
    }
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RosterContacts);

/***/ }),

/***/ "./src/headless/plugins/roster/filter.js":
/*!***********************************************!*\
  !*** ./src/headless/plugins/roster/filter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RosterFilter": () => (/* binding */ RosterFilter)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");

const RosterFilter = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.extend({
  initialize() {
    this.set({
      'filter_text': '',
      'filter_type': 'contacts',
      'chat_state': 'online'
    });
  }

});

/***/ }),

/***/ "./src/headless/plugins/roster/index.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/roster/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _converse_headless_plugins_status__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/plugins/status */ "./src/headless/plugins/status/index.js");
/* harmony import */ var _contact_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contact.js */ "./src/headless/plugins/roster/contact.js");
/* harmony import */ var _contacts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contacts.js */ "./src/headless/plugins/roster/contacts.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/roster/api.js");
/* harmony import */ var _presence_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./presence.js */ "./src/headless/plugins/roster/presence.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/roster/utils.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */







_converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.converse.plugins.add('converse-roster', {
  dependencies: ['converse-status'],

  initialize() {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.settings.extend({
      'allow_contact_requests': true,
      'auto_subscribe': false,
      'synchronize_availability': true
    });
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.promises.add(['cachedRoster', 'roster', 'rosterContactsFetched', 'rosterInitialized']); // API methods only available to plugins

    Object.assign(_converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.api, _api_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
    const {
      __
    } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.HEADER_CURRENT_CONTACTS = __('My contacts');
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.HEADER_PENDING_CONTACTS = __('Pending contacts');
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.HEADER_REQUESTING_CONTACTS = __('Contact requests');
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.HEADER_UNGROUPED = __('Ungrouped');
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.HEADER_UNREAD = __('New messages');
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.Presence = _presence_js__WEBPACK_IMPORTED_MODULE_4__.Presence;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.Presences = _presence_js__WEBPACK_IMPORTED_MODULE_4__.Presences;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.RosterContact = _contact_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.RosterContacts = _contacts_js__WEBPACK_IMPORTED_MODULE_2__["default"];
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('beforeTearDown', () => (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.unregisterPresenceHandler)());
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('chatBoxesInitialized', _utils_js__WEBPACK_IMPORTED_MODULE_6__.onChatBoxesInitialized);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('clearSession', _utils_js__WEBPACK_IMPORTED_MODULE_6__.onClearSession);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('presencesInitialized', _utils_js__WEBPACK_IMPORTED_MODULE_6__.onPresencesInitialized);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('statusInitialized', _utils_js__WEBPACK_IMPORTED_MODULE_6__.onStatusInitialized);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.listen.on('streamResumptionFailed', () => _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__._converse.session.set('roster_cached', false));
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_5__.api.waitUntil('rosterContactsFetched').then(_utils_js__WEBPACK_IMPORTED_MODULE_6__.onRosterContactsFetched);
  }

});

/***/ }),

/***/ "./src/headless/plugins/roster/presence.js":
/*!*************************************************!*\
  !*** ./src/headless/plugins/roster/presence.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Presence": () => (/* binding */ Presence),
/* harmony export */   "Presences": () => (/* binding */ Presences),
/* harmony export */   "Resource": () => (/* binding */ Resource),
/* harmony export */   "Resources": () => (/* binding */ Resources)
/* harmony export */ });
/* harmony import */ var lodash_es_isNaN__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/isNaN */ "./node_modules/lodash-es/isNaN.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");





const {
  Strophe,
  dayjs,
  sizzle
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.converse.env;
const Resource = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_1__.Model.extend({
  'idAttribute': 'name'
});
const Resources = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_0__.Collection.extend({
  'model': Resource
});
const Presence = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_1__.Model.extend({
  idAttribute: 'jid',
  defaults: {
    'show': 'offline'
  },

  initialize() {
    this.resources = new Resources();
    const id = `converse.identities-${this.get('jid')}`;
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_3__.initStorage)(this.resources, id, 'session');
    this.listenTo(this.resources, 'update', this.onResourcesChanged);
    this.listenTo(this.resources, 'change', this.onResourcesChanged);
  },

  onResourcesChanged() {
    var _hpr$attributes;

    const hpr = this.getHighestPriorityResource();
    const show = (hpr === null || hpr === void 0 ? void 0 : (_hpr$attributes = hpr.attributes) === null || _hpr$attributes === void 0 ? void 0 : _hpr$attributes.show) || 'offline';

    if (this.get('show') !== show) {
      this.save({
        'show': show
      });
    }
  },

  /**
   * Return the resource with the highest priority.
   * If multiple resources have the same priority, take the latest one.
   * @private
   */
  getHighestPriorityResource() {
    return this.resources.sortBy(r => `${r.get('priority')}-${r.get('timestamp')}`).reverse()[0];
  },

  /**
   * Adds a new resource and it's associated attributes as taken
   * from the passed in presence stanza.
   * Also updates the presence if the resource has higher priority (and is newer).
   * @private
   * @param { XMLElement } presence: The presence stanza
   */
  addResource(presence) {
    var _presence$querySelect, _presence$querySelect2;

    const jid = presence.getAttribute('from'),
          name = Strophe.getResourceFromJid(jid),
          delay = sizzle(`delay[xmlns="${Strophe.NS.DELAY}"]`, presence).pop(),
          priority = ((_presence$querySelect = presence.querySelector('priority')) === null || _presence$querySelect === void 0 ? void 0 : _presence$querySelect.textContent) ?? 0,
          resource = this.resources.get(name),
          settings = {
      'name': name,
      'priority': (0,lodash_es_isNaN__WEBPACK_IMPORTED_MODULE_4__["default"])(parseInt(priority, 10)) ? 0 : parseInt(priority, 10),
      'show': ((_presence$querySelect2 = presence.querySelector('show')) === null || _presence$querySelect2 === void 0 ? void 0 : _presence$querySelect2.textContent) ?? 'online',
      'timestamp': delay ? dayjs(delay.getAttribute('stamp')).toISOString() : new Date().toISOString()
    };

    if (resource) {
      resource.save(settings);
    } else {
      this.resources.create(settings);
    }
  },

  /**
   * Remove the passed in resource from the resources map.
   * Also redetermines the presence given that there's one less
   * resource.
   * @private
   * @param { string } name: The resource name
   */
  removeResource(name) {
    const resource = this.resources.get(name);

    if (resource) {
      resource.destroy();
    }
  }

});
const Presences = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_0__.Collection.extend({
  'model': Presence
});

/***/ }),

/***/ "./src/headless/plugins/roster/utils.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/roster/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "contactsComparator": () => (/* binding */ contactsComparator),
/* harmony export */   "groupsComparator": () => (/* binding */ groupsComparator),
/* harmony export */   "onChatBoxesInitialized": () => (/* binding */ onChatBoxesInitialized),
/* harmony export */   "onClearSession": () => (/* binding */ onClearSession),
/* harmony export */   "onPresencesInitialized": () => (/* binding */ onPresencesInitialized),
/* harmony export */   "onRosterContactsFetched": () => (/* binding */ onRosterContactsFetched),
/* harmony export */   "onStatusInitialized": () => (/* binding */ onStatusInitialized),
/* harmony export */   "rejectPresenceSubscription": () => (/* binding */ rejectPresenceSubscription),
/* harmony export */   "unregisterPresenceHandler": () => (/* binding */ unregisterPresenceHandler)
/* harmony export */ });
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_plugins_roster_filter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/plugins/roster/filter.js */ "./src/headless/plugins/roster/filter.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");





const {
  $pres
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.converse.env;

function initRoster() {
  // Initialize the collections that represent the roster contacts and groups
  const roster = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster = new _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.RosterContacts();
  let id = `converse.contacts-${_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid}`;
  (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_4__.initStorage)(roster, id);
  const filter = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster_filter = new _converse_headless_plugins_roster_filter_js__WEBPACK_IMPORTED_MODULE_2__.RosterFilter();
  filter.id = `_converse.rosterfilter-${_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid}`;
  (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_4__.initStorage)(filter, filter.id);
  filter.fetch();
  id = `converse-roster-model-${_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid}`;
  roster.data = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_1__.Model();
  roster.data.id = id;
  (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_4__.initStorage)(roster.data, id);
  roster.data.fetch();
  /**
   * Triggered once the `_converse.RosterContacts`
   * been created, but not yet populated with data.
   * This event is useful when you want to create views for these collections.
   * @event _converse#chatBoxMaximized
   * @example _converse.api.listen.on('rosterInitialized', () => { ... });
   * @example _converse.api.waitUntil('rosterInitialized').then(() => { ... });
   */

  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.trigger('rosterInitialized');
}
/**
 * Fetch all the roster groups, and then the roster contacts.
 * Emit an event after fetching is done in each case.
 * @private
 * @param { Bool } ignore_cache - If set to to true, the local cache
 *      will be ignored it's guaranteed that the XMPP server
 *      will be queried for the roster.
 */


async function populateRoster() {
  let ignore_cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  if (ignore_cache) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.send_initial_presence = true;
  }

  try {
    await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster.fetchRosterContacts();
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.trigger('rosterContactsFetched');
  } catch (reason) {
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(reason);
  } finally {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.send_initial_presence && _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.user.presence.send();
  }
}

function updateUnreadCounter(chatbox) {
  var _converse$roster;

  const contact = (_converse$roster = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster) === null || _converse$roster === void 0 ? void 0 : _converse$roster.get(chatbox.get('jid'));
  contact === null || contact === void 0 ? void 0 : contact.save({
    'num_unread': chatbox.get('num_unread')
  });
}

function registerPresenceHandler() {
  unregisterPresenceHandler();
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presence_ref = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.addHandler(presence => {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster.presenceHandler(presence);

    return true;
  }, null, 'presence', null);
}

function unregisterPresenceHandler() {
  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presence_ref !== undefined) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.deleteHandler(_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presence_ref);

    delete _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presence_ref;
  }
}

async function clearPresences() {
  var _converse$presences;

  await ((_converse$presences = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presences) === null || _converse$presences === void 0 ? void 0 : _converse$presences.clearStore());
}
/**
 * Roster specific event handler for the clearSession event
 */


async function onClearSession() {
  await clearPresences();

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.shouldClearCache()) {
    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.rostergroups) {
      await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.rostergroups.clearStore();
      delete _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.rostergroups;
    }

    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster) {
      var _converse$roster$data;

      (_converse$roster$data = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster.data) === null || _converse$roster$data === void 0 ? void 0 : _converse$roster$data.destroy();
      await _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster.clearStore();
      delete _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster;
    }
  }
}
/**
 * Roster specific event handler for the presencesInitialized event
 * @param { Boolean } reconnecting
 */

function onPresencesInitialized(reconnecting) {
  if (reconnecting) {
    /**
     * Similar to `rosterInitialized`, but instead pertaining to reconnection.
     * This event indicates that the roster and its groups are now again
     * available after Converse.js has reconnected.
     * @event _converse#rosterReadyAfterReconnection
     * @example _converse.api.listen.on('rosterReadyAfterReconnection', () => { ... });
     */
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.trigger('rosterReadyAfterReconnection');
  } else {
    initRoster();
  }

  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster.onConnected();

  registerPresenceHandler();
  populateRoster(!_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.restored);
}
/**
 * Roster specific event handler for the statusInitialized event
 * @param { Boolean } reconnecting
 */

async function onStatusInitialized(reconnecting) {
  if (reconnecting) {
    // When reconnecting and not resuming a previous session,
    // we clear all cached presence data, since it might be stale
    // and we'll receive new presence updates
    !_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.connection.hasResumed() && (await clearPresences());
  } else {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presences = new _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.Presences();
    const id = `converse.presences-${_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.bare_jid}`;
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_4__.initStorage)(_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presences, id, 'session'); // We might be continuing an existing session, so we fetch
    // cached presence data.

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.presences.fetch();
  }
  /**
   * Triggered once the _converse.Presences collection has been
   * initialized and its cached data fetched.
   * Returns a boolean indicating whether this event has fired due to
   * Converse having reconnected.
   * @event _converse#presencesInitialized
   * @type { bool }
   * @example _converse.api.listen.on('presencesInitialized', reconnecting => { ... });
   */


  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.trigger('presencesInitialized', reconnecting);
}
/**
 * Roster specific event handler for the chatBoxesInitialized event
 */

function onChatBoxesInitialized() {
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.on('change:num_unread', updateUnreadCounter);

  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.on('add', chatbox => {
    if (chatbox.get('type') === _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.PRIVATE_CHAT_TYPE) {
      chatbox.setRosterContact(chatbox.get('jid'));
    }
  });
}
/**
 * Roster specific handler for the rosterContactsFetched promise
 */

function onRosterContactsFetched() {
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.roster.on('add', contact => {
    // When a new contact is added, check if we already have a
    // chatbox open for it, and if so attach it to the chatbox.
    const chatbox = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.chatboxes.findWhere({
      'jid': contact.get('jid')
    });

    chatbox === null || chatbox === void 0 ? void 0 : chatbox.setRosterContact(contact.get('jid'));
  });
}
/**
 * Reject or cancel another user's subscription to our presence updates.
 * @function rejectPresenceSubscription
 * @param { String } jid - The Jabber ID of the user whose subscription is being canceled
 * @param { String } message - An optional message to the user
 */

function rejectPresenceSubscription(jid, message) {
  const pres = $pres({
    to: jid,
    type: "unsubscribed"
  });

  if (message && message !== "") {
    pres.c("status").t(message);
  }

  _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__.api.send(pres);
}
function contactsComparator(contact1, contact2) {
  const status1 = contact1.presence.get('show') || 'offline';
  const status2 = contact2.presence.get('show') || 'offline';

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.STATUS_WEIGHTS[status1] === _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.STATUS_WEIGHTS[status2]) {
    const name1 = contact1.getDisplayName().toLowerCase();
    const name2 = contact2.getDisplayName().toLowerCase();
    return name1 < name2 ? -1 : name1 > name2 ? 1 : 0;
  } else {
    return _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.STATUS_WEIGHTS[status1] < _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.STATUS_WEIGHTS[status2] ? -1 : 1;
  }
}
function groupsComparator(a, b) {
  const HEADER_WEIGHTS = {};
  HEADER_WEIGHTS[_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.HEADER_UNREAD] = 0;
  HEADER_WEIGHTS[_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.HEADER_REQUESTING_CONTACTS] = 1;
  HEADER_WEIGHTS[_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.HEADER_CURRENT_CONTACTS] = 2;
  HEADER_WEIGHTS[_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.HEADER_UNGROUPED] = 3;
  HEADER_WEIGHTS[_converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.HEADER_PENDING_CONTACTS] = 4;
  const WEIGHTS = HEADER_WEIGHTS;
  const special_groups = Object.keys(HEADER_WEIGHTS);
  const a_is_special = special_groups.includes(a);
  const b_is_special = special_groups.includes(b);

  if (!a_is_special && !b_is_special) {
    return a.toLowerCase() < b.toLowerCase() ? -1 : a.toLowerCase() > b.toLowerCase() ? 1 : 0;
  } else if (a_is_special && b_is_special) {
    return WEIGHTS[a] < WEIGHTS[b] ? -1 : WEIGHTS[a] > WEIGHTS[b] ? 1 : 0;
  } else if (!a_is_special && b_is_special) {
    const a_header = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.HEADER_CURRENT_CONTACTS;
    return WEIGHTS[a_header] < WEIGHTS[b] ? -1 : WEIGHTS[a_header] > WEIGHTS[b] ? 1 : 0;
  } else if (a_is_special && !b_is_special) {
    const b_header = _converse_headless_core__WEBPACK_IMPORTED_MODULE_3__._converse.HEADER_CURRENT_CONTACTS;
    return WEIGHTS[a] < WEIGHTS[b_header] ? -1 : WEIGHTS[a] > WEIGHTS[b_header] ? 1 : 0;
  }
}

/***/ }),

/***/ "./src/headless/plugins/smacks/index.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/smacks/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/smacks/utils.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description Converse.js plugin which adds support for XEP-0198: Stream Management
 */


const {
  Strophe
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;
Strophe.addNamespace('SM', 'urn:xmpp:sm:3');
_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.converse.plugins.add('converse-smacks', {
  initialize() {
    // Configuration values for this plugin
    // ====================================
    // Refer to docs/source/configuration.rst for explanations of these
    // configuration settings.
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.settings.extend({
      'enable_smacks': true,
      'smacks_max_unacked_stanzas': 5
    });
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.listen.on('afterResourceBinding', _utils_js__WEBPACK_IMPORTED_MODULE_1__.sendEnableStanza);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.listen.on('beforeResourceBinding', _utils_js__WEBPACK_IMPORTED_MODULE_1__.enableStreamManagement);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.listen.on('send', _utils_js__WEBPACK_IMPORTED_MODULE_1__.onStanzaSent);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.listen.on('userSessionInitialized', _utils_js__WEBPACK_IMPORTED_MODULE_1__.initSessionData);
  }

});

/***/ }),

/***/ "./src/headless/plugins/smacks/utils.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/smacks/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "enableStreamManagement": () => (/* binding */ enableStreamManagement),
/* harmony export */   "initSessionData": () => (/* binding */ initSessionData),
/* harmony export */   "onStanzaSent": () => (/* binding */ onStanzaSent),
/* harmony export */   "sendEnableStanza": () => (/* binding */ sendEnableStanza)
/* harmony export */ });
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");



const {
  Strophe
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;
const u = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env.utils;

function isStreamManagementSupported() {
  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.connection.isType('bosh') && !_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.isTestEnv()) {
    return false;
  }

  return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.disco.stream.getFeature('sm', Strophe.NS.SM);
}

function handleAck(el) {
  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('smacks_enabled')) {
    return true;
  }

  const handled = parseInt(el.getAttribute('h'), 10);

  const last_known_handled = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_handled_by_server');

  const delta = handled - last_known_handled;

  if (delta < 0) {
    const err_msg = `New reported stanza count lower than previous. ` + `New: ${handled} - Previous: ${last_known_handled}`;
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(err_msg);
  }

  const unacked_stanzas = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('unacked_stanzas');

  if (delta > unacked_stanzas.length) {
    const err_msg = `Higher reported acknowledge count than unacknowledged stanzas. ` + `Reported Acknowledged Count: ${delta} -` + `Unacknowledged Stanza Count: ${unacked_stanzas.length} -` + `New: ${handled} - Previous: ${last_known_handled}`;
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(err_msg);
  }

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.save({
    'num_stanzas_handled_by_server': handled,
    'num_stanzas_since_last_ack': 0,
    'unacked_stanzas': unacked_stanzas.slice(delta)
  });

  return true;
}

function sendAck() {
  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('smacks_enabled')) {
    const h = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_handled');

    const stanza = u.toStanza(`<a xmlns="${Strophe.NS.SM}" h="${h}"/>`);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.send(stanza);
  }

  return true;
}

function stanzaHandler(el) {
  if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('smacks_enabled')) {
    if (u.isTagEqual(el, 'iq') || u.isTagEqual(el, 'presence') || u.isTagEqual(el, 'message')) {
      const h = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_handled');

      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.save('num_stanzas_handled', h + 1);
    }
  }

  return true;
}

function initSessionData() {
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.save({
    'smacks_enabled': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('smacks_enabled') || false,
    'num_stanzas_handled': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_handled') || 0,
    'num_stanzas_handled_by_server': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_handled_by_server') || 0,
    'num_stanzas_since_last_ack': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_since_last_ack') || 0,
    'unacked_stanzas': _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('unacked_stanzas') || []
  });
}

function resetSessionData() {
  var _converse$session;

  (_converse$session = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session) === null || _converse$session === void 0 ? void 0 : _converse$session.save({
    'smacks_enabled': false,
    'num_stanzas_handled': 0,
    'num_stanzas_handled_by_server': 0,
    'num_stanzas_since_last_ack': 0,
    'unacked_stanzas': []
  });
}

function saveSessionData(el) {
  const data = {
    'smacks_enabled': true
  };

  if (['1', 'true'].includes(el.getAttribute('resume'))) {
    data['smacks_stream_id'] = el.getAttribute('id');
  }

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.save(data);

  return true;
}

function onFailedStanza(el) {
  if (el.querySelector('item-not-found')) {
    // Stream resumption must happen before resource binding but
    // enabling a new stream must happen after resource binding.
    // Since resumption failed, we simply continue.
    //
    // After resource binding, sendEnableStanza will be called
    // based on the afterResourceBinding event.
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn('Could not resume previous SMACKS session, session id not found. ' + 'A new session will be established.');
  } else {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error('Failed to enable stream management');
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(el.outerHTML);
  }

  resetSessionData();
  /**
   * Triggered when the XEP-0198 stream could not be resumed.
   * @event _converse#streamResumptionFailed
   */

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.trigger('streamResumptionFailed');
  return true;
}

function resendUnackedStanzas() {
  const stanzas = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('unacked_stanzas'); // We clear the unacked_stanzas array because it'll get populated
  // again in `onStanzaSent`


  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.save('unacked_stanzas', []); // XXX: Currently we're resending *all* unacked stanzas, including
  // IQ[type="get"] stanzas that longer have handlers (because the
  // page reloaded or we reconnected, causing removal of handlers).
  //
  // *Side-note:* Is it necessary to clear handlers upon reconnection?
  //
  // I've considered not resending those stanzas, but then keeping
  // track of what's been sent and ack'd and their order gets
  // prohibitively complex.
  //
  // It's unclear how much of a problem this poses.
  //
  // Two possible solutions are running @converse/headless as a
  // service worker or handling IQ[type="result"] stanzas
  // differently, more like push stanzas, so that they don't need
  // explicit handlers.


  stanzas.forEach(s => _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.send(s));
}

function onResumedStanza(el) {
  saveSessionData(el);
  handleAck(el);
  resendUnackedStanzas();
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection.do_bind = false; // No need to bind our resource anymore

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection.authenticated = true;
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection.restored = true;

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection._changeConnectStatus(Strophe.Status.CONNECTED, null);
}

async function sendResumeStanza() {
  const promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_2__.getOpenPromise)();

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection._addSysHandler(el => promise.resolve(onResumedStanza(el)), Strophe.NS.SM, 'resumed');

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection._addSysHandler(el => promise.resolve(onFailedStanza(el)), Strophe.NS.SM, 'failed');

  const previous_id = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('smacks_stream_id');

  const h = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_handled');

  const stanza = u.toStanza(`<resume xmlns="${Strophe.NS.SM}" h="${h}" previd="${previous_id}"/>`);
  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.send(stanza);

  _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection.flush();

  await promise;
}

async function sendEnableStanza() {
  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('enable_smacks') || _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('smacks_enabled')) {
    return;
  }

  if (await isStreamManagementSupported()) {
    const promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_2__.getOpenPromise)();

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection._addSysHandler(el => promise.resolve(saveSessionData(el)), Strophe.NS.SM, 'enabled');

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection._addSysHandler(el => promise.resolve(onFailedStanza(el)), Strophe.NS.SM, 'failed');

    const resume = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.connection.isType('websocket') || _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.isTestEnv();

    const stanza = u.toStanza(`<enable xmlns="${Strophe.NS.SM}" resume="${resume}"/>`);
    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.send(stanza);

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection.flush();

    await promise;
  }
}
const smacks_handlers = [];
async function enableStreamManagement() {
  var _converse$session2;

  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('enable_smacks')) {
    return;
  }

  if (!(await isStreamManagementSupported())) {
    return;
  }

  const conn = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.connection;

  while (smacks_handlers.length) {
    conn.deleteHandler(smacks_handlers.pop());
  }

  smacks_handlers.push(conn.addHandler(stanzaHandler));
  smacks_handlers.push(conn.addHandler(sendAck, Strophe.NS.SM, 'r'));
  smacks_handlers.push(conn.addHandler(handleAck, Strophe.NS.SM, 'a'));

  if ((_converse$session2 = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session) !== null && _converse$session2 !== void 0 && _converse$session2.get('smacks_stream_id')) {
    await sendResumeStanza();
  } else {
    resetSessionData();
  }
}
function onStanzaSent(stanza) {
  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session) {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn('No _converse.session!');
    return;
  }

  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('smacks_enabled')) {
    return;
  }

  if (u.isTagEqual(stanza, 'iq') || u.isTagEqual(stanza, 'presence') || u.isTagEqual(stanza, 'message')) {
    const stanza_string = Strophe.serialize(stanza);

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.save('unacked_stanzas', (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('unacked_stanzas') || []).concat([stanza_string]));

    const max_unacked = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('smacks_max_unacked_stanzas');

    if (max_unacked > 0) {
      const num = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('num_stanzas_since_last_ack') + 1;

      if (num % max_unacked === 0) {
        // Request confirmation of sent stanzas
        _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__.api.send(u.toStanza(`<r xmlns="${Strophe.NS.SM}"/>`));
      }

      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.save({
        'num_stanzas_since_last_ack': num
      });
    }
  }
}

/***/ }),

/***/ "./src/headless/plugins/status/api.js":
/*!********************************************!*\
  !*** ./src/headless/plugins/status/api.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * @namespace _converse.api.user.presence
   * @memberOf _converse.api.user
   */
  presence: {
    /**
     * Send out a presence stanza
     * @method _converse.api.user.presence.send
     * @param { String } type
     * @param { String } to
     * @param { String } [status] - An optional status message
     * @param { Element[]|Strophe.Builder[]|Element|Strophe.Builder } [child_nodes]
     *  Nodes(s) to be added as child nodes of the `presence` XML element.
     */
    async send(type, to, status, child_nodes) {
      var _child_nodes;

      await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('statusInitialized');

      if (child_nodes && !Array.isArray(child_nodes)) {
        child_nodes = [child_nodes];
      }

      const model = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus;
      const presence = await model.constructPresence(type, to, status);
      (_child_nodes = child_nodes) === null || _child_nodes === void 0 ? void 0 : _child_nodes.map(c => (c === null || c === void 0 ? void 0 : c.tree()) ?? c).forEach(c => presence.cnode(c).up());
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.send(presence);

      if (['away', 'chat', 'dnd', 'online', 'xa', undefined].includes(type)) {
        const mucs = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.rooms.get();
        mucs.forEach(muc => muc.sendStatusPresence(type, status, child_nodes));
      }
    }

  },

  /**
   * Set and get the user's chat status, also called their *availability*.
   * @namespace _converse.api.user.status
   * @memberOf _converse.api.user
   */
  status: {
    /**
     * Return the current user's availability status.
     * @async
     * @method _converse.api.user.status.get
     * @example _converse.api.user.status.get();
     */
    async get() {
      await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('statusInitialized');
      return _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.get('status');
    },

    /**
     * The user's status can be set to one of the following values:
     *
     * @async
     * @method _converse.api.user.status.set
     * @param {string} value The user's chat status (e.g. 'away', 'dnd', 'offline', 'online', 'unavailable' or 'xa')
     * @param {string} [message] A custom status message
     *
     * @example _converse.api.user.status.set('dnd');
     * @example _converse.api.user.status.set('dnd', 'In a meeting');
     */
    async set(value, message) {
      const data = {
        'status': value
      };

      if (!Object.keys(_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.STATUS_WEIGHTS).includes(value)) {
        throw new Error('Invalid availability value. See https://xmpp.org/rfcs/rfc3921.html#rfc.section.2.2.2.1');
      }

      if (typeof message === 'string') {
        data.status_message = message;
      }

      await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('statusInitialized');

      _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.save(data);
    },

    /**
     * Set and retrieve the user's custom status message.
     *
     * @namespace _converse.api.user.status.message
     * @memberOf _converse.api.user.status
     */
    message: {
      /**
       * @async
       * @method _converse.api.user.status.message.get
       * @returns {string} The status message
       * @example const message = _converse.api.user.status.message.get()
       */
      async get() {
        await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('statusInitialized');
        return _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.get('status_message');
      },

      /**
       * @async
       * @method _converse.api.user.status.message.set
       * @param {string} status The status message
       * @example _converse.api.user.status.message.set('In a meeting');
       */
      async set(status) {
        await _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.waitUntil('statusInitialized');

        _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.save({
          status_message: status
        });
      }

    }
  }
});

/***/ }),

/***/ "./src/headless/plugins/status/index.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/status/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _status_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./status.js */ "./src/headless/plugins/status/status.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/status/api.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/status/utils.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */




const {
  Strophe
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.converse.env;
Strophe.addNamespace('IDLE', 'urn:xmpp:idle:1');
_converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.converse.plugins.add('converse-status', {
  initialize() {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.settings.extend({
      auto_away: 0,
      // Seconds after which user status is set to 'away'
      auto_xa: 0,
      // Seconds after which user status is set to 'xa'
      csi_waiting_time: 0,
      // Support for XEP-0352. Seconds before client is considered idle and CSI is sent out.
      default_state: 'online',
      idle_presence_timeout: 300,
      // Seconds after which an idle presence is sent
      priority: 0
    });
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.promises.add(['statusInitialized']);
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.XMPPStatus = _status_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.onUserActivity = _utils_js__WEBPACK_IMPORTED_MODULE_3__.onUserActivity;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.onEverySecond = _utils_js__WEBPACK_IMPORTED_MODULE_3__.onEverySecond;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.sendCSI = _utils_js__WEBPACK_IMPORTED_MODULE_3__.sendCSI;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.registerIntervalHandler = _utils_js__WEBPACK_IMPORTED_MODULE_3__.registerIntervalHandler;
    Object.assign(_converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.api.user, _api_js__WEBPACK_IMPORTED_MODULE_1__["default"]);

    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.settings.get("idle_presence_timeout") > 0) {
      _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('addClientFeatures', () => _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.disco.own.features.add(Strophe.NS.IDLE));
    }

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('presencesInitialized', reconnecting => {
      if (!reconnecting) {
        _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.registerIntervalHandler();
      }
    });
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('clearSession', () => {
      if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.shouldClearCache() && _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.xmppstatus) {
        _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.xmppstatus.destroy();

        delete _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.xmppstatus;
        _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.promises.add(['statusInitialized']);
      }
    });
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('connected', () => (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.initStatus)(false));
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('reconnected', () => (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.initStatus)(true));
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.listen.on('constructedMUCPresence', _utils_js__WEBPACK_IMPORTED_MODULE_3__.addStatusToMUCJoinPresence);
  }

});

/***/ }),

/***/ "./src/headless/plugins/status/status.js":
/*!***********************************************!*\
  !*** ./src/headless/plugins/status/status.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_es_isNaN__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/isNaN */ "./node_modules/lodash-es/isNaN.js");
/* harmony import */ var lodash_es_isObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/isObject */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");




const {
  Strophe,
  $pres
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.converse.env;
const XMPPStatus = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.extend({
  defaults() {
    return {
      "status": _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.settings.get("default_state")
    };
  },

  initialize() {
    this.on('change', item => {
      if (!(0,lodash_es_isObject__WEBPACK_IMPORTED_MODULE_2__["default"])(item.changed)) {
        return;
      }

      if ('status' in item.changed || 'status_message' in item.changed) {
        _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.user.presence.send(this.get('status'), null, this.get('status_message'));
      }
    });
  },

  getNickname() {
    return _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('nickname');
  },

  getFullname() {
    // Gets overridden in converse-vcard
    return '';
  },

  async constructPresence(type) {
    let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let status_message = arguments.length > 2 ? arguments[2] : undefined;
    type = typeof type === 'string' ? type : this.get('status') || _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.settings.get("default_state");
    status_message = typeof status_message === 'string' ? status_message : this.get('status_message');
    let presence;
    const attrs = {
      to
    };

    if (type === 'unavailable' || type === 'probe' || type === 'error' || type === 'unsubscribe' || type === 'unsubscribed' || type === 'subscribe' || type === 'subscribed') {
      attrs['type'] = type;
      presence = $pres(attrs);
    } else if (type === 'offline') {
      attrs['type'] = 'unavailable';
      presence = $pres(attrs);
    } else if (type === 'online') {
      presence = $pres(attrs);
    } else {
      presence = $pres(attrs).c('show').t(type).up();
    }

    if (status_message) {
      presence.c('status').t(status_message).up();
    }

    const priority = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.settings.get("priority");
    presence.c('priority').t((0,lodash_es_isNaN__WEBPACK_IMPORTED_MODULE_3__["default"])(Number(priority)) ? 0 : priority).up();

    if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.idle) {
      const idle_since = new Date();
      idle_since.setSeconds(idle_since.getSeconds() - _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.idle_seconds);
      presence.c('idle', {
        xmlns: Strophe.NS.IDLE,
        since: idle_since.toISOString()
      });
    }

    presence = await _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.hook('constructedPresence', null, presence);
    return presence;
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (XMPPStatus);

/***/ }),

/***/ "./src/headless/plugins/status/utils.js":
/*!**********************************************!*\
  !*** ./src/headless/plugins/status/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addStatusToMUCJoinPresence": () => (/* binding */ addStatusToMUCJoinPresence),
/* harmony export */   "initStatus": () => (/* binding */ initStatus),
/* harmony export */   "onEverySecond": () => (/* binding */ onEverySecond),
/* harmony export */   "onUserActivity": () => (/* binding */ onUserActivity),
/* harmony export */   "registerIntervalHandler": () => (/* binding */ registerIntervalHandler),
/* harmony export */   "sendCSI": () => (/* binding */ sendCSI)
/* harmony export */ });
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");


const {
  Strophe,
  $build
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.converse.env;

function onStatusInitialized(reconnecting) {
  /**
   * Triggered when the user's own chat status has been initialized.
   * @event _converse#statusInitialized
   * @example _converse.api.listen.on('statusInitialized', status => { ... });
   * @example _converse.api.waitUntil('statusInitialized').then(() => { ... });
   */
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.trigger('statusInitialized', reconnecting);
}

function initStatus(reconnecting) {
  // If there's no xmppstatus obj, then we were never connected to
  // begin with, so we set reconnecting to false.
  reconnecting = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus === undefined ? false : reconnecting;

  if (reconnecting) {
    onStatusInitialized(reconnecting);
  } else {
    const id = `converse.xmppstatus-${_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.bare_jid}`;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus = new _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.XMPPStatus({
      id
    });
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_1__.initStorage)(_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus, id, 'session');

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.fetch({
      'success': () => onStatusInitialized(reconnecting),
      'error': () => onStatusInitialized(reconnecting),
      'silent': true
    });
  }
}
function onUserActivity() {
  var _converse$connection;

  /* Resets counters and flags relating to CSI and auto_away/auto_xa */
  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds > 0) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds = 0;
  }

  if (!((_converse$connection = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.connection) !== null && _converse$connection !== void 0 && _converse$connection.authenticated)) {
    // We can't send out any stanzas when there's no authenticated connection.
    // This can happen when the connection reconnects.
    return;
  }

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.inactive) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.sendCSI(_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.ACTIVE);
  }

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle = false;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.user.presence.send();
  }

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.auto_changed_status === true) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.auto_changed_status = false; // XXX: we should really remember the original state here, and
    // then set it back to that...

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.set('status', _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("default_state"));
  }
}
function onEverySecond() {
  var _converse$connection2;

  /* An interval handler running every second.
   * Used for CSI and the auto_away and auto_xa features.
   */
  if (!((_converse$connection2 = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.connection) !== null && _converse$connection2 !== void 0 && _converse$connection2.authenticated)) {
    // We can't send out any stanzas when there's no authenticated connection.
    // This can happen when the connection reconnects.
    return;
  }

  const stat = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.get('status');

  _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds++;

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("csi_waiting_time") > 0 && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds > _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("csi_waiting_time") && !_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.inactive) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.sendCSI(_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.INACTIVE);
  }

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("idle_presence_timeout") > 0 && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds > _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("idle_presence_timeout") && !_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle) {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle = true;
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.user.presence.send();
  }

  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("auto_away") > 0 && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds > _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("auto_away") && stat !== 'away' && stat !== 'xa' && stat !== 'dnd') {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.auto_changed_status = true;

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.set('status', 'away');
  } else if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("auto_xa") > 0 && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds > _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("auto_xa") && stat !== 'xa' && stat !== 'dnd') {
    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.auto_changed_status = true;

    _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.xmppstatus.set('status', 'xa');
  }
}
/**
 * Send out a Client State Indication (XEP-0352)
 * @function sendCSI
 * @param { String } stat - The user's chat status
 */

function sendCSI(stat) {
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.send($build(stat, {
    xmlns: Strophe.NS.CSI
  }));
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.inactive = stat === _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.INACTIVE ? true : false;
}
function registerIntervalHandler() {
  /* Set an interval of one second and register a handler for it.
   * Required for the auto_away, auto_xa and csi_waiting_time features.
   */
  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("auto_away") < 1 && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("auto_xa") < 1 && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("csi_waiting_time") < 1 && _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__.api.settings.get("idle_presence_timeout") < 1) {
    // Waiting time of less then one second means features aren't used.
    return;
  }

  _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.idle_seconds = 0;
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.auto_changed_status = false; // Was the user's status changed by Converse?

  const {
    unloadevent
  } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse;
  window.addEventListener('click', _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.onUserActivity);
  window.addEventListener('focus', _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.onUserActivity);
  window.addEventListener('keypress', _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.onUserActivity);
  window.addEventListener('mousemove', _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.onUserActivity);
  window.addEventListener(unloadevent, _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.onUserActivity, {
    'once': true,
    'passive': true
  });
  window.addEventListener(unloadevent, () => {
    var _converse$session;

    return (_converse$session = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.session) === null || _converse$session === void 0 ? void 0 : _converse$session.save('active', false);
  });
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.everySecondTrigger = window.setInterval(_converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse.onEverySecond, 1000);
}
function addStatusToMUCJoinPresence(_, stanza) {
  const {
    xmppstatus
  } = _converse_headless_core__WEBPACK_IMPORTED_MODULE_0__._converse;
  const status = xmppstatus.get('status');

  if (['away', 'chat', 'dnd', 'xa'].includes(status)) {
    stanza.c('show').t(status).up();
  }

  const status_message = xmppstatus.get('status_message');

  if (status_message) {
    stanza.c('status').t(status_message).up();
  }

  return stanza;
}

/***/ }),

/***/ "./src/headless/plugins/vcard/api.js":
/*!*******************************************!*\
  !*** ./src/headless/plugins/vcard/api.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/vcard/utils.js");



const {
  dayjs,
  u
} = _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * The XEP-0054 VCard API
   *
   * This API lets you access and update user VCards
   *
   * @namespace _converse.api.vcard
   * @memberOf _converse.api
   */
  vcard: {
    /**
     * Enables setting new values for a VCard.
     *
     * Sends out an IQ stanza to set the user's VCard and if
     * successful, it updates the {@link _converse.VCard}
     * for the passed in JID.
     *
     * @method _converse.api.vcard.set
     * @param {string} jid The JID for which the VCard should be set
     * @param {object} data A map of VCard keys and values
     * @example
     * let jid = _converse.bare_jid;
     * _converse.api.vcard.set( jid, {
     *     'fn': 'John Doe',
     *     'nickname': 'jdoe'
     * }).then(() => {
     *     // Succes
     * }).catch((e) => {
     *     // Failure, e is your error object
     * }).
     */
    async set(jid, data) {
      if (!jid) {
        throw Error("No jid provided for the VCard data");
      }

      const div = document.createElement('div');
      const vcard_el = u.toStanza(`
                <vCard xmlns="vcard-temp">
                    <FN>${data.fn}</FN>
                    <NICKNAME>${data.nickname}</NICKNAME>
                    <URL>${data.url}</URL>
                    <ROLE>${data.role}</ROLE>
                    <EMAIL><INTERNET/><PREF/><USERID>${data.email}</USERID></EMAIL>
                    <PHOTO>
                        <TYPE>${data.image_type}</TYPE>
                        <BINVAL>${data.image}</BINVAL>
                    </PHOTO>
                </vCard>`, div);
      let result;

      try {
        result = await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createStanza)("set", jid, vcard_el));
      } catch (e) {
        throw e;
      }

      await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.vcard.update(jid, true);
      return result;
    },

    /**
     * @method _converse.api.vcard.get
     * @param {Model|string} model Either a `Model` instance, or a string JID.
     *     If a `Model` instance is passed in, then it must have either a `jid`
     *     attribute or a `muc_jid` attribute.
     * @param {boolean} [force] A boolean indicating whether the vcard should be
     *     fetched from the server even if it's been fetched before.
     * @returns {promise} A Promise which resolves with the VCard data for a particular JID or for
     *     a `Model` instance which represents an entity with a JID (such as a roster contact,
     *     chat or chatroom occupant).
     *
     * @example
     * const { api } = _converse;
     * api.waitUntil('rosterContactsFetched').then(() => {
     *     api.vcard.get('someone@example.org').then(
     *         (vcard) => {
     *             // Do something with the vcard...
     *         }
     *     );
     * });
     */
    get(model, force) {
      //TOFIND Added return. Preventing converse fetching vcards (We've been handling that manually)
      return;
      if (typeof model === 'string') {
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getVCard)(model);
      }

      const error_date = model.get('vcard_error');
      const already_tried_today = error_date && dayjs(error_date).isSame(new Date(), "day");

      if (force || !model.get('vcard_updated') && !already_tried_today) {
        const jid = model.get('jid');

        if (!jid) {
          _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("No JID to get vcard for");
        }

        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getVCard)(jid);
      } else {
        return Promise.resolve({});
      }
    },

    /**
     * Fetches the VCard associated with a particular `Model` instance
     * (by using its `jid` or `muc_jid` attribute) and then updates the model with the
     * returned VCard data.
     *
     * @method _converse.api.vcard.update
     * @param {Model} model A `Model` instance
     * @param {boolean} [force] A boolean indicating whether the vcard should be
     *     fetched again even if it's been fetched before.
     * @returns {promise} A promise which resolves once the update has completed.
     * @example
     * const { api } = _converse;
     * api.waitUntil('rosterContactsFetched').then(async () => {
     *     const chatbox = await api.chats.get('someone@example.org');
     *     api.vcard.update(chatbox);
     * });
     */
    async update(model, force) {
      //TOFIND Added return. Preventing converse fetching vcards (We've been handling that manually)
      return;
      const data = await this.get(model, force);
      model = typeof model === 'string' ? _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.get(model) : model;

      if (!model) {
        _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Could not find a VCard model for ${model}`);
        return;
      }

      if (Object.keys(data).length) {
        delete data['stanza'];
        model.save(data);
      }
    }

  }
});

/***/ }),

/***/ "./src/headless/plugins/vcard/index.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/vcard/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _status__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../status */ "./src/headless/plugins/status/index.js");
/* harmony import */ var _vcard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vcard.js */ "./src/headless/plugins/vcard/vcard.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api.js */ "./src/headless/plugins/vcard/api.js");
/* harmony import */ var _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/skeletor/src/collection */ "./node_modules/@converse/skeletor/src/collection.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ "./src/headless/plugins/vcard/utils.js");
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 */






const {
  Strophe
} = _core_js__WEBPACK_IMPORTED_MODULE_4__.converse.env;
_core_js__WEBPACK_IMPORTED_MODULE_4__.converse.plugins.add('converse-vcard', {
  dependencies: ["converse-status", "converse-roster"],
  overrides: {
    XMPPStatus: {
      getNickname() {
        const {
          _converse
        } = this.__super__;

        const nick = this.__super__.getNickname.apply(this);

        if (!nick && _converse.xmppstatus.vcard) {
          return _converse.xmppstatus.vcard.get('nickname');
        } else {
          return nick;
        }
      },

      getFullname() {
        const {
          _converse
        } = this.__super__;

        const fullname = this.__super__.getFullname.apply(this);

        if (!fullname && _converse.xmppstatus.vcard) {
          return _converse.xmppstatus.vcard.get('fullname');
        } else {
          return fullname;
        }
      }

    },
    RosterContact: {
      getDisplayName() {
        if (!this.get('nickname') && this.vcard) {
          return this.vcard.getDisplayName();
        } else {
          return this.__super__.getDisplayName.apply(this);
        }
      },

      getFullname() {
        if (this.vcard) {
          return this.vcard.get('fullname');
        } else {
          return this.__super__.getFullname.apply(this);
        }
      }

    }
  },

  initialize() {
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.promises.add('VCardsInitialized');
    _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.VCard = _vcard_js__WEBPACK_IMPORTED_MODULE_1__["default"];
    _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.VCards = _converse_skeletor_src_collection__WEBPACK_IMPORTED_MODULE_3__.Collection.extend({
      model: _core_js__WEBPACK_IMPORTED_MODULE_4__._converse.VCard,

      initialize() {
        this.on('add', v => v.get('jid') && _core_js__WEBPACK_IMPORTED_MODULE_4__.api.vcard.update(v));
      }

    });
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('chatRoomInitialized', m => {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.setVCardOnModel)(m);
      m.occupants.forEach(_utils_js__WEBPACK_IMPORTED_MODULE_5__.setVCardOnOccupant);
      m.listenTo(m.occupants, 'add', _utils_js__WEBPACK_IMPORTED_MODULE_5__.setVCardOnOccupant);
      m.listenTo(m.occupants, 'change:image_hash', o => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.onOccupantAvatarChanged)(o));
    });
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('chatBoxInitialized', m => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.setVCardOnModel)(m));
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('chatRoomMessageInitialized', m => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.setVCardOnMUCMessage)(m));
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('addClientFeatures', () => _core_js__WEBPACK_IMPORTED_MODULE_4__.api.disco.own.features.add(Strophe.NS.VCARD));
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('clearSession', () => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.clearVCardsSession)());
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('messageInitialized', m => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.setVCardOnModel)(m));
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('rosterContactInitialized', m => (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.setVCardOnModel)(m));
    _core_js__WEBPACK_IMPORTED_MODULE_4__.api.listen.on('statusInitialized', _utils_js__WEBPACK_IMPORTED_MODULE_5__.initVCardCollection);
    Object.assign(_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.api, _api_js__WEBPACK_IMPORTED_MODULE_2__["default"]);
  }

});

/***/ }),

/***/ "./src/headless/plugins/vcard/utils.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/vcard/utils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clearVCardsSession": () => (/* binding */ clearVCardsSession),
/* harmony export */   "createStanza": () => (/* binding */ createStanza),
/* harmony export */   "getVCard": () => (/* binding */ getVCard),
/* harmony export */   "initVCardCollection": () => (/* binding */ initVCardCollection),
/* harmony export */   "onOccupantAvatarChanged": () => (/* binding */ onOccupantAvatarChanged),
/* harmony export */   "setVCardOnMUCMessage": () => (/* binding */ setVCardOnMUCMessage),
/* harmony export */   "setVCardOnModel": () => (/* binding */ setVCardOnModel),
/* harmony export */   "setVCardOnOccupant": () => (/* binding */ setVCardOnOccupant)
/* harmony export */ });
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");



const {
  Strophe,
  $iq,
  u
} = _core_js__WEBPACK_IMPORTED_MODULE_1__.converse.env;

async function onVCardData(jid, iq) {
  const vcard = iq.querySelector('vCard');
  let result = {};

  if (vcard !== null) {
    var _vcard$querySelector, _vcard$querySelector2, _vcard$querySelector3, _vcard$querySelector4, _vcard$querySelector5, _vcard$querySelector6, _vcard$querySelector7;

    result = {
      'stanza': iq,
      'fullname': (_vcard$querySelector = vcard.querySelector('FN')) === null || _vcard$querySelector === void 0 ? void 0 : _vcard$querySelector.textContent,
      'nickname': (_vcard$querySelector2 = vcard.querySelector('NICKNAME')) === null || _vcard$querySelector2 === void 0 ? void 0 : _vcard$querySelector2.textContent,
      'image': (_vcard$querySelector3 = vcard.querySelector('PHOTO BINVAL')) === null || _vcard$querySelector3 === void 0 ? void 0 : _vcard$querySelector3.textContent,
      'image_type': (_vcard$querySelector4 = vcard.querySelector('PHOTO TYPE')) === null || _vcard$querySelector4 === void 0 ? void 0 : _vcard$querySelector4.textContent,
      'url': (_vcard$querySelector5 = vcard.querySelector('URL')) === null || _vcard$querySelector5 === void 0 ? void 0 : _vcard$querySelector5.textContent,
      'role': (_vcard$querySelector6 = vcard.querySelector('ROLE')) === null || _vcard$querySelector6 === void 0 ? void 0 : _vcard$querySelector6.textContent,
      'email': (_vcard$querySelector7 = vcard.querySelector('EMAIL USERID')) === null || _vcard$querySelector7 === void 0 ? void 0 : _vcard$querySelector7.textContent,
      'vcard_updated': new Date().toISOString(),
      'vcard_error': undefined
    };
  }

  if (result.image) {
    const buffer = u.base64ToArrayBuffer(result['image']);
    const ab = await crypto.subtle.digest('SHA-1', buffer);
    result['image_hash'] = u.arrayBufferToHex(ab);
  }

  return result;
}

function createStanza(type, jid, vcard_el) {
  const iq = $iq(jid ? {
    'type': type,
    'to': jid
  } : {
    'type': type
  });

  if (!vcard_el) {
    iq.c("vCard", {
      'xmlns': Strophe.NS.VCARD
    });
  } else {
    iq.cnode(vcard_el);
  }

  return iq;
}
function onOccupantAvatarChanged(occupant) {
  const hash = occupant.get('image_hash');
  const vcards = [];

  if (occupant.get('jid')) {
    vcards.push(_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.get(occupant.get('jid')));
  }

  vcards.push(_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.get(occupant.get('from')));
  vcards.forEach(v => hash && (v === null || v === void 0 ? void 0 : v.get('image_hash')) !== hash && _core_js__WEBPACK_IMPORTED_MODULE_1__.api.vcard.update(v, true));
}
async function setVCardOnModel(model) {
  let jid;

  if (model instanceof _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.Message) {
    if (['error', 'info'].includes(model.get('type'))) {
      return;
    }

    jid = model.get('from');
  } else {
    jid = model.get('jid');
  }

  if (!jid) {
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Could not set VCard on model because no JID found!`);
    return;
  }

  await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('VCardsInitialized');
  model.vcard = _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.get(jid) || _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.create({
    jid
  });
  model.vcard.on('change', () => model.trigger('vcard:change'));
  model.trigger('vcard:add');
}

function getVCardForOccupant(occupant) {
  var _occupant$collection;

  const muc = occupant === null || occupant === void 0 ? void 0 : (_occupant$collection = occupant.collection) === null || _occupant$collection === void 0 ? void 0 : _occupant$collection.chatroom;
  const nick = occupant.get('nick');

  if (nick && (muc === null || muc === void 0 ? void 0 : muc.get('nick')) === nick) {
    return _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.xmppstatus.vcard;
  } else {
    const jid = occupant.get('jid') || occupant.get('from');

    if (jid) {
      return _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.get(jid) || _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.create({
        jid
      });
    } else {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Could not get VCard for occupant because no JID found!`);
      return;
    }
  }
}

async function setVCardOnOccupant(occupant) {
  await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('VCardsInitialized');
  occupant.vcard = getVCardForOccupant(occupant);

  if (occupant.vcard) {
    occupant.vcard.on('change', () => occupant.trigger('vcard:change'));
    occupant.trigger('vcard:add');
  }
}

function getVCardForMUCMessage(message) {
  var _message$collection;

  const muc = message === null || message === void 0 ? void 0 : (_message$collection = message.collection) === null || _message$collection === void 0 ? void 0 : _message$collection.chatbox;
  const nick = Strophe.getResourceFromJid(message.get('from'));

  if (nick && (muc === null || muc === void 0 ? void 0 : muc.get('nick')) === nick) {
    return _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.xmppstatus.vcard;
  } else {
    var _message$occupant;

    const jid = ((_message$occupant = message.occupant) === null || _message$occupant === void 0 ? void 0 : _message$occupant.get('jid')) || message.get('from');

    if (jid) {
      return _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.get(jid) || _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.create({
        jid
      });
    } else {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Could not get VCard for message because no JID found! msgid: ${message.get('msgid')}`);
      return;
    }
  }
}

async function setVCardOnMUCMessage(message) {
  if (['error', 'info'].includes(message.get('type'))) {
    return;
  } else {
    await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.waitUntil('VCardsInitialized');
    message.vcard = getVCardForMUCMessage(message);

    if (message.vcard) {
      message.vcard.on('change', () => message.trigger('vcard:change'));
      message.trigger('vcard:add');
    }
  }
}
async function initVCardCollection() {
  _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards = new _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.VCards();
  const id = `${_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid}-converse.vcards`;
  (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_2__.initStorage)(_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards, id);
  await new Promise(resolve => {
    _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.fetch({
      'success': resolve,
      'error': resolve
    }, {
      'silent': true
    });
  });
  const vcards = _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards;

  if (_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session) {
    const jid = _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.session.get('bare_jid');

    const status = _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.xmppstatus;
    status.vcard = vcards.get(jid) || vcards.create({
      'jid': jid
    });

    if (status.vcard) {
      status.vcard.on('change', () => status.trigger('vcard:change'));
      status.trigger('vcard:add');
    }
  }
  /**
   * Triggered as soon as the `_converse.vcards` collection has been initialized and populated from cache.
   * @event _converse#VCardsInitialized
   */


  _core_js__WEBPACK_IMPORTED_MODULE_1__.api.trigger('VCardsInitialized');
}
function clearVCardsSession() {
  if (_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.shouldClearCache()) {
    _core_js__WEBPACK_IMPORTED_MODULE_1__.api.promises.add('VCardsInitialized');

    if (_core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards) {
      _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards.clearStore();

      delete _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.vcards;
    }
  }
}
async function getVCard(jid) {
  const to = Strophe.getBareJidFromJid(jid) === _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.bare_jid ? null : jid;
  let iq;

  try {
    iq = await _core_js__WEBPACK_IMPORTED_MODULE_1__.api.sendIQ(createStanza("get", to));
  } catch (iq) {
    return {
      jid,
      'stanza': iq,
      'vcard_error': new Date().toISOString()
    };
  }

  return onVCardData(jid, iq);
}

/***/ }),

/***/ "./src/headless/plugins/vcard/vcard.js":
/*!*********************************************!*\
  !*** ./src/headless/plugins/vcard/vcard.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.js */ "./src/headless/core.js");


/**
 * Represents a VCard
 * @class
 * @namespace _converse.VCard
 * @memberOf _converse
 */

const VCard = _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.extend({
  idAttribute: 'jid',
  defaults: {
    'image': _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.DEFAULT_IMAGE,
    'image_type': _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.DEFAULT_IMAGE_TYPE
  },

  set(key, val, options) {
    // Override Model.prototype.set to make sure that the
    // default `image` and `image_type` values are maintained.
    let attrs;

    if (typeof key === 'object') {
      attrs = key;
      options = val;
    } else {
      (attrs = {})[key] = val;
    }

    if ('image' in attrs && !attrs['image']) {
      attrs['image'] = _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.DEFAULT_IMAGE;
      attrs['image_type'] = _core_js__WEBPACK_IMPORTED_MODULE_1__._converse.DEFAULT_IMAGE_TYPE;
      return _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.prototype.set.call(this, attrs, options);
    } else {
      return _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_0__.Model.prototype.set.apply(this, arguments);
    }
  },

  getDisplayName() {
    return this.get('nickname') || this.get('fullname') || this.get('jid');
  }

});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VCard);

/***/ }),

/***/ "./src/headless/shared/_converse.js":
/*!******************************************!*\
  !*** ./src/headless/shared/_converse.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_shared_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/shared/i18n */ "./src/headless/shared/i18n.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_shared_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/shared/constants */ "./src/headless/shared/constants.js");
/* harmony import */ var _converse_skeletor_src_router_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/skeletor/src/router.js */ "./node_modules/@converse/skeletor/src/router.js");
/* harmony import */ var _converse_headless_shared_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/shared/errors */ "./src/headless/shared/errors.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");
/* harmony import */ var _converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/headless/shared/settings/utils.js */ "./src/headless/shared/settings/utils.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");








/**
 * A private, closured object containing the private api (via {@link _converse.api})
 * as well as private methods and internal data-structures.
 * @global
 * @namespace _converse
 */

const _converse = {
  log: _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"],
  CONNECTION_STATUS: _converse_headless_shared_constants__WEBPACK_IMPORTED_MODULE_2__.CONNECTION_STATUS,
  templates: {},
  promises: {
    'initialized': (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_7__.getOpenPromise)()
  },
  STATUS_WEIGHTS: {
    'offline': 6,
    'unavailable': 5,
    'xa': 4,
    'away': 3,
    'dnd': 2,
    'chat': 1,
    // We currently don't differentiate between "chat" and "online"
    'online': 1
  },
  ANONYMOUS: 'anonymous',
  CLOSED: 'closed',
  EXTERNAL: 'external',
  LOGIN: 'login',
  LOGOUT: 'logout',
  OPENED: 'opened',
  PREBIND: 'prebind',

  /**
   * @constant
   * @type { integer }
   */
  STANZA_TIMEOUT: 20000,
  SUCCESS: 'success',
  FAILURE: 'failure',
  // Generated from css/images/user.svg
  DEFAULT_IMAGE_TYPE: 'image/svg+xml',
  DEFAULT_IMAGE: "PD94bWwgdmVyc2lvbj0iMS4wIj8+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTI4IiBoZWlnaHQ9IjEyOCI+CiA8cmVjdCB3aWR0aD0iMTI4IiBoZWlnaHQ9IjEyOCIgZmlsbD0iIzU1NSIvPgogPGNpcmNsZSBjeD0iNjQiIGN5PSI0MSIgcj0iMjQiIGZpbGw9IiNmZmYiLz4KIDxwYXRoIGQ9Im0yOC41IDExMiB2LTEyIGMwLTEyIDEwLTI0IDI0LTI0IGgyMyBjMTQgMCAyNCAxMiAyNCAyNCB2MTIiIGZpbGw9IiNmZmYiLz4KPC9zdmc+Cg==",
  TIMEOUTS: {
    // Set as module attr so that we can override in tests.
    PAUSED: 10000,
    INACTIVE: 90000
  },
  // XEP-0085 Chat states
  // https://xmpp.org/extensions/xep-0085.html
  INACTIVE: 'inactive',
  ACTIVE: 'active',
  COMPOSING: 'composing',
  PAUSED: 'paused',
  GONE: 'gone',
  // Chat types
  PRIVATE_CHAT_TYPE: 'chatbox',
  CHATROOMS_TYPE: 'chatroom',
  HEADLINES_TYPE: 'headline',
  CONTROLBOX_TYPE: 'controlbox',
  default_connection_options: {
    'explicitResourceBinding': true
  },
  router: new _converse_skeletor_src_router_js__WEBPACK_IMPORTED_MODULE_3__.Router(),
  TimeoutError: _converse_headless_shared_errors__WEBPACK_IMPORTED_MODULE_4__.TimeoutError,
  isTestEnv: () => {
    return (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_6__.getInitSettings)()['bosh_service_url'] === 'montague.lit/http-bind';
  },
  getDefaultStore: _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_5__.getDefaultStore,
  createStore: _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_5__.createStore,

  /**
   * Translate the given string based on the current locale.
   * @method __
   * @private
   * @memberOf _converse
   * @param { String } str
   */
  '__': function () {
    return _converse_headless_shared_i18n__WEBPACK_IMPORTED_MODULE_0__["default"].__(...arguments);
  },

  /**
   * A no-op method which is used to signal to gettext that the passed in string
   * should be included in the pot translation file.
   *
   * In contrast to the double-underscore method, the triple underscore method
   * doesn't actually translate the strings.
   *
   * One reason for this method might be because we're using strings we cannot
   * send to the translation function because they require variable interpolation
   * and we don't yet have the variables at scan time.
   *
   * @method ___
   * @private
   * @memberOf _converse
   * @param { String } str
   */
  '___': str => str
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_converse);

/***/ }),

/***/ "./src/headless/shared/actions.js":
/*!****************************************!*\
  !*** ./src/headless/shared/actions.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rejectMessage": () => (/* binding */ rejectMessage),
/* harmony export */   "sendMarker": () => (/* binding */ sendMarker)
/* harmony export */ });
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../log */ "./src/headless/log.js");
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");



const u = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.converse.env.utils;
function rejectMessage(stanza, text) {
  // Reject an incoming message by replying with an error message of type "cancel".
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.send((0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_1__.$msg)({
    'to': stanza.getAttribute('from'),
    'type': 'error',
    'id': stanza.getAttribute('id')
  }).c('error', {
    'type': 'cancel'
  }).c('not-allowed', {
    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'
  }).up().c('text', {
    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'
  }).t(text));
  _log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(`Rejecting message stanza with the following reason: ${text}`);
  _log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(stanza);
}
/**
 * Send out a XEP-0333 chat marker
 * @param { String } to_jid
 * @param { String } id - The id of the message being marked
 * @param { String } type - The marker type
 * @param { String } msg_type
 */

function sendMarker(to_jid, id, type, msg_type) {
    //TOFIND (Got rid of converse marker sending)
    return;
  const stanza = (0,strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_1__.$msg)({
    'from': _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__._converse.connection.jid,
    'id': u.getUniqueId(),
    'to': to_jid,
    'type': msg_type ? msg_type : 'chat'
  }).c(type, {
    'xmlns': strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_1__.Strophe.NS.MARKERS,
    'id': id
  });
  _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.send(stanza);
}

/***/ }),

/***/ "./src/headless/shared/chat/utils.js":
/*!*******************************************!*\
  !*** ./src/headless/shared/chat/utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debouncedPruneHistory": () => (/* binding */ debouncedPruneHistory),
/* harmony export */   "getMediaURLs": () => (/* binding */ getMediaURLs),
/* harmony export */   "pruneHistory": () => (/* binding */ pruneHistory)
/* harmony export */ });
/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es/debounce.js */ "./node_modules/lodash-es/debounce.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");


const {
  u
} = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;
function pruneHistory(model) {
  const max_history = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.settings.get('prune_messages_above');

  if (max_history && typeof max_history === 'number') {
    if (model.messages.length > max_history) {
      const non_empty_messages = model.messages.filter(m => !u.isEmptyMessage(m));

      if (non_empty_messages.length > max_history) {
        while (non_empty_messages.length > max_history) {
          non_empty_messages.shift().destroy();
        }
        /**
         * Triggered once the message history has been pruned, i.e.
         * once older messages have been removed to keep the
         * number of messages below the value set in `prune_messages_above`.
         * @event _converse#historyPruned
         * @type { _converse.ChatBox | _converse.ChatRoom }
         * @example _converse.api.listen.on('historyPruned', this => { ... });
         */


        _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__.api.trigger('historyPruned', model);
      }
    }
  }
}
/**
 * Given an array of {@link MediaURLMetadata} objects and text, return an
 * array of {@link MediaURL} objects.
 * @param { Array<MediaURLMetadata> } arr
 * @param { String } text
 * @returns{ Array<MediaURL> }
 */

function getMediaURLs(arr, text) {
  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  /**
   * @typedef { Object } MediaURLData
   * An object representing a URL found in a chat message
   * @property { Boolean } is_audio
   * @property { Boolean } is_image
   * @property { Boolean } is_video
   * @property { String } end
   * @property { String } start
   * @property { String } url
   */
  return arr.map(o => {
    const start = o.start - offset;
    const end = o.end - offset;

    if (start < 0 || start >= text.length) {
      return null;
    }

    return Object.assign({}, o, {
      start,
      end,
      'url': text.substring(o.start - offset, o.end - offset)
    });
  }).filter(o => o);
}
const debouncedPruneHistory = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_1__["default"])(pruneHistory, 500);

/***/ }),

/***/ "./src/headless/shared/connection/api.js":
/*!***********************************************!*\
  !*** ./src/headless/shared/connection/api.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/shared/_converse.js */ "./src/headless/shared/_converse.js");
/* harmony import */ var strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strophe.js/src/strophe.js */ "./node_modules/strophe.js/src/strophe.js");


/**
 * This grouping collects API functions related to the XMPP connection.
 *
 * @namespace _converse.api.connection
 * @memberOf _converse.api
 */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  /**
   * @method _converse.api.connection.connected
   * @memberOf _converse.api.connection
   * @returns {boolean} Whether there is an established connection or not.
   */
  connected() {
    var _converse$connection;

    return (_converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__["default"] === null || _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__["default"] === void 0 ? void 0 : (_converse$connection = _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__["default"].connection) === null || _converse$connection === void 0 ? void 0 : _converse$connection.connected) && true;
  },

  /**
   * Terminates the connection.
   *
   * @method _converse.api.connection.disconnect
   * @memberOf _converse.api.connection
   */
  disconnect() {
    if (_converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__["default"].connection) {
      _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__["default"].connection.disconnect();
    }
  },

  /**
   * Can be called once the XMPP connection has dropped and we want
   * to attempt reconnection.
   * Only needs to be called once, if reconnect fails Converse will
   * attempt to reconnect every two seconds, alternating between BOSH and
   * Websocket if URLs for both were provided.
   * @method reconnect
   * @memberOf _converse.api.connection
   */
  reconnect() {
    const {
      __,
      connection
    } = _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    connection.setConnectionStatus(strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_1__.Strophe.Status.RECONNECTING, __('The connection has dropped, attempting to reconnect.'));

    if (connection !== null && connection !== void 0 && connection.reconnecting) {
      return connection.debouncedReconnect();
    } else {
      return connection.reconnect();
    }
  },

  /**
   * Utility method to determine the type of connection we have
   * @method isType
   * @memberOf _converse.api.connection
   * @returns {boolean}
   */
  isType(type) {
    return _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_0__["default"].connection.isType(type);
  }

});

/***/ }),

/***/ "./src/headless/shared/connection/index.js":
/*!*************************************************!*\
  !*** ./src/headless/shared/connection/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Connection": () => (/* binding */ Connection),
/* harmony export */   "MockConnection": () => (/* binding */ MockConnection)
/* harmony export */ });
/* harmony import */ var lodash_es_debounce__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/debounce */ "./node_modules/lodash-es/debounce.js");
/* harmony import */ var lodash_es_isElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es/isElement */ "./node_modules/lodash-es/isElement.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/shared/constants.js */ "./src/headless/shared/constants.js");
/* harmony import */ var strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! strophe.js/src/core.js */ "./node_modules/strophe.js/src/core.js");
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/* harmony import */ var _converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/headless/utils/init.js */ "./src/headless/utils/init.js");
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");










const i = Object.keys(strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status).reduce((max, k) => Math.max(max, strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status[k]), 0);
strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.RECONNECTING = i + 1;
/**
 * The Connection class manages the connection to the XMPP server. It's
 * agnostic concerning the underlying protocol (i.e. websocket, long-polling
 * via BOSH or websocket inside a shared worker).
 */

class Connection extends strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Connection {
  constructor(service, options) {
    super(service, options);
    this.debouncedReconnect = (0,lodash_es_debounce__WEBPACK_IMPORTED_MODULE_8__["default"])(this.reconnect, 3000);
  }

  static generateResource() {
    //TOFIND
    let res = localStorage.getItem("xmppResource");

    if(!res){
      res = Math.floor(139749528 * Math.random()).toString();
      localStorage.setItem("xmppResource", res);
    }
    return (
      "/moya.ios-" + res
    );
    // return (
    //   "/converse.js-" + Math.floor(139749528 * Math.random()).toString()
    // );
  }

  async bind() {
    /**
     * Synchronous event triggered before we send an IQ to bind the user's
     * JID resource for this session.
     * @event _converse#beforeResourceBinding
     */
    await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('beforeResourceBinding', {
      'synchronous': true
    });
    super.bind();
  }

  async onDomainDiscovered(response) {
    const text = await response.text();
    const xrd = new window.DOMParser().parseFromString(text, "text/xml").firstElementChild;

    if (xrd.nodeName != "XRD" || xrd.namespaceURI != "http://docs.oasis-open.org/ns/xri/xrd-1.0") {
      return _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn("Could not discover XEP-0156 connection methods");
    }

    const bosh_links = sizzle__WEBPACK_IMPORTED_MODULE_1___default()(`Link[rel="urn:xmpp:alt-connections:xbosh"]`, xrd);
    const ws_links = sizzle__WEBPACK_IMPORTED_MODULE_1___default()(`Link[rel="urn:xmpp:alt-connections:websocket"]`, xrd);
    const bosh_methods = bosh_links.map(el => el.getAttribute('href'));
    const ws_methods = ws_links.map(el => el.getAttribute('href'));

    if (bosh_methods.length === 0 && ws_methods.length === 0) {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn("Neither BOSH nor WebSocket connection methods have been specified with XEP-0156.");
    } else {
      // TODO: support multiple endpoints
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.set("websocket_url", ws_methods.pop());
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.set('bosh_service_url', bosh_methods.pop());
      this.service = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("websocket_url") || _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('bosh_service_url');
      this.setProtocol();
    }
  }
  /**
   * Adds support for XEP-0156 by quering the XMPP server for alternate
   * connection methods. This allows users to use the websocket or BOSH
   * connection of their own XMPP server instead of a proxy provided by the
   * host of Converse.js.
   * @method Connnection.discoverConnectionMethods
   */


  async discoverConnectionMethods(domain) {
    // Use XEP-0156 to check whether this host advertises websocket or BOSH connection methods.
    const options = {
   //TOFIND
   mode: "no-cors",
      'headers': {
        'Accept': 'application/xrd+xml, text/xml'
      }
    };
    const url = `https://${domain}/.well-known/host-meta`;
    let response;

    try {
      response = await fetch(url, options);
    } catch (e) {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Failed to discover alternative connection methods at ${url}`);
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].error(e);
      return;
    }

    if (response.status >= 200 && response.status < 400) {
      await this.onDomainDiscovered(response);
    } else {
      _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn("Could not discover XEP-0156 connection methods");
    }
  }
  /**
   * Establish a new XMPP session by logging in with the supplied JID and
   * password.
   * @method Connnection.connect
   * @param { String } jid
   * @param { String } password
   * @param { Funtion } callback
   */


  async connect(jid, password, callback) {
    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("discover_connection_methods")) {
      const domain = strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.getDomainFromJid(jid);
      await this.discoverConnectionMethods(domain);
    }

    if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('bosh_service_url') && !_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("websocket_url")) {
      throw new Error("You must supply a value for either the bosh_service_url or websocket_url or both.");
    }

    super.connect(jid, password, callback || this.onConnectStatusChanged, _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_2__.BOSH_WAIT);
  }
  /**
   * Switch to a different transport if a service URL is available for it.
   *
   * When reconnecting with a new transport, we call setUserJID
   * so that a new resource is generated, to avoid multiple
   * server-side sessions with the same resource.
   *
   * We also call `_proto._doDisconnect` so that connection event handlers
   * for the old transport are removed.
   */


  async switchTransport() {
    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.connection.isType('websocket') && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('bosh_service_url')) {
      await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_6__.setUserJID)(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bare_jid);

      this._proto._doDisconnect();

      this._proto = new strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Bosh(this);
      this.service = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get('bosh_service_url');
    } else if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.connection.isType('bosh') && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("websocket_url")) {
      if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("authentication") === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.ANONYMOUS) {
        // When reconnecting anonymously, we need to connect with only
        // the domain, not the full JID that we had in our previous
        // (now failed) session.
        await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_6__.setUserJID)(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("jid"));
      } else {
        await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_6__.setUserJID)(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.bare_jid);
      }

      this._proto._doDisconnect();

      this._proto = new strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Websocket(this);
      this.service = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("websocket_url");
    }
  }

  async reconnect() {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].debug('RECONNECTING: the connection has dropped, attempting to reconnect.');
    this.reconnecting = true;
    await (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_7__.tearDown)();

    const conn_status = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connfeedback.get('connection_status');

    if (conn_status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNFAIL) {
      this.switchTransport();
    } else if (conn_status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.AUTHFAIL && _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("authentication") === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.ANONYMOUS) {
      // When reconnecting anonymously, we need to connect with only
      // the domain, not the full JID that we had in our previous
      // (now failed) session.
      await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_6__.setUserJID)(_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("jid"));
    }
    /**
     * Triggered when the connection has dropped, but Converse will attempt
     * to reconnect again.
     * @event _converse#will-reconnect
     */


    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('will-reconnect');

    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("authentication") === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.ANONYMOUS) {
      await (0,_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.clearSession)();
    }

    return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.user.login();
  }
  /**
   * Called as soon as a new connection has been established, either
   * by logging in or by attaching to an existing BOSH session.
   * @method Connection.onConnected
   * @param { Boolean } reconnecting - Whether Converse.js reconnected from an earlier dropped session.
   */


  async onConnected(reconnecting) {
    delete this.reconnecting;
    this.flush(); // Solves problem of returned PubSub BOSH response not received by browser

    await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_6__.setUserJID)(this.jid);
    /**
     * Synchronous event triggered after we've sent an IQ to bind the
     * user's JID resource for this session.
     * @event _converse#afterResourceBinding
     */

    await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('afterResourceBinding', reconnecting, {
      'synchronous': true
    });

    if (reconnecting) {
      /**
       * After the connection has dropped and converse.js has reconnected.
       * Any Strophe stanza handlers (as registered via `converse.listen.stanza`) will
       * have to be registered anew.
       * @event _converse#reconnected
       * @example _converse.api.listen.on('reconnected', () => { ... });
       */
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('reconnected');
    } else {
      /**
       * Triggered after the connection has been established and Converse
       * has got all its ducks in a row.
       * @event _converse#initialized
       */
      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('connected');
    }
  }
  /**
   * Used to keep track of why we got disconnected, so that we can
   * decide on what the next appropriate action is (in onDisconnected)
   * @method Connection.setDisconnectionCause
   * @param { Number } cause - The status number as received from Strophe.
   * @param { String } [reason] - An optional user-facing message as to why
   *  there was a disconnection.
   * @param { Boolean } [override] - An optional flag to replace any previous
   *  disconnection cause and reason.
   */


  setDisconnectionCause(cause, reason, override) {
    if (cause === undefined) {
      delete this.disconnection_cause;
      delete this.disconnection_reason;
    } else if (this.disconnection_cause === undefined || override) {
      this.disconnection_cause = cause;
      this.disconnection_reason = reason;
    }
  }

  setConnectionStatus(status, message) {
    this.status = status;

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connfeedback.set({
      'connection_status': status,
      message
    });
  }

  async finishDisconnection() {
    // Properly tear down the session so that it's possible to manually connect again.
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].debug('DISCONNECTED');
    delete this.reconnecting;
    this.reset();
    (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_7__.tearDown)();
    await (0,_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.clearSession)();
    delete _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connection;
    /**
    * Triggered after converse.js has disconnected from the XMPP server.
    * @event _converse#disconnected
    * @memberOf _converse
    * @example _converse.api.listen.on('disconnected', () => { ... });
    */

    _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('disconnected');
  }
  /**
   * Gets called once strophe's status reaches Strophe.Status.DISCONNECTED.
   * Will either start a teardown process for converse.js or attempt
   * to reconnect.
   * @method onDisconnected
   */


  onDisconnected() {
    if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("auto_reconnect")) {
      const reason = this.disconnection_reason;

      if (this.disconnection_cause === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.AUTHFAIL) {
        if (_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("credentials_url") || _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("authentication") === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.ANONYMOUS) {
          // If `credentials_url` is set, we reconnect, because we might
          // be receiving expirable tokens from the credentials_url.
          //
          // If `authentication` is anonymous, we reconnect because we
          // might have tried to attach with stale BOSH session tokens
          // or with a cached JID and password
          return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.connection.reconnect();
        } else {
          return this.finishDisconnection();
        }
      } else if (this.status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNECTING) {
        // Don't try to reconnect if we were never connected to begin
        // with, otherwise an infinite loop can occur (e.g. when the
        // BOSH service URL returns a 404).
        const {
          __
        } = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse;
        this.setConnectionStatus(strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNFAIL, __('An error occurred while connecting to the chat server.'));
        return this.finishDisconnection();
      } else if (this.disconnection_cause === _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.LOGOUT || reason === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.ErrorCondition.NO_AUTH_MECH || reason === "host-unknown" || reason === "remote-connection-failed") {
        return this.finishDisconnection();
      }

      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.connection.reconnect();
    } else {
      return this.finishDisconnection();
    }
  }
  /**
   * Callback method called by Strophe as the Connection goes
   * through various states while establishing or tearing down a
   * connection.
   * @param { Number } status
   * @param { String } message
   */


  onConnectStatusChanged(status, message) {
    const {
      __
    } = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse;
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].debug(`Status changed to: ${_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.CONNECTION_STATUS[status]}`);

    if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.ATTACHFAIL) {
      var _this$worker_attach_p;

      this.setConnectionStatus(status);
      (_this$worker_attach_p = this.worker_attach_promise) === null || _this$worker_attach_p === void 0 ? void 0 : _this$worker_attach_p.resolve(false);
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNECTED || status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.ATTACHED) {
      var _this$worker_attach_p2, _this$worker_attach_p3;

      if ((_this$worker_attach_p2 = this.worker_attach_promise) !== null && _this$worker_attach_p2 !== void 0 && _this$worker_attach_p2.isResolved && this.status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.ATTACHED) {
        // A different tab must have attached, so nothing to do for us here.
        return;
      }

      this.setConnectionStatus(status);
      (_this$worker_attach_p3 = this.worker_attach_promise) === null || _this$worker_attach_p3 === void 0 ? void 0 : _this$worker_attach_p3.resolve(true); // By default we always want to send out an initial presence stanza.

      _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.send_initial_presence = true;
      this.setDisconnectionCause();

      if (this.reconnecting) {
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].debug(status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNECTED ? 'Reconnected' : 'Reattached');
        this.onConnected(true);
      } else {
        _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].debug(status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNECTED ? 'Connected' : 'Attached');

        if (this.restored) {
          // No need to send an initial presence stanza when
          // we're restoring an existing session.
          _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.send_initial_presence = false;
        }

        this.onConnected();
      }
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.DISCONNECTED) {
      this.setDisconnectionCause(status, message);
      this.onDisconnected();
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.BINDREQUIRED) {
      this.bind();
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.ERROR) {
      this.setConnectionStatus(status, __('An error occurred while connecting to the chat server.'));
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNECTING) {
      this.setConnectionStatus(status);
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.AUTHENTICATING) {
      this.setConnectionStatus(status);
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.AUTHFAIL) {
      if (!message) {
        message = __('Your XMPP address and/or password is incorrect. Please try again.');
      }

      this.setConnectionStatus(status, message);
      this.setDisconnectionCause(status, message, true);
      this.onDisconnected();
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNFAIL) {
      var _Strophe$ErrorConditi;

      let feedback = message;

      if (message === "host-unknown" || message == "remote-connection-failed") {
        feedback = __("Sorry, we could not connect to the XMPP host with domain: %1$s", `\"${strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.getDomainFromJid(this.jid)}\"`);
      } else if (message !== undefined && message === (strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe === null || strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe === void 0 ? void 0 : (_Strophe$ErrorConditi = strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.ErrorCondition) === null || _Strophe$ErrorConditi === void 0 ? void 0 : _Strophe$ErrorConditi.NO_AUTH_MECH)) {
        feedback = __("The XMPP server did not offer a supported authentication mechanism");
      }

      this.setConnectionStatus(status, feedback);
      this.setDisconnectionCause(status, message);
    } else if (status === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.DISCONNECTING) {
      this.setDisconnectionCause(status, message);
    }
  }

  isType(type) {
    if (type.toLowerCase() === 'websocket') {
      return this._proto instanceof strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Websocket;
    } else if (type.toLowerCase() === 'bosh') {
      return strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Bosh && this._proto instanceof strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Bosh;
    }
  }

  hasResumed() {
    var _api$settings$get;

    if ((_api$settings$get = _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.settings.get("connection_options")) !== null && _api$settings$get !== void 0 && _api$settings$get.worker || this.isType('bosh')) {
      return _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.connfeedback.get('connection_status') === strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.ATTACHED;
    } else {
      // Not binding means that the session was resumed.
      return !this.do_bind;
    }
  }

  restoreWorkerSession() {
    this.attach(this.onConnectStatusChanged);
    this.worker_attach_promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_5__.getOpenPromise)();
    return this.worker_attach_promise;
  }

}
/**
 * The MockConnection class is used during testing, to mock an XMPP connection.
 * @class
 */

class MockConnection extends Connection {
  constructor(service, options) {
    super(service, options);
    this.sent_stanzas = [];
    this.IQ_stanzas = [];
    this.IQ_ids = [];
    this.features = strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.xmlHtmlNode('<stream:features xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client">' + '<ver xmlns="urn:xmpp:features:rosterver"/>' + '<csi xmlns="urn:xmpp:csi:0"/>' + '<this xmlns="http://jabber.org/protocol/caps" ver="UwBpfJpEt3IoLYfWma/o/p3FFRo=" hash="sha-1" node="http://prosody.im"/>' + '<bind xmlns="urn:ietf:params:xml:ns:xmpp-bind">' + '<required/>' + '</bind>' + `<sm xmlns='urn:xmpp:sm:3'/>` + '<session xmlns="urn:ietf:params:xml:ns:xmpp-session">' + '<optional/>' + '</session>' + '</stream:features>').firstChild;

    this._proto._processRequest = () => {};

    this._proto._disconnect = () => this._onDisconnectTimeout();

    this._proto._onDisconnectTimeout = () => {};

    this._proto._connect = () => {
      this.connected = true;
      this.mock = true;
      this.jid = 'romeo@montague.lit/orchard';

      this._changeConnectStatus(strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.BINDREQUIRED);
    };
  }

  _processRequest() {// eslint-disable-line class-methods-use-this
    // Don't attempt to send out stanzas
  }

  sendIQ(iq, callback, errback) {
    if (!(0,lodash_es_isElement__WEBPACK_IMPORTED_MODULE_9__["default"])(iq)) {
      iq = iq.nodeTree;
    }

    this.IQ_stanzas.push(iq);
    const id = super.sendIQ(iq, callback, errback);
    this.IQ_ids.push(id);
    return id;
  }

  send(stanza) {
    if ((0,lodash_es_isElement__WEBPACK_IMPORTED_MODULE_9__["default"])(stanza)) {
      this.sent_stanzas.push(stanza);
    } else {
      this.sent_stanzas.push(stanza.nodeTree);
    }

    return super.send(stanza);
  }

  async bind() {
    await _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__.api.trigger('beforeResourceBinding', {
      'synchronous': true
    });
    this.authenticated = true;

    if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_4__._converse.no_connection_on_bind) {
      this._changeConnectStatus(strophe_js_src_core_js__WEBPACK_IMPORTED_MODULE_3__.Strophe.Status.CONNECTED);
    }
  }

}

/***/ }),

/***/ "./src/headless/shared/constants.js":
/*!******************************************!*\
  !*** ./src/headless/shared/constants.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BOSH_WAIT": () => (/* binding */ BOSH_WAIT),
/* harmony export */   "CHAT_STATES": () => (/* binding */ CHAT_STATES),
/* harmony export */   "CONNECTION_STATUS": () => (/* binding */ CONNECTION_STATUS),
/* harmony export */   "CORE_PLUGINS": () => (/* binding */ CORE_PLUGINS),
/* harmony export */   "KEYCODES": () => (/* binding */ KEYCODES),
/* harmony export */   "URL_PARSE_OPTIONS": () => (/* binding */ URL_PARSE_OPTIONS)
/* harmony export */ });
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");

const BOSH_WAIT = 59;
const CONNECTION_STATUS = {};
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.ATTACHED] = 'ATTACHED';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.AUTHENTICATING] = 'AUTHENTICATING';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.AUTHFAIL] = 'AUTHFAIL';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.CONNECTED] = 'CONNECTED';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.CONNECTING] = 'CONNECTING';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.CONNFAIL] = 'CONNFAIL';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.DISCONNECTED] = 'DISCONNECTED';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.DISCONNECTING] = 'DISCONNECTING';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.ERROR] = 'ERROR';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.RECONNECTING] = 'RECONNECTING';
CONNECTION_STATUS[strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_0__.Strophe.Status.REDIRECT] = 'REDIRECT'; // Core plugins are whitelisted automatically
// These are just the @converse/headless plugins, for the full converse,
// the other plugins are whitelisted in src/consts.js

//TOFIND removed converse-ping
const CORE_PLUGINS = ['converse-adhoc', 'converse-bookmarks', 'converse-bosh', 'converse-caps', 'converse-chat', 'converse-chatboxes', 'converse-disco', 'converse-emoji', 'converse-headlines', 'converse-mam', 'converse-muc', 'converse-pubsub', 'converse-roster', 'converse-smacks', 'converse-status', 'converse-vcard'];
const URL_PARSE_OPTIONS = {
  'start': /(\b|_)(?:([a-z][a-z0-9.+-]*:\/\/)|xmpp:|mailto:|www\.)/gi
};
const CHAT_STATES = ['active', 'composing', 'gone', 'inactive', 'paused'];
const KEYCODES = {
  TAB: 9,
  ENTER: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  ESCAPE: 27,
  LEFT_ARROW: 37,
  UP_ARROW: 38,
  RIGHT_ARROW: 39,
  DOWN_ARROW: 40,
  FORWARD_SLASH: 47,
  AT: 50,
  META: 91,
  META_RIGHT: 93
};

/***/ }),

/***/ "./src/headless/shared/errors.js":
/*!***************************************!*\
  !*** ./src/headless/shared/errors.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TimeoutError": () => (/* binding */ TimeoutError)
/* harmony export */ });
/**
 * Custom error for indicating timeouts
 * @namespace _converse
 */
class TimeoutError extends Error {}

/***/ }),

/***/ "./src/headless/shared/i18n.js":
/*!*************************************!*\
  !*** ./src/headless/shared/i18n.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sprintf-js */ "./node_modules/sprintf-js/src/sprintf.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sprintf_js__WEBPACK_IMPORTED_MODULE_0__);

/**
 * @namespace i18n
 */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  initialize() {},

  /**
   * Overridable string wrapper method which can be used to provide i18n
   * support.
   *
   * The default implementation in @converse/headless simply calls sprintf
   * with the passed in arguments.
   *
   * If you install the full version of Converse, then this method gets
   * overwritten in src/i18n/index.js to return a translated string.
   * @method __
   * @private
   * @memberOf i18n
   * @param { String } str
   */
  __() {
    return (0,sprintf_js__WEBPACK_IMPORTED_MODULE_0__.sprintf)(...arguments);
  }

});

/***/ }),

/***/ "./src/headless/shared/parsers.js":
/*!****************************************!*\
  !*** ./src/headless/shared/parsers.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StanzaParseError": () => (/* binding */ StanzaParseError),
/* harmony export */   "getAttributes": () => (/* binding */ getAttributes),
/* harmony export */   "getChatMarker": () => (/* binding */ getChatMarker),
/* harmony export */   "getChatState": () => (/* binding */ getChatState),
/* harmony export */   "getCorrectionAttributes": () => (/* binding */ getCorrectionAttributes),
/* harmony export */   "getEncryptionAttributes": () => (/* binding */ getEncryptionAttributes),
/* harmony export */   "getErrorAttributes": () => (/* binding */ getErrorAttributes),
/* harmony export */   "getMediaURLsMetadata": () => (/* binding */ getMediaURLsMetadata),
/* harmony export */   "getOpenGraphMetadata": () => (/* binding */ getOpenGraphMetadata),
/* harmony export */   "getOutOfBandAttributes": () => (/* binding */ getOutOfBandAttributes),
/* harmony export */   "getReceiptId": () => (/* binding */ getReceiptId),
/* harmony export */   "getReferences": () => (/* binding */ getReferences),
/* harmony export */   "getRetractionAttributes": () => (/* binding */ getRetractionAttributes),
/* harmony export */   "getSpoilerAttributes": () => (/* binding */ getSpoilerAttributes),
/* harmony export */   "getStanzaIDs": () => (/* binding */ getStanzaIDs),
/* harmony export */   "isArchived": () => (/* binding */ isArchived),
/* harmony export */   "isCarbon": () => (/* binding */ isCarbon),
/* harmony export */   "isHeadline": () => (/* binding */ isHeadline),
/* harmony export */   "isServerMessage": () => (/* binding */ isServerMessage),
/* harmony export */   "isValidReceiptRequest": () => (/* binding */ isValidReceiptRequest),
/* harmony export */   "throwErrorIfInvalidForward": () => (/* binding */ throwErrorIfInvalidForward)
/* harmony export */ });
/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! urijs */ "./node_modules/urijs/src/URI.js");
/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(urijs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/shared/constants.js */ "./src/headless/shared/constants.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");
/* harmony import */ var _converse_headless_shared_actions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @converse/headless/shared/actions */ "./src/headless/shared/actions.js");
/* harmony import */ var _converse_headless_utils_url_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @converse/headless/utils/url.js */ "./src/headless/utils/url.js");










const {
  NS
} = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe;
class StanzaParseError extends Error {
  constructor(message, stanza) {
    super(message, stanza);
    this.name = 'StanzaParseError';
    this.stanza = stanza;
  }

}
/**
 * Extract the XEP-0359 stanza IDs from the passed in stanza
 * and return a map containing them.
 * @private
 * @param { XMLElement } stanza - The message stanza
 * @returns { Object }
 */

function getStanzaIDs(stanza, original_stanza) {
  const attrs = {}; // Store generic stanza ids

  const sids = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`stanza-id[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.SID}"]`, stanza);
  const sid_attrs = sids.reduce((acc, s) => {
    acc[`stanza_id ${s.getAttribute('by')}`] = s.getAttribute('id');
    return acc;
  }, {});
  Object.assign(attrs, sid_attrs); // Store the archive id

  const result = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`message > result[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.MAM}"]`, original_stanza).pop();

  if (result) {
    const by_jid = original_stanza.getAttribute('from') || _converse_headless_core__WEBPACK_IMPORTED_MODULE_6__._converse.bare_jid;

    attrs[`stanza_id ${by_jid}`] = result.getAttribute('id');
  } // Store the origin id


  const origin_id = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`origin-id[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.SID}"]`, stanza).pop();

  if (origin_id) {
    attrs['origin_id'] = origin_id.getAttribute('id');
  }

  return attrs;
}
function getEncryptionAttributes(stanza) {
  const eme_tag = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`encryption[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.EME}"]`, stanza).pop();
  const namespace = eme_tag === null || eme_tag === void 0 ? void 0 : eme_tag.getAttribute('namespace');
  const attrs = {};

  if (namespace) {
    attrs.is_encrypted = true;
    attrs.encryption_namespace = namespace;
  } else if (sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`encrypted[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.OMEMO}"]`, stanza).pop()) {
    attrs.is_encrypted = true;
    attrs.encryption_namespace = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.OMEMO;
  }

  return attrs;
}
/**
 * @private
 * @param { XMLElement } stanza - The message stanza
 * @param { XMLElement } original_stanza - The original stanza, that contains the
 *  message stanza, if it was contained, otherwise it's the message stanza itself.
 * @returns { Object }
 */

function getRetractionAttributes(stanza, original_stanza) {
  const fastening = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`> apply-to[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.FASTEN}"]`, stanza).pop();

  if (fastening) {
    const applies_to_id = fastening.getAttribute('id');
    const retracted = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`> retract[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.RETRACT}"]`, fastening).pop();

    if (retracted) {
      const delay = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`delay[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.DELAY}"]`, original_stanza).pop();
      const time = delay ? dayjs__WEBPACK_IMPORTED_MODULE_1___default()(delay.getAttribute('stamp')).toISOString() : new Date().toISOString();
      return {
        'editable': false,
        'retracted': time,
        'retracted_id': applies_to_id
      };
    }
  } else {
    const tombstone = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`> retracted[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.RETRACT}"]`, stanza).pop();

    if (tombstone) {
      return {
        'editable': false,
        'is_tombstone': true,
        'retracted': tombstone.getAttribute('stamp')
      };
    }
  }

  return {};
}
function getCorrectionAttributes(stanza, original_stanza) {
  const el = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`replace[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.MESSAGE_CORRECT}"]`, stanza).pop();

  if (el) {
    const replace_id = el.getAttribute('id');

    if (replace_id) {
      const delay = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`delay[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.DELAY}"]`, original_stanza).pop();
      const time = delay ? dayjs__WEBPACK_IMPORTED_MODULE_1___default()(delay.getAttribute('stamp')).toISOString() : new Date().toISOString();
      return {
        replace_id,
        'edited': time
      };
    }
  }

  return {};
}
function getOpenGraphMetadata(stanza) {
  const fastening = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`> apply-to[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.FASTEN}"]`, stanza).pop();

  if (fastening) {
    const applies_to_id = fastening.getAttribute('id');
    const meta = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`> meta[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.XHTML}"]`, fastening);

    if (meta.length) {
      const msg_limit = _converse_headless_core__WEBPACK_IMPORTED_MODULE_6__.api.settings.get('message_limit');
      const data = meta.reduce((acc, el) => {
        const property = el.getAttribute('property');

        if (property) {
          let value = (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_7__.decodeHTMLEntities)(el.getAttribute('content') || '');

          if (msg_limit && property === 'og:description' && value.length >= msg_limit) {
            value = `${value.slice(0, msg_limit)}${(0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_7__.decodeHTMLEntities)('&#8230;')}`;
          }

          acc[property] = value;
        }

        return acc;
      }, {
        'ogp_for_id': applies_to_id
      });

      if ("og:description" in data || "og:title" in data || "og:image" in data) {
        return data;
      }
    }
  }

  return {};
}
function getMediaURLsMetadata(text) {
  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const objs = [];

  if (!text) {
    return {};
  }

  try {
    urijs__WEBPACK_IMPORTED_MODULE_0___default().withinString(text, (url, start, end) => {
      if (url.startsWith('_')) {
        url = url.slice(1);
        start += 1;
      }

      if (url.endsWith('_')) {
        url = url.slice(0, url.length - 1);
        end -= 1;
      }

      objs.push({
        url,
        'start': start + offset,
        'end': end + offset
      });
      return url;
    }, _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_5__.URL_PARSE_OPTIONS);
  } catch (error) {
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(error);
  }
  /**
   * @typedef { Object } MediaURLMetadata
   * An object representing the metadata of a URL found in a chat message
   * The actual URL is not saved, it can be extracted via the `start` and `end` indexes.
   * @property { Boolean } is_audio
   * @property { Boolean } is_image
   * @property { Boolean } is_video
   * @property { String } end
   * @property { String } start
   */


  const media_urls = objs.map(o => ({
    'end': o.end,
    'is_audio': (0,_converse_headless_utils_url_js__WEBPACK_IMPORTED_MODULE_9__.isAudioURL)(o.url),
    'is_image': (0,_converse_headless_utils_url_js__WEBPACK_IMPORTED_MODULE_9__.isImageURL)(o.url),
    'is_video': (0,_converse_headless_utils_url_js__WEBPACK_IMPORTED_MODULE_9__.isVideoURL)(o.url),
    'is_encrypted': (0,_converse_headless_utils_url_js__WEBPACK_IMPORTED_MODULE_9__.isEncryptedFileURL)(o.url),
    'start': o.start
  }));
  return media_urls.length ? {
    media_urls
  } : {};
}
function getSpoilerAttributes(stanza) {
  const spoiler = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`spoiler[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.SPOILER}"]`, stanza).pop();
  return {
    'is_spoiler': !!spoiler,
    'spoiler_hint': spoiler === null || spoiler === void 0 ? void 0 : spoiler.textContent
  };
}
function getOutOfBandAttributes(stanza) {
  const xform = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`x[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.OUTOFBAND}"]`, stanza).pop();

  if (xform) {
    var _xform$querySelector, _xform$querySelector2;

    return {
      'oob_url': (_xform$querySelector = xform.querySelector('url')) === null || _xform$querySelector === void 0 ? void 0 : _xform$querySelector.textContent,
      'oob_desc': (_xform$querySelector2 = xform.querySelector('desc')) === null || _xform$querySelector2 === void 0 ? void 0 : _xform$querySelector2.textContent
    };
  }

  return {};
}
/**
 * Returns the human readable error message contained in a `groupchat` message stanza of type `error`.
 * @private
 * @param { XMLElement } stanza - The message stanza
 */

function getErrorAttributes(stanza) {
  if (stanza.getAttribute('type') === 'error') {
    const error = stanza.querySelector('error');
    const text = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`text[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.STANZAS}"]`, error).pop();
    return {
      'is_error': true,
      'error_text': text === null || text === void 0 ? void 0 : text.textContent,
      'error_type': error.getAttribute('type'),
      'error_condition': error.firstElementChild.nodeName
    };
  }

  return {};
}
function getReferences(stanza) {
  return sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`reference[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.REFERENCE}"]`, stanza).map(ref => {
    var _stanza$querySelector;

    const anchor = ref.getAttribute('anchor');
    const text = (_stanza$querySelector = stanza.querySelector(anchor ? `#${anchor}` : 'body')) === null || _stanza$querySelector === void 0 ? void 0 : _stanza$querySelector.textContent;

    if (!text) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(`Could not find referenced text for ${ref}`);
      return null;
    }

    const begin = ref.getAttribute('begin');
    const end = ref.getAttribute('end');
    return {
      'begin': begin,
      'end': end,
      'type': ref.getAttribute('type'),
      'value': text.slice(begin, end),
      'uri': ref.getAttribute('uri')
    };
  }).filter(r => r);
}
function getReceiptId(stanza) {
  const receipt = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`received[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.RECEIPTS}"]`, stanza).pop();
  return receipt === null || receipt === void 0 ? void 0 : receipt.getAttribute('id');
}
/**
 * Determines whether the passed in stanza is a XEP-0280 Carbon
 * @private
 * @param { XMLElement } stanza - The message stanza
 * @returns { Boolean }
 */

function isCarbon(stanza) {
  const xmlns = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.CARBONS;
  return sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`message > received[xmlns="${xmlns}"]`, stanza).length > 0 || sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`message > sent[xmlns="${xmlns}"]`, stanza).length > 0;
}
/**
 * Returns the XEP-0085 chat state contained in a message stanza
 * @private
 * @param { XMLElement } stanza - The message stanza
 */

function getChatState(stanza) {
  var _sizzle$pop;

  return (_sizzle$pop = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`
        composing[xmlns="${NS.CHATSTATES}"],
        paused[xmlns="${NS.CHATSTATES}"],
        inactive[xmlns="${NS.CHATSTATES}"],
        active[xmlns="${NS.CHATSTATES}"],
        gone[xmlns="${NS.CHATSTATES}"]`, stanza).pop()) === null || _sizzle$pop === void 0 ? void 0 : _sizzle$pop.nodeName;
}
function isValidReceiptRequest(stanza, attrs) {
  return attrs.sender !== 'me' && !attrs.is_carbon && !attrs.is_archived && sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`request[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.RECEIPTS}"]`, stanza).length;
}
/**
 * Check whether the passed-in stanza is a forwarded message that is "bare",
 * i.e. it's not forwarded as part of a larger protocol, like MAM.
 * @param { XMLElement } stanza
 */

function throwErrorIfInvalidForward(stanza) {
  const bare_forward = sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`message > forwarded[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.FORWARD}"]`, stanza).length;

  if (bare_forward) {
    (0,_converse_headless_shared_actions__WEBPACK_IMPORTED_MODULE_8__.rejectMessage)(stanza, 'Forwarded messages not part of an encapsulating protocol are not supported');
    const from_jid = stanza.getAttribute('from');
    throw new StanzaParseError(`Ignoring unencapsulated forwarded message from ${from_jid}`, stanza);
  }
}
/**
 * Determines whether the passed in stanza is a XEP-0333 Chat Marker
 * @private
 * @method getChatMarker
 * @param { XMLElement } stanza - The message stanza
 * @returns { Boolean }
 */

function getChatMarker(stanza) {
  // If we receive more than one marker (which shouldn't happen), we take
  // the highest level of acknowledgement.
  return sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`
        acknowledged[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.MARKERS}"],
        displayed[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.MARKERS}"],
        received[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.MARKERS}"]`, stanza).pop();
}
function isHeadline(stanza) {
  return stanza.getAttribute('type') === 'headline';
}
function isServerMessage(stanza) {
  if (sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`mentions[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.MENTIONS}"]`, stanza).pop()) {
    return false;
  }

  const from_jid = stanza.getAttribute('from');

  if (stanza.getAttribute('type') !== 'error' && from_jid && !from_jid.includes('@')) {
    // Some servers (e.g. Prosody) don't set the stanza
    // type to "headline" when sending server messages.
    // For now we check if an @ signal is included, and if not,
    // we assume it's a headline stanza.
    return true;
  }

  return false;
}
/**
 * Determines whether the passed in stanza is a XEP-0313 MAM stanza
 * @private
 * @method isArchived
 * @param { XMLElement } stanza - The message stanza
 * @returns { Boolean }
 */

function isArchived(original_stanza) {
  return !!sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`message > result[xmlns="${strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.NS.MAM}"]`, original_stanza).pop();
}
/**
 * Returns an object containing all attribute names and values for a particular element.
 * @method getAttributes
 * @param { XMLElement } stanza
 * @returns { Object }
 */

function getAttributes(stanza) {
  return stanza.getAttributeNames().reduce((acc, name) => {
    acc[name] = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_4__.Strophe.xmlunescape(stanza.getAttribute(name));
    return acc;
  }, {});
}

/***/ }),

/***/ "./src/headless/shared/rsm.js":
/*!************************************!*\
  !*** ./src/headless/shared/rsm.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RSM": () => (/* binding */ RSM),
/* harmony export */   "RSM_ATTRIBUTES": () => (/* binding */ RSM_ATTRIBUTES),
/* harmony export */   "RSM_TYPES": () => (/* binding */ RSM_TYPES)
/* harmony export */ });
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core.js */ "./src/headless/core.js");
/* harmony import */ var lodash_es_pick__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es/pick */ "./node_modules/lodash-es/pick.js");
/**
 * @module converse-rsm
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description XEP-0059 Result Set Management
 *   Some code taken from the Strophe RSM plugin, licensed under the MIT License
 *   Copyright 2006-2017 Strophe (https://github.com/strophe/strophejs)
 */


const {
  Strophe,
  $build
} = _core_js__WEBPACK_IMPORTED_MODULE_0__.converse.env;
Strophe.addNamespace('RSM', 'http://jabber.org/protocol/rsm');
/**
 * @typedef { Object } RSMQueryParameters
 * [XEP-0059 RSM](https://xmpp.org/extensions/xep-0059.html) Attributes that can be used to filter query results
 * @property { String } [after] - The XEP-0359 stanza ID of a message after which messages should be returned. Implies forward paging.
 * @property { String } [before] - The XEP-0359 stanza ID of a message before which messages should be returned. Implies backward paging.
 * @property { Integer } [index=0] - The index of the results page to return.
 * @property { Integer } [max] - The maximum number of items to return.
 */

const RSM_QUERY_PARAMETERS = ['after', 'before', 'index', 'max'];

const toNumber = v => Number(v);

const toString = v => v.toString();

const RSM_TYPES = {
  'after': toString,
  'before': toString,
  'count': toNumber,
  'first': toString,
  'index': toNumber,
  'last': toString,
  'max': toNumber
};

const isUndefined = x => typeof x === 'undefined'; // This array contains both query attributes and response attributes


const RSM_ATTRIBUTES = Object.keys(RSM_TYPES);
/**
 * Instances of this class are used to page through query results according to XEP-0059 Result Set Management
 * @class RSM
 */

class RSM {
  static getQueryParameters() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_1__["default"])(options, RSM_QUERY_PARAMETERS);
  }

  static parseXMLResult(set) {
    const result = {};

    for (var i = 0; i < RSM_ATTRIBUTES.length; i++) {
      const attr = RSM_ATTRIBUTES[i];
      const elem = set.getElementsByTagName(attr)[0];

      if (!isUndefined(elem) && elem !== null) {
        result[attr] = RSM_TYPES[attr](Strophe.getText(elem));

        if (attr == 'first') {
          result.index = RSM_TYPES['index'](elem.getAttribute('index'));
        }
      }
    }

    return result;
  }
  /**
   * Create a new RSM instance
   * @param { Object } options - Configuration options
   * @constructor
   */


  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.query = RSM.getQueryParameters(options);
    this.result = options.xml ? RSM.parseXMLResult(options.xml) : {};
  }
  /**
   * Returns a `<set>` XML element that confirms to XEP-0059 Result Set Management.
   * The element is constructed based on the {@link module:converse-rsm~RSMQueryParameters}
   * that are set on this RSM instance.
   * @returns { XMLElement }
   */


  toXML() {
    const xml = $build('set', {
      xmlns: Strophe.NS.RSM
    });

    const reducer = (xml, a) => !isUndefined(this.query[a]) ? xml.c(a).t((this.query[a] || '').toString()).up() : xml;

    return RSM_QUERY_PARAMETERS.reduce(reducer, xml).tree();
  }

  next(max, before) {
    const options = Object.assign({}, this.query, {
      after: this.result.last,
      before,
      max
    });
    return new RSM(options);
  }

  previous(max, after) {
    const options = Object.assign({}, this.query, {
      after,
      before: this.result.first,
      max
    });
    return new RSM(options);
  }

}
_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.RSM_ATTRIBUTES = RSM_ATTRIBUTES;
_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.RSM = RSM;

/***/ }),

/***/ "./src/headless/shared/settings/api.js":
/*!*********************************************!*\
  !*** ./src/headless/shared/settings/api.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "settings_api": () => (/* binding */ settings_api),
/* harmony export */   "user_settings_api": () => (/* binding */ user_settings_api)
/* harmony export */ });
/* harmony import */ var lodash_es_isObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/isObject */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/shared/settings/utils.js */ "./src/headless/shared/settings/utils.js");



/**
 * This grouping allows access to the
 * [configuration settings](/docs/html/configuration.html#configuration-settings)
 * of Converse.
 *
 * @namespace _converse.api.settings
 * @memberOf _converse.api
 */

const settings_api = {
  /**
   * Allows new configuration settings to be specified, or new default values for
   * existing configuration settings to be specified.
   *
   * Note, calling this method *after* converse.initialize has been
   * called will *not* change the initialization settings provided via
   * `converse.initialize`.
   *
   * @method _converse.api.settings.extend
   * @param {object} settings The configuration settings
   * @example
   * _converse.api.settings.extend({
   *    'enable_foo': true
   * });
   *
   * // The user can then override the default value of the configuration setting when
   * // calling `converse.initialize`.
   * converse.initialize({
   *     'enable_foo': false
   * });
   */
  extend(settings) {
    return (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.extendAppSettings)(settings);
  },

  update(settings) {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_0__["default"].warn('The api.settings.update method has been deprecated and will be removed. ' + 'Please use api.settings.extend instead.');
    return this.extend(settings);
  },

  /**
   * @method _converse.api.settings.get
   * @returns {*} Value of the particular configuration setting.
   * @example _converse.api.settings.get("play_sounds");
   */
  get(key) {
    return (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAppSetting)(key);
  },

  /**
   * Set one or many configuration settings.
   *
   * Note, this is not an alternative to calling {@link converse.initialize}, which still needs
   * to be called. Generally, you'd use this method after Converse is already
   * running and you want to change the configuration on-the-fly.
   *
   * @method _converse.api.settings.set
   * @param {Object} [settings] An object containing configuration settings.
   * @param {string} [key] Alternatively to passing in an object, you can pass in a key and a value.
   * @param {string} [value]
   * @example _converse.api.settings.set("play_sounds", true);
   * @example
   * _converse.api.settings.set({
   *     "play_sounds": true,
   *     "hide_offline_users": true
   * });
   */
  set(key, val) {
    (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateAppSettings)(key, val);
  },

  /**
   * The `listen` namespace exposes methods for creating event listeners
   * (aka handlers) for events related to settings.
   *
   * @namespace _converse.api.settings.listen
   * @memberOf _converse.api.settings
   */
  listen: {
    /**
     * Register an event listener for the passed in event.
     * @method _converse.api.settings.listen.on
     * @param { ('change') } name - The name of the event to listen for.
     *  Currently there is only the 'change' event.
     * @param { Function } handler - The event handler function
     * @param { Object } [context] - The context of the `this` attribute of the
     *  handler function.
     * @example _converse.api.settings.listen.on('change', callback);
     */
    on(name, handler, context) {
      (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.registerListener)(name, handler, context);
    },

    /**
     * To stop listening to an event, you can use the `not` method.
     * @method _converse.api.settings.listen.not
     * @param { String } name The event's name
     * @param { Function } callback The callback method that is to no longer be called when the event fires
     * @example _converse.api.settings.listen.not('change', callback);
     */
    not(name, handler) {
      (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.unregisterListener)(name, handler);
    }

  }
};
/**
 * API for accessing and setting user settings. User settings are
 * different from the application settings from {@link _converse.api.settings}
 * because they are per-user and set via user action.
 * @namespace _converse.api.user.settings
 * @memberOf _converse.api.user
 */

const user_settings_api = {
  /**
   * Returns the user settings model. Useful when you want to listen for change events.
   * @async
   * @method _converse.api.user.settings.getModel
   * @returns {Promise<Model>}
   * @example const settings = await _converse.api.user.settings.getModel();
   */
  getModel() {
    return (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.getUserSettings)();
  },

  /**
   * Get the value of a particular user setting.
   * @method _converse.api.user.settings.get
   * @param {String} key - The setting name
   * @param {*} [fallback] - An optional fallback value if the user setting is undefined
   * @returns {Promise} Promise which resolves with the value of the particular configuration setting.
   * @example _converse.api.user.settings.get("foo");
   */
  async get(key, fallback) {
    const user_settings = await (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.getUserSettings)();
    return user_settings.get(key) === undefined ? fallback : user_settings.get(key);
  },

  /**
   * Set one or many user settings.
   * @async
   * @method _converse.api.user.settings.set
   * @param {Object} [settings] An object containing configuration settings.
   * @param {string} [key] Alternatively to passing in an object, you can pass in a key and a value.
   * @param {string} [value]
   * @example _converse.api.user.settings.set("foo", "bar");
   * @example
   * _converse.api.user.settings.set({
   *     "foo": "bar",
   *     "baz": "buz"
   * });
   */
  set(key, val) {
    if ((0,lodash_es_isObject__WEBPACK_IMPORTED_MODULE_2__["default"])(key)) {
      return (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateUserSettings)(key, {
        'promise': true
      });
    } else {
      const o = {};
      o[key] = val;
      return (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateUserSettings)(o, {
        'promise': true
      });
    }
  },

  /**
   * Clears all the user settings
   * @async
   * @method _converse.api.user.settings.clear
   */
  clear() {
    return (0,_converse_headless_shared_settings_utils_js__WEBPACK_IMPORTED_MODULE_1__.clearUserSettings)();
  }

};

/***/ }),

/***/ "./src/headless/shared/settings/constants.js":
/*!***************************************************!*\
  !*** ./src/headless/shared/settings/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_SETTINGS": () => (/* binding */ DEFAULT_SETTINGS)
/* harmony export */ });
/**
 * @typedef { Object } ConfigurationSettings
 * Converse's core configuration values
 * @property { Boolean } [allow_non_roster_messaging=false]
 * @property { Boolean } [allow_url_history_change=true]
 * @property { String } [assets_path='/dist']
 * @property { ('login'|'prebind'|'anonymous'|'external') } [authentication='login']
 * @property { Boolean } [auto_login=false] - Currently only used in connection with anonymous login
 * @property { Boolean } [auto_reconnect=true]
 * @property { Array<String>} [blacklisted_plugins]
 * @property { Boolean } [clear_cache_on_logout=false]
 * @property { Object } [connection_options]
 * @property { String } [credentials_url] - URL from where login credentials can be fetched
 * @property { Boolean } [discover_connection_methods=true]
 * @property { RegExp } [geouri_regex]
 * @property { RegExp } [geouri_replacement='https://www.openstreetmap.org/?mlat=$1&mlon=$2#map=18/$1/$2']
 * @property { String } [i18n]
 * @property { String } [jid]
 * @property { Boolean } [keepalive=true]
 * @property { ('debug'|'info'|'eror') } [loglevel='info']
 * @property { Array<String> } [locales]
 * @property { String } [nickname]
 * @property { String } [password]
 * @property { ('IndexedDB'|'localStorage') } [persistent_store='IndexedDB']
 * @property { String } [rid]
 * @property { Element } [root=window.document]
 * @property { String } [sid]
 * @property { Boolean } [singleton=false]
 * @property { Boolean } [strict_plugin_dependencies=false]
 * @property { ('overlayed'|'fullscreen'|'mobile') } [view_mode='overlayed']
 * @property { String } [websocket_url]
 * @property { Array<String>} [whitelisted_plugins]
 */
const DEFAULT_SETTINGS = {
  allow_non_roster_messaging: false,
  allow_url_history_change: true,
  assets_path: '/dist',
  authentication: 'login',
  // Available values are "login", "prebind", "anonymous" and "external".
  auto_login: false,
  // Currently only used in connection with anonymous login
  auto_reconnect: true,
  blacklisted_plugins: [],
  clear_cache_on_logout: false,
  connection_options: {},
  credentials_url: null,
  // URL from where login credentials can be fetched
  discover_connection_methods: true,
  geouri_regex: /https\:\/\/www.openstreetmap.org\/.*#map=[0-9]+\/([\-0-9.]+)\/([\-0-9.]+)\S*/g,
  geouri_replacement: 'https://www.openstreetmap.org/?mlat=$1&mlon=$2#map=18/$1/$2',
  i18n: undefined,
  jid: undefined,
  keepalive: true,
  loglevel: 'info',
  locales: ['af', 'ar', 'bg', 'ca', 'cs', 'da', 'de', 'el', 'eo', 'es', 'eu', 'en', 'fa', 'fi', 'fr', 'gl', 'he', 'hi', 'hu', 'id', 'it', 'ja', 'lt', 'nb', 'nl', 'mr', 'oc', 'pl', 'pt', 'pt_BR', 'ro', 'ru', 'sv', 'th', 'tr', 'uk', 'vi', 'zh_CN', 'zh_TW'],
  nickname: undefined,
  password: undefined,
  persistent_store: 'IndexedDB',
  rid: undefined,
  root: window.document,
  sid: undefined,
  singleton: false,
  strict_plugin_dependencies: false,
  view_mode: 'overlayed',
  // Choices are 'overlayed', 'fullscreen', 'mobile'
  websocket_url: undefined,
  whitelisted_plugins: []
};

/***/ }),

/***/ "./src/headless/shared/settings/utils.js":
/*!***********************************************!*\
  !*** ./src/headless/shared/settings/utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clearUserSettings": () => (/* binding */ clearUserSettings),
/* harmony export */   "extendAppSettings": () => (/* binding */ extendAppSettings),
/* harmony export */   "getAppSetting": () => (/* binding */ getAppSetting),
/* harmony export */   "getAppSettings": () => (/* binding */ getAppSettings),
/* harmony export */   "getInitSettings": () => (/* binding */ getInitSettings),
/* harmony export */   "getUserSettings": () => (/* binding */ getUserSettings),
/* harmony export */   "initAppSettings": () => (/* binding */ initAppSettings),
/* harmony export */   "registerListener": () => (/* binding */ registerListener),
/* harmony export */   "unregisterListener": () => (/* binding */ unregisterListener),
/* harmony export */   "updateAppSettings": () => (/* binding */ updateAppSettings),
/* harmony export */   "updateUserSettings": () => (/* binding */ updateUserSettings)
/* harmony export */ });
/* harmony import */ var _converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/headless/core.js */ "./src/headless/core.js");
/* harmony import */ var lodash_es_assignIn__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/assignIn */ "./node_modules/lodash-es/assignIn.js");
/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es/isEqual.js */ "./node_modules/lodash-es/isEqual.js");
/* harmony import */ var lodash_es_isObject__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es/isObject */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var lodash_es_pick__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/pick */ "./node_modules/lodash-es/pick.js");
/* harmony import */ var _converse_headless_utils_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/utils/core */ "./src/headless/utils/core.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ "./src/headless/shared/settings/constants.js");
/* harmony import */ var _converse_skeletor_src_events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/skeletor/src/events.js */ "./node_modules/@converse/skeletor/src/events.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");











let app_settings;
let init_settings = {}; // Container for settings passed in via converse.initialize

let user_settings; // User settings, populated via api.users.settings

function getAppSettings() {
  return app_settings;
}
function initAppSettings(settings) {
  init_settings = settings;
  app_settings = {};
  Object.assign(app_settings, _converse_skeletor_src_events_js__WEBPACK_IMPORTED_MODULE_4__.Events); // Allow only whitelisted settings to be overwritten via converse.initialize

  const allowed_settings = (0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_7__["default"])(settings, Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SETTINGS));
  (0,lodash_es_assignIn__WEBPACK_IMPORTED_MODULE_8__["default"])(app_settings, _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SETTINGS, allowed_settings);
}
function getInitSettings() {
  return init_settings;
}
function getAppSetting(key) {
  if (Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SETTINGS).includes(key)) {
    return app_settings[key];
  }
}
function extendAppSettings(settings) {
  _converse_headless_utils_core__WEBPACK_IMPORTED_MODULE_2__["default"].merge(_constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SETTINGS, settings); // When updating the settings, we need to avoid overwriting the
  // initialization_settings (i.e. the settings passed in via converse.initialize).

  const allowed_keys = Object.keys((0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_7__["default"])(settings, Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SETTINGS)));
  const allowed_site_settings = (0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_7__["default"])(init_settings, allowed_keys);
  const updated_settings = (0,lodash_es_assignIn__WEBPACK_IMPORTED_MODULE_8__["default"])((0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_7__["default"])(settings, allowed_keys), allowed_site_settings);
  _converse_headless_utils_core__WEBPACK_IMPORTED_MODULE_2__["default"].merge(app_settings, updated_settings);
}
function registerListener(name, func, context) {
  app_settings.on(name, func, context);
}
function unregisterListener(name, func) {
  app_settings.off(name, func);
}
function updateAppSettings(key, val) {
  if (key == null) return this; // eslint-disable-line no-eq-null

  let attrs;

  if ((0,lodash_es_isObject__WEBPACK_IMPORTED_MODULE_9__["default"])(key)) {
    attrs = key;
  } else if (typeof key === 'string') {
    attrs = {};
    attrs[key] = val;
  }

  const allowed_keys = Object.keys((0,lodash_es_pick__WEBPACK_IMPORTED_MODULE_7__["default"])(attrs, Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SETTINGS)));
  const changed = {};
  allowed_keys.forEach(k => {
    const val = attrs[k];

    if (!(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_10__["default"])(app_settings[k], val)) {
      changed[k] = val;
      app_settings[k] = val;
    }
  });
  Object.keys(changed).forEach(k => app_settings.trigger('change:' + k, changed[k]));
  app_settings.trigger('change', changed);
}
/**
 * @async
 */

function initUserSettings() {
  var _user_settings;

  if (!_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.bare_jid) {
    const msg = "No JID to fetch user settings for";
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(msg);
    throw Error(msg);
  }

  if (!((_user_settings = user_settings) !== null && _user_settings !== void 0 && _user_settings.fetched)) {
    const id = `converse.user-settings.${_converse_headless_core_js__WEBPACK_IMPORTED_MODULE_0__._converse.bare_jid}`;
    user_settings = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_5__.Model({
      id
    });
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_6__.initStorage)(user_settings, id);
    user_settings.fetched = user_settings.fetch({
      'promise': true
    });
  }

  return user_settings.fetched;
}

async function getUserSettings() {
  await initUserSettings();
  return user_settings;
}
async function updateUserSettings(data, options) {
  await initUserSettings();
  return user_settings.save(data, options);
}
async function clearUserSettings() {
  await initUserSettings();
  return user_settings.clear();
}

/***/ }),

/***/ "./src/headless/utils/core.js":
/*!************************************!*\
  !*** ./src/headless/utils/core.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {



"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeHTMLEntities": () => (/* binding */ decodeHTMLEntities),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "getLoginCredentialsFromBrowser": () => (/* binding */ getLoginCredentialsFromBrowser),
/* harmony export */   "getUniqueId": () => (/* binding */ getUniqueId),
/* harmony export */   "isEmptyMessage": () => (/* binding */ isEmptyMessage),
/* harmony export */   "isUniView": () => (/* binding */ isUniView),
/* harmony export */   "prefixMentions": () => (/* binding */ prefixMentions),
/* harmony export */   "replacePromise": () => (/* binding */ replacePromise),
/* harmony export */   "safeSave": () => (/* binding */ safeSave),
/* harmony export */   "setUnloadEvent": () => (/* binding */ setUnloadEvent),
/* harmony export */   "tearDown": () => (/* binding */ tearDown)
/* harmony export */ });
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/shared/_converse.js */ "./src/headless/shared/_converse.js");
/* harmony import */ var lodash_es_compact__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash-es/compact */ "./node_modules/lodash-es/compact.js");
/* harmony import */ var lodash_es_isElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash-es/isElement */ "./node_modules/lodash-es/isElement.js");
/* harmony import */ var lodash_es_isObject__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es/isObject */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var lodash_es_last__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es/last */ "./node_modules/lodash-es/last.js");
/* harmony import */ var _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/log.js */ "./src/headless/log.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sizzle */ "./node_modules/sizzle/dist/sizzle.js");
/* harmony import */ var sizzle__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(sizzle__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! strophe.js/src/strophe.js */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _converse_openpromise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/openpromise */ "./node_modules/@converse/openpromise/openpromise.js");
/* harmony import */ var _converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @converse/headless/utils/init.js */ "./src/headless/utils/init.js");
/* harmony import */ var _converse_headless_shared_settings_api_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @converse/headless/shared/settings/api.js */ "./src/headless/shared/settings/api.js");
    
/**
 * @copyright The Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description This is the core utilities module.
 */













function isEmptyMessage(attrs) {
  if (attrs instanceof _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__.Model) {
    attrs = attrs.attributes;
  }

  return !attrs['oob_url'] && !attrs['file'] && !(attrs['is_encrypted'] && attrs['plaintext']) && !attrs['message'];
}
/* We distinguish between UniView and MultiView instances.
 *
 * UniView means that only one chat is visible, even though there might be multiple ongoing chats.
 * MultiView means that multiple chats may be visible simultaneously.
 */

function isUniView() {
  return ['mobile', 'fullscreen', 'embedded'].includes(_converse_headless_shared_settings_api_js__WEBPACK_IMPORTED_MODULE_8__.settings_api.get("view_mode"));
}
async function tearDown() {
  await _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].api.trigger('beforeTearDown', {
    'synchronous': true
  });
  window.removeEventListener('click', _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].onUserActivity);
  window.removeEventListener('focus', _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].onUserActivity);
  window.removeEventListener('keypress', _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].onUserActivity);
  window.removeEventListener('mousemove', _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].onUserActivity);
  window.removeEventListener(_converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].unloadevent, _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].onUserActivity);
  window.clearInterval(_converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].everySecondTrigger);

  _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].api.trigger('afterTearDown');

  return _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"];
}
/**
 * The utils object
 * @namespace u
 */

const u = {};

u.isTagEqual = function (stanza, name) {
  if (stanza.nodeTree) {
    return u.isTagEqual(stanza.nodeTree, name);
  } else if (!(stanza instanceof Element)) {
    throw Error("isTagEqual called with value which isn't " + "an element or Strophe.Builder instance");
  } else {
    return strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.isTagEqual(stanza, name);
  }
};

const parser = new DOMParser();
const parserErrorNS = parser.parseFromString('invalid', 'text/xml').getElementsByTagName("parsererror")[0].namespaceURI;

u.getJIDFromURI = function (jid) {
  return jid.startsWith('xmpp:') && jid.endsWith('?join') ? jid.replace(/^xmpp:/, '').replace(/\?join$/, '') : jid;
};

u.toStanza = function (string) {
  const node = parser.parseFromString(string, "text/xml");

  if (node.getElementsByTagNameNS(parserErrorNS, 'parsererror').length) {
    throw new Error(`Parser Error: ${string}`);
  }

  return node.firstElementChild;
};

u.getLongestSubstring = function (string, candidates) {
  function reducer(accumulator, current_value) {
    if (string.startsWith(current_value)) {
      if (current_value.length > accumulator.length) {
        return current_value;
      } else {
        return accumulator;
      }
    } else {
      return accumulator;
    }
  }

  return candidates.reduce(reducer, '');
};
/**
 * Given a message object, return its text with @ chars
 * inserted before the mentioned nicknames.
 */


function prefixMentions(message) {
  let text = message.getMessageText();
  (message.get('references') || []).sort((a, b) => b.begin - a.begin).forEach(ref => {
    text = `${text.slice(0, ref.begin)}@${text.slice(ref.begin)}`;
  });
  return text;
}

u.isValidJID = function (jid) {
  if (typeof jid === 'string') {
    return (0,lodash_es_compact__WEBPACK_IMPORTED_MODULE_9__["default"])(jid.split('@')).length === 2 && !jid.startsWith('@') && !jid.endsWith('@');
  }

  return false;
};

u.isValidMUCJID = function (jid) {
  return !jid.startsWith('@') && !jid.endsWith('@');
};

u.isSameBareJID = function (jid1, jid2) {
  if (typeof jid1 !== 'string' || typeof jid2 !== 'string') {
    return false;
  }

  return strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(jid1).toLowerCase() === strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.getBareJidFromJid(jid2).toLowerCase();
};

u.isSameDomain = function (jid1, jid2) {
  if (typeof jid1 !== 'string' || typeof jid2 !== 'string') {
    return false;
  }

  return strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.getDomainFromJid(jid1).toLowerCase() === strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.getDomainFromJid(jid2).toLowerCase();
};

u.isNewMessage = function (message) {
  /* Given a stanza, determine whether it's a new
   * message, i.e. not a MAM archived one.
   */
  if (message instanceof Element) {
    return !(sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`result[xmlns="${strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.MAM}"]`, message).length && sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`delay[xmlns="${strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.DELAY}"]`, message).length);
  } else if (message instanceof _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_4__.Model) {
    message = message.attributes;
  }

  return !(message['is_delayed'] && message['is_archived']);
};

u.shouldCreateMessage = function (attrs) {
  return attrs['retracted'] || // Retraction received *before* the message
  !isEmptyMessage(attrs);
};

u.shouldCreateGroupchatMessage = function (attrs) {
  return attrs.nick && (u.shouldCreateMessage(attrs) || attrs.is_tombstone);
};

u.isChatRoom = function (model) {
  return model && model.get('type') === 'chatroom';
};

u.isErrorObject = function (o) {
  return o instanceof Error;
};

u.isErrorStanza = function (stanza) {
  if (!(0,lodash_es_isElement__WEBPACK_IMPORTED_MODULE_10__["default"])(stanza)) {
    return false;
  }

  return stanza.getAttribute('type') === 'error';
};

u.isForbiddenError = function (stanza) {
  if (!(0,lodash_es_isElement__WEBPACK_IMPORTED_MODULE_10__["default"])(stanza)) {
    return false;
  }

  return sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`error[type="auth"] forbidden[xmlns="${strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, stanza).length > 0;
};

u.isServiceUnavailableError = function (stanza) {
  if (!(0,lodash_es_isElement__WEBPACK_IMPORTED_MODULE_10__["default"])(stanza)) {
    return false;
  }

  return sizzle__WEBPACK_IMPORTED_MODULE_3___default()(`error[type="cancel"] service-unavailable[xmlns="${strophe_js_src_strophe_js__WEBPACK_IMPORTED_MODULE_5__.Strophe.NS.STANZAS}"]`, stanza).length > 0;
};
/**
 * Merge the second object into the first one.
 * @private
 * @method u#merge
 * @param { Object } first
 * @param { Object } second
 */


u.merge = function merge(first, second) {
  for (const k in second) {
    if ((0,lodash_es_isObject__WEBPACK_IMPORTED_MODULE_11__["default"])(first[k])) {
      merge(first[k], second[k]);
    } else {
      first[k] = second[k];
    }
  }
};

u.getOuterWidth = function (el) {
  let include_margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let width = el.offsetWidth;

  if (!include_margin) {
    return width;
  }

  const style = window.getComputedStyle(el);
  width += parseInt(style.marginLeft ? style.marginLeft : 0, 10) + parseInt(style.marginRight ? style.marginRight : 0, 10);
  return width;
};
/**
 * Converts an HTML string into a DOM element.
 * Expects that the HTML string has only one top-level element,
 * i.e. not multiple ones.
 * @private
 * @method u#stringToElement
 * @param { String } s - The HTML string
 */


u.stringToElement = function (s) {
  var div = document.createElement('div');
  div.innerHTML = s;
  return div.firstElementChild;
};
/**
 * Checks whether the DOM element matches the given selector.
 * @private
 * @method u#matchesSelector
 * @param { DOMElement } el - The DOM element
 * @param { String } selector - The selector
 */


u.matchesSelector = function (el, selector) {
  const match = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector;
  return match ? match.call(el, selector) : false;
};
/**
 * Returns a list of children of the DOM element that match the selector.
 * @private
 * @method u#queryChildren
 * @param { DOMElement } el - the DOM element
 * @param { String } selector - the selector they should be matched against
 */


u.queryChildren = function (el, selector) {
  return Array.from(el.childNodes).filter(el => u.matchesSelector(el, selector));
};

u.contains = function (attr, query) {
  const checker = (item, key) => item.get(key).toLowerCase().includes(query.toLowerCase());

  return function (item) {
    if (typeof attr === 'object') {
      return Object.keys(attr).reduce((acc, k) => acc || checker(item, k), false);
    } else if (typeof attr === 'string') {
      return checker(item, attr);
    } else {
      throw new TypeError('contains: wrong attribute type. Must be string or array.');
    }
  };
};

u.isOfType = function (type, item) {
  return item.get('type') == type;
};

u.isInstance = function (type, item) {
  return item instanceof type;
};

u.getAttribute = function (key, item) {
  return item.get(key);
};

u.contains.not = function (attr, query) {
  return function (item) {
    return !u.contains(attr, query)(item);
  };
};

u.rootContains = function (root, el) {
  // The document element does not have the contains method in IE.
  if (root === document && !root.contains) {
    return document.head.contains(el) || document.body.contains(el);
  }

  return root.contains ? root.contains(el) : window.HTMLElement.prototype.contains.call(root, el);
};

u.createFragmentFromText = function (markup) {
  /* Returns a DocumentFragment containing DOM nodes based on the
   * passed-in markup text.
   */
  // http://stackoverflow.com/questions/9334645/create-node-from-markup-string
  var frag = document.createDocumentFragment(),
      tmp = document.createElement('body'),
      child;
  tmp.innerHTML = markup; // Append elements in a loop to a DocumentFragment, so that the
  // browser does not re-render the document for each node.

  while (child = tmp.firstChild) {
    // eslint-disable-line no-cond-assign
    frag.appendChild(child);
  }

  return frag;
};

u.isPersistableModel = function (model) {
  return model.collection && model.collection.browserStorage;
};

u.getResolveablePromise = _converse_openpromise__WEBPACK_IMPORTED_MODULE_6__.getOpenPromise;
u.getOpenPromise = _converse_openpromise__WEBPACK_IMPORTED_MODULE_6__.getOpenPromise;

u.interpolate = function (string, o) {
  return string.replace(/{{{([^{}]*)}}}/g, (a, b) => {
    var r = o[b];
    return typeof r === 'string' || typeof r === 'number' ? r : a;
  });
};
/**
 * Call the callback once all the events have been triggered
 * @private
 * @method u#onMultipleEvents
 * @param { Array } events: An array of objects, with keys `object` and
 *   `event`, representing the event name and the object it's triggered upon.
 * @param { Function } callback: The function to call once all events have
 *    been triggered.
 */


u.onMultipleEvents = function () {
  let events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let callback = arguments.length > 1 ? arguments[1] : undefined;
  let triggered = [];

  function handler(result) {
    triggered.push(result);

    if (events.length === triggered.length) {
      callback(triggered);
      triggered = [];
    }
  }

  events.forEach(e => e.object.on(e.event, handler));
};

function safeSave(model, attributes, options) {
  if (u.isPersistableModel(model)) {
    model.save(attributes, options);
  } else {
    model.set(attributes, options);
  }
}
u.safeSave = safeSave;

u.siblingIndex = function (el) {
  /* eslint-disable no-cond-assign */
  for (var i = 0; el = el.previousElementSibling; i++);

  return i;
};
/**
 * Returns the current word being written in the input element
 * @method u#getCurrentWord
 * @param {HTMLElement} input - The HTMLElement in which text is being entered
 * @param {integer} [index] - An optional rightmost boundary index. If given, the text
 *  value of the input element will only be considered up until this index.
 * @param {string} [delineator] - An optional string delineator to
 *  differentiate between words.
 * @private
 */


u.getCurrentWord = function (input, index, delineator) {
  if (!index) {
    index = input.selectionEnd || undefined;
  }

  let [word] = input.value.slice(0, index).split(/\s/).slice(-1);

  if (delineator) {
    [word] = word.split(delineator).slice(-1);
  }

  return word;
};

u.isMentionBoundary = s => s !== '@' && RegExp(`(\\p{Z}|\\p{P})`, 'u').test(s);

u.replaceCurrentWord = function (input, new_value) {
  const caret = input.selectionEnd || undefined;
  const current_word = (0,lodash_es_last__WEBPACK_IMPORTED_MODULE_12__["default"])(input.value.slice(0, caret).split(/\s/));
  const value = input.value;
  const mention_boundary = u.isMentionBoundary(current_word[0]) ? current_word[0] : '';
  input.value = value.slice(0, caret - current_word.length) + mention_boundary + `${new_value} ` + value.slice(caret);
  const selection_end = caret - current_word.length + new_value.length + 1;
  input.selectionEnd = mention_boundary ? selection_end + 1 : selection_end;
};

u.triggerEvent = function (el, name) {
  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Event";
  let bubbles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  let cancelable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  const evt = document.createEvent(type);
  evt.initEvent(name, bubbles, cancelable);
  el.dispatchEvent(evt);
};

u.getSelectValues = function (select) {
  const result = [];
  const options = select && select.options;

  for (var i = 0, iLen = options.length; i < iLen; i++) {
    const opt = options[i];

    if (opt.selected) {
      result.push(opt.value || opt.text);
    }
  }

  return result;
};

u.getRandomInt = function (max) {
  return Math.floor(Math.random() * Math.floor(max));
};

u.placeCaretAtEnd = function (textarea) {
  if (textarea !== document.activeElement) {
    textarea.focus();
  } // Double the length because Opera is inconsistent about whether a carriage return is one character or two.


  const len = textarea.value.length * 2; // Timeout seems to be required for Blink

  setTimeout(() => textarea.setSelectionRange(len, len), 1); // Scroll to the bottom, in case we're in a tall textarea
  // (Necessary for Firefox and Chrome)

  this.scrollTop = 999999;
};

function getUniqueId(suffix) {
  const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });

  if (typeof suffix === "string" || typeof suffix === "number") {
    return uuid + ":" + suffix;
  } else {
    return uuid;
  }
}
/**
 * Clears the specified timeout and interval.
 * @method u#clearTimers
 * @param {number} timeout - Id if the timeout to clear.
 * @param {number} interval - Id of the interval to clear.
 * @private
 * @copyright Simen Bekkhus 2016
 * @license MIT
 */

function clearTimers(timeout, interval) {
  clearTimeout(timeout);
  clearInterval(interval);
}
/**
 * Creates a {@link Promise} that resolves if the passed in function returns a truthy value.
 * Rejects if it throws or does not return truthy within the given max_wait.
 * @method u#waitUntil
 * @param {Function} func - The function called every check_delay,
 *  and the result of which is the resolved value of the promise.
 * @param {number} [max_wait=300] - The time to wait before rejecting the promise.
 * @param {number} [check_delay=3] - The time to wait before each invocation of {func}.
 * @returns {Promise} A promise resolved with the value of func,
 *  or rejected with the exception thrown by it or it times out.
 * @copyright Simen Bekkhus 2016
 * @license MIT
 */


u.waitUntil = function (func) {
  let max_wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
  let check_delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;

  // Run the function once without setting up any listeners in case it's already true
  try {
    const result = func();

    if (result) {
      return Promise.resolve(result);
    }
  } catch (e) {
    return Promise.reject(e);
  }

  const promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_6__.getOpenPromise)();
  const timeout_err = new Error();

  function checker() {
    try {
      const result = func();

      if (result) {
        clearTimers(max_wait_timeout, interval);
        promise.resolve(result);
      }
    } catch (e) {
      clearTimers(max_wait_timeout, interval);
      promise.reject(e);
    }
  }

  const interval = setInterval(checker, check_delay);

  function handler() {
    clearTimers(max_wait_timeout, interval);
    const err_msg = `Wait until promise timed out: \n\n${timeout_err.stack}`;
    console.trace();
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(err_msg);
    promise.reject(new Error(err_msg));
  }

  const max_wait_timeout = setTimeout(handler, max_wait);
  return promise;
};

function setUnloadEvent() {
  if ('onpagehide' in window) {
    // Pagehide gets thrown in more cases than unload. Specifically it
    // gets thrown when the page is cached and not just
    // closed/destroyed. It's the only viable event on mobile Safari.
    // https://www.webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/
    _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].unloadevent = 'pagehide';
  } else if ('onbeforeunload' in window) {
    _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].unloadevent = 'beforeunload';
  } else if ('onunload' in window) {
    _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].unloadevent = 'unload';
  }
}
async function getLoginCredentialsFromBrowser() {
  try {
    const creds = await navigator.credentials.get({
      'password': true
    });

    if (creds && creds.type == 'password' && u.isValidJID(creds.id)) {
      await (0,_converse_headless_utils_init_js__WEBPACK_IMPORTED_MODULE_7__.setUserJID)(creds.id);
      return {
        'jid': creds.id,
        'password': creds.password
      };
    }
  } catch (e) {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].error(e);
  }
}
function replacePromise(name) {
  const existing_promise = _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].promises[name];

  if (!existing_promise) {
    throw new Error(`Tried to replace non-existing promise: ${name}`);
  }

  if (existing_promise.replace) {
    const promise = (0,_converse_openpromise__WEBPACK_IMPORTED_MODULE_6__.getOpenPromise)();
    promise.replace = existing_promise.replace;
    _converse_headless_shared_converse_js__WEBPACK_IMPORTED_MODULE_1__["default"].promises[name] = promise;
  } else {
    _converse_headless_log_js__WEBPACK_IMPORTED_MODULE_2__["default"].debug(`Not replacing promise "${name}"`);
  }
}
const element = document.createElement('div');
function decodeHTMLEntities(str) {
  if (str && typeof str === 'string') {
    element.innerHTML = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(str);
    str = element.textContent;
    element.textContent = '';
  }

  return str;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Object.assign({
  prefixMentions,
  isEmptyMessage,
  getUniqueId
}, u));

/***/ }),

/***/ "./src/headless/utils/form.js":
/*!************************************!*\
  !*** ./src/headless/utils/form.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ "./src/headless/utils/core.js");
/**
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description This is the form utilities module.
 */

/**
 * Takes an HTML DOM and turns it into an XForm field.
 * @private
 * @method u#webForm2xForm
 * @param { DOMElement } field - the field to convert
 */

_core__WEBPACK_IMPORTED_MODULE_0__["default"].webForm2xForm = function (field) {
  const name = field.getAttribute('name');

  if (!name) {
    return null; // See #1924
  }

  let value;

  if (field.getAttribute('type') === 'checkbox') {
    value = field.checked && 1 || 0;
  } else if (field.tagName == "TEXTAREA") {
    value = field.value.split('\n').filter(s => s.trim());
  } else if (field.tagName == "SELECT") {
    value = _core__WEBPACK_IMPORTED_MODULE_0__["default"].getSelectValues(field);
  } else {
    value = field.value;
  }

  return _core__WEBPACK_IMPORTED_MODULE_0__["default"].toStanza(`
        <field var="${name}">
            ${value.constructor === Array ? value.map(v => `<value>${v}</value>`) : `<value>${value}</value>`}
        </field>`);
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_core__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./src/headless/utils/init.js":
/*!************************************!*\
  !*** ./src/headless/utils/init.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attemptNonPreboundSession": () => (/* binding */ attemptNonPreboundSession),
/* harmony export */   "cleanup": () => (/* binding */ cleanup),
/* harmony export */   "getConnectionServiceURL": () => (/* binding */ getConnectionServiceURL),
/* harmony export */   "initClientConfig": () => (/* binding */ initClientConfig),
/* harmony export */   "initPlugins": () => (/* binding */ initPlugins),
/* harmony export */   "initSession": () => (/* binding */ initSession),
/* harmony export */   "initSessionStorage": () => (/* binding */ initSessionStorage),
/* harmony export */   "registerGlobalEventHandlers": () => (/* binding */ registerGlobalEventHandlers),
/* harmony export */   "setUserJID": () => (/* binding */ setUserJID)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/storage.js */ "./node_modules/@converse/skeletor/src/storage.js");
/* harmony import */ var _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/shared/_converse */ "./src/headless/shared/_converse.js");
/* harmony import */ var lodash_es_debounce__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es/debounce */ "./node_modules/lodash-es/debounce.js");
/* harmony import */ var localforage_webextensionstorage_driver_local__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! localforage-webextensionstorage-driver/local */ "./node_modules/localforage-webextensionstorage-driver/local.js");
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var localforage_webextensionstorage_driver_sync__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! localforage-webextensionstorage-driver/sync */ "./node_modules/localforage-webextensionstorage-driver/sync.js");
/* harmony import */ var _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @converse/headless/shared/constants.js */ "./src/headless/shared/constants.js");
/* harmony import */ var _converse_headless_shared_connection_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @converse/headless/shared/connection/index.js */ "./src/headless/shared/connection/index.js");
/* harmony import */ var _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @converse/skeletor/src/model.js */ "./node_modules/@converse/skeletor/src/model.js");
/* harmony import */ var strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! strophe.js/src/strophe */ "./node_modules/strophe.js/src/strophe.js");
/* harmony import */ var _converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @converse/headless/utils/storage.js */ "./src/headless/utils/storage.js");
/* harmony import */ var _converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @converse/headless/utils/core.js */ "./src/headless/utils/core.js");












function initPlugins(_converse) {
  // If initialize gets called a second time (e.g. during tests), then we
  // need to re-apply all plugins (for a new converse instance), and we
  // therefore need to clear this array that prevents plugins from being
  // initialized twice.
  // If initialize is called for the first time, then this array is empty
  // in any case.
  _converse.pluggable.initialized_plugins = [];
  const whitelist = _converse_headless_shared_constants_js__WEBPACK_IMPORTED_MODULE_5__.CORE_PLUGINS.concat(_converse.api.settings.get("whitelisted_plugins"));

  if (_converse.api.settings.get("singleton")) {
    ['converse-bookmarks', 'converse-controlbox', 'converse-headline', 'converse-register'].forEach(name => _converse.api.settings.get("blacklisted_plugins").push(name));
  }

  _converse.pluggable.initializePlugins({
    _converse
  }, whitelist, _converse.api.settings.get("blacklisted_plugins"));
  /**
   * Triggered once all plugins have been initialized. This is a useful event if you want to
   * register event handlers but would like your own handlers to be overridable by
   * plugins. In that case, you need to first wait until all plugins have been
   * initialized, so that their overrides are active. One example where this is used
   * is in [converse-notifications.js](https://github.com/jcbrand/converse.js/blob/master/src/converse-notification.js)`.
   *
   * Also available as an [ES2015 Promise](http://es6-features.org/#PromiseUsage)
   * which can be listened to with `_converse.api.waitUntil`.
   *
   * @event _converse#pluginsInitialized
   * @memberOf _converse
   * @example _converse.api.listen.on('pluginsInitialized', () => { ... });
   */


  _converse.api.trigger('pluginsInitialized');
}
async function initClientConfig(_converse) {
  /* The client config refers to configuration of the client which is
   * independent of any particular user.
   * What this means is that config values need to persist across
   * user sessions.
   */
  const id = 'converse.client-config';
  _converse.config = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_7__.Model({
    id,
    'trusted': true
  });
  _converse.config.browserStorage = (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_9__.createStore)(id, "session");
  await new Promise(r => _converse.config.fetch({
    'success': r,
    'error': r
  }));
  /**
   * Triggered once the XMPP-client configuration has been initialized.
   * The client configuration is independent of any particular and its values
   * persist across user sessions.
   *
   * @event _converse#clientConfigInitialized
   * @example
   * _converse.api.listen.on('clientConfigInitialized', () => { ... });
   */

  _converse.api.trigger('clientConfigInitialized');
}
async function initSessionStorage(_converse) {
  await _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].sessionStorageInitialized;
  _converse.storage = {
    'session': _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.createInstance({
      'name': _converse.isTestEnv() ? 'converse-test-session' : 'converse-session',
      'description': 'sessionStorage instance',
      'driver': ['sessionStorageWrapper']
    })
  };
}

function initPersistentStorage(_converse, store_name) {
  if (_converse.api.settings.get('persistent_store') === 'sessionStorage') {
    return;
  } else if (_converse.api.settings.get("persistent_store") === 'BrowserExtLocal') {
    _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.defineDriver(localforage_webextensionstorage_driver_local__WEBPACK_IMPORTED_MODULE_2__["default"]).then(() => _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.setDriver('webExtensionLocalStorage'));
    _converse.storage['persistent'] = _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage;
    return;
  } else if (_converse.api.settings.get("persistent_store") === 'BrowserExtSync') {
    _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.defineDriver(localforage_webextensionstorage_driver_sync__WEBPACK_IMPORTED_MODULE_4__["default"]).then(() => _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.setDriver('webExtensionSyncStorage'));
    _converse.storage['persistent'] = _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage;
    return;
  }

  //TOFIND Changed DB name to be set based on websocket host. Created SocketHost and DBName, e  was set to name : converse-persistent
  console.log( _converse.settings, _converse)
  let SocketHost = _converse.api.settings.get('websocket_url').replace(/^.*\:\/\//,'').replace(/\.[a-zA-Z0-9]+\/.*/, (match)=>{
    return match.replace(/\/.*/,'')
    })
    let DBName = "converse-persistent" + "_" + SocketHost;
    setTimeout(()=>{
      console.log(DBName, "CONVERSE", _converse['bare_jid'])
    }, 1000)
    console.log(DBName, "CONVERSE", _converse['bare_jid'])


  const config =  {
    name:  _converse.isTestEnv()
      ? "converse-test-persistent"
      : DBName,
    storeName:  store_name,
  };

  if (_converse.api.settings.get("persistent_store") === 'localStorage') {
    config['description'] = 'localStorage instance';
    config['driver'] = [_converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.LOCALSTORAGE];
  } else if (_converse.api.settings.get("persistent_store") === 'IndexedDB') {
    config['description'] = 'indexedDB instance';
    config['driver'] = [_converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.INDEXEDDB];
  }

  _converse.storage['persistent'] = _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"].localForage.createInstance(config);
}

function saveJIDtoSession(_converse, jid) {
  jid = _converse.session.get('jid') || jid;

  if (_converse.api.settings.get("authentication") !== _converse.ANONYMOUS && !strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_8__.Strophe.getResourceFromJid(jid)) {
    jid = jid.toLowerCase() + _converse_headless_shared_connection_index_js__WEBPACK_IMPORTED_MODULE_6__.Connection.generateResource();
  }

  _converse.jid = jid;
  _converse.bare_jid = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_8__.Strophe.getBareJidFromJid(jid);
  _converse.resource = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_8__.Strophe.getResourceFromJid(jid);
  _converse.domain = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_8__.Strophe.getDomainFromJid(jid);

  _converse.session.save({
    'jid': jid,
    'bare_jid': _converse.bare_jid,
    'resource': _converse.resource,
    'domain': _converse.domain,
    // We use the `active` flag to determine whether we should use the values from sessionStorage.
    // When "cloning" a tab (e.g. via middle-click), the `active` flag will be set and we'll create
    // a new empty user session, otherwise it'll be false and we can re-use the user session.
    'active': true
  }); // Set JID on the connection object so that when we call `connection.bind`
  // the new resource is found by Strophe.js and sent to the XMPP server.


  _converse.connection.jid = jid;
}
/**
 * Stores the passed in JID for the current user, potentially creating a
 * resource if the JID is bare.
 *
 * Given that we can only create an XMPP connection if we know the domain of
 * the server connect to and we only know this once we know the JID, we also
 * call {@link _converse.initConnection } (if necessary) to make sure that the
 * connection is set up.
 *
 * @emits _converse#setUserJID
 * @params { String } jid
 */


async function setUserJID(jid) {
  await initSession(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"], jid);
  /**
   * Triggered whenever the user's JID has been updated
   * @event _converse#setUserJID
   */

  _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].api.trigger('setUserJID');

  return jid;
}
async function initSession(_converse, jid) {
  var _converse$session;

  const is_shared_session = _converse.api.settings.get('connection_options').worker;

  const bare_jid = strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_8__.Strophe.getBareJidFromJid(jid).toLowerCase();
  const id = `converse.session-${bare_jid}`;

  if (((_converse$session = _converse.session) === null || _converse$session === void 0 ? void 0 : _converse$session.get('id')) !== id) {
    initPersistentStorage(_converse, bare_jid);
    _converse.session = new _converse_skeletor_src_model_js__WEBPACK_IMPORTED_MODULE_7__.Model({
      id
    });
    (0,_converse_headless_utils_storage_js__WEBPACK_IMPORTED_MODULE_9__.initStorage)(_converse.session, id, is_shared_session ? "persistent" : "session");
    await new Promise(r => _converse.session.fetch({
      'success': r,
      'error': r
    }));

    if (!is_shared_session && _converse.session.get('active')) {
      // If the `active` flag is set, it means this tab was cloned from
      // another (e.g. via middle-click), and its session data was copied over.
      _converse.session.clear();

      _converse.session.save({
        id
      });
    }

    saveJIDtoSession(_converse, jid);
    /**
     * Triggered once the user's session has been initialized. The session is a
     * cache which stores information about the user's current session.
     * @event _converse#userSessionInitialized
     * @memberOf _converse
     */

    _converse.api.trigger('userSessionInitialized');
  } else {
    saveJIDtoSession(_converse, jid);
  }
}
function registerGlobalEventHandlers(_converse) {
  document.addEventListener("visibilitychange", _converse.saveWindowState);

  _converse.saveWindowState({
    'type': document.hidden ? "blur" : "focus"
  }); // Set initial state

  /**
   * Called once Converse has registered its global event handlers
   * (for events such as window resize or unload).
   * Plugins can listen to this event as cue to register their own
   * global event handlers.
   * @event _converse#registeredGlobalEventHandlers
   * @example _converse.api.listen.on('registeredGlobalEventHandlers', () => { ... });
   */


  _converse.api.trigger('registeredGlobalEventHandlers');
}

function unregisterGlobalEventHandlers(_converse) {
  const {
    api
  } = _converse;
  document.removeEventListener("visibilitychange", _converse.saveWindowState);
  api.trigger('unregisteredGlobalEventHandlers');
} // Make sure everything is reset in case this is a subsequent call to
// converse.initialize (happens during tests).


async function cleanup(_converse) {
  var _converse$connection;

  const {
    api
  } = _converse;
  await api.trigger('cleanup', {
    'synchronous': true
  });

  _converse.router.history.stop();

  unregisterGlobalEventHandlers(_converse);
  (_converse$connection = _converse.connection) === null || _converse$connection === void 0 ? void 0 : _converse$connection.reset();

  _converse.stopListening();

  _converse.off();

  if (_converse.promises['initialized'].isResolved) {
    api.promises.add('initialized');
  }
}

async function getLoginCredentials() {
  let credentials;
  let wait = 0;

  while (!credentials) {
    try {
      credentials = await fetchLoginCredentials(wait); // eslint-disable-line no-await-in-loop
    } catch (e) {
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_3__["default"].error('Could not fetch login credentials');
      _converse_headless_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(e);
    } // If unsuccessful, we wait 2 seconds between subsequent attempts to
    // fetch the credentials.


    wait = 2000;
  }

  return credentials;
}

function fetchLoginCredentials() {
  let wait = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return new Promise((0,lodash_es_debounce__WEBPACK_IMPORTED_MODULE_11__["default"])(async (resolve, reject) => {
    let xhr = new XMLHttpRequest();
    xhr.open('GET', _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].api.settings.get("credentials_url"), true);
    xhr.setRequestHeader('Accept', 'application/json, text/javascript');

    xhr.onload = () => {
      if (xhr.status >= 200 && xhr.status < 400) {
        const data = JSON.parse(xhr.responseText);
        setUserJID(data.jid).then(() => {
          resolve({
            jid: data.jid,
            password: data.password
          });
        });
      } else {
        reject(new Error(`${xhr.status}: ${xhr.responseText}`));
      }
    };

    xhr.onerror = reject;
    /**
     * *Hook* which allows modifying the server request
     * @event _converse#beforeFetchLoginCredentials
     */

    xhr = await _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].api.hook('beforeFetchLoginCredentials', this, xhr);
    xhr.send();
  }, wait));
}

async function attemptNonPreboundSession(credentials, automatic) {
  const {
    api
  } = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"];

  if (api.settings.get("authentication") === _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].LOGIN) {
    // XXX: If EITHER ``keepalive`` or ``auto_login`` is ``true`` and
    // ``authentication`` is set to ``login``, then Converse will try to log the user in,
    // since we don't have a way to distinguish between wether we're
    // restoring a previous session (``keepalive``) or whether we're
    // automatically setting up a new session (``auto_login``).
    // So we can't do the check (!automatic || _converse.api.settings.get("auto_login")) here.
    if (credentials) {
      connect(credentials);
    } else if (api.settings.get("credentials_url")) {
      // We give credentials_url preference, because
      // _converse.connection.pass might be an expired token.
      connect(await getLoginCredentials());
    } else if (_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].jid && (api.settings.get("password") || _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.pass)) {
      connect();
    } else if (!_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].isTestEnv() && 'credentials' in navigator) {
      connect(await (0,_converse_headless_utils_core_js__WEBPACK_IMPORTED_MODULE_10__.getLoginCredentialsFromBrowser)());
    } else {
      !_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].isTestEnv() && _converse_headless_log__WEBPACK_IMPORTED_MODULE_3__["default"].warn("attemptNonPreboundSession: Couldn't find credentials to log in with");
    }
  } else if ([_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].ANONYMOUS, _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].EXTERNAL].includes(api.settings.get("authentication")) && (!automatic || api.settings.get("auto_login"))) {
    connect();
  }
}
function getConnectionServiceURL() {
  const {
    api
  } = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"];

  if (('WebSocket' in window || 'MozWebSocket' in window) && api.settings.get("websocket_url")) {
    return api.settings.get('websocket_url');
  } else if (api.settings.get('bosh_service_url')) {
    return api.settings.get('bosh_service_url');
  }

  return '';
}

function connect(credentials) {
  const {
    api
  } = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"];

  if ([_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].ANONYMOUS, _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].EXTERNAL].includes(api.settings.get("authentication"))) {
    if (!_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].jid) {
      throw new Error("Config Error: when using anonymous login " + "you need to provide the server's domain via the 'jid' option. " + "Either when calling converse.initialize, or when calling " + "_converse.api.user.login.");
    }

    if (!_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.reconnecting) {
      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.reset();
    }

    _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.connect(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].jid.toLowerCase());
  } else if (api.settings.get("authentication") === _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].LOGIN) {
    var _converse$connection2;

    const password = (credentials === null || credentials === void 0 ? void 0 : credentials.password) ?? (((_converse$connection2 = _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection) === null || _converse$connection2 === void 0 ? void 0 : _converse$connection2.pass) || api.settings.get("password"));

    if (!password) {
      if (api.settings.get("auto_login")) {
        throw new Error("autoLogin: If you use auto_login and " + "authentication='login' then you also need to provide a password.");
      }

      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.setDisconnectionCause(strophe_js_src_strophe__WEBPACK_IMPORTED_MODULE_8__.Strophe.Status.AUTHFAIL, undefined, true);

      api.connection.disconnect();
      return;
    }

    if (!_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.reconnecting) {
      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.reset();

      _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.service = getConnectionServiceURL();
    }

    _converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].connection.connect(_converse_headless_shared_converse__WEBPACK_IMPORTED_MODULE_1__["default"].jid, password);
  }
}

/***/ }),

/***/ "./src/headless/utils/parse-helpers.js":
/*!*********************************************!*\
  !*** ./src/headless/utils/parse-helpers.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @copyright 2022, the Converse.js contributors
 * @license Mozilla Public License (MPLv2)
 * @description Pure functions to help functionally parse messages.
 * @todo Other parsing helpers can be made more abstract and placed here.
 */
const helpers = {};

const escapeRegexChars = (string, char) => string.replace(RegExp('\\' + char, 'ig'), '\\' + char);

helpers.escapeCharacters = characters => string => characters.split('').reduce(escapeRegexChars, string);

helpers.escapeRegexString = helpers.escapeCharacters('[\\^$.?*+(){}|'); // `for` is ~25% faster than using `Array.find()`

helpers.findFirstMatchInArray = array => text => {
  for (let i = 0; i < array.length; i++) {
    if (text.localeCompare(array[i], undefined, {
      sensitivity: 'base'
    }) === 0) {
      return array[i];
    }
  }

  return null;
};

const reduceReferences = (_ref, ref, index) => {
  let [text, refs] = _ref;
  let updated_text = text;
  let {
    begin,
    end
  } = ref;
  const {
    value
  } = ref;
  begin = begin - index;
  end = end - index - 1; // -1 to compensate for the removed @

  updated_text = `${updated_text.slice(0, begin)}${value}${updated_text.slice(end + 1)}`;
  return [updated_text, [...refs, { ...ref,
    begin,
    end
  }]];
};

helpers.reduceTextFromReferences = (text, refs) => refs.reduce(reduceReferences, [text, []]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpers);

/***/ }),

/***/ "./src/headless/utils/storage.js":
/*!***************************************!*\
  !*** ./src/headless/utils/storage.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createStore": () => (/* binding */ createStore),
/* harmony export */   "getDefaultStore": () => (/* binding */ getDefaultStore),
/* harmony export */   "initStorage": () => (/* binding */ initStorage)
/* harmony export */ });
/* harmony import */ var _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @converse/skeletor/src/storage.js */ "./node_modules/@converse/skeletor/src/storage.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");


function getDefaultStore() {
  if (_converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.config.get('trusted')) {
    const is_non_persistent = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('persistent_store') === 'sessionStorage';
    return is_non_persistent ? 'session' : 'persistent';
  } else {
    return 'session';
  }
}

function storeUsesIndexedDB(store) {
  return store === 'persistent' && _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__.api.settings.get('persistent_store') === 'IndexedDB';
}

function createStore(id, store) {
  const name = store || getDefaultStore();
  const s = _converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.storage[name];

  if (typeof s === 'undefined') {
    throw new TypeError(`createStore: Could not find store for ${id}`);
  }

  return new _converse_skeletor_src_storage_js__WEBPACK_IMPORTED_MODULE_0__["default"](id, s, storeUsesIndexedDB(store));
}
function initStorage(model, id, type) {
  const store = type || getDefaultStore();
  model.browserStorage = createStore(id, store);

  if (storeUsesIndexedDB(store)) {
    const flush = () => model.browserStorage.flush();

    window.addEventListener(_converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.unloadevent, flush);
    model.on('destroy', () => window.removeEventListener(_converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse.unloadevent, flush));
    model.listenTo(_converse_headless_core__WEBPACK_IMPORTED_MODULE_1__._converse, 'beforeLogout', flush);
  }
}

/***/ }),

/***/ "./src/headless/utils/url.js":
/*!***********************************!*\
  !*** ./src/headless/utils/url.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filterQueryParamsFromURL": () => (/* binding */ filterQueryParamsFromURL),
/* harmony export */   "getURI": () => (/* binding */ getURI),
/* harmony export */   "isAudioURL": () => (/* binding */ isAudioURL),
/* harmony export */   "isDomainAllowed": () => (/* binding */ isDomainAllowed),
/* harmony export */   "isDomainWhitelisted": () => (/* binding */ isDomainWhitelisted),
/* harmony export */   "isEncryptedFileURL": () => (/* binding */ isEncryptedFileURL),
/* harmony export */   "isGIFURL": () => (/* binding */ isGIFURL),
/* harmony export */   "isImageURL": () => (/* binding */ isImageURL),
/* harmony export */   "isMediaURLDomainAllowed": () => (/* binding */ isMediaURLDomainAllowed),
/* harmony export */   "isURLWithImageExtension": () => (/* binding */ isURLWithImageExtension),
/* harmony export */   "isVideoURL": () => (/* binding */ isVideoURL),
/* harmony export */   "shouldRenderMediaFromURL": () => (/* binding */ shouldRenderMediaFromURL)
/* harmony export */ });
/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! urijs */ "./node_modules/urijs/src/URI.js");
/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(urijs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @converse/headless/log */ "./src/headless/log.js");
/* harmony import */ var _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @converse/headless/core */ "./src/headless/core.js");



const {
  u
} = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.converse.env;
/**
 * Given a url, check whether the protocol being used is allowed for rendering
 * the media in the chat (as opposed to just rendering a URL hyperlink).
 * @param { String } url
 * @returns { Boolean }
 */

function isAllowedProtocolForMedia(url) {
  const uri = getURI(url);
  const {
    protocol
  } = window.location;

  if (['chrome-extension:', 'file:'].includes(protocol)) {
    return true;
  }

  return protocol === 'http:' || protocol === 'https:' && ['https', 'aesgcm'].includes(uri.protocol().toLowerCase());
}

function getURI(url) {
  try {
    return url instanceof (urijs__WEBPACK_IMPORTED_MODULE_0___default()) ? url : new (urijs__WEBPACK_IMPORTED_MODULE_0___default())(url);
  } catch (error) {
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug(error);
    return null;
  }
}
/**
 * Given the an array of file extensions, check whether a URL points to a file
 * ending in one of them.
 * @param { String[] } types - An array of file extensions
 * @param { String } url
 * @returns { Boolean }
 * @example
 *  checkFileTypes(['.gif'], 'https://conversejs.org/cat.gif?foo=bar');
 */

function checkFileTypes(types, url) {
  const uri = getURI(url);

  if (uri === null) {
    throw new Error(`checkFileTypes: could not parse url ${url}`);
  }

  const filename = uri.filename().toLowerCase();
  return !!types.filter(ext => filename.endsWith(ext)).length;
}

function isDomainWhitelisted(whitelist, url) {
  const uri = getURI(url);
  const subdomain = uri.subdomain();
  const domain = uri.domain();
  const fulldomain = `${subdomain ? `${subdomain}.` : ''}${domain}`;
  return whitelist.includes(domain) || whitelist.includes(fulldomain);
}
function shouldRenderMediaFromURL(url_text, type) {
  if (!isAllowedProtocolForMedia(url_text)) {
    return false;
  }

  const may_render = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('render_media');
  const is_domain_allowed = isDomainAllowed(url_text, `allowed_${type}_domains`);

  if (Array.isArray(may_render)) {
    return is_domain_allowed && isDomainWhitelisted(may_render, url_text);
  } else {
    return is_domain_allowed && may_render;
  }
}
function filterQueryParamsFromURL(url) {
  const paramsArray = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('filter_url_query_params');
  if (!paramsArray) return url;
  const parsed_uri = getURI(url);
  return parsed_uri.removeQuery(paramsArray).toString();
}
function isDomainAllowed(url, setting) {
  const allowed_domains = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.settings.get(setting);

  if (!Array.isArray(allowed_domains)) {
    return true;
  }

  try {
    return isDomainWhitelisted(allowed_domains, url);
  } catch (error) {
    _converse_headless_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug(error);
    return false;
  }
}
/**
 * Accepts a {@link MediaURL} object and then checks whether its domain is
 * allowed for rendering in the chat.
 * @param { MediaURL } o
 * @returns { Bool }
 */

function isMediaURLDomainAllowed(o) {
  return o.is_audio && isDomainAllowed(o.url, 'allowed_audio_domains') || o.is_video && isDomainAllowed(o.url, 'allowed_video_domains') || o.is_image && isDomainAllowed(o.url, 'allowed_image_domains');
}
function isURLWithImageExtension(url) {
  return checkFileTypes(['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg'], url);
}
function isGIFURL(url) {
  return checkFileTypes(['.gif'], url);
}
function isAudioURL(url) {
  return checkFileTypes(['.ogg', '.mp3', '.m4a'], url);
}
function isVideoURL(url) {
  return checkFileTypes(['.mp4', '.webm'], url);
}
function isImageURL(url) {
  const regex = _converse_headless_core__WEBPACK_IMPORTED_MODULE_2__.api.settings.get('image_urls_regex');
  return (regex === null || regex === void 0 ? void 0 : regex.test(url)) || isURLWithImageExtension(url);
}
function isEncryptedFileURL(url) {
  return url.startsWith('aesgcm://');
}
Object.assign(u, {
  isAudioURL,
  isGIFURL,
  isVideoURL,
  isImageURL,
  isURLWithImageExtension,
  checkFileTypes,
  getURI,
  shouldRenderMediaFromURL,
  isAllowedProtocolForMedia
});

/***/ }),

/***/ "./src/strophe-shims.js":
/*!******************************!*\
  !*** ./src/strophe-shims.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMParser": () => (/* binding */ DOMParser),
/* harmony export */   "WebSocket": () => (/* binding */ WebSocket),
/* harmony export */   "getDummyXMLDOMDocument": () => (/* binding */ getDummyXMLDOMDocument)
/* harmony export */ });
const WebSocket = window.WebSocket;
const DOMParser = window.DOMParser;
function getDummyXMLDOMDocument() {
  return document.implementation.createDocument('jabber:client', 'strophe', null);
}

/***/ }),

/***/ "./node_modules/dayjs/dayjs.min.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/dayjs.min.js ***!
  \*****************************************/
/***/ (function(module) {

!function(t,e){ true?module.exports=e():0}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",$="Invalid Date",l=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},v="en",D={};D[v]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return v;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(v=i),i||!r&&v},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g="set"+(this.$u?"UTC":"");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var v=this.$locale().weekStart||0,D=(y<v?y+7:y)-v;return $(r?m-D:m+(6-D),M);case a:case d:return l(g+"Hours",0);case u:return l(g+"Minutes",1);case s:return l(g+"Seconds",2);case i:return l(g+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),$=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,v=O.m(this,M);return v=(l={},l[c]=v/12,l[f]=v,l[h]=v/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?v:O.a(v)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[v],w.Ls=D,w.p={},w}));

/***/ }),

/***/ "./node_modules/dayjs/plugin/advancedFormat.js":
/*!*****************************************************!*\
  !*** ./node_modules/dayjs/plugin/advancedFormat.js ***!
  \*****************************************************/
/***/ (function(module) {

!function(e,t){ true?module.exports=t():0}(this,(function(){"use strict";return function(e,t,r){var n=t.prototype,s=n.format;r.en.ordinal=function(e){var t=["th","st","nd","rd"],r=e%100;return"["+e+(t[(r-20)%10]||t[r]||t[0])+"]"},n.format=function(e){var t=this,r=this.$locale();if(!this.isValid())return s.bind(this)(e);var n=this.$utils(),a=(e||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case"Q":return Math.ceil((t.$M+1)/3);case"Do":return r.ordinal(t.$D);case"gggg":return t.weekYear();case"GGGG":return t.isoWeekYear();case"wo":return r.ordinal(t.week(),"W");case"w":case"ww":return n.s(t.week(),"w"===e?1:2,"0");case"W":case"WW":return n.s(t.isoWeek(),"W"===e?1:2,"0");case"k":case"kk":return n.s(String(0===t.$H?24:t.$H),"k"===e?1:2,"0");case"X":return Math.floor(t.$d.getTime()/1e3);case"x":return t.$d.getTime();case"z":return"["+t.offsetName()+"]";case"zzz":return"["+t.offsetName("long")+"]";default:return e}}));return s.bind(this)(a)}}}));

/***/ }),

/***/ "./node_modules/dompurify/dist/purify.js":
/*!***********************************************!*\
  !*** ./node_modules/dompurify/dist/purify.js ***!
  \***********************************************/
/***/ (function(module) {

/*! @license DOMPurify 2.3.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.6/LICENSE */

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, function () { 'use strict';

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var hasOwnProperty = Object.hasOwnProperty,
      setPrototypeOf = Object.setPrototypeOf,
      isFrozen = Object.isFrozen,
      getPrototypeOf = Object.getPrototypeOf,
      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var freeze = Object.freeze,
      seal = Object.seal,
      create = Object.create; // eslint-disable-line import/no-mutable-exports

  var _ref = typeof Reflect !== 'undefined' && Reflect,
      apply = _ref.apply,
      construct = _ref.construct;

  if (!apply) {
    apply = function apply(fun, thisValue, args) {
      return fun.apply(thisValue, args);
    };
  }

  if (!freeze) {
    freeze = function freeze(x) {
      return x;
    };
  }

  if (!seal) {
    seal = function seal(x) {
      return x;
    };
  }

  if (!construct) {
    construct = function construct(Func, args) {
      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();
    };
  }

  var arrayForEach = unapply(Array.prototype.forEach);
  var arrayPop = unapply(Array.prototype.pop);
  var arrayPush = unapply(Array.prototype.push);

  var stringToLowerCase = unapply(String.prototype.toLowerCase);
  var stringMatch = unapply(String.prototype.match);
  var stringReplace = unapply(String.prototype.replace);
  var stringIndexOf = unapply(String.prototype.indexOf);
  var stringTrim = unapply(String.prototype.trim);

  var regExpTest = unapply(RegExp.prototype.test);

  var typeErrorCreate = unconstruct(TypeError);

  function unapply(func) {
    return function (thisArg) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return apply(func, thisArg, args);
    };
  }

  function unconstruct(func) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return construct(func, args);
    };
  }

  /* Add properties to a lookup table */
  function addToSet(set, array) {
    if (setPrototypeOf) {
      // Make 'in' and truthy checks like Boolean(set.constructor)
      // independent of any properties defined on Object.prototype.
      // Prevent prototype setters from intercepting set as a this value.
      setPrototypeOf(set, null);
    }

    var l = array.length;
    while (l--) {
      var element = array[l];
      if (typeof element === 'string') {
        var lcElement = stringToLowerCase(element);
        if (lcElement !== element) {
          // Config presets (e.g. tags.js, attrs.js) are immutable.
          if (!isFrozen(array)) {
            array[l] = lcElement;
          }

          element = lcElement;
        }
      }

      set[element] = true;
    }

    return set;
  }

  /* Shallow clone an object */
  function clone(object) {
    var newObject = create(null);

    var property = void 0;
    for (property in object) {
      if (apply(hasOwnProperty, object, [property])) {
        newObject[property] = object[property];
      }
    }

    return newObject;
  }

  /* IE10 doesn't support __lookupGetter__ so lets'
   * simulate it. It also automatically checks
   * if the prop is function or getter and behaves
   * accordingly. */
  function lookupGetter(object, prop) {
    while (object !== null) {
      var desc = getOwnPropertyDescriptor(object, prop);
      if (desc) {
        if (desc.get) {
          return unapply(desc.get);
        }

        if (typeof desc.value === 'function') {
          return unapply(desc.value);
        }
      }

      object = getPrototypeOf(object);
    }

    function fallbackValue(element) {
      console.warn('fallback value for', element);
      return null;
    }

    return fallbackValue;
  }

  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);

  // SVG
  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);

  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);

  // List of SVG elements that are disallowed by default.
  // We still need to know them so that we can do namespace
  // checks properly in case one wants to add them to
  // allow-list.
  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);

  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);

  // Similarly to SVG, we want to know all MathML elements,
  // even those that we disallow by default.
  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);

  var text = freeze(['#text']);

  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);

  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);

  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);

  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

  // eslint-disable-next-line unicorn/better-regex
  var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
  var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
  var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
  var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
  );
  var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
  var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
  );
  var DOCTYPE_NAME = seal(/^html$/i);

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var getGlobal = function getGlobal() {
    return typeof window === 'undefined' ? null : window;
  };

  /**
   * Creates a no-op policy for internal use only.
   * Don't export this function outside this module!
   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
   * @param {Document} document The document object (to determine policy name suffix)
   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
   * are not supported).
   */
  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
      return null;
    }

    // Allow the callers to control the unique policy name
    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
    // Policy creation with duplicate names throws in Trusted Types.
    var suffix = null;
    var ATTR_NAME = 'data-tt-policy-suffix';
    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
      suffix = document.currentScript.getAttribute(ATTR_NAME);
    }

    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

    try {
      return trustedTypes.createPolicy(policyName, {
        createHTML: function createHTML(html$$1) {
          return html$$1;
        }
      });
    } catch (_) {
      // Policy creation failed (most likely another DOMPurify script has
      // already run). Skip creating the policy, as this will only cause errors
      // if TT are enforced.
      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
      return null;
    }
  };

  function createDOMPurify() {
    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

    var DOMPurify = function DOMPurify(root) {
      return createDOMPurify(root);
    };

    /**
     * Version label, exposed for easier checks
     * if DOMPurify is up to date or not
     */
    DOMPurify.version = '2.3.6';

    /**
     * Array of elements that DOMPurify removed during sanitation.
     * Empty if nothing was removed.
     */
    DOMPurify.removed = [];

    if (!window || !window.document || window.document.nodeType !== 9) {
      // Not running in a browser, provide a factory function
      // so that you can pass your own Window
      DOMPurify.isSupported = false;

      return DOMPurify;
    }

    var originalDocument = window.document;

    var document = window.document;
    var DocumentFragment = window.DocumentFragment,
        HTMLTemplateElement = window.HTMLTemplateElement,
        Node = window.Node,
        Element = window.Element,
        NodeFilter = window.NodeFilter,
        _window$NamedNodeMap = window.NamedNodeMap,
        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
        HTMLFormElement = window.HTMLFormElement,
        DOMParser = window.DOMParser,
        trustedTypes = window.trustedTypes;


    var ElementPrototype = Element.prototype;

    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
    var getParentNode = lookupGetter(ElementPrototype, 'parentNode');

    // As per issue #47, the web-components registry is inherited by a
    // new document created via createHTMLDocument. As per the spec
    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
    // a new empty registry is used when creating a template contents owner
    // document, so we use that as our parent document to ensure nothing
    // is inherited.
    if (typeof HTMLTemplateElement === 'function') {
      var template = document.createElement('template');
      if (template.content && template.content.ownerDocument) {
        document = template.content.ownerDocument;
      }
    }

    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
    var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';

    var _document = document,
        implementation = _document.implementation,
        createNodeIterator = _document.createNodeIterator,
        createDocumentFragment = _document.createDocumentFragment,
        getElementsByTagName = _document.getElementsByTagName;
    var importNode = originalDocument.importNode;


    var documentMode = {};
    try {
      documentMode = clone(document).documentMode ? document.documentMode : {};
    } catch (_) {}

    var hooks = {};

    /**
     * Expose whether this browser supports running the full DOMPurify.
     */
    DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;

    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,
        ERB_EXPR$$1 = ERB_EXPR,
        DATA_ATTR$$1 = DATA_ATTR,
        ARIA_ATTR$$1 = ARIA_ATTR,
        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,
        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;

    /**
     * We consider the elements and attributes below to be safe. Ideally
     * don't add any new ones but feel free to remove unwanted ones.
     */

    /* allowed element names */

    var ALLOWED_TAGS = null;
    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));

    /* Allowed attribute names */
    var ALLOWED_ATTR = null;
    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));

    /*
     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
     */
    var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
      tagNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      attributeNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      allowCustomizedBuiltInElements: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: false
      }
    }));

    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
    var FORBID_TAGS = null;

    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
    var FORBID_ATTR = null;

    /* Decide if ARIA attributes are okay */
    var ALLOW_ARIA_ATTR = true;

    /* Decide if custom data attributes are okay */
    var ALLOW_DATA_ATTR = true;

    /* Decide if unknown protocols are okay */
    var ALLOW_UNKNOWN_PROTOCOLS = false;

    /* Output should be safe for common template engines.
     * This means, DOMPurify removes data attributes, mustaches and ERB
     */
    var SAFE_FOR_TEMPLATES = false;

    /* Decide if document with <html>... should be returned */
    var WHOLE_DOCUMENT = false;

    /* Track whether config is already set on this instance of DOMPurify. */
    var SET_CONFIG = false;

    /* Decide if all elements (e.g. style, script) must be children of
     * document.body. By default, browsers might move them to document.head */
    var FORCE_BODY = false;

    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
     * string (or a TrustedHTML object if Trusted Types are supported).
     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
     */
    var RETURN_DOM = false;

    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
     * string  (or a TrustedHTML object if Trusted Types are supported) */
    var RETURN_DOM_FRAGMENT = false;

    /* Try to return a Trusted Type object instead of a string, return a string in
     * case Trusted Types are not supported  */
    var RETURN_TRUSTED_TYPE = false;

    /* Output should be free from DOM clobbering attacks? */
    var SANITIZE_DOM = true;

    /* Keep element content when removing element? */
    var KEEP_CONTENT = true;

    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
     * of importing it into a new Document and returning a sanitized copy */
    var IN_PLACE = false;

    /* Allow usage of profiles like html, svg and mathMl */
    var USE_PROFILES = {};

    /* Tags to ignore content of when KEEP_CONTENT is true */
    var FORBID_CONTENTS = null;
    var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);

    /* Tags that are safe for data: URIs */
    var DATA_URI_TAGS = null;
    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);

    /* Attributes safe for values like "javascript:" */
    var URI_SAFE_ATTRIBUTES = null;
    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);

    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    /* Document namespace */
    var NAMESPACE = HTML_NAMESPACE;
    var IS_EMPTY_INPUT = false;

    /* Parsing of strict XHTML documents */
    var PARSER_MEDIA_TYPE = void 0;
    var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
    var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
    var transformCaseFunc = void 0;

    /* Keep a reference to config to pass to hooks */
    var CONFIG = null;

    /* Ideally, do not touch anything below this line */
    /* ______________________________________________ */

    var formElement = document.createElement('form');

    var isRegexOrFunction = function isRegexOrFunction(testValue) {
      return testValue instanceof RegExp || testValue instanceof Function;
    };

    /**
     * _parseConfig
     *
     * @param  {Object} cfg optional config literal
     */
    // eslint-disable-next-line complexity
    var _parseConfig = function _parseConfig(cfg) {
      if (CONFIG && CONFIG === cfg) {
        return;
      }

      /* Shield configuration object from tampering */
      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {
        cfg = {};
      }

      /* Shield configuration object from prototype pollution */
      cfg = clone(cfg);

      /* Set configuration parameters */
      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;
      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
      RETURN_DOM = cfg.RETURN_DOM || false; // Default false
      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
      FORCE_BODY = cfg.FORCE_BODY || false; // Default false
      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
      IN_PLACE = cfg.IN_PLACE || false; // Default false
      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
      }

      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
      }

      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
      }

      PARSER_MEDIA_TYPE =
      // eslint-disable-next-line unicorn/prefer-includes
      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;

      // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.
      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? function (x) {
        return x;
      } : stringToLowerCase;

      if (SAFE_FOR_TEMPLATES) {
        ALLOW_DATA_ATTR = false;
      }

      if (RETURN_DOM_FRAGMENT) {
        RETURN_DOM = true;
      }

      /* Parse profile info */
      if (USE_PROFILES) {
        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
        ALLOWED_ATTR = [];
        if (USE_PROFILES.html === true) {
          addToSet(ALLOWED_TAGS, html);
          addToSet(ALLOWED_ATTR, html$1);
        }

        if (USE_PROFILES.svg === true) {
          addToSet(ALLOWED_TAGS, svg);
          addToSet(ALLOWED_ATTR, svg$1);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.svgFilters === true) {
          addToSet(ALLOWED_TAGS, svgFilters);
          addToSet(ALLOWED_ATTR, svg$1);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.mathMl === true) {
          addToSet(ALLOWED_TAGS, mathMl);
          addToSet(ALLOWED_ATTR, mathMl$1);
          addToSet(ALLOWED_ATTR, xml);
        }
      }

      /* Merge configuration parameters */
      if (cfg.ADD_TAGS) {
        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
          ALLOWED_TAGS = clone(ALLOWED_TAGS);
        }

        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
      }

      if (cfg.ADD_ATTR) {
        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
          ALLOWED_ATTR = clone(ALLOWED_ATTR);
        }

        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
      }

      if (cfg.ADD_URI_SAFE_ATTR) {
        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
      }

      if (cfg.FORBID_CONTENTS) {
        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
          FORBID_CONTENTS = clone(FORBID_CONTENTS);
        }

        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);
      }

      /* Add #text in case KEEP_CONTENT is set to true */
      if (KEEP_CONTENT) {
        ALLOWED_TAGS['#text'] = true;
      }

      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
      if (WHOLE_DOCUMENT) {
        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
      }

      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
      if (ALLOWED_TAGS.table) {
        addToSet(ALLOWED_TAGS, ['tbody']);
        delete FORBID_TAGS.tbody;
      }

      // Prevent further manipulation of configuration.
      // Not available in IE8, Safari 5, etc.
      if (freeze) {
        freeze(cfg);
      }

      CONFIG = cfg;
    };

    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);

    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);

    /* Keep track of all possible SVG and MathML tags
     * so that we can perform the namespace checks
     * correctly. */
    var ALL_SVG_TAGS = addToSet({}, svg);
    addToSet(ALL_SVG_TAGS, svgFilters);
    addToSet(ALL_SVG_TAGS, svgDisallowed);

    var ALL_MATHML_TAGS = addToSet({}, mathMl);
    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);

    /**
     *
     *
     * @param  {Element} element a DOM element whose namespace is being checked
     * @returns {boolean} Return false if the element has a
     *  namespace that a spec-compliant parser would never
     *  return. Return true otherwise.
     */
    var _checkValidNamespace = function _checkValidNamespace(element) {
      var parent = getParentNode(element);

      // In JSDOM, if we're inside shadow DOM, then parentNode
      // can be null. We just simulate parent in this case.
      if (!parent || !parent.tagName) {
        parent = {
          namespaceURI: HTML_NAMESPACE,
          tagName: 'template'
        };
      }

      var tagName = stringToLowerCase(element.tagName);
      var parentTagName = stringToLowerCase(parent.tagName);

      if (element.namespaceURI === SVG_NAMESPACE) {
        // The only way to switch from HTML namespace to SVG
        // is via <svg>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'svg';
        }

        // The only way to switch from MathML to SVG is via
        // svg if parent is either <annotation-xml> or MathML
        // text integration points.
        if (parent.namespaceURI === MATHML_NAMESPACE) {
          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
        }

        // We only allow elements that are defined in SVG
        // spec. All others are disallowed in SVG namespace.
        return Boolean(ALL_SVG_TAGS[tagName]);
      }

      if (element.namespaceURI === MATHML_NAMESPACE) {
        // The only way to switch from HTML namespace to MathML
        // is via <math>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'math';
        }

        // The only way to switch from SVG to MathML is via
        // <math> and HTML integration points
        if (parent.namespaceURI === SVG_NAMESPACE) {
          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
        }

        // We only allow elements that are defined in MathML
        // spec. All others are disallowed in MathML namespace.
        return Boolean(ALL_MATHML_TAGS[tagName]);
      }

      if (element.namespaceURI === HTML_NAMESPACE) {
        // The only way to switch from SVG to HTML is via
        // HTML integration points, and from MathML to HTML
        // is via MathML text integration points
        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
          return false;
        }

        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
          return false;
        }

        // Certain elements are allowed in both SVG and HTML
        // namespace. We need to specify them explicitly
        // so that they don't get erronously deleted from
        // HTML namespace.
        var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']);

        // We disallow tags that are specific for MathML
        // or SVG and should never appear in HTML namespace
        return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);
      }

      // The code should never reach this place (this means
      // that the element somehow got namespace that is not
      // HTML, SVG or MathML). Return false just in case.
      return false;
    };

    /**
     * _forceRemove
     *
     * @param  {Node} node a DOM node
     */
    var _forceRemove = function _forceRemove(node) {
      arrayPush(DOMPurify.removed, { element: node });
      try {
        // eslint-disable-next-line unicorn/prefer-dom-node-remove
        node.parentNode.removeChild(node);
      } catch (_) {
        try {
          node.outerHTML = emptyHTML;
        } catch (_) {
          node.remove();
        }
      }
    };

    /**
     * _removeAttribute
     *
     * @param  {String} name an Attribute name
     * @param  {Node} node a DOM node
     */
    var _removeAttribute = function _removeAttribute(name, node) {
      try {
        arrayPush(DOMPurify.removed, {
          attribute: node.getAttributeNode(name),
          from: node
        });
      } catch (_) {
        arrayPush(DOMPurify.removed, {
          attribute: null,
          from: node
        });
      }

      node.removeAttribute(name);

      // We void attribute values for unremovable "is"" attributes
      if (name === 'is' && !ALLOWED_ATTR[name]) {
        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
          try {
            _forceRemove(node);
          } catch (_) {}
        } else {
          try {
            node.setAttribute(name, '');
          } catch (_) {}
        }
      }
    };

    /**
     * _initDocument
     *
     * @param  {String} dirty a string of dirty markup
     * @return {Document} a DOM, filled with the dirty markup
     */
    var _initDocument = function _initDocument(dirty) {
      /* Create a HTML document */
      var doc = void 0;
      var leadingWhitespace = void 0;

      if (FORCE_BODY) {
        dirty = '<remove></remove>' + dirty;
      } else {
        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
        var matches = stringMatch(dirty, /^[\r\n\t ]+/);
        leadingWhitespace = matches && matches[0];
      }

      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml') {
        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
        dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
      }

      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
      /*
       * Use the DOMParser API by default, fallback later if needs be
       * DOMParser not work for svg when has multiple root element.
       */
      if (NAMESPACE === HTML_NAMESPACE) {
        try {
          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
        } catch (_) {}
      }

      /* Use createHTMLDocument in case DOMParser is not available */
      if (!doc || !doc.documentElement) {
        doc = implementation.createDocument(NAMESPACE, 'template', null);
        try {
          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;
        } catch (_) {
          // Syntax error if dirtyPayload is invalid xml
        }
      }

      var body = doc.body || doc.documentElement;

      if (dirty && leadingWhitespace) {
        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
      }

      /* Work on whole document or just its body */
      if (NAMESPACE === HTML_NAMESPACE) {
        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
      }

      return WHOLE_DOCUMENT ? doc.documentElement : body;
    };

    /**
     * _createIterator
     *
     * @param  {Document} root document/fragment to create iterator for
     * @return {Iterator} iterator instance
     */
    var _createIterator = function _createIterator(root) {
      return createNodeIterator.call(root.ownerDocument || root, root,
      // eslint-disable-next-line no-bitwise
      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
    };

    /**
     * _isClobbered
     *
     * @param  {Node} elm element to check for clobbering attacks
     * @return {Boolean} true if clobbered, false if safe
     */
    var _isClobbered = function _isClobbered(elm) {
      return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function');
    };

    /**
     * _isNode
     *
     * @param  {Node} obj object to check whether it's a DOM node
     * @return {Boolean} true is object is a DOM node
     */
    var _isNode = function _isNode(object) {
      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
    };

    /**
     * _executeHook
     * Execute user configurable hooks
     *
     * @param  {String} entryPoint  Name of the hook's entry point
     * @param  {Node} currentNode node to work on with the hook
     * @param  {Object} data additional hook parameters
     */
    var _executeHook = function _executeHook(entryPoint, currentNode, data) {
      if (!hooks[entryPoint]) {
        return;
      }

      arrayForEach(hooks[entryPoint], function (hook) {
        hook.call(DOMPurify, currentNode, data, CONFIG);
      });
    };

    /**
     * _sanitizeElements
     *
     * @protect nodeName
     * @protect textContent
     * @protect removeChild
     *
     * @param   {Node} currentNode to check for permission to exist
     * @return  {Boolean} true if node was killed, false if left alive
     */
    var _sanitizeElements = function _sanitizeElements(currentNode) {
      var content = void 0;

      /* Execute a hook if present */
      _executeHook('beforeSanitizeElements', currentNode, null);

      /* Check if element is clobbered or can clobber */
      if (_isClobbered(currentNode)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Check if tagname contains Unicode */
      if (stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Now let's check the element's type and name */
      var tagName = transformCaseFunc(currentNode.nodeName);

      /* Execute a hook if present */
      _executeHook('uponSanitizeElement', currentNode, {
        tagName: tagName,
        allowedTags: ALLOWED_TAGS
      });

      /* Detect mXSS attempts abusing namespace confusion */
      if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Mitigate a problem with templates inside select */
      if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Remove element if anything forbids its presence */
      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
        /* Check if we have a custom element to handle */
        if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
        }

        /* Keep content except for bad-listed elements */
        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
          var parentNode = getParentNode(currentNode) || currentNode.parentNode;
          var childNodes = getChildNodes(currentNode) || currentNode.childNodes;

          if (childNodes && parentNode) {
            var childCount = childNodes.length;

            for (var i = childCount - 1; i >= 0; --i) {
              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
            }
          }
        }

        _forceRemove(currentNode);
        return true;
      }

      /* Check whether element has a valid namespace */
      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
        _forceRemove(currentNode);
        return true;
      }

      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Sanitize element content to be template-safe */
      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
        /* Get the element's text content */
        content = currentNode.textContent;
        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');
        content = stringReplace(content, ERB_EXPR$$1, ' ');
        if (currentNode.textContent !== content) {
          arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });
          currentNode.textContent = content;
        }
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeElements', currentNode, null);

      return false;
    };

    /**
     * _isValidAttribute
     *
     * @param  {string} lcTag Lowercase tag name of containing element.
     * @param  {string} lcName Lowercase attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid, otherwise false.
     */
    // eslint-disable-next-line complexity
    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
      /* Make sure attribute cannot clobber */
      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
        return false;
      }

      /* Allow valid data-* attributes: At least one character after "-"
          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
          We don't need to check the value; it's always URI safe. */
      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
        if (
        // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||
        // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
          return false;
        }
        /* Check value is safe. First, is attr inert? If so, is safe */
      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {
        return false;
      }

      return true;
    };

    /**
     * _basicCustomElementCheck
     * checks if at least one dash is included in tagName, and it's not the first char
     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
     * @param {string} tagName name of the tag of the node to sanitize
     */
    var _basicCustomElementTest = function _basicCustomElementTest(tagName) {
      return tagName.indexOf('-') > 0;
    };

    /**
     * _sanitizeAttributes
     *
     * @protect attributes
     * @protect nodeName
     * @protect removeAttribute
     * @protect setAttribute
     *
     * @param  {Node} currentNode to sanitize
     */
    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
      var attr = void 0;
      var value = void 0;
      var lcName = void 0;
      var l = void 0;
      /* Execute a hook if present */
      _executeHook('beforeSanitizeAttributes', currentNode, null);

      var attributes = currentNode.attributes;

      /* Check if we have attributes; if not we might have a text node */

      if (!attributes) {
        return;
      }

      var hookEvent = {
        attrName: '',
        attrValue: '',
        keepAttr: true,
        allowedAttributes: ALLOWED_ATTR
      };
      l = attributes.length;

      /* Go backwards over all attributes; safely remove bad ones */
      while (l--) {
        attr = attributes[l];
        var _attr = attr,
            name = _attr.name,
            namespaceURI = _attr.namespaceURI;

        value = stringTrim(attr.value);
        lcName = transformCaseFunc(name);

        /* Execute a hook if present */
        hookEvent.attrName = lcName;
        hookEvent.attrValue = value;
        hookEvent.keepAttr = true;
        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);
        value = hookEvent.attrValue;
        /* Did the hooks approve of the attribute? */
        if (hookEvent.forceKeepAttr) {
          continue;
        }

        /* Remove attribute */
        _removeAttribute(name, currentNode);

        /* Did the hooks approve of the attribute? */
        if (!hookEvent.keepAttr) {
          continue;
        }

        /* Work around a security issue in jQuery 3.0 */
        if (regExpTest(/\/>/i, value)) {
          _removeAttribute(name, currentNode);
          continue;
        }

        /* Sanitize attribute content to be template-safe */
        if (SAFE_FOR_TEMPLATES) {
          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');
          value = stringReplace(value, ERB_EXPR$$1, ' ');
        }

        /* Is `value` valid for this attribute? */
        var lcTag = transformCaseFunc(currentNode.nodeName);
        if (!_isValidAttribute(lcTag, lcName, value)) {
          continue;
        }

        /* Handle invalid data-* attribute set by try-catching it */
        try {
          if (namespaceURI) {
            currentNode.setAttributeNS(namespaceURI, name, value);
          } else {
            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
            currentNode.setAttribute(name, value);
          }

          arrayPop(DOMPurify.removed);
        } catch (_) {}
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeAttributes', currentNode, null);
    };

    /**
     * _sanitizeShadowDOM
     *
     * @param  {DocumentFragment} fragment to iterate over recursively
     */
    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
      var shadowNode = void 0;
      var shadowIterator = _createIterator(fragment);

      /* Execute a hook if present */
      _executeHook('beforeSanitizeShadowDOM', fragment, null);

      while (shadowNode = shadowIterator.nextNode()) {
        /* Execute a hook if present */
        _executeHook('uponSanitizeShadowNode', shadowNode, null);

        /* Sanitize tags and elements */
        if (_sanitizeElements(shadowNode)) {
          continue;
        }

        /* Deep shadow DOM detected */
        if (shadowNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(shadowNode.content);
        }

        /* Check attributes, sanitize if necessary */
        _sanitizeAttributes(shadowNode);
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeShadowDOM', fragment, null);
    };

    /**
     * Sanitize
     * Public method providing core sanitation functionality
     *
     * @param {String|Node} dirty string or DOM node
     * @param {Object} configuration object
     */
    // eslint-disable-next-line complexity
    DOMPurify.sanitize = function (dirty, cfg) {
      var body = void 0;
      var importedNode = void 0;
      var currentNode = void 0;
      var oldNode = void 0;
      var returnNode = void 0;
      /* Make sure we have a string to sanitize.
        DO NOT return early, as this will return the wrong type if
        the user has requested a DOM object rather than a string */
      IS_EMPTY_INPUT = !dirty;
      if (IS_EMPTY_INPUT) {
        dirty = '<!-->';
      }

      /* Stringify, in case dirty is an object */
      if (typeof dirty !== 'string' && !_isNode(dirty)) {
        // eslint-disable-next-line no-negated-condition
        if (typeof dirty.toString !== 'function') {
          throw typeErrorCreate('toString is not a function');
        } else {
          dirty = dirty.toString();
          if (typeof dirty !== 'string') {
            throw typeErrorCreate('dirty is not a string, aborting');
          }
        }
      }

      /* Check we can run. Otherwise fall back or ignore */
      if (!DOMPurify.isSupported) {
        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
          if (typeof dirty === 'string') {
            return window.toStaticHTML(dirty);
          }

          if (_isNode(dirty)) {
            return window.toStaticHTML(dirty.outerHTML);
          }
        }

        return dirty;
      }

      /* Assign config vars */
      if (!SET_CONFIG) {
        _parseConfig(cfg);
      }

      /* Clean up removed elements */
      DOMPurify.removed = [];

      /* Check if dirty is correctly typed for IN_PLACE */
      if (typeof dirty === 'string') {
        IN_PLACE = false;
      }

      if (IN_PLACE) {
        /* Do some early pre-sanitization to avoid unsafe root nodes */
        if (dirty.nodeName) {
          var tagName = transformCaseFunc(dirty.nodeName);
          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
          }
        }
      } else if (dirty instanceof Node) {
        /* If dirty is a DOM element, append to an empty document to avoid
           elements being stripped by the parser */
        body = _initDocument('<!---->');
        importedNode = body.ownerDocument.importNode(dirty, true);
        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
          /* Node is already a body, use as is */
          body = importedNode;
        } else if (importedNode.nodeName === 'HTML') {
          body = importedNode;
        } else {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          body.appendChild(importedNode);
        }
      } else {
        /* Exit directly if we have nothing to do */
        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
        // eslint-disable-next-line unicorn/prefer-includes
        dirty.indexOf('<') === -1) {
          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
        }

        /* Initialize the document to work on */
        body = _initDocument(dirty);

        /* Check we have a DOM node from the data */
        if (!body) {
          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
        }
      }

      /* Remove first element node (ours) if FORCE_BODY is set */
      if (body && FORCE_BODY) {
        _forceRemove(body.firstChild);
      }

      /* Get node iterator */
      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);

      /* Now start iterating over the created document */
      while (currentNode = nodeIterator.nextNode()) {
        /* Fix IE's strange behavior with manipulated textNodes #89 */
        if (currentNode.nodeType === 3 && currentNode === oldNode) {
          continue;
        }

        /* Sanitize tags and elements */
        if (_sanitizeElements(currentNode)) {
          continue;
        }

        /* Shadow DOM detected, sanitize it */
        if (currentNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(currentNode.content);
        }

        /* Check attributes, sanitize if necessary */
        _sanitizeAttributes(currentNode);

        oldNode = currentNode;
      }

      oldNode = null;

      /* If we sanitized `dirty` in-place, return it. */
      if (IN_PLACE) {
        return dirty;
      }

      /* Return sanitized string or DOM */
      if (RETURN_DOM) {
        if (RETURN_DOM_FRAGMENT) {
          returnNode = createDocumentFragment.call(body.ownerDocument);

          while (body.firstChild) {
            // eslint-disable-next-line unicorn/prefer-dom-node-append
            returnNode.appendChild(body.firstChild);
          }
        } else {
          returnNode = body;
        }

        if (ALLOWED_ATTR.shadowroot) {
          /*
            AdoptNode() is not used because internal state is not reset
            (e.g. the past names map of a HTMLFormElement), this is safe
            in theory but we would rather not risk another attack vector.
            The state that is cloned by importNode() is explicitly defined
            by the specs.
          */
          returnNode = importNode.call(originalDocument, returnNode, true);
        }

        return returnNode;
      }

      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;

      /* Serialize doctype if allowed */
      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
      }

      /* Sanitize final string template-safe */
      if (SAFE_FOR_TEMPLATES) {
        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');
        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');
      }

      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
    };

    /**
     * Public method to set the configuration once
     * setConfig
     *
     * @param {Object} cfg configuration object
     */
    DOMPurify.setConfig = function (cfg) {
      _parseConfig(cfg);
      SET_CONFIG = true;
    };

    /**
     * Public method to remove the configuration
     * clearConfig
     *
     */
    DOMPurify.clearConfig = function () {
      CONFIG = null;
      SET_CONFIG = false;
    };

    /**
     * Public method to check if an attribute value is valid.
     * Uses last set config, if any. Otherwise, uses config defaults.
     * isValidAttribute
     *
     * @param  {string} tag Tag name of containing element.
     * @param  {string} attr Attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
     */
    DOMPurify.isValidAttribute = function (tag, attr, value) {
      /* Initialize shared config vars if necessary. */
      if (!CONFIG) {
        _parseConfig({});
      }

      var lcTag = transformCaseFunc(tag);
      var lcName = transformCaseFunc(attr);
      return _isValidAttribute(lcTag, lcName, value);
    };

    /**
     * AddHook
     * Public method to add DOMPurify hooks
     *
     * @param {String} entryPoint entry point for the hook to add
     * @param {Function} hookFunction function to execute
     */
    DOMPurify.addHook = function (entryPoint, hookFunction) {
      if (typeof hookFunction !== 'function') {
        return;
      }

      hooks[entryPoint] = hooks[entryPoint] || [];
      arrayPush(hooks[entryPoint], hookFunction);
    };

    /**
     * RemoveHook
     * Public method to remove a DOMPurify hook at a given entryPoint
     * (pops it from the stack of hooks if more are present)
     *
     * @param {String} entryPoint entry point for the hook to remove
     */
    DOMPurify.removeHook = function (entryPoint) {
      if (hooks[entryPoint]) {
        arrayPop(hooks[entryPoint]);
      }
    };

    /**
     * RemoveHooks
     * Public method to remove all DOMPurify hooks at a given entryPoint
     *
     * @param  {String} entryPoint entry point for the hooks to remove
     */
    DOMPurify.removeHooks = function (entryPoint) {
      if (hooks[entryPoint]) {
        hooks[entryPoint] = [];
      }
    };

    /**
     * RemoveAllHooks
     * Public method to remove all DOMPurify hooks
     *
     */
    DOMPurify.removeAllHooks = function () {
      hooks = {};
    };

    return DOMPurify;
  }

  var purify = createDOMPurify();

  return purify;

}));
//# sourceMappingURL=purify.js.map


/***/ }),

/***/ "./node_modules/filesize/lib/filesize.min.js":
/*!***************************************************!*\
  !*** ./node_modules/filesize/lib/filesize.min.js ***!
  \***************************************************/
/***/ (function(module) {

/*!
 2020 Jason Mulligan <jason.mulligan@avoidwork.com>
 @version 7.0.0
*/
!function(e,i){ true?module.exports=i():0}(this,(function(){"use strict";var e=/^(b|B)$/,i={iec:{bits:["b","Kib","Mib","Gib","Tib","Pib","Eib","Zib","Yib"],bytes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},jedec:{bits:["b","Kb","Mb","Gb","Tb","Pb","Eb","Zb","Yb"],bytes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]}},t={iec:["","kibi","mebi","gibi","tebi","pebi","exbi","zebi","yobi"],jedec:["","kilo","mega","giga","tera","peta","exa","zetta","yotta"]},o={floor:Math.floor,ceil:Math.ceil};function n(n){var r,a,b,l,s,c,d,f,p,u,B,h,g,y,M,m,v,x,N,j,T,E=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},w=[],P=0;if(isNaN(n))throw new TypeError("Invalid number");if(b=!0===E.bits,M=!0===E.unix,h=!0===E.pad,a=E.base||2,g=void 0!==E.round?E.round:M?1:2,d=void 0!==E.locale?E.locale:"",f=E.localeOptions||{},m=void 0!==E.separator?E.separator:"",v=void 0!==E.spacer?E.spacer:M?"":" ",N=E.symbols||{},x=2===a&&E.standard||"jedec",B=E.output||"string",s=!0===E.fullform,c=E.fullforms instanceof Array?E.fullforms:[],r=void 0!==E.exponent?E.exponent:-1,j=o[E.roundingMethod]||Math.round,p=(u=Number(n))<0,l=a>2?1e3:1024,T=!1===isNaN(E.precision)?parseInt(E.precision,10):0,p&&(u=-u),(-1===r||isNaN(r))&&(r=Math.floor(Math.log(u)/Math.log(l)))<0&&(r=0),r>8&&(T>0&&(T+=8-r),r=8),"exponent"===B)return r;if(0===u)w[0]=0,y=w[1]=M?"":i[x][b?"bits":"bytes"][r];else{P=u/(2===a?Math.pow(2,10*r):Math.pow(1e3,r)),b&&(P*=8)>=l&&r<8&&(P/=l,r++);var k=Math.pow(10,r>0?g:0);w[0]=j(P*k)/k,w[0]===l&&r<8&&void 0===E.exponent&&(w[0]=1,r++),y=w[1]=10===a&&1===r?b?"kb":"kB":i[x][b?"bits":"bytes"][r],M&&(w[1]="jedec"===x?w[1].charAt(0):r>0?w[1].replace(/B$/,""):w[1],e.test(w[1])&&(w[0]=Math.floor(w[0]),w[1]=""))}if(p&&(w[0]=-w[0]),T>0&&(w[0]=w[0].toPrecision(T)),w[1]=N[w[1]]||w[1],!0===d?w[0]=w[0].toLocaleString():d.length>0?w[0]=w[0].toLocaleString(d,f):m.length>0&&(w[0]=w[0].toString().replace(".",m)),h&&!1===Number.isInteger(w[0])&&g>0){var G=m||".",K=w[0].toString().split(G),S=K[1]||"",Y=S.length,Z=g-Y;w[0]="".concat(K[0]).concat(G).concat(S.padEnd(Y+Z,"0"))}return s&&(w[1]=c[r]?c[r]:t[x][r]+(b?"bit":"byte")+(1===w[0]?"":"s")),"array"===B?w:"object"===B?{value:w[0],symbol:w[1],exponent:r,unit:y}:w.join(v)}return n.partial=function(e){return function(i){return n(i,e)}},n}));
//# sourceMappingURL=filesize.min.js.map


/***/ }),

/***/ "./node_modules/immediate/lib/browser.js":
/*!***********************************************!*\
  !*** ./node_modules/immediate/lib/browser.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var Mutation = __webpack_require__.g.MutationObserver || __webpack_require__.g.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = __webpack_require__.g.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!__webpack_require__.g.setImmediate && typeof __webpack_require__.g.MessageChannel !== 'undefined') {
    var channel = new __webpack_require__.g.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in __webpack_require__.g && 'onreadystatechange' in __webpack_require__.g.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = __webpack_require__.g.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      __webpack_require__.g.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}


/***/ }),

/***/ "./node_modules/lie/lib/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/lie/lib/browser.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var immediate = __webpack_require__(/*! immediate */ "./node_modules/immediate/lib/browser.js");

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];

module.exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

Promise.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

Promise.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

Promise.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

Promise.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}


/***/ }),

/***/ "./node_modules/lie/polyfill.js":
/*!**************************************!*\
  !*** ./node_modules/lie/polyfill.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

if (typeof __webpack_require__.g.Promise !== 'function') {
  __webpack_require__.g.Promise = __webpack_require__(/*! ./lib */ "./node_modules/lie/lib/browser.js");
}


/***/ }),

/***/ "./node_modules/localforage-driver-memory/_bundle/umd.js":
/*!***************************************************************!*\
  !*** ./node_modules/localforage-driver-memory/_bundle/umd.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports) {

/*!
MIT License

Copyright (c) 2018 Arturas Molcanovas <a.molcanovas@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


(function (global, factory) {
     true ? factory(exports) :
    0;
}(typeof self !== 'undefined' ? self : this, function (exports) { 'use strict';

    var _driver = 'localforage-driver-memory';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /*!
    MIT License

    Copyright (c) 2018 Arturas Molcanovas <a.molcanovas@gmail.com>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    */

    /**
     * Abstracts constructing a Blob object, so it also works in older
     * browsers that don't support the native Blob constructor. (i.e.
     * old QtWebKit versions, at least).
     * Abstracts constructing a Blob object, so it also works in older
     * browsers that don't support the native Blob constructor. (i.e.
     * old QtWebKit versions, at least).
     *
     * @param parts
     * @param properties
     */
    function createBlob(parts, properties) {
        /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
        parts = parts || [];
        properties = properties || {};
        try {
            return new Blob(parts, properties);
        }
        catch (e) {
            if (e.name !== 'TypeError') {
                throw e;
            }
            //tslint:disable-next-line:variable-name
            var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder
                : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder
                    : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder
                        : WebKitBlobBuilder;
            var builder = new Builder();
            for (var i = 0; i < parts.length; i += 1) {
                builder.append(parts[i]);
            }
            return builder.getBlob(properties.type);
        }
    }

    var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
    var SERIALIZED_MARKER_LENGTH = "__lfsc__:" /* SERIALIZED_MARKER */.length;
    var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + "arbf" /* TYPE_ARRAYBUFFER */.length;
    //tslint:disable:no-magic-numbers no-bitwise prefer-switch no-unbound-method
    var toString = Object.prototype.toString;
    function stringToBuffer(serializedString) {
        // Fill the string into a ArrayBuffer.
        var bufferLength = serializedString.length * 0.75;
        var len = serializedString.length;
        if (serializedString[serializedString.length - 1] === '=') {
            bufferLength--;
            if (serializedString[serializedString.length - 2] === '=') {
                bufferLength--;
            }
        }
        var buffer = new ArrayBuffer(bufferLength);
        var bytes = new Uint8Array(buffer);
        for (var i = 0, p = 0; i < len; i += 4) {
            var encoded1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i]);
            var encoded2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i + 1]);
            var encoded3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i + 2]);
            var encoded4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i + 3]);
            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }
        return buffer;
    }
    /**
     * Converts a buffer to a string to store, serialized, in the backend
     * storage library.
     */
    function bufferToString(buffer) {
        // base64-arraybuffer
        var bytes = new Uint8Array(buffer);
        var base64String = '';
        for (var i = 0; i < bytes.length; i += 3) {
            /*jslint bitwise: true */
            base64String += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[bytes[i] >> 2];
            base64String += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
            base64String +=
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
            base64String += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[bytes[i + 2] & 63];
        }
        if (bytes.length % 3 === 2) {
            base64String = base64String.substring(0, base64String.length - 1) + '=';
        }
        else if (bytes.length % 3 === 1) {
            base64String = base64String.substring(0, base64String.length - 2) + '==';
        }
        return base64String;
    }
    /**
     * Serialize a value, afterwards executing a callback (which usually
     * instructs the `setItem()` callback/promise to be executed). This is how
     * we store binary data with localStorage.
     * @param value
     * @param callback
     */
    function serialize(value, callback) {
        var valueType = '';
        if (value) {
            valueType = toString.call(value);
        }
        // Cannot use `value instanceof ArrayBuffer` or such here, as these
        // checks fail when running the tests using casper.js...
        if (value && (valueType === '[object ArrayBuffer]' ||
            (value.buffer && toString.call(value.buffer) === '[object ArrayBuffer]'))) {
            // Convert binary arrays to a string and prefix the string with
            // a special marker.
            var buffer = void 0;
            var marker = "__lfsc__:" /* SERIALIZED_MARKER */;
            if (value instanceof ArrayBuffer) {
                buffer = value;
                marker += "arbf" /* TYPE_ARRAYBUFFER */;
            }
            else {
                buffer = value.buffer;
                if (valueType === '[object Int8Array]') {
                    marker += "si08" /* TYPE_INT8ARRAY */;
                }
                else if (valueType === '[object Uint8Array]') {
                    marker += "ui08" /* TYPE_UINT8ARRAY */;
                }
                else if (valueType === '[object Uint8ClampedArray]') {
                    marker += "uic8" /* TYPE_UINT8CLAMPEDARRAY */;
                }
                else if (valueType === '[object Int16Array]') {
                    marker += "si16" /* TYPE_INT16ARRAY */;
                }
                else if (valueType === '[object Uint16Array]') {
                    marker += "ur16" /* TYPE_UINT16ARRAY */;
                }
                else if (valueType === '[object Int32Array]') {
                    marker += "si32" /* TYPE_INT32ARRAY */;
                }
                else if (valueType === '[object Uint32Array]') {
                    marker += "ui32" /* TYPE_UINT32ARRAY */;
                }
                else if (valueType === '[object Float32Array]') {
                    marker += "fl32" /* TYPE_FLOAT32ARRAY */;
                }
                else if (valueType === '[object Float64Array]') {
                    marker += "fl64" /* TYPE_FLOAT64ARRAY */;
                }
                else {
                    callback(new Error('Failed to get type for BinaryArray'));
                }
            }
            callback(marker + bufferToString(buffer));
        }
        else if (valueType === '[object Blob]') {
            // Convert the blob to a binaryArray and then to a string.
            var fileReader = new FileReader();
            fileReader.onload = function () {
                // Backwards-compatible prefix for the blob type.
                //tslint:disable-next-line:restrict-plus-operands
                var str = "~~local_forage_type~" /* BLOB_TYPE_PREFIX */ + value.type + "~" + bufferToString(this.result);
                callback("__lfsc__:" /* SERIALIZED_MARKER */ + "blob" /* TYPE_BLOB */ + str);
            };
            fileReader.readAsArrayBuffer(value);
        }
        else {
            try {
                callback(JSON.stringify(value));
            }
            catch (e) {
                console.error('Couldn\'t convert value into a JSON string: ', value);
                callback(null, e);
            }
        }
    }
    /**
     * Deserialize data we've inserted into a value column/field. We place
     * special markers into our strings to mark them as encoded; this isn't
     * as nice as a meta field, but it's the only sane thing we can do whilst
     * keeping localStorage support intact.
     *
     * Oftentimes this will just deserialize JSON content, but if we have a
     * special marker (SERIALIZED_MARKER, defined above), we will extract
     * some kind of arraybuffer/binary data/typed array out of the string.
     * @param value
     */
    function deserialize(value) {
        // If we haven't marked this string as being specially serialized (i.e.
        // something other than serialized JSON), we can just return it and be
        // done with it.
        if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== "__lfsc__:" /* SERIALIZED_MARKER */) {
            return JSON.parse(value);
        }
        // The following code deals with deserializing some kind of Blob or
        // TypedArray. First we separate out the type of data we're dealing
        // with from the data itself.
        var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
        var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
        var blobType;
        // Backwards-compatible blob type serialization strategy.
        // DBs created with older versions of localForage will simply not have the blob type.
        if (type === "blob" /* TYPE_BLOB */ && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
            var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
            blobType = matcher[1];
            serializedString = serializedString.substring(matcher[0].length);
        }
        var buffer = stringToBuffer(serializedString);
        // Return the right type based on the code/type set during
        // serialization.
        switch (type) {
            case "arbf" /* TYPE_ARRAYBUFFER */:
                return buffer;
            case "blob" /* TYPE_BLOB */:
                return createBlob([buffer], { type: blobType });
            case "si08" /* TYPE_INT8ARRAY */:
                return new Int8Array(buffer);
            case "ui08" /* TYPE_UINT8ARRAY */:
                return new Uint8Array(buffer);
            case "uic8" /* TYPE_UINT8CLAMPEDARRAY */:
                return new Uint8ClampedArray(buffer);
            case "si16" /* TYPE_INT16ARRAY */:
                return new Int16Array(buffer);
            case "ur16" /* TYPE_UINT16ARRAY */:
                return new Uint16Array(buffer);
            case "si32" /* TYPE_INT32ARRAY */:
                return new Int32Array(buffer);
            case "ui32" /* TYPE_UINT32ARRAY */:
                return new Uint32Array(buffer);
            case "fl32" /* TYPE_FLOAT32ARRAY */:
                return new Float32Array(buffer);
            case "fl64" /* TYPE_FLOAT64ARRAY */:
                return new Float64Array(buffer);
            default:
                throw new Error('Unkown type: ' + type);
        }
    }

    function clone(obj) {
        var e_1, _a;
        if (obj === null || typeof (obj) !== 'object' || 'isActiveClone' in obj) {
            return obj;
        }
        var temp = obj instanceof Date ? new Date(obj) : (obj.constructor());
        try {
            for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    obj['isActiveClone'] = null;
                    temp[key] = clone(obj[key]);
                    delete obj['isActiveClone'];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return temp;
    }

    function getKeyPrefix(options, defaultConfig) {
        return (options.name || defaultConfig.name) + "/" + (options.storeName || defaultConfig.storeName) + "/";
    }

    function executeCallback(promise, callback) {
        if (callback) {
            promise.then(function (result) {
                callback(null, result);
            }, function (error) {
                callback(error);
            });
        }
    }

    function getCallback() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
            return arguments[arguments.length - 1];
        }
    }

    //tslint:disable-next-line:no-ignored-initial-value
    function dropInstanceCommon(options, callback) {
        var _this = this;
        callback = getCallback.apply(this, arguments);
        options = (typeof options !== 'function' && options) || {};
        if (!options.name) {
            var currentConfig = this.config();
            options.name = options.name || currentConfig.name;
            options.storeName = options.storeName || currentConfig.storeName;
        }
        var promise;
        if (!options.name) {
            promise = Promise.reject('Invalid arguments');
        }
        else {
            promise = new Promise(function (resolve) {
                if (!options.storeName) {
                    resolve(options.name + "/");
                }
                else {
                    resolve(getKeyPrefix(options, _this._defaultConfig));
                }
            });
        }
        return { promise: promise, callback: callback };
    }

    function normaliseKey(key) {
        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            console.warn(key + " used as a key, but it is not a string.");
            key = String(key);
        }
        return key;
    }

    var serialiser = {
        bufferToString: bufferToString,
        deserialize: deserialize,
        serialize: serialize,
        stringToBuffer: stringToBuffer
    };

    var stores = {};
    /** @internal */
    var Store = /** @class */ (function () {
        function Store(kp) {
            this.kp = kp;
            this.data = {};
        }
        Store.resolve = function (kp) {
            if (!stores[kp]) {
                stores[kp] = new Store(kp);
            }
            return stores[kp];
        };
        Store.prototype.clear = function () {
            this.data = {};
        };
        Store.prototype.drop = function () {
            this.clear();
            delete stores[this.kp];
        };
        Store.prototype.get = function (key) {
            return this.data[key];
        };
        Store.prototype.key = function (idx) {
            return this.keys()[idx];
        };
        Store.prototype.keys = function () {
            return Object.keys(this.data);
        };
        Store.prototype.rm = function (k) {
            delete this.data[k];
        };
        Store.prototype.set = function (k, v) {
            this.data[k] = v;
        };
        return Store;
    }());

    function _initStorage(options) {
        var opts = options ? clone(options) : {};
        var kp = getKeyPrefix(opts, this._defaultConfig);
        var store = Store.resolve(kp);
        this._dbInfo = opts;
        this._dbInfo.serializer = serialiser;
        this._dbInfo.keyPrefix = kp;
        this._dbInfo.mStore = store;
        return Promise.resolve();
    }

    function clear(callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            _this._dbInfo.mStore.clear();
        });
        executeCallback(promise, callback);
        return promise;
    }

    function dropInstance(_options, _cb) {
        var _a = dropInstanceCommon.apply(this, arguments), promise = _a.promise, callback = _a.callback;
        var outPromise = promise.then(function (keyPrefix) {
            Store.resolve(keyPrefix).drop();
        });
        executeCallback(outPromise, callback);
        return promise;
    }

    function getItem(key$, callback) {
        var _this = this;
        key$ = normaliseKey(key$);
        var promise = this.ready().then(function () {
            var result = _this._dbInfo.mStore.get(key$);
            // Deserialise if the result is not null or undefined
            return result == null ? null : _this._dbInfo.serializer.deserialize(result); //tslint:disable-line:triple-equals
        });
        executeCallback(promise, callback);
        return promise;
    }

    function iterate(iterator, callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            var store = _this._dbInfo.mStore;
            var keys = store.keys();
            for (var i = 0; i < keys.length; i++) {
                var value = store.get(keys[i]);
                // If a result was found, parse it from the serialized
                // string into a JS object. If result isn't truthy, the
                // key is likely undefined and we'll pass it straight
                // to the iterator.
                if (value) {
                    value = _this._dbInfo.serializer.deserialize(value);
                }
                value = iterator(value, keys[i], i + 1);
                if (value !== undefined) {
                    return value;
                }
            }
        });
        executeCallback(promise, callback);
        return promise;
    }

    function key(idx, callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            var result;
            try {
                result = _this._dbInfo.mStore.key(idx);
                if (result === undefined) {
                    result = null;
                }
            }
            catch (_a) {
                result = null;
            }
            return result;
        });
        executeCallback(promise, callback);
        return promise;
    }

    function keys(callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            return _this._dbInfo.mStore.keys();
        });
        executeCallback(promise, callback);
        return promise;
    }

    function length(callback) {
        var promise = this.keys().then(function (keys$) { return keys$.length; });
        executeCallback(promise, callback);
        return promise;
    }

    function removeItem(key$, callback) {
        var _this = this;
        key$ = normaliseKey(key$);
        var promise = this.ready().then(function () {
            _this._dbInfo.mStore.rm(key$);
        });
        executeCallback(promise, callback);
        return promise;
    }

    function setItem(key$, value, callback) {
        var _this = this;
        key$ = normaliseKey(key$);
        var promise = this.ready().then(function () {
            if (value === undefined) {
                value = null;
            }
            // Save the original value to pass to the callback.
            var originalValue = value;
            return new Promise(function (resolve, reject) {
                _this._dbInfo.serializer.serialize(value, function (value$, error) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        try {
                            _this._dbInfo.mStore.set(key$, value$);
                            resolve(originalValue);
                        }
                        catch (e) {
                            reject(e);
                        }
                    }
                });
            });
        });
        executeCallback(promise, callback);
        return promise;
    }

    var _support = true;

    exports._support = _support;
    exports._driver = _driver;
    exports._initStorage = _initStorage;
    exports.clear = clear;
    exports.dropInstance = dropInstance;
    exports.getItem = getItem;
    exports.iterate = iterate;
    exports.key = key;
    exports.keys = keys;
    exports.length = length;
    exports.removeItem = removeItem;
    exports.setItem = setItem;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=umd.js.map


/***/ }),

/***/ "./node_modules/localforage-getitems/dist/localforage-getitems.js":
/*!************************************************************************!*\
  !*** ./node_modules/localforage-getitems/dist/localforage-getitems.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

(function (global, factory) {
     true ? factory(exports, __webpack_require__(/*! localforage */ "./node_modules/localforage/dist/localforage.js")) :
    0;
}(this, (function (exports,localforage) { 'use strict';

localforage = 'default' in localforage ? localforage['default'] : localforage;

function getSerializerPromise(localForageInstance) {
    if (getSerializerPromise.result) {
        return getSerializerPromise.result;
    }
    if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {
        return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));
    }
    getSerializerPromise.result = localForageInstance.getSerializer();
    return getSerializerPromise.result;
}



function executeCallback(promise, callback) {
    if (callback) {
        promise.then(function (result) {
            callback(null, result);
        }, function (error) {
            callback(error);
        });
    }
    return promise;
}

function getItemKeyValue(key, callback) {
    var localforageInstance = this;
    var promise = localforageInstance.getItem(key).then(function (value) {
        return {
            key: key,
            value: value
        };
    });
    executeCallback(promise, callback);
    return promise;
}

function getItemsGeneric(keys /*, callback*/) {
    var localforageInstance = this;
    var promise = new Promise(function (resolve, reject) {
        var itemPromises = [];

        for (var i = 0, len = keys.length; i < len; i++) {
            itemPromises.push(getItemKeyValue.call(localforageInstance, keys[i]));
        }

        Promise.all(itemPromises).then(function (keyValuePairs) {
            var result = {};
            for (var i = 0, len = keyValuePairs.length; i < len; i++) {
                var keyValuePair = keyValuePairs[i];

                result[keyValuePair.key] = keyValuePair.value;
            }
            resolve(result);
        }).catch(reject);
    });
    return promise;
}





function getAllItemsUsingIterate() {
    var localforageInstance = this;
    var accumulator = {};
    return localforageInstance.iterate(function (value, key /*, iterationNumber*/) {
        accumulator[key] = value;
    }).then(function () {
        return accumulator;
    });
}

function getIDBKeyRange() {
    /* global IDBKeyRange, webkitIDBKeyRange, mozIDBKeyRange */
    if (typeof IDBKeyRange !== 'undefined') {
        return IDBKeyRange;
    }
    if (typeof webkitIDBKeyRange !== 'undefined') {
        return webkitIDBKeyRange;
    }
    if (typeof mozIDBKeyRange !== 'undefined') {
        return mozIDBKeyRange;
    }
}

var idbKeyRange = getIDBKeyRange();

function getItemsIndexedDB(keys /*, callback*/) {
    keys = keys.slice();
    var localforageInstance = this;
    function comparer(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
    }

    var promise = new Promise(function (resolve, reject) {
        localforageInstance.ready().then(function () {
            // Thanks https://hacks.mozilla.org/2014/06/breaking-the-borders-of-indexeddb/
            var dbInfo = localforageInstance._dbInfo;
            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);

            var set = keys.sort(comparer);

            var keyRangeValue = idbKeyRange.bound(keys[0], keys[keys.length - 1], false, false);

            var req;

            if ('getAll' in store) {
                req = store.getAll(keyRangeValue);
                req.onsuccess = function () {
                    var value = req.result;
                    if (value === undefined) {
                        value = null;
                    }
                    resolve(value);
                };
            } else {
                req = store.openCursor(keyRangeValue);
                var result = {};
                var i = 0;

                req.onsuccess = function () /*event*/{
                    var cursor = req.result; // event.target.result;

                    if (!cursor) {
                        resolve(result);
                        return;
                    }

                    var key = cursor.key;

                    while (key > set[i]) {
                        i++; // The cursor has passed beyond this key. Check next.

                        if (i === set.length) {
                            // There is no next. Stop searching.
                            resolve(result);
                            return;
                        }
                    }

                    if (key === set[i]) {
                        // The current cursor value should be included and we should continue
                        // a single step in case next item has the same key or possibly our
                        // next key in set.
                        var value = cursor.value;
                        if (value === undefined) {
                            value = null;
                        }

                        result[key] = value;
                        // onfound(cursor.value);
                        cursor.continue();
                    } else {
                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                        cursor.continue(set[i]);
                    }
                };
            }

            req.onerror = function () /*event*/{
                reject(req.error);
            };
        }).catch(reject);
    });
    return promise;
}

function getItemsWebsql(keys /*, callback*/) {
    var localforageInstance = this;
    var promise = new Promise(function (resolve, reject) {
        localforageInstance.ready().then(function () {
            return getSerializerPromise(localforageInstance);
        }).then(function (serializer) {
            var dbInfo = localforageInstance._dbInfo;
            dbInfo.db.transaction(function (t) {

                var queryParts = new Array(keys.length);
                for (var i = 0, len = keys.length; i < len; i++) {
                    queryParts[i] = '?';
                }

                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE (key IN (' + queryParts.join(',') + '))', keys, function (t, results) {

                    var result = {};

                    var rows = results.rows;
                    for (var i = 0, len = rows.length; i < len; i++) {
                        var item = rows.item(i);
                        var value = item.value;

                        // Check to see if this is serialized content we need to
                        // unpack.
                        if (value) {
                            value = serializer.deserialize(value);
                        }

                        result[item.key] = value;
                    }

                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        }).catch(reject);
    });
    return promise;
}

function localforageGetItems(keys, callback) {
    var localforageInstance = this;

    var promise;
    if (!arguments.length || keys === null) {
        promise = getAllItemsUsingIterate.apply(localforageInstance);
    } else {
        var currentDriver = localforageInstance.driver();
        if (currentDriver === localforageInstance.INDEXEDDB) {
            promise = getItemsIndexedDB.apply(localforageInstance, arguments);
        } else if (currentDriver === localforageInstance.WEBSQL) {
            promise = getItemsWebsql.apply(localforageInstance, arguments);
        } else {
            promise = getItemsGeneric.apply(localforageInstance, arguments);
        }
    }

    executeCallback(promise, callback);
    return promise;
}

function extendPrototype(localforage$$1) {
    var localforagePrototype = Object.getPrototypeOf(localforage$$1);
    if (localforagePrototype) {
        localforagePrototype.getItems = localforageGetItems;
        localforagePrototype.getItems.indexedDB = function () {
            return getItemsIndexedDB.apply(this, arguments);
        };
        localforagePrototype.getItems.websql = function () {
            return getItemsWebsql.apply(this, arguments);
        };
        localforagePrototype.getItems.generic = function () {
            return getItemsGeneric.apply(this, arguments);
        };
    }
}

var extendPrototypeResult = extendPrototype(localforage);

exports.localforageGetItems = localforageGetItems;
exports.extendPrototype = extendPrototype;
exports.extendPrototypeResult = extendPrototypeResult;
exports.getItemsGeneric = getItemsGeneric;

Object.defineProperty(exports, '__esModule', { value: true });

})));


/***/ }),

/***/ "./node_modules/localforage-setitems/dist/localforage-setitems.js":
/*!************************************************************************!*\
  !*** ./node_modules/localforage-setitems/dist/localforage-setitems.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

(function (global, factory) {
     true ? factory(exports, __webpack_require__(/*! localforage */ "./node_modules/localforage/dist/localforage.js")) :
    0;
}(this, (function (exports,localforage) { 'use strict';

localforage = 'default' in localforage ? localforage['default'] : localforage;

function getSerializerPromise(localForageInstance) {
    if (getSerializerPromise.result) {
        return getSerializerPromise.result;
    }
    if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {
        return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));
    }
    getSerializerPromise.result = localForageInstance.getSerializer();
    return getSerializerPromise.result;
}



function executeCallback(promise, callback) {
    if (callback) {
        promise.then(function (result) {
            callback(null, result);
        }, function (error) {
            callback(error);
        });
    }
}

function forEachItem(items, keyFn, valueFn, loopFn) {
    function ensurePropGetterMethod(propFn, defaultPropName) {
        var propName = propFn || defaultPropName;

        if ((!propFn || typeof propFn !== 'function') && typeof propName === 'string') {
            propFn = function propFn(item) {
                return item[propName];
            };
        }
        return propFn;
    }

    var result = [];
    // http://stackoverflow.com/questions/4775722/check-if-object-is-array
    if (Object.prototype.toString.call(items) === '[object Array]') {
        keyFn = ensurePropGetterMethod(keyFn, 'key');
        valueFn = ensurePropGetterMethod(valueFn, 'value');

        for (var i = 0, len = items.length; i < len; i++) {
            var item = items[i];
            result.push(loopFn(keyFn(item), valueFn(item)));
        }
    } else {
        for (var prop in items) {
            if (items.hasOwnProperty(prop)) {
                result.push(loopFn(prop, items[prop]));
            }
        }
    }
    return result;
}

function setItemsIndexedDB(items, keyFn, valueFn, callback) {
      console.log("SETTING ITEMS", items)
    var localforageInstance = this;

    var promise = localforageInstance.ready().then(function () {
        return new Promise(function (resolve, reject) {
            // Inspired from @lu4 PR mozilla/localForage#318
            var dbInfo = localforageInstance._dbInfo;
            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');
            var store = transaction.objectStore(dbInfo.storeName);
            var lastError;

            transaction.oncomplete = function () {
                resolve(items);
            };
            transaction.onabort = transaction.onerror = function (event) {
                reject(lastError || event.target);
            };

            function requestOnError(evt) {
                var request = evt.target || this;
                lastError = request.error || request.transaction.error;
                reject(lastError);
            }

            forEachItem(items, keyFn, valueFn, function (key, value) {
                // The reason we don't _save_ null is because IE 10 does
                // not support saving the `null` type in IndexedDB. How
                // ironic, given the bug below!
                // See: https://github.com/mozilla/localForage/issues/161
                if (value === null) {
                    value = undefined;
                }
                try{
                console.log("PUTTING VALUE", value, key)
                var request = store.put(value, key);
                }
                catch(err){
                  console.log("Something went wrong ", err)
                }
                request.onerror = requestOnError;
            });
        });
    });
    executeCallback(promise, callback);
    return promise;
}

function setItemsWebsql(items, keyFn, valueFn, callback) {
    var localforageInstance = this;
    var promise = new Promise(function (resolve, reject) {
        localforageInstance.ready().then(function () {
            return getSerializerPromise(localforageInstance);
        }).then(function (serializer) {
            // Inspired from @lu4 PR mozilla/localForage#318
            var dbInfo = localforageInstance._dbInfo;
            dbInfo.db.transaction(function (t) {

                var query = 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)';

                var itemPromises = forEachItem(items, keyFn, valueFn, function (key, value) {
                    return new Promise(function (resolve, reject) {
                        serializer.serialize(value, function (value, error) {
                            if (error) {
                                reject(error);
                            } else {
                                t.executeSql(query, [key, value], function () {
                                    resolve();
                                }, function (t, error) {
                                    reject(error);
                                });
                            }
                        });
                    });
                });

                Promise.all(itemPromises).then(function () {
                    resolve(items);
                }, reject);
            }, function (sqlError) {
                reject(sqlError);
            } /*, function() {
                 if (resolving) {
                     resolve(items);
                 }
              }*/);
        }).catch(reject);
    });
    executeCallback(promise, callback);
    return promise;
}

function setItemsGeneric(items, keyFn, valueFn, callback) {
    var localforageInstance = this;

    var itemPromises = forEachItem(items, keyFn, valueFn, function (key, value) {
        return localforageInstance.setItem(key, value);
    });
    var promise = Promise.all(itemPromises);

    executeCallback(promise, callback);
    return promise;
}

function localforageSetItems(items, keyFn, valueFn, callback) {
    var localforageInstance = this;
    var currentDriver = localforageInstance.driver();

    if (currentDriver === localforageInstance.INDEXEDDB) {
        return setItemsIndexedDB.call(localforageInstance, items, keyFn, valueFn, callback);
    } else if (currentDriver === localforageInstance.WEBSQL) {
        return setItemsWebsql.call(localforageInstance, items, keyFn, valueFn, callback);
    } else {
        return setItemsGeneric.call(localforageInstance, items, keyFn, valueFn, callback);
    }
}

function extendPrototype(localforage$$1) {
    var localforagePrototype = Object.getPrototypeOf(localforage$$1);
    if (localforagePrototype) {
        localforagePrototype.setItems = localforageSetItems;
        localforagePrototype.setItems.indexedDB = function () {
            return setItemsIndexedDB.apply(this, arguments);
        };
        localforagePrototype.setItems.websql = function () {
            return setItemsWebsql.apply(this, arguments);
        };
        localforagePrototype.setItems.generic = function () {
            return setItemsGeneric.apply(this, arguments);
        };
    }
}

var extendPrototypeResult = extendPrototype(localforage);

exports.setItemsGeneric = setItemsGeneric;
exports.localforageSetItems = localforageSetItems;
exports.extendPrototype = extendPrototype;
exports.extendPrototypeResult = extendPrototypeResult;

Object.defineProperty(exports, '__esModule', { value: true });

})));


/***/ }),

/***/ "./node_modules/localforage-webextensionstorage-driver/driver.js":
/*!***********************************************************************!*\
  !*** ./node_modules/localforage-webextensionstorage-driver/driver.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createDriver;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/localforage-webextensionstorage-driver/utils.js");

function createDriver(name, property) {
  var storage = (0, _utils.getStorage)();
  var support = !!(storage && storage[property]);
  var driver = support ? storage[property] : {
    clear: function clear() {},
    get: function get() {},
    remove: function remove() {},
    set: function set() {}
  };

  var _clear = driver.clear.bind(driver);

  var get = driver.get.bind(driver);
  var remove = driver.remove.bind(driver);
  var set = driver.set.bind(driver);
  return {
    _driver: name,
    _support: support,
    // eslint-disable-next-line no-underscore-dangle
    _initStorage: function _initStorage() {
      return Promise.resolve();
    },
    clear: function clear(callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _clear();

                if (callback) callback();

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    iterate: function iterate(iterator, callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var items, keys;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _utils.usePromise)(get, null);

              case 2:
                items = _context2.sent;
                keys = Object.keys(items);
                keys.forEach(function (key, i) {
                  return iterator(items[key], key, i);
                });
                if (callback) callback();

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    getItem: function getItem(key, callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var result;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return (0, _utils.usePromise)(get, key);

              case 3:
                result = _context3.sent;
                result = typeof key === 'string' ? result[key] : result;
                result = result === undefined ? null : result;
                if (callback) callback(null, result);
                return _context3.abrupt("return", result);

              case 10:
                _context3.prev = 10;
                _context3.t0 = _context3["catch"](0);
                if (callback) callback(_context3.t0);
                throw _context3.t0;

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[0, 10]]);
      }))();
    },
    key: function key(n, callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        var results, key;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _utils.usePromise)(get, null);

              case 2:
                results = _context4.sent;
                key = Object.keys(results)[n];
                if (callback) callback(key);
                return _context4.abrupt("return", key);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    },
    keys: function keys(callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
        var results, keys;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _utils.usePromise)(get, null);

              case 2:
                results = _context5.sent;
                keys = Object.keys(results);
                if (callback) callback(keys);
                return _context5.abrupt("return", keys);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }))();
    },
    length: function length(callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        var results, _Object$keys, length;

        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _utils.usePromise)(get, null);

              case 2:
                results = _context6.sent;
                _Object$keys = Object.keys(results), length = _Object$keys.length;
                if (callback) callback(length);
                return _context6.abrupt("return", length);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }))();
    },
    removeItem: function removeItem(key, callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _utils.usePromise)(remove, key);

              case 2:
                if (callback) callback();

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }))();
    },
    setItem: function setItem(key, value, callback) {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8() {
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return (0, _utils.usePromise)(set, (0, _defineProperty2["default"])({}, key, value));

              case 2:
                if (callback) callback();

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))();
    }
  };
}

/***/ }),

/***/ "./node_modules/localforage-webextensionstorage-driver/local.js":
/*!**********************************************************************!*\
  !*** ./node_modules/localforage-webextensionstorage-driver/local.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _driver = _interopRequireDefault(__webpack_require__(/*! ./driver */ "./node_modules/localforage-webextensionstorage-driver/driver.js"));

var _default = (0, _driver["default"])('webExtensionLocalStorage', 'local');

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/localforage-webextensionstorage-driver/sync.js":
/*!*********************************************************************!*\
  !*** ./node_modules/localforage-webextensionstorage-driver/sync.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _driver = _interopRequireDefault(__webpack_require__(/*! ./driver */ "./node_modules/localforage-webextensionstorage-driver/driver.js"));

var _default = (0, _driver["default"])('webExtensionSyncStorage', 'sync');

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/localforage-webextensionstorage-driver/utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/localforage-webextensionstorage-driver/utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getStorage = getStorage;
exports.usePromise = usePromise;

/**
 * Need to invoke a function at runtime instead of import-time to make tests
 * pass with mocked browser and chrome objects
 */
function getStorage() {
  return typeof browser !== 'undefined' && browser.storage || typeof chrome !== 'undefined' && chrome.storage;
}
/**
 * Need to invoke a function at runtime instead of import-time to make tests
 * pass with mocked browser and chrome objects
 */


function usesPromises() {
  var storage = getStorage();

  try {
    return storage && storage.local.get && storage.local.get() && typeof storage.local.get().then === 'function';
  } catch (e) {
    return false;
  }
}
/**
 * Converts a callback-based API to a promise based API.
 * For now we assume that there is only one arg in addition to the callback
 */


function usePromise(fn, arg) {
  if (usesPromises()) {
    return fn(arg);
  }

  return new Promise(function (resolve) {
    fn(arg, function () {
      resolve.apply(void 0, arguments);
    });
  });
}

/***/ }),

/***/ "./node_modules/localforage/dist/localforage.js":
/*!******************************************************!*\
  !*** ./node_modules/localforage/dist/localforage.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=undefined;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=undefined;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
'use strict';
var Mutation = global.MutationObserver || global.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = global.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      global.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}

}).call(this,typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(_dereq_,module,exports){
'use strict';
var immediate = _dereq_(1);

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];

module.exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

Promise.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

Promise.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

Promise.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

Promise.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}

},{"1":1}],3:[function(_dereq_,module,exports){
(function (global){
'use strict';
if (typeof global.Promise !== 'function') {
  global.Promise = _dereq_(2);
}

}).call(this,typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"2":2}],4:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getIDB() {
    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
    try {
        if (typeof indexedDB !== 'undefined') {
            return indexedDB;
        }
        if (typeof webkitIndexedDB !== 'undefined') {
            return webkitIndexedDB;
        }
        if (typeof mozIndexedDB !== 'undefined') {
            return mozIndexedDB;
        }
        if (typeof OIndexedDB !== 'undefined') {
            return OIndexedDB;
        }
        if (typeof msIndexedDB !== 'undefined') {
            return msIndexedDB;
        }
    } catch (e) {
        return;
    }
}

var idb = getIDB();

function isIndexedDBValid() {
    try {
        // Initialize IndexedDB; fall back to vendor-prefixed versions
        // if needed.
        if (!idb || !idb.open) {
            return false;
        }
        // We mimic PouchDB here;
        //
        // We test for openDatabase because IE Mobile identifies itself
        // as Safari. Oh the lulz...
        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

        // Safari <10.1 does not meet our requirements for IDB support
        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
        // Safari 10.1 shipped with fetch, we can use that to detect it.
        // Note: this creates issues with `window.fetch` polyfills and
        // overrides; see:
        // https://github.com/localForage/localForage/issues/856
        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
        // some outdated implementations of IDB that appear on Samsung
        // and HTC Android devices <4.4 are missing IDBKeyRange
        // See: https://github.com/mozilla/localForage/issues/128
        // See: https://github.com/mozilla/localForage/issues/272
        typeof IDBKeyRange !== 'undefined';
    } catch (e) {
        return false;
    }
}

// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
function createBlob(parts, properties) {
    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
    parts = parts || [];
    properties = properties || {};
    try {
        return new Blob(parts, properties);
    } catch (e) {
        if (e.name !== 'TypeError') {
            throw e;
        }
        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
            builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
    }
}

// This is CommonJS because lie is an external dependency, so Rollup
// can just ignore it.
if (typeof Promise === 'undefined') {
    // In the "nopromises" build this will just throw if you don't have
    // a global promise object, but it would throw anyway later.
    _dereq_(3);
}
var Promise$1 = Promise;

function executeCallback(promise, callback) {
    if (callback) {
        promise.then(function (result) {
            callback(null, result);
        }, function (error) {
            callback(error);
        });
    }
}

function executeTwoCallbacks(promise, callback, errorCallback) {
    if (typeof callback === 'function') {
        promise.then(callback);
    }

    if (typeof errorCallback === 'function') {
        promise["catch"](errorCallback);
    }
}

function normalizeKey(key) {
    // Cast the key to a string, as that's all we can set as a key.
    if (typeof key !== 'string') {
        console.warn(key + ' used as a key, but it is not a string.');
        key = String(key);
    }

    return key;
}

function getCallback() {
    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
        return arguments[arguments.length - 1];
    }
}

// Some code originally from async_storage.js in
// [Gaia](https://github.com/mozilla-b2g/gaia).

var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
var supportsBlobs = void 0;
var dbContexts = {};
var toString = Object.prototype.toString;

// Transaction Modes
var READ_ONLY = 'readonly';
var READ_WRITE = 'readwrite';

// Transform a binary string to an array buffer, because otherwise
// weird stuff happens when you try to work with the binary string directly.
// It is known.
// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function _binStringToArrayBuffer(bin) {
    var length = bin.length;
    var buf = new ArrayBuffer(length);
    var arr = new Uint8Array(buf);
    for (var i = 0; i < length; i++) {
        arr[i] = bin.charCodeAt(i);
    }
    return buf;
}

//
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37 and Android <5. In those versions, storing a blob will throw.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
// Code borrowed from PouchDB. See:
// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
//
function _checkBlobSupportWithoutCaching(idb) {
    return new Promise$1(function (resolve) {
        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
        var blob = createBlob(['']);
        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

        txn.onabort = function (e) {
            // If the transaction aborts now its due to not being able to
            // write to the database, likely due to the disk being full
            e.preventDefault();
            e.stopPropagation();
            resolve(false);
        };

        txn.oncomplete = function () {
            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
            var matchedEdge = navigator.userAgent.match(/Edge\//);
            // MS Edge pretends to be Chrome 42:
            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
        };
    })["catch"](function () {
        return false; // error, so assume unsupported
    });
}

function _checkBlobSupport(idb) {
    if (typeof supportsBlobs === 'boolean') {
        return Promise$1.resolve(supportsBlobs);
    }
    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
        supportsBlobs = value;
        return supportsBlobs;
    });
}

function _deferReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Create a deferred object representing the current database operation.
    var deferredOperation = {};

    deferredOperation.promise = new Promise$1(function (resolve, reject) {
        deferredOperation.resolve = resolve;
        deferredOperation.reject = reject;
    });

    // Enqueue the deferred operation.
    dbContext.deferredOperations.push(deferredOperation);

    // Chain its promise to the database readiness.
    if (!dbContext.dbReady) {
        dbContext.dbReady = deferredOperation.promise;
    } else {
        dbContext.dbReady = dbContext.dbReady.then(function () {
            return deferredOperation.promise;
        });
    }
}

function _advanceReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Resolve its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.resolve();
        return deferredOperation.promise;
    }
}

function _rejectReadiness(dbInfo, err) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Reject its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.reject(err);
        return deferredOperation.promise;
    }
}

function _getConnection(dbInfo, upgradeNeeded) {
    return new Promise$1(function (resolve, reject) {
        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

        if (dbInfo.db) {
            if (upgradeNeeded) {
                _deferReadiness(dbInfo);
                dbInfo.db.close();
            } else {
                return resolve(dbInfo.db);
            }
        }

        var dbArgs = [dbInfo.name];

        if (upgradeNeeded) {
            dbArgs.push(dbInfo.version);
        }

        var openreq = idb.open.apply(idb, dbArgs);

        if (upgradeNeeded) {
            openreq.onupgradeneeded = function (e) {
                var db = openreq.result;
                try {
                    db.createObjectStore(dbInfo.storeName);
                    if (e.oldVersion <= 1) {
                        // Added when support for blob shims was added
                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                    }
                } catch (ex) {
                    if (ex.name === 'ConstraintError') {
                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                    } else {
                        throw ex;
                    }
                }
            };
        }

        openreq.onerror = function (e) {
            e.preventDefault();
            reject(openreq.error);
        };

        openreq.onsuccess = function () {
            var db = openreq.result;
            db.onversionchange = function (e) {
                // Triggered when the database is modified (e.g. adding an objectStore) or
                // deleted (even when initiated by other sessions in different tabs).
                // Closing the connection here prevents those operations from being blocked.
                // If the database is accessed again later by this instance, the connection
                // will be reopened or the database recreated as needed.
                e.target.close();
            };
            resolve(db);
            _advanceReadiness(dbInfo);
        };
    });
}

function _getOriginalConnection(dbInfo) {
    return _getConnection(dbInfo, false);
}

function _getUpgradedConnection(dbInfo) {
    return _getConnection(dbInfo, true);
}

function _isUpgradeNeeded(dbInfo, defaultVersion) {
    if (!dbInfo.db) {
        return true;
    }

    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
    var isDowngrade = dbInfo.version < dbInfo.db.version;
    var isUpgrade = dbInfo.version > dbInfo.db.version;

    if (isDowngrade) {
        // If the version is not the default one
        // then warn for impossible downgrade.
        if (dbInfo.version !== defaultVersion) {
            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
        }
        // Align the versions to prevent errors.
        dbInfo.version = dbInfo.db.version;
    }

    if (isUpgrade || isNewStore) {
        // If the store is new then increment the version (if needed).
        // This will trigger an "upgradeneeded" event which is required
        // for creating a store.
        if (isNewStore) {
            var incVersion = dbInfo.db.version + 1;
            if (incVersion > dbInfo.version) {
                dbInfo.version = incVersion;
            }
        }

        return true;
    }

    return false;
}

// encode a blob for indexeddb engines that don't support blobs
function _encodeBlob(blob) {
    return new Promise$1(function (resolve, reject) {
        var reader = new FileReader();
        reader.onerror = reject;
        reader.onloadend = function (e) {
            var base64 = btoa(e.target.result || '');
            resolve({
                __local_forage_encoded_blob: true,
                data: base64,
                type: blob.type
            });
        };
        reader.readAsBinaryString(blob);
    });
}

// decode an encoded blob
function _decodeBlob(encodedBlob) {
    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
    return createBlob([arrayBuff], { type: encodedBlob.type });
}

// is this one of our fancy encoded blobs?
function _isEncodedBlob(value) {
    return value && value.__local_forage_encoded_blob;
}

// Specialize the default `ready()` function by making it dependent
// on the current database operations. Thus, the driver will be actually
// ready when it's been initialized (default) *and* there are no pending
// operations on the database (initiated by some other instances).
function _fullyReady(callback) {
    var self = this;

    var promise = self._initReady().then(function () {
        var dbContext = dbContexts[self._dbInfo.name];

        if (dbContext && dbContext.dbReady) {
            return dbContext.dbReady;
        }
    });

    executeTwoCallbacks(promise, callback, callback);
    return promise;
}

// Try to establish a new db connection to replace the
// current one which is broken (i.e. experiencing
// InvalidStateError while creating a transaction).
function _tryReconnect(dbInfo) {
    _deferReadiness(dbInfo);

    var dbContext = dbContexts[dbInfo.name];
    var forages = dbContext.forages;

    for (var i = 0; i < forages.length; i++) {
        var forage = forages[i];
        if (forage._dbInfo.db) {
            forage._dbInfo.db.close();
            forage._dbInfo.db = null;
        }
    }
    dbInfo.db = null;

    return _getOriginalConnection(dbInfo).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        // store the latest db reference
        // in case the db was upgraded
        dbInfo.db = dbContext.db = db;
        for (var i = 0; i < forages.length; i++) {
            forages[i]._dbInfo.db = db;
        }
    })["catch"](function (err) {
        _rejectReadiness(dbInfo, err);
        throw err;
    });
}

// FF doesn't like Promises (micro-tasks) and IDDB store operations,
// so we have to do it with callbacks
function createTransaction(dbInfo, mode, callback, retries) {
    if (retries === undefined) {
        retries = 1;
    }

    try {
        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
        callback(null, tx);
    } catch (err) {
        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
            return Promise$1.resolve().then(function () {
                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                    // increase the db version, to create the new ObjectStore
                    if (dbInfo.db) {
                        dbInfo.version = dbInfo.db.version + 1;
                    }
                    // Reopen the database for upgrading.
                    return _getUpgradedConnection(dbInfo);
                }
            }).then(function () {
                return _tryReconnect(dbInfo).then(function () {
                    createTransaction(dbInfo, mode, callback, retries - 1);
                });
            })["catch"](callback);
        }

        callback(err);
    }
}

function createDbContext() {
    return {
        // Running localForages sharing a database.
        forages: [],
        // Shared database.
        db: null,
        // Database readiness (promise).
        dbReady: null,
        // Deferred operations on the database.
        deferredOperations: []
    };
}

// Open the IndexedDB database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    // Get the current context of the database;
    var dbContext = dbContexts[dbInfo.name];

    // ...or create a new context.
    if (!dbContext) {
        dbContext = createDbContext();
        // Register the new context in the global container.
        dbContexts[dbInfo.name] = dbContext;
    }

    // Register itself as a running localForage in the current context.
    dbContext.forages.push(self);

    // Replace the default `ready()` function with the specialized one.
    if (!self._initReady) {
        self._initReady = self.ready;
        self.ready = _fullyReady;
    }

    // Create an array of initialization states of the related localForages.
    var initPromises = [];

    function ignoreErrors() {
        // Don't handle errors here,
        // just makes sure related localForages aren't pending.
        return Promise$1.resolve();
    }

    for (var j = 0; j < dbContext.forages.length; j++) {
        var forage = dbContext.forages[j];
        if (forage !== self) {
            // Don't wait for itself...
            initPromises.push(forage._initReady()["catch"](ignoreErrors));
        }
    }

    // Take a snapshot of the related localForages.
    var forages = dbContext.forages.slice(0);

    // Initialize the connection process only when
    // all the related localForages aren't pending.
    return Promise$1.all(initPromises).then(function () {
        dbInfo.db = dbContext.db;
        // Get the connection or open a new one without upgrade.
        return _getOriginalConnection(dbInfo);
    }).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        dbInfo.db = dbContext.db = db;
        self._dbInfo = dbInfo;
        // Share the final connection amongst related localForages.
        for (var k = 0; k < forages.length; k++) {
            var forage = forages[k];
            if (forage !== self) {
                // Self is already up-to-date.
                forage._dbInfo.db = dbInfo.db;
                forage._dbInfo.version = dbInfo.version;
            }
        }
    });
}

function getItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.get(key);

                    req.onsuccess = function () {
                        var value = req.result;
                        if (value === undefined) {
                            value = null;
                        }
                        if (_isEncodedBlob(value)) {
                            value = _decodeBlob(value);
                        }
                        resolve(value);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items stored in database.
function iterate(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openCursor();
                    var iterationNumber = 1;

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (cursor) {
                            var value = cursor.value;
                            if (_isEncodedBlob(value)) {
                                value = _decodeBlob(value);
                            }
                            var result = iterator(value, cursor.key, iterationNumber++);

                            // when the iterator callback returns any
                            // (non-`undefined`) value, then we stop
                            // the iteration immediately
                            if (result !== void 0) {
                                resolve(result);
                            } else {
                                cursor["continue"]();
                            }
                        } else {
                            resolve();
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);

    return promise;
}

function setItem(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        var dbInfo;
        self.ready().then(function () {
            dbInfo = self._dbInfo;
            if (toString.call(value) === '[object Blob]') {
                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
                    if (blobSupport) {
                        return value;
                    }
                    return _encodeBlob(value);
                });
            }
            return value;
        }).then(function (value) {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);

                    // The reason we don't _save_ null is because IE 10 does
                    // not support saving the `null` type in IndexedDB. How
                    // ironic, given the bug below!
                    // See: https://github.com/mozilla/localForage/issues/161
                    if (value === null) {
                        value = undefined;
                    }

                    var req = store.put(value, key);

                    transaction.oncomplete = function () {
                        // Cast to undefined so the value passed to
                        // callback/promise is the same as what one would get out
                        // of `getItem()` later. This leads to some weirdness
                        // (setItem('foo', undefined) will return `null`), but
                        // it's not my fault localStorage is our baseline and that
                        // it's weird.
                        if (value === undefined) {
                            value = null;
                        }

                        resolve(value);
                    };
                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function removeItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    // We use a Grunt task to make this safe for IE and some
                    // versions of Android (including those used by Cordova).
                    // Normally IE won't like `.delete()` and will insist on
                    // using `['delete']()`, but we have a build step that
                    // fixes this for us now.
                    var req = store["delete"](key);
                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onerror = function () {
                        reject(req.error);
                    };

                    // The request will be also be aborted if we've exceeded our storage
                    // space.
                    transaction.onabort = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function clear(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.clear();

                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function length(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.count();

                    req.onsuccess = function () {
                        resolve(req.result);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function key(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        if (n < 0) {
            resolve(null);

            return;
        }

        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var advanced = false;
                    var req = store.openKeyCursor();

                    req.onsuccess = function () {
                        var cursor = req.result;
                        if (!cursor) {
                            // this means there weren't enough keys
                            resolve(null);

                            return;
                        }

                        if (n === 0) {
                            // We have the first key, return it if that's what they
                            // wanted.
                            resolve(cursor.key);
                        } else {
                            if (!advanced) {
                                // Otherwise, ask the cursor to skip ahead n
                                // records.
                                advanced = true;
                                cursor.advance(n);
                            } else {
                                // When we get here, we've got the nth key.
                                resolve(cursor.key);
                            }
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openKeyCursor();
                    var keys = [];

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (!cursor) {
                            resolve(keys);
                            return;
                        }

                        keys.push(cursor.key);
                        cursor["continue"]();
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
            var dbContext = dbContexts[options.name];
            var forages = dbContext.forages;
            dbContext.db = db;
            for (var i = 0; i < forages.length; i++) {
                forages[i]._dbInfo.db = db;
            }
            return db;
        });

        if (!options.storeName) {
            promise = dbPromise.then(function (db) {
                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                }

                var dropDBPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.deleteDatabase(options.name);

                    req.onerror = function () {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        reject(req.error);
                    };

                    req.onblocked = function () {
                        // Closing all open connections in onversionchange handler should prevent this situation, but if
                        // we do get here, it just means the request remains pending - eventually it will succeed or error
                        console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        resolve(db);
                    };
                });

                return dropDBPromise.then(function (db) {
                    dbContext.db = db;
                    for (var i = 0; i < forages.length; i++) {
                        var _forage = forages[i];
                        _advanceReadiness(_forage._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        } else {
            promise = dbPromise.then(function (db) {
                if (!db.objectStoreNames.contains(options.storeName)) {
                    return;
                }

                var newVersion = db.version + 1;

                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                    forage._dbInfo.version = newVersion;
                }

                var dropObjectPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.open(options.name, newVersion);

                    req.onerror = function (err) {
                        var db = req.result;
                        db.close();
                        reject(err);
                    };

                    req.onupgradeneeded = function () {
                        var db = req.result;
                        db.deleteObjectStore(options.storeName);
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        db.close();
                        resolve(db);
                    };
                });

                return dropObjectPromise.then(function (db) {
                    dbContext.db = db;
                    for (var j = 0; j < forages.length; j++) {
                        var _forage2 = forages[j];
                        _forage2._dbInfo.db = db;
                        _advanceReadiness(_forage2._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        }
    }

    executeCallback(promise, callback);
    return promise;
}

var asyncStorage = {
    _driver: 'asyncStorage',
    _initStorage: _initStorage,
    _support: isIndexedDBValid(),
    iterate: iterate,
    getItem: getItem,
    setItem: setItem,
    removeItem: removeItem,
    clear: clear,
    length: length,
    key: key,
    keys: keys,
    dropInstance: dropInstance
};

function isWebSQLValid() {
    return typeof openDatabase === 'function';
}

// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
// it to Base64, so this is how we store it to prevent very strange errors with less
// verbose ways of binary <-> string data storage.
var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

var BLOB_TYPE_PREFIX = '~~local_forage_type~';
var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

var SERIALIZED_MARKER = '__lfsc__:';
var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

// OMG the serializations!
var TYPE_ARRAYBUFFER = 'arbf';
var TYPE_BLOB = 'blob';
var TYPE_INT8ARRAY = 'si08';
var TYPE_UINT8ARRAY = 'ui08';
var TYPE_UINT8CLAMPEDARRAY = 'uic8';
var TYPE_INT16ARRAY = 'si16';
var TYPE_INT32ARRAY = 'si32';
var TYPE_UINT16ARRAY = 'ur16';
var TYPE_UINT32ARRAY = 'ui32';
var TYPE_FLOAT32ARRAY = 'fl32';
var TYPE_FLOAT64ARRAY = 'fl64';
var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

var toString$1 = Object.prototype.toString;

function stringToBuffer(serializedString) {
    // Fill the string into a ArrayBuffer.
    var bufferLength = serializedString.length * 0.75;
    var len = serializedString.length;
    var i;
    var p = 0;
    var encoded1, encoded2, encoded3, encoded4;

    if (serializedString[serializedString.length - 1] === '=') {
        bufferLength--;
        if (serializedString[serializedString.length - 2] === '=') {
            bufferLength--;
        }
    }

    var buffer = new ArrayBuffer(bufferLength);
    var bytes = new Uint8Array(buffer);

    for (i = 0; i < len; i += 4) {
        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

        /*jslint bitwise: true */
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return buffer;
}

// Converts a buffer to a string to store, serialized, in the backend
// storage library.
function bufferToString(buffer) {
    // base64-arraybuffer
    var bytes = new Uint8Array(buffer);
    var base64String = '';
    var i;

    for (i = 0; i < bytes.length; i += 3) {
        /*jslint bitwise: true */
        base64String += BASE_CHARS[bytes[i] >> 2];
        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64String += BASE_CHARS[bytes[i + 2] & 63];
    }

    if (bytes.length % 3 === 2) {
        base64String = base64String.substring(0, base64String.length - 1) + '=';
    } else if (bytes.length % 3 === 1) {
        base64String = base64String.substring(0, base64String.length - 2) + '==';
    }

    return base64String;
}

// Serialize a value, afterwards executing a callback (which usually
// instructs the `setItem()` callback/promise to be executed). This is how
// we store binary data with localStorage.
function serialize(value, callback) {
    var valueType = '';
    if (value) {
        valueType = toString$1.call(value);
    }

    // Cannot use `value instanceof ArrayBuffer` or such here, as these
    // checks fail when running the tests using casper.js...
    //
    // TODO: See why those tests fail and use a better solution.
    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
        // Convert binary arrays to a string and prefix the string with
        // a special marker.
        var buffer;
        var marker = SERIALIZED_MARKER;

        if (value instanceof ArrayBuffer) {
            buffer = value;
            marker += TYPE_ARRAYBUFFER;
        } else {
            buffer = value.buffer;

            if (valueType === '[object Int8Array]') {
                marker += TYPE_INT8ARRAY;
            } else if (valueType === '[object Uint8Array]') {
                marker += TYPE_UINT8ARRAY;
            } else if (valueType === '[object Uint8ClampedArray]') {
                marker += TYPE_UINT8CLAMPEDARRAY;
            } else if (valueType === '[object Int16Array]') {
                marker += TYPE_INT16ARRAY;
            } else if (valueType === '[object Uint16Array]') {
                marker += TYPE_UINT16ARRAY;
            } else if (valueType === '[object Int32Array]') {
                marker += TYPE_INT32ARRAY;
            } else if (valueType === '[object Uint32Array]') {
                marker += TYPE_UINT32ARRAY;
            } else if (valueType === '[object Float32Array]') {
                marker += TYPE_FLOAT32ARRAY;
            } else if (valueType === '[object Float64Array]') {
                marker += TYPE_FLOAT64ARRAY;
            } else {
                callback(new Error('Failed to get type for BinaryArray'));
            }
        }

        callback(marker + bufferToString(buffer));
    } else if (valueType === '[object Blob]') {
        // Conver the blob to a binaryArray and then to a string.
        var fileReader = new FileReader();

        fileReader.onload = function () {
            // Backwards-compatible prefix for the blob type.
            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
        };

        fileReader.readAsArrayBuffer(value);
    } else {
        try {
            callback(JSON.stringify(value));
        } catch (e) {
            console.error("Couldn't convert value into a JSON string: ", value);

            callback(null, e);
        }
    }
}

// Deserialize data we've inserted into a value column/field. We place
// special markers into our strings to mark them as encoded; this isn't
// as nice as a meta field, but it's the only sane thing we can do whilst
// keeping localStorage support intact.
//
// Oftentimes this will just deserialize JSON content, but if we have a
// special marker (SERIALIZED_MARKER, defined above), we will extract
// some kind of arraybuffer/binary data/typed array out of the string.
function deserialize(value) {
    // If we haven't marked this string as being specially serialized (i.e.
    // something other than serialized JSON), we can just return it and be
    // done with it.
    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
        return JSON.parse(value);
    }

    // The following code deals with deserializing some kind of Blob or
    // TypedArray. First we separate out the type of data we're dealing
    // with from the data itself.
    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

    var blobType;
    // Backwards-compatible blob type serialization strategy.
    // DBs created with older versions of localForage will simply not have the blob type.
    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
        blobType = matcher[1];
        serializedString = serializedString.substring(matcher[0].length);
    }
    var buffer = stringToBuffer(serializedString);

    // Return the right type based on the code/type set during
    // serialization.
    switch (type) {
        case TYPE_ARRAYBUFFER:
            return buffer;
        case TYPE_BLOB:
            return createBlob([buffer], { type: blobType });
        case TYPE_INT8ARRAY:
            return new Int8Array(buffer);
        case TYPE_UINT8ARRAY:
            return new Uint8Array(buffer);
        case TYPE_UINT8CLAMPEDARRAY:
            return new Uint8ClampedArray(buffer);
        case TYPE_INT16ARRAY:
            return new Int16Array(buffer);
        case TYPE_UINT16ARRAY:
            return new Uint16Array(buffer);
        case TYPE_INT32ARRAY:
            return new Int32Array(buffer);
        case TYPE_UINT32ARRAY:
            return new Uint32Array(buffer);
        case TYPE_FLOAT32ARRAY:
            return new Float32Array(buffer);
        case TYPE_FLOAT64ARRAY:
            return new Float64Array(buffer);
        default:
            throw new Error('Unkown type: ' + type);
    }
}

var localforageSerializer = {
    serialize: serialize,
    deserialize: deserialize,
    stringToBuffer: stringToBuffer,
    bufferToString: bufferToString
};

/*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */

function createDbTable(t, dbInfo, callback, errorCallback) {
    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
}

// Open the WebSQL database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage$1(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
        }
    }

    var dbInfoPromise = new Promise$1(function (resolve, reject) {
        // Open the database; the openDatabase API will automatically
        // create it for us if it doesn't exist.
        try {
            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
        } catch (e) {
            return reject(e);
        }

        // Create our key/value table if it doesn't exist.
        dbInfo.db.transaction(function (t) {
            createDbTable(t, dbInfo, function () {
                self._dbInfo = dbInfo;
                resolve();
            }, function (t, error) {
                reject(error);
            });
        }, reject);
    });

    dbInfo.serializer = localforageSerializer;
    return dbInfoPromise;
}

function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
    t.executeSql(sqlStatement, args, callback, function (t, error) {
        if (error.code === error.SYNTAX_ERR) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
                if (!results.rows.length) {
                    // if the table is missing (was deleted)
                    // re-create it table and retry
                    createDbTable(t, dbInfo, function () {
                        t.executeSql(sqlStatement, args, callback, errorCallback);
                    }, errorCallback);
                } else {
                    errorCallback(t, error);
                }
            }, errorCallback);
        } else {
            errorCallback(t, error);
        }
    }, errorCallback);
}

function getItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).value : null;

                    // Check to see if this is serialized content we need to
                    // unpack.
                    if (result) {
                        result = dbInfo.serializer.deserialize(result);
                    }

                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function iterate$1(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;

            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
                    var rows = results.rows;
                    var length = rows.length;

                    for (var i = 0; i < length; i++) {
                        var item = rows.item(i);
                        var result = item.value;

                        // Check to see if this is serialized content
                        // we need to unpack.
                        if (result) {
                            result = dbInfo.serializer.deserialize(result);
                        }

                        result = iterator(result, item.key, i + 1);

                        // void(0) prevents problems with redefinition
                        // of `undefined`.
                        if (result !== void 0) {
                            resolve(result);
                            return;
                        }
                    }

                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function _setItem(key, value, callback, retriesLeft) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            // The localStorage API doesn't return undefined values in an
            // "expected" way, so undefined is always cast to null in all
            // drivers. See: https://github.com/mozilla/localForage/pull/42
            if (value === undefined) {
                value = null;
            }

            // Save the original value to pass to the callback.
            var originalValue = value;

            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    dbInfo.db.transaction(function (t) {
                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
                            resolve(originalValue);
                        }, function (t, error) {
                            reject(error);
                        });
                    }, function (sqlError) {
                        // The transaction failed; check
                        // to see if it's a quota error.
                        if (sqlError.code === sqlError.QUOTA_ERR) {
                            // We reject the callback outright for now, but
                            // it's worth trying to re-run the transaction.
                            // Even if the user accepts the prompt to use
                            // more storage on Safari, this error will
                            // be called.
                            //
                            // Try to re-run the transaction.
                            if (retriesLeft > 0) {
                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
                                return;
                            }
                            reject(sqlError);
                        }
                    });
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function setItem$1(key, value, callback) {
    return _setItem.apply(this, [key, value, callback, 1]);
}

function removeItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Deletes every item in the table.
// TODO: Find out if this resets the AUTO_INCREMENT number.
function clear$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Does a simple `COUNT(key)` to get the number of items stored in
// localForage.
function length$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                // Ahhh, SQL makes this one soooooo easy.
                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
                    var result = results.rows.item(0).c;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Return the key located at key index X; essentially gets the key from a
// `WHERE id = ?`. This is the most efficient way I can think to implement
// this rarely-used (in my experience) part of the API, but it can seem
// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
// the ID of each key will change every time it's updated. Perhaps a stored
// procedure for the `setItem()` SQL would solve this problem?
// TODO: Don't change ID on `setItem()`.
function key$1(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).key : null;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
                    var keys = [];

                    for (var i = 0; i < results.rows.length; i++) {
                        keys.push(results.rows.item(i).key);
                    }

                    resolve(keys);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// https://www.w3.org/TR/webdatabase/#databases
// > There is no way to enumerate or delete the databases available for an origin from this API.
function getAllStoreNames(db) {
    return new Promise$1(function (resolve, reject) {
        db.transaction(function (t) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
                var storeNames = [];

                for (var i = 0; i < results.rows.length; i++) {
                    storeNames.push(results.rows.item(i).name);
                }

                resolve({
                    db: db,
                    storeNames: storeNames
                });
            }, function (t, error) {
                reject(error);
            });
        }, function (sqlError) {
            reject(sqlError);
        });
    });
}

function dropInstance$1(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            var db;
            if (options.name === currentConfig.name) {
                // use the db reference of the current instance
                db = self._dbInfo.db;
            } else {
                db = openDatabase(options.name, '', '', 0);
            }

            if (!options.storeName) {
                // drop all database tables
                resolve(getAllStoreNames(db));
            } else {
                resolve({
                    db: db,
                    storeNames: [options.storeName]
                });
            }
        }).then(function (operationInfo) {
            return new Promise$1(function (resolve, reject) {
                operationInfo.db.transaction(function (t) {
                    function dropTable(storeName) {
                        return new Promise$1(function (resolve, reject) {
                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
                                resolve();
                            }, function (t, error) {
                                reject(error);
                            });
                        });
                    }

                    var operations = [];
                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
                        operations.push(dropTable(operationInfo.storeNames[i]));
                    }

                    Promise$1.all(operations).then(function () {
                        resolve();
                    })["catch"](function (e) {
                        reject(e);
                    });
                }, function (sqlError) {
                    reject(sqlError);
                });
            });
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var webSQLStorage = {
    _driver: 'webSQLStorage',
    _initStorage: _initStorage$1,
    _support: isWebSQLValid(),
    iterate: iterate$1,
    getItem: getItem$1,
    setItem: setItem$1,
    removeItem: removeItem$1,
    clear: clear$1,
    length: length$1,
    key: key$1,
    keys: keys$1,
    dropInstance: dropInstance$1
};

function isLocalStorageValid() {
    try {
        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
        // in IE8 typeof localStorage.setItem === 'object'
        !!localStorage.setItem;
    } catch (e) {
        return false;
    }
}

function _getKeyPrefix(options, defaultConfig) {
    var keyPrefix = options.name + '/';

    if (options.storeName !== defaultConfig.storeName) {
        keyPrefix += options.storeName + '/';
    }
    return keyPrefix;
}

// Check if localStorage throws when saving an item
function checkIfLocalStorageThrows() {
    var localStorageTestKey = '_localforage_support_test';

    try {
        localStorage.setItem(localStorageTestKey, true);
        localStorage.removeItem(localStorageTestKey);

        return false;
    } catch (e) {
        return true;
    }
}

// Check if localStorage is usable and allows to save an item
// This method checks if localStorage is usable in Safari Private Browsing
// mode, or in any other case where the available quota for localStorage
// is 0 and there wasn't any saved items yet.
function _isLocalStorageUsable() {
    return !checkIfLocalStorageThrows() || localStorage.length > 0;
}

// Config the localStorage backend, using options set in the config.
function _initStorage$2(options) {
    var self = this;
    var dbInfo = {};
    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

    if (!_isLocalStorageUsable()) {
        return Promise$1.reject();
    }

    self._dbInfo = dbInfo;
    dbInfo.serializer = localforageSerializer;

    return Promise$1.resolve();
}

// Remove all keys from the datastore, effectively destroying all data in
// the app's key/value store!
function clear$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var keyPrefix = self._dbInfo.keyPrefix;

        for (var i = localStorage.length - 1; i >= 0; i--) {
            var key = localStorage.key(i);

            if (key.indexOf(keyPrefix) === 0) {
                localStorage.removeItem(key);
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Retrieve an item from the store. Unlike the original async_storage
// library in Gaia, we don't modify return values at all. If a key's value
// is `undefined`, we pass that value to the callback function.
function getItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result = localStorage.getItem(dbInfo.keyPrefix + key);

        // If a result was found, parse it from the serialized
        // string into a JS object. If result isn't truthy, the key
        // is likely undefined and we'll pass it straight to the
        // callback.
        if (result) {
            result = dbInfo.serializer.deserialize(result);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items in the store.
function iterate$2(iterator, callback) {
    var self = this;

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var keyPrefix = dbInfo.keyPrefix;
        var keyPrefixLength = keyPrefix.length;
        var length = localStorage.length;

        // We use a dedicated iterator instead of the `i` variable below
        // so other keys we fetch in localStorage aren't counted in
        // the `iterationNumber` argument passed to the `iterate()`
        // callback.
        //
        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
        var iterationNumber = 1;

        for (var i = 0; i < length; i++) {
            var key = localStorage.key(i);
            if (key.indexOf(keyPrefix) !== 0) {
                continue;
            }
            var value = localStorage.getItem(key);

            // If a result was found, parse it from the serialized
            // string into a JS object. If result isn't truthy, the
            // key is likely undefined and we'll pass it straight
            // to the iterator.
            if (value) {
                value = dbInfo.serializer.deserialize(value);
            }

            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

            if (value !== void 0) {
                return value;
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Same as localStorage's key() method, except takes a callback.
function key$2(n, callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result;
        try {
            result = localStorage.key(n);
        } catch (error) {
            result = null;
        }

        // Remove the prefix from the key, if a key is found.
        if (result) {
            result = result.substring(dbInfo.keyPrefix.length);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var length = localStorage.length;
        var keys = [];

        for (var i = 0; i < length; i++) {
            var itemKey = localStorage.key(i);
            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
            }
        }

        return keys;
    });

    executeCallback(promise, callback);
    return promise;
}

// Supply the number of keys in the datastore to the callback function.
function length$2(callback) {
    var self = this;
    var promise = self.keys().then(function (keys) {
        return keys.length;
    });

    executeCallback(promise, callback);
    return promise;
}

// Remove an item from the store, nice and simple.
function removeItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        localStorage.removeItem(dbInfo.keyPrefix + key);
    });

    executeCallback(promise, callback);
    return promise;
}

// Set a key's value and run an optional callback once the value is set.
// Unlike Gaia's implementation, the callback function is passed the value,
// in case you want to operate on that value only after you're sure it
// saved, or something like that.
function setItem$2(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        // Convert undefined values to null.
        // https://github.com/mozilla/localForage/pull/42
        if (value === undefined) {
            value = null;
        }

        // Save the original value to pass to the callback.
        var originalValue = value;

        return new Promise$1(function (resolve, reject) {
            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    try {
                        localStorage.setItem(dbInfo.keyPrefix + key, value);
                        resolve(originalValue);
                    } catch (e) {
                        // localStorage capacity exceeded.
                        // TODO: Make this a specific error/event.
                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                            reject(e);
                        }
                        reject(e);
                    }
                }
            });
        });
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance$2(options, callback) {
    callback = getCallback.apply(this, arguments);

    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        var currentConfig = this.config();
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            if (!options.storeName) {
                resolve(options.name + '/');
            } else {
                resolve(_getKeyPrefix(options, self._defaultConfig));
            }
        }).then(function (keyPrefix) {
            for (var i = localStorage.length - 1; i >= 0; i--) {
                var key = localStorage.key(i);

                if (key.indexOf(keyPrefix) === 0) {
                    localStorage.removeItem(key);
                }
            }
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var localStorageWrapper = {
    _driver: 'localStorageWrapper',
    _initStorage: _initStorage$2,
    _support: isLocalStorageValid(),
    iterate: iterate$2,
    getItem: getItem$2,
    setItem: setItem$2,
    removeItem: removeItem$2,
    clear: clear$2,
    length: length$2,
    key: key$2,
    keys: keys$2,
    dropInstance: dropInstance$2
};

var sameValue = function sameValue(x, y) {
    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
};

var includes = function includes(array, searchElement) {
    var len = array.length;
    var i = 0;
    while (i < len) {
        if (sameValue(array[i], searchElement)) {
            return true;
        }
        i++;
    }

    return false;
};

var isArray = Array.isArray || function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
};

// Drivers are stored here when `defineDriver()` is called.
// They are shared across all instances of localForage.
var DefinedDrivers = {};

var DriverSupport = {};

var DefaultDrivers = {
    INDEXEDDB: asyncStorage,
    WEBSQL: webSQLStorage,
    LOCALSTORAGE: localStorageWrapper
};

var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

var OptionalDriverMethods = ['dropInstance'];

var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

var DefaultConfig = {
    description: '',
    driver: DefaultDriverOrder.slice(),
    name: 'localforage',
    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
    // we can use without a prompt.
    size: 4980736,
    storeName: 'keyvaluepairs',
    version: 1.0
};

function callWhenReady(localForageInstance, libraryMethod) {
    localForageInstance[libraryMethod] = function () {
        var _args = arguments;
        return localForageInstance.ready().then(function () {
            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
        });
    };
}

function extend() {
    for (var i = 1; i < arguments.length; i++) {
        var arg = arguments[i];

        if (arg) {
            for (var _key in arg) {
                if (arg.hasOwnProperty(_key)) {
                    if (isArray(arg[_key])) {
                        arguments[0][_key] = arg[_key].slice();
                    } else {
                        arguments[0][_key] = arg[_key];
                    }
                }
            }
        }
    }

    return arguments[0];
}

var LocalForage = function () {
    function LocalForage(options) {
        _classCallCheck(this, LocalForage);

        for (var driverTypeKey in DefaultDrivers) {
            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                var driver = DefaultDrivers[driverTypeKey];
                var driverName = driver._driver;
                this[driverTypeKey] = driverName;

                if (!DefinedDrivers[driverName]) {
                    // we don't need to wait for the promise,
                    // since the default drivers can be defined
                    // in a blocking manner
                    this.defineDriver(driver);
                }
            }
        }

        this._defaultConfig = extend({}, DefaultConfig);
        this._config = extend({}, this._defaultConfig, options);
        this._driverSet = null;
        this._initDriver = null;
        this._ready = false;
        this._dbInfo = null;

        this._wrapLibraryMethodsWithReady();
        this.setDriver(this._config.driver)["catch"](function () {});
    }

    // Set any config values for localForage; can be called anytime before
    // the first API call (e.g. `getItem`, `setItem`).
    // We loop through options so we don't overwrite existing config
    // values.


    LocalForage.prototype.config = function config(options) {
        // If the options argument is an object, we use it to set values.
        // Otherwise, we return either a specified config value or all
        // config values.
        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
            // If localforage is ready and fully initialized, we can't set
            // any new configuration values. Instead, we return an error.
            if (this._ready) {
                return new Error("Can't call config() after localforage " + 'has been used.');
            }

            for (var i in options) {
                if (i === 'storeName') {
                    options[i] = options[i].replace(/\W/g, '_');
                }

                if (i === 'version' && typeof options[i] !== 'number') {
                    return new Error('Database version must be a number.');
                }

                this._config[i] = options[i];
            }

            // after all config options are set and
            // the driver option is used, try setting it
            if ('driver' in options && options.driver) {
                return this.setDriver(this._config.driver);
            }

            return true;
        } else if (typeof options === 'string') {
            return this._config[options];
        } else {
            return this._config;
        }
    };

    // Used to define a custom driver, shared across all instances of
    // localForage.


    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
        var promise = new Promise$1(function (resolve, reject) {
            try {
                var driverName = driverObject._driver;
                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

                // A driver name should be defined and not overlap with the
                // library-defined, default drivers.
                if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                }

                var driverMethods = LibraryMethods.concat('_initStorage');
                for (var i = 0, len = driverMethods.length; i < len; i++) {
                    var driverMethodName = driverMethods[i];

                    // when the property is there,
                    // it should be a method even when optional
                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
                        reject(complianceError);
                        return;
                    }
                }

                var configureMissingMethods = function configureMissingMethods() {
                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
                        return function () {
                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
                            var promise = Promise$1.reject(error);
                            executeCallback(promise, arguments[arguments.length - 1]);
                            return promise;
                        };
                    };

                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                        var optionalDriverMethod = OptionalDriverMethods[_i];
                        if (!driverObject[optionalDriverMethod]) {
                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                        }
                    }
                };

                configureMissingMethods();

                var setDriverSupport = function setDriverSupport(support) {
                    if (DefinedDrivers[driverName]) {
                        console.info('Redefining LocalForage driver: ' + driverName);
                    }
                    DefinedDrivers[driverName] = driverObject;
                    DriverSupport[driverName] = support;
                    // don't use a then, so that we can define
                    // drivers that have simple _support methods
                    // in a blocking manner
                    resolve();
                };

                if ('_support' in driverObject) {
                    if (driverObject._support && typeof driverObject._support === 'function') {
                        driverObject._support().then(setDriverSupport, reject);
                    } else {
                        setDriverSupport(!!driverObject._support);
                    }
                } else {
                    setDriverSupport(true);
                }
            } catch (e) {
                reject(e);
            }
        });

        executeTwoCallbacks(promise, callback, errorCallback);
        return promise;
    };

    LocalForage.prototype.driver = function driver() {
        return this._driver || null;
    };

    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
        return getDriverPromise;
    };

    LocalForage.prototype.getSerializer = function getSerializer(callback) {
        var serializerPromise = Promise$1.resolve(localforageSerializer);
        executeTwoCallbacks(serializerPromise, callback);
        return serializerPromise;
    };

    LocalForage.prototype.ready = function ready(callback) {
        var self = this;

        var promise = self._driverSet.then(function () {
            if (self._ready === null) {
                self._ready = self._initDriver();
            }

            return self._ready;
        });

        executeTwoCallbacks(promise, callback, callback);
        return promise;
    };

    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
        var self = this;

        if (!isArray(drivers)) {
            drivers = [drivers];
        }

        var supportedDrivers = this._getSupportedDrivers(drivers);

        function setDriverToConfig() {
            self._config.driver = self.driver();
        }

        function extendSelfWithDriver(driver) {
            self._extend(driver);
            setDriverToConfig();

            self._ready = self._initStorage(self._config);
            return self._ready;
        }

        function initDriver(supportedDrivers) {
            return function () {
                var currentDriverIndex = 0;

                function driverPromiseLoop() {
                    while (currentDriverIndex < supportedDrivers.length) {
                        var driverName = supportedDrivers[currentDriverIndex];
                        currentDriverIndex++;

                        self._dbInfo = null;
                        self._ready = null;

                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                    }

                    setDriverToConfig();
                    var error = new Error('No available storage method found.');
                    self._driverSet = Promise$1.reject(error);
                    return self._driverSet;
                }

                return driverPromiseLoop();
            };
        }

        // There might be a driver initialization in progress
        // so wait for it to finish in order to avoid a possible
        // race condition to set _dbInfo
        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
            return Promise$1.resolve();
        }) : Promise$1.resolve();

        this._driverSet = oldDriverSetDone.then(function () {
            var driverName = supportedDrivers[0];
            self._dbInfo = null;
            self._ready = null;

            return self.getDriver(driverName).then(function (driver) {
                self._driver = driver._driver;
                setDriverToConfig();
                self._wrapLibraryMethodsWithReady();
                self._initDriver = initDriver(supportedDrivers);
            });
        })["catch"](function () {
            setDriverToConfig();
            var error = new Error('No available storage method found.');
            self._driverSet = Promise$1.reject(error);
            return self._driverSet;
        });

        executeTwoCallbacks(this._driverSet, callback, errorCallback);
        return this._driverSet;
    };

    LocalForage.prototype.supports = function supports(driverName) {
        return !!DriverSupport[driverName];
    };

    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
        extend(this, libraryMethodsAndProperties);
    };

    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
        var supportedDrivers = [];
        for (var i = 0, len = drivers.length; i < len; i++) {
            var driverName = drivers[i];
            if (this.supports(driverName)) {
                supportedDrivers.push(driverName);
            }
        }
        return supportedDrivers;
    };

    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
        // Add a stub for each driver API method that delays the call to the
        // corresponding driver method until localForage is ready. These stubs
        // will be replaced by the driver methods as soon as the driver is
        // loaded, so there is no performance impact.
        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
            callWhenReady(this, LibraryMethods[i]);
        }
    };

    LocalForage.prototype.createInstance = function createInstance(options) {
        return new LocalForage(options);
    };

    return LocalForage;
}();

// The actual localForage object that we expose as a module or via a
// global. It's extended by pulling in one of our other libraries.


var localforage_js = new LocalForage();

module.exports = localforage_js;

},{"3":3}]},{},[4])(4)
});


/***/ }),

/***/ "./node_modules/sizzle/dist/sizzle.js":
/*!********************************************!*\
  !*** ./node_modules/sizzle/dist/sizzle.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

// EXPOSE
var _sizzle = window.Sizzle;

Sizzle.noConflict = function() {
	if ( window.Sizzle === Sizzle ) {
		window.Sizzle = _sizzle;
	}

	return Sizzle;
};

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return Sizzle;
	}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

// Sizzle requires that there be a global window in Common-JS like environments
} else {}

// EXPOSE

} )( window );


/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/css-tag.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/css-tag.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSResult": () => (/* binding */ CSSResult),
/* harmony export */   "adoptStyles": () => (/* binding */ adoptStyles),
/* harmony export */   "css": () => (/* binding */ css),
/* harmony export */   "getCompatibleStyle": () => (/* binding */ getCompatibleStyle),
/* harmony export */   "supportsAdoptingStyleSheets": () => (/* binding */ supportsAdoptingStyleSheets),
/* harmony export */   "unsafeCSS": () => (/* binding */ unsafeCSS)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * Whether the current browser supports `adoptedStyleSheets`.
 */
const supportsAdoptingStyleSheets = window.ShadowRoot &&
    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&
    'adoptedStyleSheets' in Document.prototype &&
    'replace' in CSSStyleSheet.prototype;
const constructionToken = Symbol();
const styleSheetCache = new Map();
/**
 * A container for a string of CSS text, that may be used to create a CSSStyleSheet.
 *
 * CSSResult is the return value of `css`-tagged template literals and
 * `unsafeCSS()`. In order to ensure that CSSResults are only created via the
 * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.
 */
class CSSResult {
    constructor(cssText, safeToken) {
        // This property needs to remain unminified.
        this['_$cssResult$'] = true;
        if (safeToken !== constructionToken) {
            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
        }
        this.cssText = cssText;
    }
    // Note, this is a getter so that it's lazy. In practice, this means
    // stylesheets are not created until the first element instance is made.
    get styleSheet() {
        // Note, if `supportsAdoptingStyleSheets` is true then we assume
        // CSSStyleSheet is constructable.
        let styleSheet = styleSheetCache.get(this.cssText);
        if (supportsAdoptingStyleSheets && styleSheet === undefined) {
            styleSheetCache.set(this.cssText, (styleSheet = new CSSStyleSheet()));
            styleSheet.replaceSync(this.cssText);
        }
        return styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
const textFromCSSResult = (value) => {
    // This property needs to remain unminified.
    if (value['_$cssResult$'] === true) {
        return value.cssText;
    }
    else if (typeof value === 'number') {
        return value;
    }
    else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ` +
            `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +
            `to ensure page security.`);
    }
};
/**
 * Wrap a value for interpolation in a {@linkcode css} tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */
const unsafeCSS = (value) => new CSSResult(typeof value === 'string' ? value : String(value), constructionToken);
/**
 * A template literal tag which can be used with LitElement's
 * {@linkcode LitElement.styles} property to set element styles.
 *
 * For security reasons, only literal string values and number may be used in
 * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}
 * may be used inside an expression.
 */
const css = (strings, ...values) => {
    const cssText = strings.length === 1
        ? strings[0]
        : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, constructionToken);
};
/**
 * Applies the given styles to a `shadowRoot`. When Shadow DOM is
 * available but `adoptedStyleSheets` is not, styles are appended to the
 * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
 * Note, when shimming is used, any styles that are subsequently placed into
 * the shadowRoot should be placed *before* any shimmed adopted styles. This
 * will match spec behavior that gives adopted sheets precedence over styles in
 * shadowRoot.
 */
const adoptStyles = (renderRoot, styles) => {
    if (supportsAdoptingStyleSheets) {
        renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
    }
    else {
        styles.forEach((s) => {
            const style = document.createElement('style');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const nonce = window['litNonce'];
            if (nonce !== undefined) {
                style.setAttribute('nonce', nonce);
            }
            style.textContent = s.cssText;
            renderRoot.appendChild(style);
        });
    }
};
const cssResultFromStyleSheet = (sheet) => {
    let cssText = '';
    for (const rule of sheet.cssRules) {
        cssText += rule.cssText;
    }
    return unsafeCSS(cssText);
};
const getCompatibleStyle = supportsAdoptingStyleSheets
    ? (s) => s
    : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;
//# sourceMappingURL=css-tag.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/reactive-element.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/reactive-element.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSResult": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.CSSResult),
/* harmony export */   "ReactiveElement": () => (/* binding */ ReactiveElement),
/* harmony export */   "adoptStyles": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),
/* harmony export */   "css": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.css),
/* harmony export */   "defaultConverter": () => (/* binding */ defaultConverter),
/* harmony export */   "getCompatibleStyle": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),
/* harmony export */   "notEqual": () => (/* binding */ notEqual),
/* harmony export */   "supportsAdoptingStyleSheets": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),
/* harmony export */   "unsafeCSS": () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _css_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css-tag.js */ "./node_modules/@lit/reactive-element/development/css-tag.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var _a, _b, _c;
var _d;
/**
 * Use this module if you want to create your own base class extending
 * {@link ReactiveElement}.
 * @packageDocumentation
 */


const DEV_MODE = true;
let requestUpdateThenable;
let issueWarning;
const trustedTypes = window
    .trustedTypes;
// Temporary workaround for https://crbug.com/993268
// Currently, any attribute starting with "on" is considered to be a
// TrustedScript source. Such boolean attributes must be set to the equivalent
// trusted emptyScript value.
const emptyStringForBooleanAttribute = trustedTypes
    ? trustedTypes.emptyScript
    : '';
const polyfillSupport = DEV_MODE
    ? window.reactiveElementPolyfillSupportDevMode
    : window.reactiveElementPolyfillSupport;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = ((_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : (globalThis.litIssuedWarnings = new Set()));
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
    // Issue polyfill support warning.
    if (((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) && polyfillSupport === undefined) {
        issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \`ShadyDOM\` but ` +
            `the \`polyfill-support\` module has not been loaded.`);
    }
    requestUpdateThenable = (name) => ({
        then: (onfulfilled, _onrejected) => {
            issueWarning('request-update-promise', `The \`requestUpdate\` method should no longer return a Promise but ` +
                `does so on \`${name}\`. Use \`updateComplete\` instead.`);
            if (onfulfilled !== undefined) {
                onfulfilled(false);
            }
        },
    });
}
/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */
const debugLogEvent = DEV_MODE
    ? (event) => {
        const shouldEmit = window
            .emitLitDebugLogEvents;
        if (shouldEmit) {
            window.dispatchEvent(new CustomEvent('lit-debug', {
                detail: event,
            }));
        }
    }
    : undefined;
/*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */
/*@__INLINE__*/
const JSCompiler_renameProperty = (prop, _obj) => prop;
const defaultConverter = {
    toAttribute(value, type) {
        switch (type) {
            case Boolean:
                value = value ? emptyStringForBooleanAttribute : null;
                break;
            case Object:
            case Array:
                // if the value is `null` or `undefined` pass this through
                // to allow removing/no change behavior.
                value = value == null ? value : JSON.stringify(value);
                break;
        }
        return value;
    },
    fromAttribute(value, type) {
        let fromValue = value;
        switch (type) {
            case Boolean:
                fromValue = value !== null;
                break;
            case Number:
                fromValue = value === null ? null : Number(value);
                break;
            case Object:
            case Array:
                // Do *not* generate exception when invalid JSON is set as elements
                // don't normally complain on being mis-configured.
                // TODO(sorvell): Do generate exception in *dev mode*.
                try {
                    // Assert to adhere to Bazel's "must type assert JSON parse" rule.
                    fromValue = JSON.parse(value);
                }
                catch (e) {
                    fromValue = null;
                }
                break;
        }
        return fromValue;
    },
};
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */
const notEqual = (value, old) => {
    // This ensures (old==NaN, value==NaN) always returns false
    return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual,
};
/**
 * The Closure JS Compiler doesn't currently have good support for static
 * property semantics where "this" is dynamic (e.g.
 * https://github.com/google/closure-compiler/issues/3177 and others) so we use
 * this hack to bypass any rewriting by the compiler.
 */
const finalized = 'finalized';
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 * @noInheritDoc
 */
class ReactiveElement extends HTMLElement {
    constructor() {
        super();
        this.__instanceProperties = new Map();
        /**
         * True if there is a pending update as a result of calling `requestUpdate()`.
         * Should only be read.
         * @category updates
         */
        this.isUpdatePending = false;
        /**
         * Is set to `true` after the first update. The element code cannot assume
         * that `renderRoot` exists before the element `hasUpdated`.
         * @category updates
         */
        this.hasUpdated = false;
        /**
         * Name of currently reflecting property
         */
        this.__reflectingProperty = null;
        this._initialize();
    }
    /**
     * Adds an initializer function to the class that is called during instance
     * construction.
     *
     * This is useful for code that runs against a `ReactiveElement`
     * subclass, such as a decorator, that needs to do work for each
     * instance, such as setting up a `ReactiveController`.
     *
     * ```ts
     * const myDecorator = (target: typeof ReactiveElement, key: string) => {
     *   target.addInitializer((instance: ReactiveElement) => {
     *     // This is run during construction of the element
     *     new MyController(instance);
     *   });
     * }
     * ```
     *
     * Decorating a field will then cause each instance to run an initializer
     * that adds a controller:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   @myDecorator foo;
     * }
     * ```
     *
     * Initializers are stored per-constructor. Adding an initializer to a
     * subclass does not add it to a superclass. Since initializers are run in
     * constructors, initializers will run in order of the class hierarchy,
     * starting with superclasses and progressing to the instance's class.
     *
     * @nocollapse
     */
    static addInitializer(initializer) {
        var _a;
        (_a = this._initializers) !== null && _a !== void 0 ? _a : (this._initializers = []);
        this._initializers.push(initializer);
    }
    /**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     * @category attributes
     */
    static get observedAttributes() {
        // note: piggy backing on this to ensure we're finalized.
        this.finalize();
        const attributes = [];
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this.elementProperties.forEach((v, p) => {
            const attr = this.__attributeNameForProperty(p, v);
            if (attr !== undefined) {
                this.__attributeToPropertyMap.set(attr, p);
                attributes.push(attr);
            }
        });
        return attributes;
    }
    /**
     * Creates a property accessor on the element prototype if one does not exist
     * and stores a {@linkcode PropertyDeclaration} for the property with the
     * given options. The property setter calls the property's `hasChanged`
     * property option or uses a strict identity check to determine whether or not
     * to request an update.
     *
     * This method may be overridden to customize properties; however,
     * when doing so, it's important to call `super.createProperty` to ensure
     * the property is setup correctly. This method calls
     * `getPropertyDescriptor` internally to get a descriptor to install.
     * To customize what properties do when they are get or set, override
     * `getPropertyDescriptor`. To customize the options for a property,
     * implement `createProperty` like this:
     *
     * ```ts
     * static createProperty(name, options) {
     *   options = Object.assign(options, {myOption: true});
     *   super.createProperty(name, options);
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */
    static createProperty(name, options = defaultPropertyDeclaration) {
        var _a;
        // if this is a state property, force the attribute to false.
        if (options.state) {
            // Cast as any since this is readonly.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            options.attribute = false;
        }
        // Note, since this can be called by the `@property` decorator which
        // is called before `finalize`, we ensure finalization has been kicked off.
        this.finalize();
        this.elementProperties.set(name, options);
        // Do not generate an accessor if the prototype already has one, since
        // it would be lost otherwise and that would never be the user's intention;
        // Instead, we expect users to call `requestUpdate` themselves from
        // user-defined accessors. Note that if the super has an accessor we will
        // still overwrite it
        if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {
            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
            const descriptor = this.getPropertyDescriptor(name, key, options);
            if (descriptor !== undefined) {
                Object.defineProperty(this.prototype, name, descriptor);
                if (DEV_MODE) {
                    // If this class doesn't have its own set, create one and initialize
                    // with the values in the set from the nearest ancestor class, if any.
                    if (!this.hasOwnProperty('__reactivePropertyKeys')) {
                        this.__reactivePropertyKeys = new Set((_a = this.__reactivePropertyKeys) !== null && _a !== void 0 ? _a : []);
                    }
                    this.__reactivePropertyKeys.add(name);
                }
            }
        }
    }
    /**
     * Returns a property descriptor to be defined on the given named property.
     * If no descriptor is returned, the property will not become an accessor.
     * For example,
     *
     * ```ts
     * class MyElement extends LitElement {
     *   static getPropertyDescriptor(name, key, options) {
     *     const defaultDescriptor =
     *         super.getPropertyDescriptor(name, key, options);
     *     const setter = defaultDescriptor.set;
     *     return {
     *       get: defaultDescriptor.get,
     *       set(value) {
     *         setter.call(this, value);
     *         // custom action.
     *       },
     *       configurable: true,
     *       enumerable: true
     *     }
     *   }
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */
    static getPropertyDescriptor(name, key, options) {
        return {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            get() {
                return this[key];
            },
            set(value) {
                const oldValue = this[name];
                this[key] = value;
                this.requestUpdate(name, oldValue, options);
            },
            configurable: true,
            enumerable: true,
        };
    }
    /**
     * Returns the property options associated with the given property.
     * These options are defined with a `PropertyDeclaration` via the `properties`
     * object or the `@property` decorator and are registered in
     * `createProperty(...)`.
     *
     * Note, this method should be considered "final" and not overridden. To
     * customize the options for a given property, override
     * {@linkcode createProperty}.
     *
     * @nocollapse
     * @final
     * @category properties
     */
    static getPropertyOptions(name) {
        return this.elementProperties.get(name) || defaultPropertyDeclaration;
    }
    /**
     * Creates property accessors for registered properties, sets up element
     * styling, and ensures any superclasses are also finalized. Returns true if
     * the element was finalized.
     * @nocollapse
     */
    static finalize() {
        if (this.hasOwnProperty(finalized)) {
            return false;
        }
        this[finalized] = true;
        // finalize any superclasses
        const superCtor = Object.getPrototypeOf(this);
        superCtor.finalize();
        this.elementProperties = new Map(superCtor.elementProperties);
        // initialize Map populated in observedAttributes
        this.__attributeToPropertyMap = new Map();
        // make any properties
        // Note, only process "own" properties since this element will inherit
        // any properties defined on the superClass, and finalization ensures
        // the entire prototype chain is finalized.
        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
            const props = this.properties;
            // support symbols in properties (IE11 does not support this)
            const propKeys = [
                ...Object.getOwnPropertyNames(props),
                ...Object.getOwnPropertySymbols(props),
            ];
            // This for/of is ok because propKeys is an array
            for (const p of propKeys) {
                // note, use of `any` is due to TypeScript lack of support for symbol in
                // index types
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this.createProperty(p, props[p]);
            }
        }
        this.elementStyles = this.finalizeStyles(this.styles);
        // DEV mode warnings
        if (DEV_MODE) {
            const warnRemovedOrRenamed = (name, renamed = false) => {
                if (this.prototype.hasOwnProperty(name)) {
                    issueWarning(renamed ? 'renamed-api' : 'removed-api', `\`${name}\` is implemented on class ${this.name}. It ` +
                        `has been ${renamed ? 'renamed' : 'removed'} ` +
                        `in this version of LitElement.`);
                }
            };
            warnRemovedOrRenamed('initialize');
            warnRemovedOrRenamed('requestUpdateInternal');
            warnRemovedOrRenamed('_getUpdateComplete', true);
        }
        return true;
    }
    /**
     * Takes the styles the user supplied via the `static styles` property and
     * returns the array of styles to apply to the element.
     * Override this method to integrate into a style management system.
     *
     * Styles are deduplicated preserving the _last_ instance in the list. This
     * is a performance optimization to avoid duplicated styles that can occur
     * especially when composing via subclassing. The last item is kept to try
     * to preserve the cascade order with the assumption that it's most important
     * that last added styles override previous styles.
     *
     * @nocollapse
     * @category styles
     */
    static finalizeStyles(styles) {
        const elementStyles = [];
        if (Array.isArray(styles)) {
            // Dedupe the flattened array in reverse order to preserve the last items.
            // Casting to Array<unknown> works around TS error that
            // appears to come from trying to flatten a type CSSResultArray.
            const set = new Set(styles.flat(Infinity).reverse());
            // Then preserve original order by adding the set items in reverse order.
            for (const s of set) {
                elementStyles.unshift((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(s));
            }
        }
        else if (styles !== undefined) {
            elementStyles.push((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(styles));
        }
        return elementStyles;
    }
    /**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */
    static __attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false
            ? undefined
            : typeof attribute === 'string'
                ? attribute
                : typeof name === 'string'
                    ? name.toLowerCase()
                    : undefined;
    }
    /**
     * Internal only override point for customizing work done when elements
     * are constructed.
     *
     * @internal
     */
    _initialize() {
        var _a;
        this.__updatePromise = new Promise((res) => (this.enableUpdating = res));
        this._$changedProperties = new Map();
        this.__saveInstanceProperties();
        // ensures first update will be caught by an early access of
        // `updateComplete`
        this.requestUpdate();
        (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach((i) => i(this));
    }
    /**
     * Registers a `ReactiveController` to participate in the element's reactive
     * update cycle. The element automatically calls into any registered
     * controllers during its lifecycle callbacks.
     *
     * If the element is connected when `addController()` is called, the
     * controller's `hostConnected()` callback will be immediately called.
     * @category controllers
     */
    addController(controller) {
        var _a, _b;
        ((_a = this.__controllers) !== null && _a !== void 0 ? _a : (this.__controllers = [])).push(controller);
        // If a controller is added after the element has been connected,
        // call hostConnected. Note, re-using existence of `renderRoot` here
        // (which is set in connectedCallback) to avoid the need to track a
        // first connected state.
        if (this.renderRoot !== undefined && this.isConnected) {
            (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);
        }
    }
    /**
     * Removes a `ReactiveController` from the element.
     * @category controllers
     */
    removeController(controller) {
        var _a;
        // Note, if the indexOf is -1, the >>> will flip the sign which makes the
        // splice do nothing.
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);
    }
    /**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */
    __saveInstanceProperties() {
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this.constructor.elementProperties.forEach((_v, p) => {
            if (this.hasOwnProperty(p)) {
                this.__instanceProperties.set(p, this[p]);
                delete this[p];
            }
        });
    }
    /**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     *
     * @return Returns a node into which to render.
     * @category rendering
     */
    createRenderRoot() {
        var _a;
        const renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);
        (0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles)(renderRoot, this.constructor.elementStyles);
        return renderRoot;
    }
    /**
     * On first connection, creates the element's renderRoot, sets up
     * element styling, and enables updating.
     * @category lifecycle
     */
    connectedCallback() {
        var _a;
        // create renderRoot before first update.
        if (this.renderRoot === undefined) {
            this.renderRoot = this.createRenderRoot();
        }
        this.enableUpdating(true);
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c); });
    }
    /**
     * Note, this method should be considered final and not overridden. It is
     * overridden on the element instance with a function that triggers the first
     * update.
     * @category updates
     */
    enableUpdating(_requestedUpdate) { }
    /**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     * @category lifecycle
     */
    disconnectedCallback() {
        var _a;
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c); });
    }
    /**
     * Synchronizes property values when attributes change.
     *
     * Specifically, when an attribute is set, the corresponding property is set.
     * You should rarely need to implement this callback. If this method is
     * overridden, `super.attributeChangedCallback(name, _old, value)` must be
     * called.
     *
     * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)
     * on MDN for more information about the `attributeChangedCallback`.
     * @category attributes
     */
    attributeChangedCallback(name, _old, value) {
        this._$attributeToProperty(name, value);
    }
    __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
        var _a, _b;
        const attr = this.constructor.__attributeNameForProperty(name, options);
        if (attr !== undefined && options.reflect === true) {
            const toAttribute = (_b = (_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !== null && _b !== void 0 ? _b : defaultConverter.toAttribute;
            const attrValue = toAttribute(value, options.type);
            if (DEV_MODE &&
                this.constructor.enabledWarnings.indexOf('migration') >= 0 &&
                attrValue === undefined) {
                issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` +
                    `undefined on element ${this.localName}. The attribute will be ` +
                    `removed, but in the previous version of \`ReactiveElement\`, ` +
                    `the attribute would not have changed.`);
            }
            // Track if the property is being reflected to avoid
            // setting the property again via `attributeChangedCallback`. Note:
            // 1. this takes advantage of the fact that the callback is synchronous.
            // 2. will behave incorrectly if multiple attributes are in the reaction
            // stack at time of calling. However, since we process attributes
            // in `update` this should not be possible (or an extreme corner case
            // that we'd like to discover).
            // mark state reflecting
            this.__reflectingProperty = name;
            if (attrValue == null) {
                this.removeAttribute(attr);
            }
            else {
                this.setAttribute(attr, attrValue);
            }
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /** @internal */
    _$attributeToProperty(name, value) {
        var _a, _b, _c;
        const ctor = this.constructor;
        // Note, hint this as an `AttributeMap` so closure clearly understands
        // the type; it has issues with tracking types through statics
        const propName = ctor.__attributeToPropertyMap.get(name);
        // Use tracking info to avoid reflecting a property value to an attribute
        // if it was just set because the attribute changed.
        if (propName !== undefined && this.__reflectingProperty !== propName) {
            const options = ctor.getPropertyOptions(propName);
            const converter = options.converter;
            const fromAttribute = (_c = (_b = (_a = converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== null && _b !== void 0 ? _b : (typeof converter === 'function'
                ? converter
                : null)) !== null && _c !== void 0 ? _c : defaultConverter.fromAttribute;
            // mark state reflecting
            this.__reflectingProperty = propName;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this[propName] = fromAttribute(value, options.type);
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /**
     * Requests an update which is processed asynchronously. This should be called
     * when an element should update based on some state not triggered by setting
     * a reactive property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored.
     *
     * @param name name of requesting property
     * @param oldValue old value of requesting property
     * @param options property options to use instead of the previously
     *     configured options
     * @category updates
     */
    requestUpdate(name, oldValue, options) {
        let shouldRequestUpdate = true;
        // If we have a property key, perform property update steps.
        if (name !== undefined) {
            options =
                options ||
                    this.constructor.getPropertyOptions(name);
            const hasChanged = options.hasChanged || notEqual;
            if (hasChanged(this[name], oldValue)) {
                if (!this._$changedProperties.has(name)) {
                    this._$changedProperties.set(name, oldValue);
                }
                // Add to reflecting properties set.
                // Note, it's important that every change has a chance to add the
                // property to `_reflectingProperties`. This ensures setting
                // attribute + property reflects correctly.
                if (options.reflect === true && this.__reflectingProperty !== name) {
                    if (this.__reflectingProperties === undefined) {
                        this.__reflectingProperties = new Map();
                    }
                    this.__reflectingProperties.set(name, options);
                }
            }
            else {
                // Abort the request if the property should not be considered changed.
                shouldRequestUpdate = false;
            }
        }
        if (!this.isUpdatePending && shouldRequestUpdate) {
            this.__updatePromise = this.__enqueueUpdate();
        }
        // Note, since this no longer returns a promise, in dev mode we return a
        // thenable which warns if it's called.
        return DEV_MODE
            ? requestUpdateThenable(this.localName)
            : undefined;
    }
    /**
     * Sets up the element to asynchronously update.
     */
    async __enqueueUpdate() {
        this.isUpdatePending = true;
        try {
            // Ensure any previous update has resolved before updating.
            // This `await` also ensures that property changes are batched.
            await this.__updatePromise;
        }
        catch (e) {
            // Refire any previous errors async so they do not disrupt the update
            // cycle. Errors are refired so developers have a chance to observe
            // them, and this can be done by implementing
            // `window.onunhandledrejection`.
            Promise.reject(e);
        }
        const result = this.scheduleUpdate();
        // If `scheduleUpdate` returns a Promise, we await it. This is done to
        // enable coordinating updates with a scheduler. Note, the result is
        // checked to avoid delaying an additional microtask unless we need to.
        if (result != null) {
            await result;
        }
        return !this.isUpdatePending;
    }
    /**
     * Schedules an element update. You can override this method to change the
     * timing of updates by returning a Promise. The update will await the
     * returned Promise, and you should resolve the Promise to allow the update
     * to proceed. If this method is overridden, `super.scheduleUpdate()`
     * must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```ts
     * override protected async scheduleUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.scheduleUpdate();
     * }
     * ```
     * @category updates
     */
    scheduleUpdate() {
        return this.performUpdate();
    }
    /**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * Call `performUpdate()` to immediately process a pending update. This should
     * generally not be needed, but it can be done in rare cases when you need to
     * update synchronously.
     *
     * Note: To ensure `performUpdate()` synchronously completes a pending update,
     * it should not be overridden. In LitElement 2.x it was suggested to override
     * `performUpdate()` to also customizing update scheduling. Instead, you should now
     * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,
     * scheduling updates via `performUpdate()` continues to work, but will make
     * also calling `performUpdate()` to synchronously process updates difficult.
     *
     * @category updates
     */
    performUpdate() {
        var _a, _b;
        // Abort any update if one is not pending when this is called.
        // This can happen if `performUpdate` is called early to "flush"
        // the update.
        if (!this.isUpdatePending) {
            return;
        }
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({ kind: 'update' });
        // create renderRoot before first update.
        if (!this.hasUpdated) {
            // Produce warning if any class properties are shadowed by class fields
            if (DEV_MODE) {
                const shadowedProperties = [];
                (_a = this.constructor.__reactivePropertyKeys) === null || _a === void 0 ? void 0 : _a.forEach((p) => {
                    var _a;
                    if (this.hasOwnProperty(p) && !((_a = this.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {
                        shadowedProperties.push(p);
                    }
                });
                if (shadowedProperties.length) {
                    throw new Error(`The following properties on element ${this.localName} will not ` +
                        `trigger updates as expected because they are set using class ` +
                        `fields: ${shadowedProperties.join(', ')}. ` +
                        `Native class fields and some compiled output will overwrite ` +
                        `accessors used for detecting changes. See ` +
                        `https://lit.dev/msg/class-field-shadowing ` +
                        `for more information.`);
                }
            }
        }
        // Mixin instance properties once, if they exist.
        if (this.__instanceProperties) {
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.__instanceProperties.forEach((v, p) => (this[p] = v));
            this.__instanceProperties = undefined;
        }
        let shouldUpdate = false;
        const changedProperties = this._$changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.willUpdate(changedProperties);
                (_b = this.__controllers) === null || _b === void 0 ? void 0 : _b.forEach((c) => { var _a; return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c); });
                this.update(changedProperties);
            }
            else {
                this.__markUpdated();
            }
        }
        catch (e) {
            // Prevent `firstUpdated` and `updated` from running when there's an
            // update exception.
            shouldUpdate = false;
            // Ensure element can accept additional updates after an exception.
            this.__markUpdated();
            throw e;
        }
        // The update is no longer considered pending and further updates are now allowed.
        if (shouldUpdate) {
            this._$didUpdate(changedProperties);
        }
    }
    /**
     * Invoked before `update()` to compute values needed during the update.
     *
     * Implement `willUpdate` to compute property values that depend on other
     * properties and are used in the rest of the update process.
     *
     * ```ts
     * willUpdate(changedProperties) {
     *   // only need to check changed properties for an expensive computation.
     *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
     *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
     *   }
     * }
     *
     * render() {
     *   return html`SHA: ${this.sha}`;
     * }
     * ```
     *
     * @category updates
     */
    willUpdate(_changedProperties) { }
    // Note, this is an override point for polyfill-support.
    // @internal
    _$didUpdate(changedProperties) {
        var _a;
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c); });
        if (!this.hasUpdated) {
            this.hasUpdated = true;
            this.firstUpdated(changedProperties);
        }
        this.updated(changedProperties);
        if (DEV_MODE &&
            this.isUpdatePending &&
            this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {
            issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` +
                `(generally because a property was set) ` +
                `after an update completed, causing a new update to be scheduled. ` +
                `This is inefficient and should be avoided unless the next update ` +
                `can only be scheduled as a side effect of the previous update.`);
        }
    }
    __markUpdated() {
        this._$changedProperties = new Map();
        this.isUpdatePending = false;
    }
    /**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update.
     *
     * To await additional asynchronous work, override the `getUpdateComplete`
     * method. For example, it is sometimes useful to await a rendered element
     * before fulfilling this Promise. To do this, first await
     * `super.getUpdateComplete()`, then any subsequent state.
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */
    get updateComplete() {
        return this.getUpdateComplete();
    }
    /**
     * Override point for the `updateComplete` promise.
     *
     * It is not safe to override the `updateComplete` getter directly due to a
     * limitation in TypeScript which means it is not possible to call a
     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
     * This method should be overridden instead. For example:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   override async getUpdateComplete() {
     *     const result = await super.getUpdateComplete();
     *     await this._myChild.updateComplete;
     *     return result;
     *   }
     * }
     * ```
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */
    getUpdateComplete() {
        return this.__updatePromise;
    }
    /**
     * Controls whether or not `update()` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    shouldUpdate(_changedProperties) {
        return true;
    }
    /**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    update(_changedProperties) {
        if (this.__reflectingProperties !== undefined) {
            // Use forEach so this works even if for/of loops are compiled to for
            // loops expecting arrays
            this.__reflectingProperties.forEach((v, k) => this.__propertyToAttribute(k, this[k], v));
            this.__reflectingProperties = undefined;
        }
        this.__markUpdated();
    }
    /**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    updated(_changedProperties) { }
    /**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * ```ts
     * firstUpdated() {
     *   this.renderRoot.getElementById('my-text-area').focus();
     * }
     * ```
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    firstUpdated(_changedProperties) { }
}
_d = finalized;
/**
 * Marks class as having finished creating properties.
 */
ReactiveElement[_d] = true;
/**
 * Memoized list of all element properties, including any superclass properties.
 * Created lazily on user subclasses when finalizing the class.
 * @nocollapse
 * @category properties
 */
ReactiveElement.elementProperties = new Map();
/**
 * Memoized list of all element styles.
 * Created lazily on user subclasses when finalizing the class.
 * @nocollapse
 * @category styles
 */
ReactiveElement.elementStyles = [];
/**
 * Options used when calling `attachShadow`. Set this property to customize
 * the options for the shadowRoot; for example, to create a closed
 * shadowRoot: `{mode: 'closed'}`.
 *
 * Note, these options are used in `createRenderRoot`. If this method
 * is customized, options should be respected if possible.
 * @nocollapse
 * @category rendering
 */
ReactiveElement.shadowRootOptions = { mode: 'open' };
// Apply polyfills if available
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ ReactiveElement });
// Dev mode warnings...
if (DEV_MODE) {
    // Default warning set.
    ReactiveElement.enabledWarnings = ['change-in-update'];
    const ensureOwnWarnings = function (ctor) {
        if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {
            ctor.enabledWarnings = ctor.enabledWarnings.slice();
        }
    };
    ReactiveElement.enableWarning = function (warning) {
        ensureOwnWarnings(this);
        if (this.enabledWarnings.indexOf(warning) < 0) {
            this.enabledWarnings.push(warning);
        }
    };
    ReactiveElement.disableWarning = function (warning) {
        ensureOwnWarnings(this);
        const i = this.enabledWarnings.indexOf(warning);
        if (i >= 0) {
            this.enabledWarnings.splice(i, 1);
        }
    };
}
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for ReactiveElement usage.
((_c = globalThis.reactiveElementVersions) !== null && _c !== void 0 ? _c : (globalThis.reactiveElementVersions = [])).push('1.3.0');
if (DEV_MODE && globalThis.reactiveElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
        `is not recommended.`);
}
//# sourceMappingURL=reactive-element.js.map

/***/ }),

/***/ "./node_modules/lit-html/development/lit-html.js":
/*!*******************************************************!*\
  !*** ./node_modules/lit-html/development/lit-html.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "INTERNAL": () => (/* binding */ INTERNAL),
/* harmony export */   "_$LH": () => (/* binding */ _$LH),
/* harmony export */   "html": () => (/* binding */ html),
/* harmony export */   "noChange": () => (/* binding */ noChange),
/* harmony export */   "nothing": () => (/* binding */ nothing),
/* harmony export */   "render": () => (/* binding */ render),
/* harmony export */   "svg": () => (/* binding */ svg)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var _a, _b, _c, _d;

const DEV_MODE = true;
const ENABLE_EXTRA_SECURITY_HOOKS = true;
const ENABLE_SHADYDOM_NOPATCH = true;
/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */

const debugLogEvent = DEV_MODE ? event => {
  const shouldEmit = window.emitLitDebugLogEvents;

  if (shouldEmit) {
    window.dispatchEvent(new CustomEvent('lit-debug', {
      detail: event
    }));
  }
} : undefined; // Used for connecting beginRender and endRender events when there are nested
// renders when errors are thrown preventing an endRender event from being
// called.

let debugLogRenderId = 0;
/**
 * `true` if we're building for google3 with temporary back-compat helpers.
 * This export is not present in prod builds.
 * @internal
 */

const INTERNAL = true;
let issueWarning;

if (DEV_MODE) {
  (_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : globalThis.litIssuedWarnings = new Set(); // Issue a warning, if we haven't already.

  issueWarning = (code, warning) => {
    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : '';

    if (!globalThis.litIssuedWarnings.has(warning)) {
      console.warn(warning);
      globalThis.litIssuedWarnings.add(warning);
    }
  };

  issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
}

const wrap = ENABLE_SHADYDOM_NOPATCH && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) && ((_c = window.ShadyDOM) === null || _c === void 0 ? void 0 : _c.noPatch) === true ? window.ShadyDOM.wrap : node => node;
const trustedTypes = globalThis.trustedTypes;
/**
 * Our TrustedTypePolicy for HTML which is declared using the html template
 * tag function.
 *
 * That HTML is a developer-authored constant, and is parsed with innerHTML
 * before any untrusted expressions have been mixed in. Therefor it is
 * considered safe by construction.
 */

const policy = trustedTypes ? trustedTypes.createPolicy('lit-html', {
  createHTML: s => s
}) : undefined;

const identityFunction = value => value;

const noopSanitizer = (_node, _name, _type) => identityFunction;
/** Sets the global sanitizer factory. */


const setSanitizer = newSanitizer => {
  if (!ENABLE_EXTRA_SECURITY_HOOKS) {
    return;
  }

  if (sanitizerFactoryInternal !== noopSanitizer) {
    throw new Error(`Attempted to overwrite existing lit-html security policy.` + ` setSanitizeDOMValueFactory should be called at most once.`);
  }

  sanitizerFactoryInternal = newSanitizer;
};
/**
 * Only used in internal tests, not a part of the public API.
 */


const _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
  sanitizerFactoryInternal = noopSanitizer;
};

const createSanitizer = (node, name, type) => {
  return sanitizerFactoryInternal(node, name, type);
}; // Added to an attribute name to mark the attribute as bound so we can find
// it easily.


const boundAttributeSuffix = '$lit$'; // This marker is used in many syntactic positions in HTML, so it must be
// a valid element name and attribute name. We don't support dynamic names (yet)
// but this at least ensures that the parse tree is closer to the template
// intention.

const marker = `lit$${String(Math.random()).slice(9)}$`; // String used to tell if a comment is a marker comment

const markerMatch = '?' + marker; // Text used to insert a comment marker node. We use processing instruction
// syntax because it's slightly smaller, but parses as a comment node.

const nodeMarker = `<${markerMatch}>`;
const d = document; // Creates a dynamic marker. We never have to search for these in the DOM.

const createMarker = function () {
  let v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return d.createComment(v);
};

const isPrimitive = value => value === null || typeof value != 'object' && typeof value != 'function';

const isArray = Array.isArray;

const isIterable = value => {
  var _a;

  return isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
  typeof ((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]) === 'function';
};

const SPACE_CHAR = `[ \t\n\f\r]`;
const ATTR_VALUE_CHAR = `[^ \t\n\f\r"'\`<>=]`;
const NAME_CHAR = `[^\\s"'>=/]`; // These regexes represent the five parsing states that we care about in the
// Template's HTML scanner. They match the *end* of the state they're named
// after.
// Depending on the match, we transition to a new state. If there's no match,
// we stay in the same state.
// Note that the regexes are stateful. We utilize lastIndex and sync it
// across the multiple regexes used. In addition to the five regexes below
// we also dynamically create a regex to find the matching end tags for raw
// text elements.

/**
 * End of text is: `<` followed by:
 *   (comment start) or (tag) or (dynamic tag binding)
 */

const textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
const COMMENT_START = 1;
const TAG_NAME = 2;
const DYNAMIC_TAG_NAME = 3;
const commentEndRegex = /-->/g;
/**
 * Comments not started with <!--, like </{, can be ended by a single `>`
 */

const comment2EndRegex = />/g;
/**
 * The tagEnd regex matches the end of the "inside an opening" tag syntax
 * position. It either matches a `>`, an attribute-like sequence, or the end
 * of the string after a space (attribute-name position ending).
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \t\n\f\r" are HTML space characters:
 * https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * So an attribute is:
 *  * The name: any character except a whitespace character, ("), ('), ">",
 *    "=", or "/". Note: this is different from the HTML spec which also excludes control characters.
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */

const tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, 'g');
const ENTIRE_MATCH = 0;
const ATTRIBUTE_NAME = 1;
const SPACES_AND_EQUALS = 2;
const QUOTE_CHAR = 3;
const singleQuoteAttrEndRegex = /'/g;
const doubleQuoteAttrEndRegex = /"/g;
/**
 * Matches the raw text elements.
 *
 * Comments are not parsed within raw text elements, so we need to search their
 * text content for marker strings.
 */

const rawTextElement = /^(?:script|style|textarea|title)$/i;
/** TemplateResult types */

const HTML_RESULT = 1;
const SVG_RESULT = 2; // TemplatePart types
// IMPORTANT: these must match the values in PartType

const ATTRIBUTE_PART = 1;
const CHILD_PART = 2;
const PROPERTY_PART = 3;
const BOOLEAN_ATTRIBUTE_PART = 4;
const EVENT_PART = 5;
const ELEMENT_PART = 6;
const COMMENT_PART = 7;
/**
 * Generates a template literal tag function that returns a TemplateResult with
 * the given result type.
 */

const tag = type => function (strings) {
  // Warn against templates octal escape sequences
  // We do this here rather than in render so that the warning is closer to the
  // template definition.
  if (DEV_MODE && strings.some(s => s === undefined)) {
    console.warn('Some template strings are undefined.\n' + 'This is probably caused by illegal octal escape sequences.');
  }

  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  return {
    // This property needs to remain unminified.
    ['_$litType$']: type,
    strings,
    values
  };
};
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 *
 * ```ts
 * const header = (title: string) => html`<h1>${title}</h1>`;
 * ```
 *
 * The `html` tag returns a description of the DOM to render as a value. It is
 * lazy, meaning no work is done until the template is rendered. When rendering,
 * if a template comes from the same expression as a previously rendered result,
 * it's efficiently updated instead of replaced.
 */


const html = tag(HTML_RESULT);
/**
 * Interprets a template literal as an SVG fragment that can efficiently
 * render to and update a container.
 *
 * ```ts
 * const rect = svg`<rect width="10" height="10"></rect>`;
 *
 * const myImage = html`
 *   <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *     ${rect}
 *   </svg>`;
 * ```
 *
 * The `svg` *tag function* should only be used for SVG fragments, or elements
 * that would be contained **inside** an `<svg>` HTML element. A common error is
 * placing an `<svg>` *element* in a template tagged with the `svg` tag
 * function. The `<svg>` element is an HTML element and should be used within a
 * template tagged with the {@linkcode html} tag function.
 *
 * In LitElement usage, it's invalid to return an SVG fragment from the
 * `render()` method, as the SVG fragment will be contained within the element's
 * shadow root and thus cannot be used within an `<svg>` HTML element.
 */

const svg = tag(SVG_RESULT);
/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */

const noChange = Symbol.for('lit-noChange');
/**
 * A sentinel value that signals a ChildPart to fully clear its content.
 *
 * ```ts
 * const button = html`${
 *  user.isAdmin
 *    ? html`<button>DELETE</button>`
 *    : nothing
 * }`;
 * ```
 *
 * Prefer using `nothing` over other falsy values as it provides a consistent
 * behavior between various expression binding contexts.
 *
 * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the
 * same and render no nodes. In attribute expressions, `nothing` _removes_ the
 * attribute, while `undefined` and `null` will render an empty string. In
 * property expressions `nothing` becomes `undefined`.
 */

const nothing = Symbol.for('lit-nothing');
/**
 * The cache of prepared templates, keyed by the tagged TemplateStringsArray
 * and _not_ accounting for the specific template tag used. This means that
 * template tags cannot be dynamic - the must statically be one of html, svg,
 * or attr. This restriction simplifies the cache lookup, which is on the hot
 * path for rendering.
 */

const templateCache = new WeakMap();
/**
 * Renders a value, usually a lit-html TemplateResult, to the container.
 * @param value
 * @param container
 * @param options
 */

const render = (value, container, options) => {
  var _a, _b, _c;

  const renderId = DEV_MODE ? debugLogRenderId++ : 0;
  const partOwnerNode = (_a = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a !== void 0 ? _a : container; // This property needs to remain unminified.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  let part = partOwnerNode['_$litPart$'];
  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
    kind: 'begin render',
    id: renderId,
    value,
    container,
    options,
    part
  });

  if (part === undefined) {
    const endNode = (_b = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b !== void 0 ? _b : null; // Internal modification: don't clear container to match lit-html 2.0

    if (INTERNAL && ((_c = options) === null || _c === void 0 ? void 0 : _c.clearContainerForLit2MigrationOnly) === true) {
      let n = container.firstChild; // Clear only up to the `endNode` aka `renderBefore` node.

      while (n && n !== endNode) {
        const next = n.nextSibling;
        n.remove();
        n = next;
      }
    } // This property needs to remain unminified.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any


    partOwnerNode['_$litPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options !== null && options !== void 0 ? options : {});
  }

  part._$setValue(value);

  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
    kind: 'end render',
    id: renderId,
    value,
    container,
    options,
    part
  });
  return part;
};

if (ENABLE_EXTRA_SECURITY_HOOKS) {
  render.setSanitizer = setSanitizer;
  render.createSanitizer = createSanitizer;

  if (DEV_MODE) {
    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;
  }
}

const walker = d.createTreeWalker(d, 129
/* NodeFilter.SHOW_{ELEMENT|COMMENT} */
, null, false);
let sanitizerFactoryInternal = noopSanitizer;
/**
 * Returns an HTML string for the given TemplateStringsArray and result type
 * (HTML or SVG), along with the case-sensitive bound attribute names in
 * template order. The HTML contains comment comment markers denoting the
 * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.
 *
 * @param strings template strings array
 * @param type HTML or SVG
 * @return Array containing `[html, attrNames]` (array returned for terseness,
 *     to avoid object fields since this code is shared with non-minified SSR
 *     code)
 */

const getTemplateHtml = (strings, type) => {
  // Insert makers into the template HTML to represent the position of
  // bindings. The following code scans the template strings to determine the
  // syntactic position of the bindings. They can be in text position, where
  // we insert an HTML comment, attribute value position, where we insert a
  // sentinel string and re-write the attribute name, or inside a tag where
  // we insert the sentinel string.
  const l = strings.length - 1; // Stores the case-sensitive bound attribute names in the order of their
  // parts. ElementParts are also reflected in this array as undefined
  // rather than a string, to disambiguate from attribute bindings.

  const attrNames = [];
  let html = type === SVG_RESULT ? '<svg>' : ''; // When we're inside a raw text tag (not it's text content), the regex
  // will still be tagRegex so we can find attributes, but will switch to
  // this regex when the tag ends.

  let rawTextEndRegex; // The current parsing state, represented as a reference to one of the
  // regexes

  let regex = textEndRegex;

  for (let i = 0; i < l; i++) {
    const s = strings[i]; // The index of the end of the last attribute name. When this is
    // positive at end of a string, it means we're in an attribute value
    // position and need to rewrite the attribute name.
    // We also use a special value of -2 to indicate that we encountered
    // the end of a string in attribute name position.

    let attrNameEndIndex = -1;
    let attrName;
    let lastIndex = 0;
    let match; // The conditions in this loop handle the current parse state, and the
    // assignments to the `regex` variable are the state transitions.

    while (lastIndex < s.length) {
      // Make sure we start searching from where we previously left off
      regex.lastIndex = lastIndex;
      match = regex.exec(s);

      if (match === null) {
        break;
      }

      lastIndex = regex.lastIndex;

      if (regex === textEndRegex) {
        if (match[COMMENT_START] === '!--') {
          regex = commentEndRegex;
        } else if (match[COMMENT_START] !== undefined) {
          // We started a weird comment, like </{
          regex = comment2EndRegex;
        } else if (match[TAG_NAME] !== undefined) {
          if (rawTextElement.test(match[TAG_NAME])) {
            // Record if we encounter a raw-text element. We'll switch to
            // this regex at the end of the tag.
            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');
          }

          regex = tagEndRegex;
        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {
          if (DEV_MODE) {
            throw new Error('Bindings in tag names are not supported. Please use static templates instead. ' + 'See https://lit.dev/docs/templates/expressions/#static-expressions');
          }

          regex = tagEndRegex;
        }
      } else if (regex === tagEndRegex) {
        if (match[ENTIRE_MATCH] === '>') {
          // End of a tag. If we had started a raw-text element, use that
          // regex
          regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex; // We may be ending an unquoted attribute value, so make sure we
          // clear any pending attrNameEndIndex

          attrNameEndIndex = -1;
        } else if (match[ATTRIBUTE_NAME] === undefined) {
          // Attribute name position
          attrNameEndIndex = -2;
        } else {
          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
          attrName = match[ATTRIBUTE_NAME];
          regex = match[QUOTE_CHAR] === undefined ? tagEndRegex : match[QUOTE_CHAR] === '"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;
        }
      } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {
        regex = tagEndRegex;
      } else if (regex === commentEndRegex || regex === comment2EndRegex) {
        regex = textEndRegex;
      } else {
        // Not one of the five state regexes, so it must be the dynamically
        // created raw text regex and we're at the close of that element.
        regex = tagEndRegex;
        rawTextEndRegex = undefined;
      }
    }

    if (DEV_MODE) {
      // If we have a attrNameEndIndex, which indicates that we should
      // rewrite the attribute name, assert that we're in a valid attribute
      // position - either in a tag, or a quoted attribute value.
      console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');
    } // We have four cases:
    //  1. We're in text position, and not in a raw text element
    //     (regex === textEndRegex): insert a comment marker.
    //  2. We have a non-negative attrNameEndIndex which means we need to
    //     rewrite the attribute name to add a bound attribute suffix.
    //  3. We're at the non-first binding in a multi-binding attribute, use a
    //     plain marker.
    //  4. We're somewhere else inside the tag. If we're in attribute name
    //     position (attrNameEndIndex === -2), add a sequential suffix to
    //     generate a unique attribute name.
    // Detect a binding next to self-closing tag end and insert a space to
    // separate the marker from the tag end:


    const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';
    html += regex === textEndRegex ? s + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s.slice(0, attrNameEndIndex) + boundAttributeSuffix + s.slice(attrNameEndIndex)) + marker + end : s + marker + (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);
  }

  const htmlResult = html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : ''); // A security check to prevent spoofing of Lit template results.
  // In the future, we may be able to replace this with Array.isTemplateObject,
  // though we might need to make that check inside of the html and svg
  // functions, because precompiled templates don't come in as
  // TemplateStringArray objects.

  if (!Array.isArray(strings) || !strings.hasOwnProperty('raw')) {
    let message = 'invalid template strings array';

    if (DEV_MODE) {
      message = `Internal Error: expected template strings to be an array ` + `with a 'raw' field. Please file a bug at ` + `https://github.com/lit/lit/issues/new?template=bug_report.md ` + `and include information about your build tooling, if any.`;
    }

    throw new Error(message);
  } // Returned as an array for terseness


  return [policy !== undefined ? policy.createHTML(htmlResult) : htmlResult, attrNames];
};

class Template {
  constructor( // This property needs to remain unminified.
  _ref, options) {
    let {
      strings,
      ['_$litType$']: type
    } = _ref;

    /** @internal */
    this.parts = [];
    let node;
    let nodeIndex = 0;
    let attrNameIndex = 0;
    const partCount = strings.length - 1;
    const parts = this.parts; // Create template element

    const [html, attrNames] = getTemplateHtml(strings, type);
    this.el = Template.createElement(html, options);
    walker.currentNode = this.el.content; // Reparent SVG nodes into template root

    if (type === SVG_RESULT) {
      const content = this.el.content;
      const svgElement = content.firstChild;
      svgElement.remove();
      content.append(...svgElement.childNodes);
    } // Walk the template to find binding markers and create TemplateParts


    while ((node = walker.nextNode()) !== null && parts.length < partCount) {
      if (node.nodeType === 1) {
        if (DEV_MODE) {
          const tag = node.localName; // Warn if `textarea` includes an expression and throw if `template`
          // does since these are not supported. We do this by checking
          // innerHTML for anything that looks like a marker. This catches
          // cases like bindings in textarea there markers turn into text nodes.

          if (/^(?:textarea|template)$/i.test(tag) && node.innerHTML.includes(marker)) {
            const m = `Expressions are not supported inside \`${tag}\` ` + `elements. See https://lit.dev/msg/expression-in-${tag} for more ` + `information.`;

            if (tag === 'template') {
              throw new Error(m);
            } else issueWarning('', m);
          }
        } // TODO (justinfagnani): for attempted dynamic tag names, we don't
        // increment the bindingIndex, and it'll be off by 1 in the element
        // and off by two after it.


        if (node.hasAttributes()) {
          // We defer removing bound attributes because on IE we might not be
          // iterating attributes in their template order, and would sometimes
          // remove an attribute that we still need to create a part for.
          const attrsToRemove = [];

          for (const name of node.getAttributeNames()) {
            // `name` is the name of the attribute we're iterating over, but not
            // _neccessarily_ the name of the attribute we will create a part
            // for. They can be different in browsers that don't iterate on
            // attributes in source order. In that case the attrNames array
            // contains the attribute name we'll process next. We only need the
            // attribute name here to know if we should process a bound attribute
            // on this element.
            if (name.endsWith(boundAttributeSuffix) || name.startsWith(marker)) {
              const realName = attrNames[attrNameIndex++];
              attrsToRemove.push(name);

              if (realName !== undefined) {
                // Lowercase for case-sensitive SVG attributes like viewBox
                const value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);
                const statics = value.split(marker);
                const m = /([.?@])?(.*)/.exec(realName);
                parts.push({
                  type: ATTRIBUTE_PART,
                  index: nodeIndex,
                  name: m[2],
                  strings: statics,
                  ctor: m[1] === '.' ? PropertyPart : m[1] === '?' ? BooleanAttributePart : m[1] === '@' ? EventPart : AttributePart
                });
              } else {
                parts.push({
                  type: ELEMENT_PART,
                  index: nodeIndex
                });
              }
            }
          }

          for (const name of attrsToRemove) {
            node.removeAttribute(name);
          }
        } // TODO (justinfagnani): benchmark the regex against testing for each
        // of the 3 raw text element names.


        if (rawTextElement.test(node.tagName)) {
          // For raw text elements we need to split the text content on
          // markers, create a Text node for each segment, and create
          // a TemplatePart for each marker.
          const strings = node.textContent.split(marker);
          const lastIndex = strings.length - 1;

          if (lastIndex > 0) {
            node.textContent = trustedTypes ? trustedTypes.emptyScript : ''; // Generate a new text node for each literal section
            // These nodes are also used as the markers for node parts
            // We can't use empty text nodes as markers because they're
            // normalized when cloning in IE (could simplify when
            // IE is no longer supported)

            for (let i = 0; i < lastIndex; i++) {
              node.append(strings[i], createMarker()); // Walk past the marker node we just added

              walker.nextNode();
              parts.push({
                type: CHILD_PART,
                index: ++nodeIndex
              });
            } // Note because this marker is added after the walker's current
            // node, it will be walked to in the outer loop (and ignored), so
            // we don't need to adjust nodeIndex here


            node.append(strings[lastIndex], createMarker());
          }
        }
      } else if (node.nodeType === 8) {
        const data = node.data;

        if (data === markerMatch) {
          parts.push({
            type: CHILD_PART,
            index: nodeIndex
          });
        } else {
          let i = -1;

          while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
            // Comment node has a binding marker inside, make an inactive part
            // The binding won't work, but subsequent bindings will
            parts.push({
              type: COMMENT_PART,
              index: nodeIndex
            }); // Move to the end of the match

            i += marker.length - 1;
          }
        }
      }

      nodeIndex++;
    }

    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: 'template prep',
      template: this,
      clonableTemplate: this.el,
      parts: this.parts,
      strings
    });
  } // Overridden via `litHtmlPolyfillSupport` to provide platform support.

  /** @nocollapse */


  static createElement(html, _options) {
    const el = d.createElement('template');
    el.innerHTML = html;
    return el;
  }

}

function resolveDirective(part, value) {
  let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : part;
  let attributeIndex = arguments.length > 3 ? arguments[3] : undefined;

  var _a, _b, _c;

  var _d; // Bail early if the value is explicitly noChange. Note, this means any
  // nested directive is still attached and is not run.


  if (value === noChange) {
    return value;
  }

  let currentDirective = attributeIndex !== undefined ? (_a = parent.__directives) === null || _a === void 0 ? void 0 : _a[attributeIndex] : parent.__directive;
  const nextDirectiveConstructor = isPrimitive(value) ? undefined : // This property needs to remain unminified.
  value['_$litDirective$'];

  if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {
    // This property needs to remain unminified.
    (_b = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective['_$notifyDirectiveConnectionChanged']) === null || _b === void 0 ? void 0 : _b.call(currentDirective, false);

    if (nextDirectiveConstructor === undefined) {
      currentDirective = undefined;
    } else {
      currentDirective = new nextDirectiveConstructor(part);

      currentDirective._$initialize(part, parent, attributeIndex);
    }

    if (attributeIndex !== undefined) {
      ((_c = (_d = parent).__directives) !== null && _c !== void 0 ? _c : _d.__directives = [])[attributeIndex] = currentDirective;
    } else {
      parent.__directive = currentDirective;
    }
  }

  if (currentDirective !== undefined) {
    value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
  }

  return value;
}
/**
 * An updateable instance of a Template. Holds references to the Parts used to
 * update the template instance.
 */


class TemplateInstance {
  constructor(template, parent) {
    /** @internal */
    this._parts = [];
    /** @internal */

    this._$disconnectableChildren = undefined;
    this._$template = template;
    this._$parent = parent;
  } // Called by ChildPart parentNode getter


  get parentNode() {
    return this._$parent.parentNode;
  } // See comment in Disconnectable interface for why this is a getter


  get _$isConnected() {
    return this._$parent._$isConnected;
  } // This method is separate from the constructor because we need to return a
  // DocumentFragment and we don't want to hold onto it with an instance field.


  _clone(options) {
    var _a;

    const {
      el: {
        content
      },
      parts: parts
    } = this._$template;
    const fragment = ((_a = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a !== void 0 ? _a : d).importNode(content, true);
    walker.currentNode = fragment;
    let node = walker.nextNode();
    let nodeIndex = 0;
    let partIndex = 0;
    let templatePart = parts[0];

    while (templatePart !== undefined) {
      if (nodeIndex === templatePart.index) {
        let part;

        if (templatePart.type === CHILD_PART) {
          part = new ChildPart(node, node.nextSibling, this, options);
        } else if (templatePart.type === ATTRIBUTE_PART) {
          part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
        } else if (templatePart.type === ELEMENT_PART) {
          part = new ElementPart(node, this, options);
        }

        this._parts.push(part);

        templatePart = parts[++partIndex];
      }

      if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {
        node = walker.nextNode();
        nodeIndex++;
      }
    }

    return fragment;
  }

  _update(values) {
    let i = 0;

    for (const part of this._parts) {
      if (part !== undefined) {
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: 'set part',
          part,
          value: values[i],
          valueIndex: i,
          values,
          templateInstance: this
        });

        if (part.strings !== undefined) {
          part._$setValue(values, part, i); // The number of values the part consumes is part.strings.length - 1
          // since values are in between template spans. We increment i by 1
          // later in the loop, so increment it by part.strings.length - 2 here


          i += part.strings.length - 2;
        } else {
          part._$setValue(values[i]);
        }
      }

      i++;
    }
  }

}

class ChildPart {
  constructor(startNode, endNode, parent, options) {
    var _a;

    this.type = CHILD_PART;
    this._$committedValue = nothing; // The following fields will be patched onto ChildParts when required by
    // AsyncDirective

    /** @internal */

    this._$disconnectableChildren = undefined;
    this._$startNode = startNode;
    this._$endNode = endNode;
    this._$parent = parent;
    this.options = options; // Note __isConnected is only ever accessed on RootParts (i.e. when there is
    // no _$parent); the value on a non-root-part is "don't care", but checking
    // for parent would be more code

    this.__isConnected = (_a = options === null || options === void 0 ? void 0 : options.isConnected) !== null && _a !== void 0 ? _a : true;

    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      // Explicitly initialize for consistent class shape.
      this._textSanitizer = undefined;
    }
  } // See comment in Disconnectable interface for why this is a getter


  get _$isConnected() {
    var _a, _b; // ChildParts that are not at the root should always be created with a
    // parent; only RootChildNode's won't, so they return the local isConnected
    // state


    return (_b = (_a = this._$parent) === null || _a === void 0 ? void 0 : _a._$isConnected) !== null && _b !== void 0 ? _b : this.__isConnected;
  }
  /**
   * The parent node into which the part renders its content.
   *
   * A ChildPart's content consists of a range of adjacent child nodes of
   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
   * `.endNode`).
   *
   * - If both `.startNode` and `.endNode` are non-null, then the part's content
   * consists of all siblings between `.startNode` and `.endNode`, exclusively.
   *
   * - If `.startNode` is non-null but `.endNode` is null, then the part's
   * content consists of all siblings following `.startNode`, up to and
   * including the last child of `.parentNode`. If `.endNode` is non-null, then
   * `.startNode` will always be non-null.
   *
   * - If both `.endNode` and `.startNode` are null, then the part's content
   * consists of all child nodes of `.parentNode`.
   */


  get parentNode() {
    let parentNode = wrap(this._$startNode).parentNode;
    const parent = this._$parent;

    if (parent !== undefined && parentNode.nodeType === 11
    /* Node.DOCUMENT_FRAGMENT */
    ) {
      // If the parentNode is a DocumentFragment, it may be because the DOM is
      // still in the cloned fragment during initial render; if so, get the real
      // parentNode the part will be committed into by asking the parent.
      parentNode = parent.parentNode;
    }

    return parentNode;
  }
  /**
   * The part's leading marker node, if any. See `.parentNode` for more
   * information.
   */


  get startNode() {
    return this._$startNode;
  }
  /**
   * The part's trailing marker node, if any. See `.parentNode` for more
   * information.
   */


  get endNode() {
    return this._$endNode;
  }

  _$setValue(value) {
    let directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;

    if (DEV_MODE && this.parentNode === null) {
      throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
    }

    value = resolveDirective(this, value, directiveParent);

    if (isPrimitive(value)) {
      // Non-rendering child values. It's important that these do not render
      // empty text nodes to avoid issues with preventing default <slot>
      // fallback content.
      if (value === nothing || value == null || value === '') {
        if (this._$committedValue !== nothing) {
          debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: 'commit nothing to child',
            start: this._$startNode,
            end: this._$endNode,
            parent: this._$parent,
            options: this.options
          });

          this._$clear();
        }

        this._$committedValue = nothing;
      } else if (value !== this._$committedValue && value !== noChange) {
        this._commitText(value);
      } // This property needs to remain unminified.

    } else if (value['_$litType$'] !== undefined) {
      this._commitTemplateResult(value);
    } else if (value.nodeType !== undefined) {
      this._commitNode(value);
    } else if (isIterable(value)) {
      this._commitIterable(value);
    } else {
      // Fallback, will render the string representation
      this._commitText(value);
    }
  }

  _insert(node) {
    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._$endNode;
    return wrap(wrap(this._$startNode).parentNode).insertBefore(node, ref);
  }

  _commitNode(value) {
    var _a;

    if (this._$committedValue !== value) {
      this._$clear();

      if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {
        const parentNodeName = (_a = this._$startNode.parentNode) === null || _a === void 0 ? void 0 : _a.nodeName;

        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {
          let message = 'Forbidden';

          if (DEV_MODE) {
            if (parentNodeName === 'STYLE') {
              message = `Lit does not support binding inside style nodes. ` + `This is a security risk, as style injection attacks can ` + `exfiltrate data and spoof UIs. ` + `Consider instead using css\`...\` literals ` + `to compose styles, and make do dynamic styling with ` + `css custom properties, ::parts, <slot>s, ` + `and by mutating the DOM rather than stylesheets.`;
            } else {
              message = `Lit does not support binding inside script nodes. ` + `This is a security risk, as it could allow arbitrary ` + `code execution.`;
            }
          }

          throw new Error(message);
        }
      }

      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'commit node',
        start: this._$startNode,
        parent: this._$parent,
        value: value.cloneNode(true),
        options: this.options
      });
      this._$committedValue = this._insert(value);
    }
  }

  _commitText(value) {
    // If the committed value is a primitive it means we called _commitText on
    // the previous render, and we know that this._$startNode.nextSibling is a
    // Text node. We can now just replace the text content (.data) of the node.
    if (this._$committedValue !== nothing && isPrimitive(this._$committedValue)) {
      const node = wrap(this._$startNode).nextSibling;

      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._textSanitizer === undefined) {
          this._textSanitizer = createSanitizer(node, 'data', 'property');
        }

        value = this._textSanitizer(value);
      }

      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'commit text',
        node,
        value,
        options: this.options
      });
      node.data = value;
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        const textNode = document.createTextNode('');

        this._commitNode(textNode); // When setting text content, for security purposes it matters a lot
        // what the parent is. For example, <style> and <script> need to be
        // handled with care, while <span> does not. So first we need to put a
        // text node into the document, then we can sanitize its content.


        if (this._textSanitizer === undefined) {
          this._textSanitizer = createSanitizer(textNode, 'data', 'property');
        }

        value = this._textSanitizer(value);
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: 'commit text',
          node: textNode,
          value,
          options: this.options
        });
        textNode.data = value;
      } else {
        this._commitNode(d.createTextNode(value));

        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: 'commit text',
          node: wrap(this._$startNode).nextSibling,
          value,
          options: this.options
        });
      }
    }

    this._$committedValue = value;
  }

  _commitTemplateResult(result) {
    var _a; // This property needs to remain unminified.


    const {
      values,
      ['_$litType$']: type
    } = result; // If $litType$ is a number, result is a plain TemplateResult and we get
    // the template from the template cache. If not, result is a
    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need
    // to create the <template> element the first time we see it.

    const template = typeof type === 'number' ? this._$getTemplate(result) : (type.el === undefined && (type.el = Template.createElement(type.h, this.options)), type);

    if (((_a = this._$committedValue) === null || _a === void 0 ? void 0 : _a._$template) === template) {
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'template updating',
        template,
        instance: this._$committedValue,
        parts: this._$committedValue._parts,
        options: this.options,
        values
      });

      this._$committedValue._update(values);
    } else {
      const instance = new TemplateInstance(template, this);

      const fragment = instance._clone(this.options);

      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'template instantiated',
        template,
        instance,
        parts: instance._parts,
        options: this.options,
        fragment,
        values
      });

      instance._update(values);

      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'template instantiated and updated',
        template,
        instance,
        parts: instance._parts,
        options: this.options,
        fragment,
        values
      });

      this._commitNode(fragment);

      this._$committedValue = instance;
    }
  } // Overridden via `litHtmlPolyfillSupport` to provide platform support.

  /** @internal */


  _$getTemplate(result) {
    let template = templateCache.get(result.strings);

    if (template === undefined) {
      templateCache.set(result.strings, template = new Template(result));
    }

    return template;
  }

  _commitIterable(value) {
    // For an Iterable, we create a new InstancePart per item, then set its
    // value to the item. This is a little bit of overhead for every item in
    // an Iterable, but it lets us recurse easily and efficiently update Arrays
    // of TemplateResults that will be commonly returned from expressions like:
    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
    // If value is an array, then the previous render was of an
    // iterable and value will contain the ChildParts from the previous
    // render. If value is not an array, clear this part and make a new
    // array for ChildParts.
    if (!isArray(this._$committedValue)) {
      this._$committedValue = [];

      this._$clear();
    } // Lets us keep track of how many items we stamped so we can clear leftover
    // items from a previous render


    const itemParts = this._$committedValue;
    let partIndex = 0;
    let itemPart;

    for (const item of value) {
      if (partIndex === itemParts.length) {
        // If no existing part, create a new one
        // TODO (justinfagnani): test perf impact of always creating two parts
        // instead of sharing parts between nodes
        // https://github.com/lit/lit/issues/1266
        itemParts.push(itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));
      } else {
        // Reuse an existing part
        itemPart = itemParts[partIndex];
      }

      itemPart._$setValue(item);

      partIndex++;
    }

    if (partIndex < itemParts.length) {
      // itemParts always have end nodes
      this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex); // Truncate the parts array so _value reflects the current state


      itemParts.length = partIndex;
    }
  }
  /**
   * Removes the nodes contained within this Part from the DOM.
   *
   * @param start Start node to clear from, for clearing a subset of the part's
   *     DOM (used when truncating iterables)
   * @param from  When `start` is specified, the index within the iterable from
   *     which ChildParts are being removed, used for disconnecting directives in
   *     those Parts.
   *
   * @internal
   */


  _$clear() {
    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : wrap(this._$startNode).nextSibling;
    let from = arguments.length > 1 ? arguments[1] : undefined;

    var _a;

    (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, false, true, from);

    while (start && start !== this._$endNode) {
      const n = wrap(start).nextSibling;
      wrap(start).remove();
      start = n;
    }
  }
  /**
   * Implementation of RootPart's `isConnected`. Note that this metod
   * should only be called on `RootPart`s (the `ChildPart` returned from a
   * top-level `render()` call). It has no effect on non-root ChildParts.
   * @param isConnected Whether to set
   * @internal
   */


  setConnected(isConnected) {
    var _a;

    if (this._$parent === undefined) {
      this.__isConnected = isConnected;
      (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, isConnected);
    } else if (DEV_MODE) {
      throw new Error('part.setConnected() may only be called on a ' + 'RootPart returned from render().');
    }
  }

}

class AttributePart {
  constructor(element, name, strings, parent, options) {
    this.type = ATTRIBUTE_PART;
    /** @internal */

    this._$committedValue = nothing;
    /** @internal */

    this._$disconnectableChildren = undefined;
    this.element = element;
    this.name = name;
    this._$parent = parent;
    this.options = options;

    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {
      this._$committedValue = new Array(strings.length - 1).fill(new String());
      this.strings = strings;
    } else {
      this._$committedValue = nothing;
    }

    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._sanitizer = undefined;
    }
  }

  get tagName() {
    return this.element.tagName;
  } // See comment in Disconnectable interface for why this is a getter


  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  /**
   * Sets the value of this part by resolving the value from possibly multiple
   * values and static strings and committing it to the DOM.
   * If this part is single-valued, `this._strings` will be undefined, and the
   * method will be called with a single value argument. If this part is
   * multi-value, `this._strings` will be defined, and the method is called
   * with the value array of the part's owning TemplateInstance, and an offset
   * into the value array from which the values should be read.
   * This method is overloaded this way to eliminate short-lived array slices
   * of the template instance values, and allow a fast-path for single-valued
   * parts.
   *
   * @param value The part value, or an array of values for multi-valued parts
   * @param valueIndex the index to start reading values from. `undefined` for
   *   single-valued parts
   * @param noCommit causes the part to not commit its value to the DOM. Used
   *   in hydration to prime attribute parts with their first-rendered value,
   *   but not set the attribute, and in SSR to no-op the DOM operation and
   *   capture the value for serialization.
   *
   * @internal
   */


  _$setValue(value) {
    let directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
    let valueIndex = arguments.length > 2 ? arguments[2] : undefined;
    let noCommit = arguments.length > 3 ? arguments[3] : undefined;
    const strings = this.strings; // Whether any of the values has changed, for dirty-checking

    let change = false;

    if (strings === undefined) {
      // Single-value binding case
      value = resolveDirective(this, value, directiveParent, 0);
      change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;

      if (change) {
        this._$committedValue = value;
      }
    } else {
      // Interpolation case
      const values = value;
      value = strings[0];
      let i, v;

      for (i = 0; i < strings.length - 1; i++) {
        v = resolveDirective(this, values[valueIndex + i], directiveParent, i);

        if (v === noChange) {
          // If the user-provided value is `noChange`, use the previous value
          v = this._$committedValue[i];
        }

        change || (change = !isPrimitive(v) || v !== this._$committedValue[i]);

        if (v === nothing) {
          value = nothing;
        } else if (value !== nothing) {
          value += (v !== null && v !== void 0 ? v : '') + strings[i + 1];
        } // We always record each value, even if one is `nothing`, for future
        // change detection.


        this._$committedValue[i] = v;
      }
    }

    if (change && !noCommit) {
      this._commitValue(value);
    }
  }
  /** @internal */


  _commitValue(value) {
    if (value === nothing) {
      wrap(this.element).removeAttribute(this.name);
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._sanitizer === undefined) {
          this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');
        }

        value = this._sanitizer(value !== null && value !== void 0 ? value : '');
      }

      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'commit attribute',
        element: this.element,
        name: this.name,
        value,
        options: this.options
      });
      wrap(this.element).setAttribute(this.name, value !== null && value !== void 0 ? value : '');
    }
  }

}

class PropertyPart extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = PROPERTY_PART;
  }
  /** @internal */


  _commitValue(value) {
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      if (this._sanitizer === undefined) {
        this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');
      }

      value = this._sanitizer(value);
    }

    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: 'commit property',
      element: this.element,
      name: this.name,
      value,
      options: this.options
    }); // eslint-disable-next-line @typescript-eslint/no-explicit-any

    this.element[this.name] = value === nothing ? undefined : value;
  }

} // Temporary workaround for https://crbug.com/993268
// Currently, any attribute starting with "on" is considered to be a
// TrustedScript source. Such boolean attributes must be set to the equivalent
// trusted emptyScript value.


const emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : '';

class BooleanAttributePart extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = BOOLEAN_ATTRIBUTE_PART;
  }
  /** @internal */


  _commitValue(value) {
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: 'commit boolean attribute',
      element: this.element,
      name: this.name,
      value: !!(value && value !== nothing),
      options: this.options
    });

    if (value && value !== nothing) {
      wrap(this.element).setAttribute(this.name, emptyStringForBooleanAttribute);
    } else {
      wrap(this.element).removeAttribute(this.name);
    }
  }

}

class EventPart extends AttributePart {
  constructor(element, name, strings, parent, options) {
    super(element, name, strings, parent, options);
    this.type = EVENT_PART;

    if (DEV_MODE && this.strings !== undefined) {
      throw new Error(`A \`<${element.localName}>\` has a \`@${name}=...\` listener with ` + 'invalid content. Event listeners in templates must have exactly ' + 'one expression and no surrounding text.');
    }
  } // EventPart does not use the base _$setValue/_resolveValue implementation
  // since the dirty checking is more complex

  /** @internal */


  _$setValue(newListener) {
    let directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;

    var _a;

    newListener = (_a = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a !== void 0 ? _a : nothing;

    if (newListener === noChange) {
      return;
    }

    const oldListener = this._$committedValue; // If the new value is nothing or any options change we have to remove the
    // part as a listener.

    const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive; // If the new value is not nothing and we removed the listener, we have
    // to add the part as a listener.

    const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: 'commit event listener',
      element: this.element,
      name: this.name,
      value: newListener,
      options: this.options,
      removeListener: shouldRemoveListener,
      addListener: shouldAddListener,
      oldListener
    });

    if (shouldRemoveListener) {
      this.element.removeEventListener(this.name, this, oldListener);
    }

    if (shouldAddListener) {
      // Beware: IE11 and Chrome 41 don't like using the listener as the
      // options object. Figure out how to deal w/ this in IE11 - maybe
      // patch addEventListener?
      this.element.addEventListener(this.name, this, newListener);
    }

    this._$committedValue = newListener;
  }

  handleEvent(event) {
    var _a, _b;

    if (typeof this._$committedValue === 'function') {
      this._$committedValue.call((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : this.element, event);
    } else {
      this._$committedValue.handleEvent(event);
    }
  }

}

class ElementPart {
  constructor(element, parent, options) {
    this.element = element;
    this.type = ELEMENT_PART;
    /** @internal */

    this._$disconnectableChildren = undefined;
    this._$parent = parent;
    this.options = options;
  } // See comment in Disconnectable interface for why this is a getter


  get _$isConnected() {
    return this._$parent._$isConnected;
  }

  _$setValue(value) {
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: 'commit to element binding',
      element: this.element,
      value,
      options: this.options
    });
    resolveDirective(this, value);
  }

}
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * Private exports for use by other Lit packages, not intended for use by
 * external users.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports  mangled in the
 * client side code, we export a _$LH object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * This has a unique name, to disambiguate it from private exports in
 * lit-element, which re-exports all of lit-html.
 *
 * @private
 */


const _$LH = {
  // Used in lit-ssr
  _boundAttributeSuffix: boundAttributeSuffix,
  _marker: marker,
  _markerMatch: markerMatch,
  _HTML_RESULT: HTML_RESULT,
  _getTemplateHtml: getTemplateHtml,
  // Used in hydrate
  _TemplateInstance: TemplateInstance,
  _isIterable: isIterable,
  _resolveDirective: resolveDirective,
  // Used in tests and private-ssr-support
  _ChildPart: ChildPart,
  _AttributePart: AttributePart,
  _BooleanAttributePart: BooleanAttributePart,
  _EventPart: EventPart,
  _PropertyPart: PropertyPart,
  _ElementPart: ElementPart
}; // Apply polyfills if available

const polyfillSupport = DEV_MODE ? window.litHtmlPolyfillSupportDevMode : window.litHtmlPolyfillSupport;
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport(Template, ChildPart); // IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.

((_d = globalThis.litHtmlVersions) !== null && _d !== void 0 ? _d : globalThis.litHtmlVersions = []).push('2.2.0');

if (DEV_MODE && globalThis.litHtmlVersions.length > 1) {
  issueWarning('multiple-versions', `Multiple versions of Lit loaded. ` + `Loading multiple versions is not recommended.`);
}

/***/ }),

/***/ "./node_modules/lit-element/development/lit-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/lit-element/development/lit-element.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSResult": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.CSSResult),
/* harmony export */   "INTERNAL": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.INTERNAL),
/* harmony export */   "LitElement": () => (/* binding */ LitElement),
/* harmony export */   "ReactiveElement": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement),
/* harmony export */   "UpdatingElement": () => (/* binding */ UpdatingElement),
/* harmony export */   "_$LE": () => (/* binding */ _$LE),
/* harmony export */   "_$LH": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__._$LH),
/* harmony export */   "adoptStyles": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),
/* harmony export */   "css": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.css),
/* harmony export */   "defaultConverter": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.defaultConverter),
/* harmony export */   "getCompatibleStyle": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),
/* harmony export */   "html": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.html),
/* harmony export */   "noChange": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange),
/* harmony export */   "notEqual": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.notEqual),
/* harmony export */   "nothing": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.nothing),
/* harmony export */   "render": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.render),
/* harmony export */   "supportsAdoptingStyleSheets": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),
/* harmony export */   "svg": () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.svg),
/* harmony export */   "unsafeCSS": () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ "./node_modules/@lit/reactive-element/development/reactive-element.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ "./node_modules/lit-html/development/lit-html.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var _a, _b, _c;
/**
 * The main LitElement module, which defines the {@linkcode LitElement} base
 * class and related APIs.
 *
 *  LitElement components can define a template and a set of observed
 * properties. Changing an observed property triggers a re-render of the
 * element.
 *
 *  Import {@linkcode LitElement} and {@linkcode html} from this module to
 * create a component:
 *
 *  ```js
 * import {LitElement, html} from 'lit-element';
 *
 * class MyElement extends LitElement {
 *
 *   // Declare observed properties
 *   static get properties() {
 *     return {
 *       adjective: {}
 *     }
 *   }
 *
 *   constructor() {
 *     this.adjective = 'awesome';
 *   }
 *
 *   // Define the element's template
 *   render() {
 *     return html`<p>your ${adjective} template here</p>`;
 *   }
 * }
 *
 * customElements.define('my-element', MyElement);
 * ```
 *
 * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html
 * templating. The `ReactiveElement` class is provided for users that want to
 * build their own custom element base classes that don't use lit-html.
 *
 * @packageDocumentation
 */




// For backwards compatibility export ReactiveElement as UpdatingElement. Note,
// IE transpilation requires exporting like this.
const UpdatingElement = _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement;
const DEV_MODE = true;
let issueWarning;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = ((_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : (globalThis.litIssuedWarnings = new Set()));
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
}
/**
 * Base element class that manages element properties and attributes, and
 * renders a lit-html template.
 *
 * To define a component, subclass `LitElement` and implement a
 * `render` method to provide the component's template. Define properties
 * using the {@linkcode LitElement.properties properties} property or the
 * {@linkcode property} decorator.
 */
class LitElement extends _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement {
    constructor() {
        super(...arguments);
        /**
         * @category rendering
         */
        this.renderOptions = { host: this };
        this.__childPart = undefined;
    }
    /**
     * @category rendering
     */
    createRenderRoot() {
        var _a;
        var _b;
        const renderRoot = super.createRenderRoot();
        // When adoptedStyleSheets are shimmed, they are inserted into the
        // shadowRoot by createRenderRoot. Adjust the renderBefore node so that
        // any styles in Lit content render before adoptedStyleSheets. This is
        // important so that adoptedStyleSheets have precedence over styles in
        // the shadowRoot.
        (_a = (_b = this.renderOptions).renderBefore) !== null && _a !== void 0 ? _a : (_b.renderBefore = renderRoot.firstChild);
        return renderRoot;
    }
    /**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * @param changedProperties Map of changed properties with old values
     * @category updates
     */
    update(changedProperties) {
        // Setting properties in `render` should not trigger an update. Since
        // updates are allowed after super.update, it's important to call `render`
        // before that.
        const value = this.render();
        if (!this.hasUpdated) {
            this.renderOptions.isConnected = this.isConnected;
        }
        super.update(changedProperties);
        this.__childPart = (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.render)(value, this.renderRoot, this.renderOptions);
    }
    /**
     * Invoked when the component is added to the document's DOM.
     *
     * In `connectedCallback()` you should setup tasks that should only occur when
     * the element is connected to the document. The most common of these is
     * adding event listeners to nodes external to the element, like a keydown
     * event handler added to the window.
     *
     * ```ts
     * connectedCallback() {
     *   super.connectedCallback();
     *   addEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * Typically, anything done in `connectedCallback()` should be undone when the
     * element is disconnected, in `disconnectedCallback()`.
     *
     * @category lifecycle
     */
    connectedCallback() {
        var _a;
        super.connectedCallback();
        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(true);
    }
    /**
     * Invoked when the component is removed from the document's DOM.
     *
     * This callback is the main signal to the element that it may no longer be
     * used. `disconnectedCallback()` should ensure that nothing is holding a
     * reference to the element (such as event listeners added to nodes external
     * to the element), so that it is free to be garbage collected.
     *
     * ```ts
     * disconnectedCallback() {
     *   super.disconnectedCallback();
     *   window.removeEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * An element may be re-connected after being disconnected.
     *
     * @category lifecycle
     */
    disconnectedCallback() {
        var _a;
        super.disconnectedCallback();
        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(false);
    }
    /**
     * Invoked on each update to perform rendering tasks. This method may return
     * any value renderable by lit-html's `ChildPart` - typically a
     * `TemplateResult`. Setting properties inside this method will *not* trigger
     * the element to update.
     * @category rendering
     */
    render() {
        return lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange;
    }
}
/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 *
 * Note this property name is a string to prevent breaking Closure JS Compiler
 * optimizations. See @lit/reactive-element for more information.
 */
LitElement['finalized'] = true;
// This property needs to remain unminified.
LitElement['_$litElement$'] = true;
// Install hydration if available
(_b = globalThis.litElementHydrateSupport) === null || _b === void 0 ? void 0 : _b.call(globalThis, { LitElement });
// Apply polyfills if available
const polyfillSupport = DEV_MODE
    ? globalThis.litElementPolyfillSupportDevMode
    : globalThis.litElementPolyfillSupport;
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ LitElement });
// DEV mode warnings
if (DEV_MODE) {
    /* eslint-disable @typescript-eslint/no-explicit-any */
    // Note, for compatibility with closure compilation, this access
    // needs to be as a string property index.
    LitElement['finalize'] = function () {
        const finalized = _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement.finalize.call(this);
        if (!finalized) {
            return false;
        }
        const warnRemovedOrRenamed = (obj, name, renamed = false) => {
            if (obj.hasOwnProperty(name)) {
                const ctorName = (typeof obj === 'function' ? obj : obj.constructor)
                    .name;
                issueWarning(renamed ? 'renamed-api' : 'removed-api', `\`${name}\` is implemented on class ${ctorName}. It ` +
                    `has been ${renamed ? 'renamed' : 'removed'} ` +
                    `in this version of LitElement.`);
            }
        };
        warnRemovedOrRenamed(this, 'render');
        warnRemovedOrRenamed(this, 'getStyles', true);
        warnRemovedOrRenamed(this.prototype, 'adoptStyles');
        return true;
    };
    /* eslint-enable @typescript-eslint/no-explicit-any */
}
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * Private exports for use by other Lit packages, not intended for use by
 * external users.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports  mangled in the
 * client side code, we export a _$LE object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * This has a unique name, to disambiguate it from private exports in
 * lit-html, since this module re-exports all of lit-html.
 *
 * @private
 */
const _$LE = {
    _$attributeToProperty: (el, name, value) => {
        // eslint-disable-next-line
        el._$attributeToProperty(name, value);
    },
    // eslint-disable-next-line
    _$changedProperties: (el) => el._$changedProperties,
};
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
((_c = globalThis.litElementVersions) !== null && _c !== void 0 ? _c : (globalThis.litElementVersions = [])).push('3.2.0');
if (DEV_MODE && globalThis.litElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
        `is not recommended.`);
}
//# sourceMappingURL=lit-element.js.map

/***/ }),

/***/ "./node_modules/lit/index.js":
/*!***********************************!*\
  !*** ./node_modules/lit/index.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSResult": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.CSSResult),
/* harmony export */   "INTERNAL": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.INTERNAL),
/* harmony export */   "LitElement": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.LitElement),
/* harmony export */   "ReactiveElement": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.ReactiveElement),
/* harmony export */   "UpdatingElement": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.UpdatingElement),
/* harmony export */   "_$LE": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LE),
/* harmony export */   "_$LH": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LH),
/* harmony export */   "adoptStyles": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.adoptStyles),
/* harmony export */   "css": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.css),
/* harmony export */   "defaultConverter": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.defaultConverter),
/* harmony export */   "getCompatibleStyle": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.getCompatibleStyle),
/* harmony export */   "html": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.html),
/* harmony export */   "noChange": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.noChange),
/* harmony export */   "notEqual": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.notEqual),
/* harmony export */   "nothing": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.nothing),
/* harmony export */   "render": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.render),
/* harmony export */   "supportsAdoptingStyleSheets": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.supportsAdoptingStyleSheets),
/* harmony export */   "svg": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.svg),
/* harmony export */   "unsafeCSS": () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ "./node_modules/@lit/reactive-element/development/reactive-element.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ "./node_modules/lit-html/development/lit-html.js");
/* harmony import */ var lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit-element/lit-element.js */ "./node_modules/lit-element/development/lit-element.js");

//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/lodash-es/_DataView.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_DataView.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var DataView = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'DataView');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataView);


/***/ }),

/***/ "./node_modules/lodash-es/_Hash.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_Hash.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _hashClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_hashClear.js */ "./node_modules/lodash-es/_hashClear.js");
/* harmony import */ var _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_hashDelete.js */ "./node_modules/lodash-es/_hashDelete.js");
/* harmony import */ var _hashGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_hashGet.js */ "./node_modules/lodash-es/_hashGet.js");
/* harmony import */ var _hashHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_hashHas.js */ "./node_modules/lodash-es/_hashHas.js");
/* harmony import */ var _hashSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_hashSet.js */ "./node_modules/lodash-es/_hashSet.js");






/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];
Hash.prototype['delete'] = _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];
Hash.prototype.get = _hashGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];
Hash.prototype.has = _hashHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];
Hash.prototype.set = _hashSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Hash);


/***/ }),

/***/ "./node_modules/lodash-es/_ListCache.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_ListCache.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_listCacheClear.js */ "./node_modules/lodash-es/_listCacheClear.js");
/* harmony import */ var _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_listCacheDelete.js */ "./node_modules/lodash-es/_listCacheDelete.js");
/* harmony import */ var _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_listCacheGet.js */ "./node_modules/lodash-es/_listCacheGet.js");
/* harmony import */ var _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_listCacheHas.js */ "./node_modules/lodash-es/_listCacheHas.js");
/* harmony import */ var _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_listCacheSet.js */ "./node_modules/lodash-es/_listCacheSet.js");






/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];
ListCache.prototype['delete'] = _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];
ListCache.prototype.get = _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];
ListCache.prototype.has = _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];
ListCache.prototype.set = _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ListCache);


/***/ }),

/***/ "./node_modules/lodash-es/_Map.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/_Map.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var Map = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'Map');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Map);


/***/ }),

/***/ "./node_modules/lodash-es/_MapCache.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_MapCache.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_mapCacheClear.js */ "./node_modules/lodash-es/_mapCacheClear.js");
/* harmony import */ var _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_mapCacheDelete.js */ "./node_modules/lodash-es/_mapCacheDelete.js");
/* harmony import */ var _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_mapCacheGet.js */ "./node_modules/lodash-es/_mapCacheGet.js");
/* harmony import */ var _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mapCacheHas.js */ "./node_modules/lodash-es/_mapCacheHas.js");
/* harmony import */ var _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_mapCacheSet.js */ "./node_modules/lodash-es/_mapCacheSet.js");






/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];
MapCache.prototype['delete'] = _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];
MapCache.prototype.get = _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];
MapCache.prototype.has = _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];
MapCache.prototype.set = _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapCache);


/***/ }),

/***/ "./node_modules/lodash-es/_Promise.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_Promise.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var Promise = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'Promise');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Promise);


/***/ }),

/***/ "./node_modules/lodash-es/_Set.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/_Set.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var Set = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'Set');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Set);


/***/ }),

/***/ "./node_modules/lodash-es/_SetCache.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_SetCache.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_MapCache.js */ "./node_modules/lodash-es/_MapCache.js");
/* harmony import */ var _setCacheAdd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setCacheAdd.js */ "./node_modules/lodash-es/_setCacheAdd.js");
/* harmony import */ var _setCacheHas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setCacheHas.js */ "./node_modules/lodash-es/_setCacheHas.js");




/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new _MapCache_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd_js__WEBPACK_IMPORTED_MODULE_1__["default"];
SetCache.prototype.has = _setCacheHas_js__WEBPACK_IMPORTED_MODULE_2__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SetCache);


/***/ }),

/***/ "./node_modules/lodash-es/_Stack.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_Stack.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");
/* harmony import */ var _stackClear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_stackClear.js */ "./node_modules/lodash-es/_stackClear.js");
/* harmony import */ var _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_stackDelete.js */ "./node_modules/lodash-es/_stackDelete.js");
/* harmony import */ var _stackGet_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_stackGet.js */ "./node_modules/lodash-es/_stackGet.js");
/* harmony import */ var _stackHas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_stackHas.js */ "./node_modules/lodash-es/_stackHas.js");
/* harmony import */ var _stackSet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_stackSet.js */ "./node_modules/lodash-es/_stackSet.js");







/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"](entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = _stackClear_js__WEBPACK_IMPORTED_MODULE_1__["default"];
Stack.prototype['delete'] = _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__["default"];
Stack.prototype.get = _stackGet_js__WEBPACK_IMPORTED_MODULE_3__["default"];
Stack.prototype.has = _stackHas_js__WEBPACK_IMPORTED_MODULE_4__["default"];
Stack.prototype.set = _stackSet_js__WEBPACK_IMPORTED_MODULE_5__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Stack);


/***/ }),

/***/ "./node_modules/lodash-es/_Symbol.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_Symbol.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/** Built-in value references. */
var Symbol = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Symbol;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Symbol);


/***/ }),

/***/ "./node_modules/lodash-es/_Uint8Array.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_Uint8Array.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/** Built-in value references. */
var Uint8Array = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Uint8Array;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Uint8Array);


/***/ }),

/***/ "./node_modules/lodash-es/_WeakMap.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_WeakMap.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var WeakMap = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'WeakMap');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WeakMap);


/***/ }),

/***/ "./node_modules/lodash-es/_apply.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_apply.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (apply);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayAggregator.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_arrayAggregator.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayAggregator);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayEach.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_arrayEach.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayEach);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayEvery.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_arrayEvery.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayEvery);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayFilter.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_arrayFilter.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayFilter);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayIncludes.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_arrayIncludes.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIndexOf.js */ "./node_modules/lodash-es/_baseIndexOf.js");


/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && (0,_baseIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(array, value, 0) > -1;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayIncludes);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayIncludesWith.js":
/*!******************************************************!*\
  !*** ./node_modules/lodash-es/_arrayIncludesWith.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayIncludesWith);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayLikeKeys.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_arrayLikeKeys.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseTimes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_baseTimes.js */ "./node_modules/lodash-es/_baseTimes.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js");
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");







/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value),
      isArg = !isArr && (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value),
      isBuff = !isArr && !isArg && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value),
      isType = !isArr && !isArg && !isBuff && (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? (0,_baseTimes_js__WEBPACK_IMPORTED_MODULE_4__["default"])(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           (0,_isIndex_js__WEBPACK_IMPORTED_MODULE_5__["default"])(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayLikeKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayMap.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_arrayMap.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayMap);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayPush.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_arrayPush.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayPush);


/***/ }),

/***/ "./node_modules/lodash-es/_arraySome.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_arraySome.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arraySome);


/***/ }),

/***/ "./node_modules/lodash-es/_assignMergeValue.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_assignMergeValue.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");



/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !(0,_eq_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object[key], value)) ||
      (value === undefined && !(key in object))) {
    (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, value);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assignMergeValue);


/***/ }),

/***/ "./node_modules/lodash-es/_assignValue.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_assignValue.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && (0,_eq_js__WEBPACK_IMPORTED_MODULE_0__["default"])(objValue, value)) ||
      (value === undefined && !(key in object))) {
    (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, value);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assignValue);


/***/ }),

/***/ "./node_modules/lodash-es/_assocIndexOf.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_assocIndexOf.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");


/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if ((0,_eq_js__WEBPACK_IMPORTED_MODULE_0__["default"])(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assocIndexOf);


/***/ }),

/***/ "./node_modules/lodash-es/_baseAggregator.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_baseAggregator.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseEach_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseEach.js */ "./node_modules/lodash-es/_baseEach.js");


/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  (0,_baseEach_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection, function(value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseAggregator);


/***/ }),

/***/ "./node_modules/lodash-es/_baseAssign.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseAssign.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ "./node_modules/lodash-es/keys.js");



/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, (0,_keys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(source), object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseAssign);


/***/ }),

/***/ "./node_modules/lodash-es/_baseAssignIn.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseAssignIn.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");



/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, (0,_keysIn_js__WEBPACK_IMPORTED_MODULE_1__["default"])(source), object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseAssignIn);


/***/ }),

/***/ "./node_modules/lodash-es/_baseAssignValue.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseAssignValue.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_defineProperty.js */ "./node_modules/lodash-es/_defineProperty.js");


/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    (0,_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseAssignValue);


/***/ }),

/***/ "./node_modules/lodash-es/_baseClone.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseClone.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./_Stack.js */ "./node_modules/lodash-es/_Stack.js");
/* harmony import */ var _arrayEach_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./_arrayEach.js */ "./node_modules/lodash-es/_arrayEach.js");
/* harmony import */ var _assignValue_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./_assignValue.js */ "./node_modules/lodash-es/_assignValue.js");
/* harmony import */ var _baseAssign_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./_baseAssign.js */ "./node_modules/lodash-es/_baseAssign.js");
/* harmony import */ var _baseAssignIn_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./_baseAssignIn.js */ "./node_modules/lodash-es/_baseAssignIn.js");
/* harmony import */ var _cloneBuffer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_cloneBuffer.js */ "./node_modules/lodash-es/_cloneBuffer.js");
/* harmony import */ var _copyArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_copyArray.js */ "./node_modules/lodash-es/_copyArray.js");
/* harmony import */ var _copySymbols_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./_copySymbols.js */ "./node_modules/lodash-es/_copySymbols.js");
/* harmony import */ var _copySymbolsIn_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_copySymbolsIn.js */ "./node_modules/lodash-es/_copySymbolsIn.js");
/* harmony import */ var _getAllKeys_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./_getAllKeys.js */ "./node_modules/lodash-es/_getAllKeys.js");
/* harmony import */ var _getAllKeysIn_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./_getAllKeysIn.js */ "./node_modules/lodash-es/_getAllKeysIn.js");
/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_getTag.js */ "./node_modules/lodash-es/_getTag.js");
/* harmony import */ var _initCloneArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_initCloneArray.js */ "./node_modules/lodash-es/_initCloneArray.js");
/* harmony import */ var _initCloneByTag_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./_initCloneByTag.js */ "./node_modules/lodash-es/_initCloneByTag.js");
/* harmony import */ var _initCloneObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_initCloneObject.js */ "./node_modules/lodash-es/_initCloneObject.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isMap_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./isMap.js */ "./node_modules/lodash-es/isMap.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _isSet_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./isSet.js */ "./node_modules/lodash-es/isSet.js");
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./keys.js */ "./node_modules/lodash-es/keys.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");























/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    return value;
  }
  var isArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
  if (isArr) {
    result = (0,_initCloneArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);
    if (!isDeep) {
      return (0,_copyArray_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value, result);
    }
  } else {
    var tag = (0,_getTag_js__WEBPACK_IMPORTED_MODULE_4__["default"])(value),
        isFunc = tag == funcTag || tag == genTag;

    if ((0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_5__["default"])(value)) {
      return (0,_cloneBuffer_js__WEBPACK_IMPORTED_MODULE_6__["default"])(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : (0,_initCloneObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])(value);
      if (!isDeep) {
        return isFlat
          ? (0,_copySymbolsIn_js__WEBPACK_IMPORTED_MODULE_8__["default"])(value, (0,_baseAssignIn_js__WEBPACK_IMPORTED_MODULE_9__["default"])(result, value))
          : (0,_copySymbols_js__WEBPACK_IMPORTED_MODULE_10__["default"])(value, (0,_baseAssign_js__WEBPACK_IMPORTED_MODULE_11__["default"])(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = (0,_initCloneByTag_js__WEBPACK_IMPORTED_MODULE_12__["default"])(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_13__["default"]);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if ((0,_isSet_js__WEBPACK_IMPORTED_MODULE_14__["default"])(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if ((0,_isMap_js__WEBPACK_IMPORTED_MODULE_15__["default"])(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? _getAllKeysIn_js__WEBPACK_IMPORTED_MODULE_16__["default"] : _getAllKeys_js__WEBPACK_IMPORTED_MODULE_17__["default"])
    : (isFlat ? _keysIn_js__WEBPACK_IMPORTED_MODULE_18__["default"] : _keys_js__WEBPACK_IMPORTED_MODULE_19__["default"]);

  var props = isArr ? undefined : keysFunc(value);
  (0,_arrayEach_js__WEBPACK_IMPORTED_MODULE_20__["default"])(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    (0,_assignValue_js__WEBPACK_IMPORTED_MODULE_21__["default"])(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseClone);


/***/ }),

/***/ "./node_modules/lodash-es/_baseCreate.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseCreate.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");


/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseCreate);


/***/ }),

/***/ "./node_modules/lodash-es/_baseDelay.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseDelay.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * The base implementation of `_.delay` and `_.defer` which accepts `args`
 * to provide to `func`.
 *
 * @private
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {Array} args The arguments to provide to `func`.
 * @returns {number|Object} Returns the timer id or timeout object.
 */
function baseDelay(func, wait, args) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return setTimeout(function() { func.apply(undefined, args); }, wait);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseDelay);


/***/ }),

/***/ "./node_modules/lodash-es/_baseDifference.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_baseDifference.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _SetCache_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_SetCache.js */ "./node_modules/lodash-es/_SetCache.js");
/* harmony import */ var _arrayIncludes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_arrayIncludes.js */ "./node_modules/lodash-es/_arrayIncludes.js");
/* harmony import */ var _arrayIncludesWith_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_arrayIncludesWith.js */ "./node_modules/lodash-es/_arrayIncludesWith.js");
/* harmony import */ var _arrayMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayMap.js */ "./node_modules/lodash-es/_arrayMap.js");
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");
/* harmony import */ var _cacheHas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_cacheHas.js */ "./node_modules/lodash-es/_cacheHas.js");







/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = _arrayIncludes_js__WEBPACK_IMPORTED_MODULE_0__["default"],
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = (0,_arrayMap_js__WEBPACK_IMPORTED_MODULE_1__["default"])(values, (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_2__["default"])(iteratee));
  }
  if (comparator) {
    includes = _arrayIncludesWith_js__WEBPACK_IMPORTED_MODULE_3__["default"];
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = _cacheHas_js__WEBPACK_IMPORTED_MODULE_4__["default"];
    isCommon = false;
    values = new _SetCache_js__WEBPACK_IMPORTED_MODULE_5__["default"](values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseDifference);


/***/ }),

/***/ "./node_modules/lodash-es/_baseEach.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseEach.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseForOwn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseForOwn.js */ "./node_modules/lodash-es/_baseForOwn.js");
/* harmony import */ var _createBaseEach_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createBaseEach.js */ "./node_modules/lodash-es/_createBaseEach.js");



/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = (0,_createBaseEach_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_baseForOwn_js__WEBPACK_IMPORTED_MODULE_1__["default"]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseEach);


/***/ }),

/***/ "./node_modules/lodash-es/_baseEvery.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseEvery.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseEach_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseEach.js */ "./node_modules/lodash-es/_baseEach.js");


/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  (0,_baseEach_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseEvery);


/***/ }),

/***/ "./node_modules/lodash-es/_baseFindIndex.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_baseFindIndex.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseFindIndex);


/***/ }),

/***/ "./node_modules/lodash-es/_baseFlatten.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_baseFlatten.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayPush_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayPush.js */ "./node_modules/lodash-es/_arrayPush.js");
/* harmony import */ var _isFlattenable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isFlattenable.js */ "./node_modules/lodash-es/_isFlattenable.js");



/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = _isFlattenable_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        (0,_arrayPush_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseFlatten);


/***/ }),

/***/ "./node_modules/lodash-es/_baseFor.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_baseFor.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _createBaseFor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createBaseFor.js */ "./node_modules/lodash-es/_createBaseFor.js");


/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = (0,_createBaseFor_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseFor);


/***/ }),

/***/ "./node_modules/lodash-es/_baseForOwn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseForOwn.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseFor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseFor.js */ "./node_modules/lodash-es/_baseFor.js");
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ "./node_modules/lodash-es/keys.js");



/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && (0,_baseFor_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, iteratee, _keys_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseForOwn);


/***/ }),

/***/ "./node_modules/lodash-es/_baseGet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_baseGet.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");



/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = (0,_castPath_js__WEBPACK_IMPORTED_MODULE_0__["default"])(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[(0,_toKey_js__WEBPACK_IMPORTED_MODULE_1__["default"])(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseGet);


/***/ }),

/***/ "./node_modules/lodash-es/_baseGetAllKeys.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_baseGetAllKeys.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayPush_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayPush.js */ "./node_modules/lodash-es/_arrayPush.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");



/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object) ? result : (0,_arrayPush_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, symbolsFunc(object));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseGetAllKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_baseGetTag.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseGetTag.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");
/* harmony import */ var _getRawTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getRawTag.js */ "./node_modules/lodash-es/_getRawTag.js");
/* harmony import */ var _objectToString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_objectToString.js */ "./node_modules/lodash-es/_objectToString.js");




/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? (0,_getRawTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)
    : (0,_objectToString_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseGetTag);


/***/ }),

/***/ "./node_modules/lodash-es/_baseHas.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_baseHas.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseHas);


/***/ }),

/***/ "./node_modules/lodash-es/_baseHasIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseHasIn.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseHasIn);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIndexOf.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_baseIndexOf.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseFindIndex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseFindIndex.js */ "./node_modules/lodash-es/_baseFindIndex.js");
/* harmony import */ var _baseIsNaN_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsNaN.js */ "./node_modules/lodash-es/_baseIsNaN.js");
/* harmony import */ var _strictIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_strictIndexOf.js */ "./node_modules/lodash-es/_strictIndexOf.js");




/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? (0,_strictIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(array, value, fromIndex)
    : (0,_baseFindIndex_js__WEBPACK_IMPORTED_MODULE_1__["default"])(array, _baseIsNaN_js__WEBPACK_IMPORTED_MODULE_2__["default"], fromIndex);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIndexOf);


/***/ }),

/***/ "./node_modules/lodash-es/_baseInverter.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseInverter.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseForOwn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseForOwn.js */ "./node_modules/lodash-es/_baseForOwn.js");


/**
 * The base implementation of `_.invert` and `_.invertBy` which inverts
 * `object` with values transformed by `iteratee` and set by `setter`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform values.
 * @param {Object} accumulator The initial inverted object.
 * @returns {Function} Returns `accumulator`.
 */
function baseInverter(object, setter, iteratee, accumulator) {
  (0,_baseForOwn_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, function(value, key, object) {
    setter(accumulator, iteratee(value), key, object);
  });
  return accumulator;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseInverter);


/***/ }),

/***/ "./node_modules/lodash-es/_baseInvoke.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseInvoke.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _apply_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_apply.js */ "./node_modules/lodash-es/_apply.js");
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");
/* harmony import */ var _last_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./last.js */ "./node_modules/lodash-es/last.js");
/* harmony import */ var _parent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_parent.js */ "./node_modules/lodash-es/_parent.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");






/**
 * The base implementation of `_.invoke` without support for individual
 * method arguments.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {Array} args The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 */
function baseInvoke(object, path, args) {
  path = (0,_castPath_js__WEBPACK_IMPORTED_MODULE_0__["default"])(path, object);
  object = (0,_parent_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, path);
  var func = object == null ? object : object[(0,_toKey_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_last_js__WEBPACK_IMPORTED_MODULE_3__["default"])(path))];
  return func == null ? undefined : (0,_apply_js__WEBPACK_IMPORTED_MODULE_4__["default"])(func, object, args);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseInvoke);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsArguments.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsArguments.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == argsTag;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsArguments);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsEqual.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsEqual.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsEqualDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsEqualDeep.js */ "./node_modules/lodash-es/_baseIsEqualDeep.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && !(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(other))) {
    return value !== value && other !== other;
  }
  return (0,_baseIsEqualDeep_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value, other, bitmask, customizer, baseIsEqual, stack);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsEqual);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsEqualDeep.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsEqualDeep.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_Stack.js */ "./node_modules/lodash-es/_Stack.js");
/* harmony import */ var _equalArrays_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_equalArrays.js */ "./node_modules/lodash-es/_equalArrays.js");
/* harmony import */ var _equalByTag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_equalByTag.js */ "./node_modules/lodash-es/_equalByTag.js");
/* harmony import */ var _equalObjects_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_equalObjects.js */ "./node_modules/lodash-es/_equalObjects.js");
/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getTag.js */ "./node_modules/lodash-es/_getTag.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");









/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object),
      othIsArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(other),
      objTag = objIsArr ? arrayTag : (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object),
      othTag = othIsArr ? arrayTag : (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object)) {
    if (!(0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
    return (objIsArr || (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object))
      ? (0,_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__["default"])(object, other, bitmask, customizer, equalFunc, stack)
      : (0,_equalByTag_js__WEBPACK_IMPORTED_MODULE_6__["default"])(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
  return (0,_equalObjects_js__WEBPACK_IMPORTED_MODULE_7__["default"])(object, other, bitmask, customizer, equalFunc, stack);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsEqualDeep);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsMap.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseIsMap.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getTag.js */ "./node_modules/lodash-es/_getTag.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == mapTag;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsMap);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsMatch.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsMatch.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Stack.js */ "./node_modules/lodash-es/_Stack.js");
/* harmony import */ var _baseIsEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsEqual.js */ "./node_modules/lodash-es/_baseIsEqual.js");



/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_0__["default"];
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? (0,_baseIsEqual_js__WEBPACK_IMPORTED_MODULE_1__["default"])(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsMatch);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsNaN.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseIsNaN.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsNaN);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsNative.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsNative.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _isMasked_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isMasked.js */ "./node_modules/lodash-es/_isMasked.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_toSource.js */ "./node_modules/lodash-es/_toSource.js");





/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) || (0,_isMasked_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)) {
    return false;
  }
  var pattern = (0,_isFunction_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) ? reIsNative : reIsHostCtor;
  return pattern.test((0,_toSource_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsNative);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsRegExp.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsRegExp.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** `Object#toString` result references. */
var regexpTag = '[object RegExp]';

/**
 * The base implementation of `_.isRegExp` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 */
function baseIsRegExp(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == regexpTag;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsRegExp);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseIsSet.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getTag.js */ "./node_modules/lodash-es/_getTag.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == setTag;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsSet);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsTypedArray.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsTypedArray.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");




/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) &&
    (0,_isLength_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value.length) && !!typedArrayTags[(0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value)];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsTypedArray);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIteratee.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseIteratee.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseMatches_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_baseMatches.js */ "./node_modules/lodash-es/_baseMatches.js");
/* harmony import */ var _baseMatchesProperty_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseMatchesProperty.js */ "./node_modules/lodash-es/_baseMatchesProperty.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./property.js */ "./node_modules/lodash-es/property.js");






/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return _identity_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  }
  if (typeof value == 'object') {
    return (0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)
      ? (0,_baseMatchesProperty_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value[0], value[1])
      : (0,_baseMatches_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value);
  }
  return (0,_property_js__WEBPACK_IMPORTED_MODULE_4__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIteratee);


/***/ }),

/***/ "./node_modules/lodash-es/_baseKeys.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseKeys.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");
/* harmony import */ var _nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_nativeKeys.js */ "./node_modules/lodash-es/_nativeKeys.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!(0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {
    return (0,_nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_baseKeysIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseKeysIn.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");
/* harmony import */ var _nativeKeysIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_nativeKeysIn.js */ "./node_modules/lodash-es/_nativeKeysIn.js");




/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {
    return (0,_nativeKeysIn_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object);
  }
  var isProto = (0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseKeysIn);


/***/ }),

/***/ "./node_modules/lodash-es/_baseMap.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_baseMap.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseEach_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseEach.js */ "./node_modules/lodash-es/_baseEach.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");



/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection) ? Array(collection.length) : [];

  (0,_baseEach_js__WEBPACK_IMPORTED_MODULE_1__["default"])(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseMap);


/***/ }),

/***/ "./node_modules/lodash-es/_baseMatches.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_baseMatches.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsMatch_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsMatch.js */ "./node_modules/lodash-es/_baseIsMatch.js");
/* harmony import */ var _getMatchData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMatchData.js */ "./node_modules/lodash-es/_getMatchData.js");
/* harmony import */ var _matchesStrictComparable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_matchesStrictComparable.js */ "./node_modules/lodash-es/_matchesStrictComparable.js");




/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = (0,_getMatchData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return (0,_matchesStrictComparable_js__WEBPACK_IMPORTED_MODULE_1__["default"])(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || (0,_baseIsMatch_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object, source, matchData);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseMatches);


/***/ }),

/***/ "./node_modules/lodash-es/_baseMatchesProperty.js":
/*!********************************************************!*\
  !*** ./node_modules/lodash-es/_baseMatchesProperty.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsEqual_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_baseIsEqual.js */ "./node_modules/lodash-es/_baseIsEqual.js");
/* harmony import */ var _get_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./get.js */ "./node_modules/lodash-es/get.js");
/* harmony import */ var _hasIn_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hasIn.js */ "./node_modules/lodash-es/hasIn.js");
/* harmony import */ var _isKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isKey.js */ "./node_modules/lodash-es/_isKey.js");
/* harmony import */ var _isStrictComparable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isStrictComparable.js */ "./node_modules/lodash-es/_isStrictComparable.js");
/* harmony import */ var _matchesStrictComparable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_matchesStrictComparable.js */ "./node_modules/lodash-es/_matchesStrictComparable.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");








/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if ((0,_isKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(path) && (0,_isStrictComparable_js__WEBPACK_IMPORTED_MODULE_1__["default"])(srcValue)) {
    return (0,_matchesStrictComparable_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_toKey_js__WEBPACK_IMPORTED_MODULE_3__["default"])(path), srcValue);
  }
  return function(object) {
    var objValue = (0,_get_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? (0,_hasIn_js__WEBPACK_IMPORTED_MODULE_5__["default"])(object, path)
      : (0,_baseIsEqual_js__WEBPACK_IMPORTED_MODULE_6__["default"])(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseMatchesProperty);


/***/ }),

/***/ "./node_modules/lodash-es/_baseMerge.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseMerge.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Stack.js */ "./node_modules/lodash-es/_Stack.js");
/* harmony import */ var _assignMergeValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_assignMergeValue.js */ "./node_modules/lodash-es/_assignMergeValue.js");
/* harmony import */ var _baseFor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseFor.js */ "./node_modules/lodash-es/_baseFor.js");
/* harmony import */ var _baseMergeDeep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_baseMergeDeep.js */ "./node_modules/lodash-es/_baseMergeDeep.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");
/* harmony import */ var _safeGet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_safeGet.js */ "./node_modules/lodash-es/_safeGet.js");








/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  (0,_baseFor_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, function(srcValue, key) {
    stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
    if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_2__["default"])(srcValue)) {
      (0,_baseMergeDeep_js__WEBPACK_IMPORTED_MODULE_3__["default"])(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer((0,_safeGet_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      (0,_assignMergeValue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(object, key, newValue);
    }
  }, _keysIn_js__WEBPACK_IMPORTED_MODULE_6__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseMerge);


/***/ }),

/***/ "./node_modules/lodash-es/_baseMergeDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_baseMergeDeep.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assignMergeValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assignMergeValue.js */ "./node_modules/lodash-es/_assignMergeValue.js");
/* harmony import */ var _cloneBuffer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_cloneBuffer.js */ "./node_modules/lodash-es/_cloneBuffer.js");
/* harmony import */ var _cloneTypedArray_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_cloneTypedArray.js */ "./node_modules/lodash-es/_cloneTypedArray.js");
/* harmony import */ var _copyArray_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_copyArray.js */ "./node_modules/lodash-es/_copyArray.js");
/* harmony import */ var _initCloneObject_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./_initCloneObject.js */ "./node_modules/lodash-es/_initCloneObject.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isArrayLikeObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isArrayLikeObject.js */ "./node_modules/lodash-es/isArrayLikeObject.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./isPlainObject.js */ "./node_modules/lodash-es/isPlainObject.js");
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");
/* harmony import */ var _safeGet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_safeGet.js */ "./node_modules/lodash-es/_safeGet.js");
/* harmony import */ var _toPlainObject_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toPlainObject.js */ "./node_modules/lodash-es/toPlainObject.js");
















/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = (0,_safeGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key),
      srcValue = (0,_safeGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    (0,_assignMergeValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(srcValue),
        isBuff = !isArr && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(srcValue),
        isTyped = !isArr && !isBuff && (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__["default"])(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(objValue)) {
        newValue = objValue;
      }
      else if ((0,_isArrayLikeObject_js__WEBPACK_IMPORTED_MODULE_5__["default"])(objValue)) {
        newValue = (0,_copyArray_js__WEBPACK_IMPORTED_MODULE_6__["default"])(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = (0,_cloneBuffer_js__WEBPACK_IMPORTED_MODULE_7__["default"])(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = (0,_cloneTypedArray_js__WEBPACK_IMPORTED_MODULE_8__["default"])(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if ((0,_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__["default"])(srcValue) || (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_10__["default"])(srcValue)) {
      newValue = objValue;
      if ((0,_isArguments_js__WEBPACK_IMPORTED_MODULE_10__["default"])(objValue)) {
        newValue = (0,_toPlainObject_js__WEBPACK_IMPORTED_MODULE_11__["default"])(objValue);
      }
      else if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_12__["default"])(objValue) || (0,_isFunction_js__WEBPACK_IMPORTED_MODULE_13__["default"])(objValue)) {
        newValue = (0,_initCloneObject_js__WEBPACK_IMPORTED_MODULE_14__["default"])(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  (0,_assignMergeValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, newValue);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseMergeDeep);


/***/ }),

/***/ "./node_modules/lodash-es/_baseOrderBy.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_baseOrderBy.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayMap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_arrayMap.js */ "./node_modules/lodash-es/_arrayMap.js");
/* harmony import */ var _baseGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseGet.js */ "./node_modules/lodash-es/_baseGet.js");
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_baseIteratee.js */ "./node_modules/lodash-es/_baseIteratee.js");
/* harmony import */ var _baseMap_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_baseMap.js */ "./node_modules/lodash-es/_baseMap.js");
/* harmony import */ var _baseSortBy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_baseSortBy.js */ "./node_modules/lodash-es/_baseSortBy.js");
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");
/* harmony import */ var _compareMultiple_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_compareMultiple.js */ "./node_modules/lodash-es/_compareMultiple.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");










/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = (0,_arrayMap_js__WEBPACK_IMPORTED_MODULE_0__["default"])(iteratees, function(iteratee) {
      if ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(iteratee)) {
        return function(value) {
          return (0,_baseGet_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [_identity_js__WEBPACK_IMPORTED_MODULE_3__["default"]];
  }

  var index = -1;
  iteratees = (0,_arrayMap_js__WEBPACK_IMPORTED_MODULE_0__["default"])(iteratees, (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_4__["default"])(_baseIteratee_js__WEBPACK_IMPORTED_MODULE_5__["default"]));

  var result = (0,_baseMap_js__WEBPACK_IMPORTED_MODULE_6__["default"])(collection, function(value, key, collection) {
    var criteria = (0,_arrayMap_js__WEBPACK_IMPORTED_MODULE_0__["default"])(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return (0,_baseSortBy_js__WEBPACK_IMPORTED_MODULE_7__["default"])(result, function(object, other) {
    return (0,_compareMultiple_js__WEBPACK_IMPORTED_MODULE_8__["default"])(object, other, orders);
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseOrderBy);


/***/ }),

/***/ "./node_modules/lodash-es/_basePick.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_basePick.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _basePickBy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_basePickBy.js */ "./node_modules/lodash-es/_basePickBy.js");
/* harmony import */ var _hasIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hasIn.js */ "./node_modules/lodash-es/hasIn.js");



/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return (0,_basePickBy_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, paths, function(value, path) {
    return (0,_hasIn_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, path);
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (basePick);


/***/ }),

/***/ "./node_modules/lodash-es/_basePickBy.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_basePickBy.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGet.js */ "./node_modules/lodash-es/_baseGet.js");
/* harmony import */ var _baseSet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseSet.js */ "./node_modules/lodash-es/_baseSet.js");
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");




/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = (0,_baseGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, path);

    if (predicate(value, path)) {
      (0,_baseSet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, (0,_castPath_js__WEBPACK_IMPORTED_MODULE_2__["default"])(path, object), value);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (basePickBy);


/***/ }),

/***/ "./node_modules/lodash-es/_baseProperty.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseProperty.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseProperty);


/***/ }),

/***/ "./node_modules/lodash-es/_basePropertyDeep.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_basePropertyDeep.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGet.js */ "./node_modules/lodash-es/_baseGet.js");


/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return (0,_baseGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, path);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (basePropertyDeep);


/***/ }),

/***/ "./node_modules/lodash-es/_basePropertyOf.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_basePropertyOf.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (basePropertyOf);


/***/ }),

/***/ "./node_modules/lodash-es/_baseRest.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseRest.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");
/* harmony import */ var _overRest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_overRest.js */ "./node_modules/lodash-es/_overRest.js");
/* harmony import */ var _setToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_setToString.js */ "./node_modules/lodash-es/_setToString.js");




/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return (0,_setToString_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_overRest_js__WEBPACK_IMPORTED_MODULE_1__["default"])(func, start, _identity_js__WEBPACK_IMPORTED_MODULE_2__["default"]), func + '');
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseRest);


/***/ }),

/***/ "./node_modules/lodash-es/_baseSet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_baseSet.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assignValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_assignValue.js */ "./node_modules/lodash-es/_assignValue.js");
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");
/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");






/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {
    return object;
  }
  path = (0,_castPath_js__WEBPACK_IMPORTED_MODULE_1__["default"])(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = (0,_toKey_js__WEBPACK_IMPORTED_MODULE_2__["default"])(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = (0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(objValue)
          ? objValue
          : ((0,_isIndex_js__WEBPACK_IMPORTED_MODULE_3__["default"])(path[index + 1]) ? [] : {});
      }
    }
    (0,_assignValue_js__WEBPACK_IMPORTED_MODULE_4__["default"])(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseSet);


/***/ }),

/***/ "./node_modules/lodash-es/_baseSetToString.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseSetToString.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constant.js */ "./node_modules/lodash-es/constant.js");
/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_defineProperty.js */ "./node_modules/lodash-es/_defineProperty.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");




/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _identity_js__WEBPACK_IMPORTED_MODULE_1__["default"] : function(func, string) {
  return (0,_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"])(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': (0,_constant_js__WEBPACK_IMPORTED_MODULE_2__["default"])(string),
    'writable': true
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseSetToString);


/***/ }),

/***/ "./node_modules/lodash-es/_baseSlice.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseSlice.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseSlice);


/***/ }),

/***/ "./node_modules/lodash-es/_baseSome.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseSome.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseEach_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseEach.js */ "./node_modules/lodash-es/_baseEach.js");


/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  (0,_baseEach_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseSome);


/***/ }),

/***/ "./node_modules/lodash-es/_baseSortBy.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseSortBy.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseSortBy);


/***/ }),

/***/ "./node_modules/lodash-es/_baseSum.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_baseSum.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.sum` and `_.sumBy` without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the sum.
 */
function baseSum(array, iteratee) {
  var result,
      index = -1,
      length = array.length;

  while (++index < length) {
    var current = iteratee(array[index]);
    if (current !== undefined) {
      result = result === undefined ? current : (result + current);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseSum);


/***/ }),

/***/ "./node_modules/lodash-es/_baseTimes.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseTimes.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseTimes);


/***/ }),

/***/ "./node_modules/lodash-es/_baseToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseToString.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");
/* harmony import */ var _arrayMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_arrayMap.js */ "./node_modules/lodash-es/_arrayMap.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isSymbol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isSymbol.js */ "./node_modules/lodash-es/isSymbol.js");





/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return (0,_arrayMap_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value, baseToString) + '';
  }
  if ((0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseToString);


/***/ }),

/***/ "./node_modules/lodash-es/_baseTrim.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseTrim.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _trimmedEndIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_trimmedEndIndex.js */ "./node_modules/lodash-es/_trimmedEndIndex.js");


/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, (0,_trimmedEndIndex_js__WEBPACK_IMPORTED_MODULE_0__["default"])(string) + 1).replace(reTrimStart, '')
    : string;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseTrim);


/***/ }),

/***/ "./node_modules/lodash-es/_baseUnary.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseUnary.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseUnary);


/***/ }),

/***/ "./node_modules/lodash-es/_baseUnset.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseUnset.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");
/* harmony import */ var _last_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./last.js */ "./node_modules/lodash-es/last.js");
/* harmony import */ var _parent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_parent.js */ "./node_modules/lodash-es/_parent.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");





/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = (0,_castPath_js__WEBPACK_IMPORTED_MODULE_0__["default"])(path, object);
  object = (0,_parent_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, path);
  return object == null || delete object[(0,_toKey_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_last_js__WEBPACK_IMPORTED_MODULE_3__["default"])(path))];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseUnset);


/***/ }),

/***/ "./node_modules/lodash-es/_baseZipObject.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_baseZipObject.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
 *
 * @private
 * @param {Array} props The property identifiers.
 * @param {Array} values The property values.
 * @param {Function} assignFunc The function to assign values.
 * @returns {Object} Returns the new object.
 */
function baseZipObject(props, values, assignFunc) {
  var index = -1,
      length = props.length,
      valsLength = values.length,
      result = {};

  while (++index < length) {
    var value = index < valsLength ? values[index] : undefined;
    assignFunc(result, props[index], value);
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseZipObject);


/***/ }),

/***/ "./node_modules/lodash-es/_cacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_cacheHas.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cacheHas);


/***/ }),

/***/ "./node_modules/lodash-es/_castPath.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_castPath.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isKey.js */ "./node_modules/lodash-es/_isKey.js");
/* harmony import */ var _stringToPath_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_stringToPath.js */ "./node_modules/lodash-es/_stringToPath.js");
/* harmony import */ var _toString_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toString.js */ "./node_modules/lodash-es/toString.js");





/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    return value;
  }
  return (0,_isKey_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value, object) ? [value] : (0,_stringToPath_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_toString_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (castPath);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneArrayBuffer.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_cloneArrayBuffer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Uint8Array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Uint8Array.js */ "./node_modules/lodash-es/_Uint8Array.js");


/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_0__["default"](result).set(new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_0__["default"](arrayBuffer));
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneArrayBuffer);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneBuffer.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_cloneBuffer.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneBuffer);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneDataView.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_cloneDataView.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_cloneArrayBuffer.js */ "./node_modules/lodash-es/_cloneArrayBuffer.js");


/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? (0,_cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneDataView);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneRegExp.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_cloneRegExp.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneRegExp);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneSymbol.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_cloneSymbol.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");


/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneSymbol);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneTypedArray.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_cloneTypedArray.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_cloneArrayBuffer.js */ "./node_modules/lodash-es/_cloneArrayBuffer.js");


/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? (0,_cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneTypedArray);


/***/ }),

/***/ "./node_modules/lodash-es/_compareAscending.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_compareAscending.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isSymbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSymbol.js */ "./node_modules/lodash-es/isSymbol.js");


/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = (0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = (0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_0__["default"])(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (compareAscending);


/***/ }),

/***/ "./node_modules/lodash-es/_compareMultiple.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_compareMultiple.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _compareAscending_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_compareAscending.js */ "./node_modules/lodash-es/_compareAscending.js");


/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = (0,_compareAscending_js__WEBPACK_IMPORTED_MODULE_0__["default"])(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (compareMultiple);


/***/ }),

/***/ "./node_modules/lodash-es/_copyArray.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_copyArray.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (copyArray);


/***/ }),

/***/ "./node_modules/lodash-es/_copyObject.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_copyObject.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assignValue.js */ "./node_modules/lodash-es/_assignValue.js");
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");



/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key, newValue);
    } else {
      (0,_assignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, newValue);
    }
  }
  return object;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (copyObject);


/***/ }),

/***/ "./node_modules/lodash-es/_copySymbols.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_copySymbols.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _getSymbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getSymbols.js */ "./node_modules/lodash-es/_getSymbols.js");



/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, (0,_getSymbols_js__WEBPACK_IMPORTED_MODULE_1__["default"])(source), object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (copySymbols);


/***/ }),

/***/ "./node_modules/lodash-es/_copySymbolsIn.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_copySymbolsIn.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _getSymbolsIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getSymbolsIn.js */ "./node_modules/lodash-es/_getSymbolsIn.js");



/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, (0,_getSymbolsIn_js__WEBPACK_IMPORTED_MODULE_1__["default"])(source), object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (copySymbolsIn);


/***/ }),

/***/ "./node_modules/lodash-es/_coreJsData.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_coreJsData.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/** Used to detect overreaching core-js shims. */
var coreJsData = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"]["__core-js_shared__"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (coreJsData);


/***/ }),

/***/ "./node_modules/lodash-es/_createAggregator.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_createAggregator.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayAggregator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayAggregator.js */ "./node_modules/lodash-es/_arrayAggregator.js");
/* harmony import */ var _baseAggregator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseAggregator.js */ "./node_modules/lodash-es/_baseAggregator.js");
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_baseIteratee.js */ "./node_modules/lodash-es/_baseIteratee.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");





/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection) ? _arrayAggregator_js__WEBPACK_IMPORTED_MODULE_1__["default"] : _baseAggregator_js__WEBPACK_IMPORTED_MODULE_2__["default"],
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, (0,_baseIteratee_js__WEBPACK_IMPORTED_MODULE_3__["default"])(iteratee, 2), accumulator);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createAggregator);


/***/ }),

/***/ "./node_modules/lodash-es/_createAssigner.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_createAssigner.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js");
/* harmony import */ var _isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js");



/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return (0,_baseRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && (0,_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__["default"])(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createAssigner);


/***/ }),

/***/ "./node_modules/lodash-es/_createBaseEach.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_createBaseEach.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");


/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!(0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createBaseEach);


/***/ }),

/***/ "./node_modules/lodash-es/_createBaseFor.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_createBaseFor.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createBaseFor);


/***/ }),

/***/ "./node_modules/lodash-es/_createInverter.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_createInverter.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseInverter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseInverter.js */ "./node_modules/lodash-es/_baseInverter.js");


/**
 * Creates a function like `_.invertBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} toIteratee The function to resolve iteratees.
 * @returns {Function} Returns the new inverter function.
 */
function createInverter(setter, toIteratee) {
  return function(object, iteratee) {
    return (0,_baseInverter_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, setter, toIteratee(iteratee), {});
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createInverter);


/***/ }),

/***/ "./node_modules/lodash-es/_customOmitClone.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_customOmitClone.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isPlainObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isPlainObject.js */ "./node_modules/lodash-es/isPlainObject.js");


/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return (0,_isPlainObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) ? undefined : value;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (customOmitClone);


/***/ }),

/***/ "./node_modules/lodash-es/_defineProperty.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_defineProperty.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");


var defineProperty = (function() {
  try {
    var func = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defineProperty);


/***/ }),

/***/ "./node_modules/lodash-es/_equalArrays.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_equalArrays.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _SetCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SetCache.js */ "./node_modules/lodash-es/_SetCache.js");
/* harmony import */ var _arraySome_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arraySome.js */ "./node_modules/lodash-es/_arraySome.js");
/* harmony import */ var _cacheHas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_cacheHas.js */ "./node_modules/lodash-es/_cacheHas.js");




/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache_js__WEBPACK_IMPORTED_MODULE_0__["default"] : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!(0,_arraySome_js__WEBPACK_IMPORTED_MODULE_1__["default"])(other, function(othValue, othIndex) {
            if (!(0,_cacheHas_js__WEBPACK_IMPORTED_MODULE_2__["default"])(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (equalArrays);


/***/ }),

/***/ "./node_modules/lodash-es/_equalByTag.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_equalByTag.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");
/* harmony import */ var _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Uint8Array.js */ "./node_modules/lodash-es/_Uint8Array.js");
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");
/* harmony import */ var _equalArrays_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_equalArrays.js */ "./node_modules/lodash-es/_equalArrays.js");
/* harmony import */ var _mapToArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mapToArray.js */ "./node_modules/lodash-es/_mapToArray.js");
/* harmony import */ var _setToArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_setToArray.js */ "./node_modules/lodash-es/_setToArray.js");







/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__["default"](object), new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__["default"](other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return (0,_eq_js__WEBPACK_IMPORTED_MODULE_2__["default"])(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = _mapToArray_js__WEBPACK_IMPORTED_MODULE_3__["default"];

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = _setToArray_js__WEBPACK_IMPORTED_MODULE_4__["default"]);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = (0,_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__["default"])(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (equalByTag);


/***/ }),

/***/ "./node_modules/lodash-es/_equalObjects.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_equalObjects.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getAllKeys.js */ "./node_modules/lodash-es/_getAllKeys.js");


/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = (0,_getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object),
      objLength = objProps.length,
      othProps = (0,_getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (equalObjects);


/***/ }),

/***/ "./node_modules/lodash-es/_escapeHtmlChar.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_escapeHtmlChar.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _basePropertyOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_basePropertyOf.js */ "./node_modules/lodash-es/_basePropertyOf.js");


/** Used to map characters to HTML entities. */
var htmlEscapes = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};

/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */
var escapeHtmlChar = (0,_basePropertyOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(htmlEscapes);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (escapeHtmlChar);


/***/ }),

/***/ "./node_modules/lodash-es/_flatRest.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_flatRest.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _flatten_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flatten.js */ "./node_modules/lodash-es/flatten.js");
/* harmony import */ var _overRest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_overRest.js */ "./node_modules/lodash-es/_overRest.js");
/* harmony import */ var _setToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_setToString.js */ "./node_modules/lodash-es/_setToString.js");




/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return (0,_setToString_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_overRest_js__WEBPACK_IMPORTED_MODULE_1__["default"])(func, undefined, _flatten_js__WEBPACK_IMPORTED_MODULE_2__["default"]), func + '');
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (flatRest);


/***/ }),

/***/ "./node_modules/lodash-es/_freeGlobal.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_freeGlobal.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (freeGlobal);


/***/ }),

/***/ "./node_modules/lodash-es/_getAllKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_getAllKeys.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGetAllKeys.js */ "./node_modules/lodash-es/_baseGetAllKeys.js");
/* harmony import */ var _getSymbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getSymbols.js */ "./node_modules/lodash-es/_getSymbols.js");
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ "./node_modules/lodash-es/keys.js");




/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return (0,_baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, _keys_js__WEBPACK_IMPORTED_MODULE_1__["default"], _getSymbols_js__WEBPACK_IMPORTED_MODULE_2__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getAllKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_getAllKeysIn.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_getAllKeysIn.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGetAllKeys.js */ "./node_modules/lodash-es/_baseGetAllKeys.js");
/* harmony import */ var _getSymbolsIn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getSymbolsIn.js */ "./node_modules/lodash-es/_getSymbolsIn.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");




/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return (0,_baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, _keysIn_js__WEBPACK_IMPORTED_MODULE_1__["default"], _getSymbolsIn_js__WEBPACK_IMPORTED_MODULE_2__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getAllKeysIn);


/***/ }),

/***/ "./node_modules/lodash-es/_getMapData.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_getMapData.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isKeyable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isKeyable.js */ "./node_modules/lodash-es/_isKeyable.js");


/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return (0,_isKeyable_js__WEBPACK_IMPORTED_MODULE_0__["default"])(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMapData);


/***/ }),

/***/ "./node_modules/lodash-es/_getMatchData.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_getMatchData.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isStrictComparable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isStrictComparable.js */ "./node_modules/lodash-es/_isStrictComparable.js");
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keys.js */ "./node_modules/lodash-es/keys.js");



/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = (0,_keys_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, (0,_isStrictComparable_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)];
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMatchData);


/***/ }),

/***/ "./node_modules/lodash-es/_getNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getNative.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsNative.js */ "./node_modules/lodash-es/_baseIsNative.js");
/* harmony import */ var _getValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getValue.js */ "./node_modules/lodash-es/_getValue.js");



/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = (0,_getValue_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key);
  return (0,_baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) ? value : undefined;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getNative);


/***/ }),

/***/ "./node_modules/lodash-es/_getPrototype.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_getPrototype.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _overArg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_overArg.js */ "./node_modules/lodash-es/_overArg.js");


/** Built-in value references. */
var getPrototype = (0,_overArg_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.getPrototypeOf, Object);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getPrototype);


/***/ }),

/***/ "./node_modules/lodash-es/_getRawTag.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getRawTag.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getRawTag);


/***/ }),

/***/ "./node_modules/lodash-es/_getSymbols.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_getSymbols.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayFilter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayFilter.js */ "./node_modules/lodash-es/_arrayFilter.js");
/* harmony import */ var _stubArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stubArray.js */ "./node_modules/lodash-es/stubArray.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? _stubArray_js__WEBPACK_IMPORTED_MODULE_0__["default"] : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return (0,_arrayFilter_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSymbols);


/***/ }),

/***/ "./node_modules/lodash-es/_getSymbolsIn.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_getSymbolsIn.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayPush_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayPush.js */ "./node_modules/lodash-es/_arrayPush.js");
/* harmony import */ var _getPrototype_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_getPrototype.js */ "./node_modules/lodash-es/_getPrototype.js");
/* harmony import */ var _getSymbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getSymbols.js */ "./node_modules/lodash-es/_getSymbols.js");
/* harmony import */ var _stubArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stubArray.js */ "./node_modules/lodash-es/stubArray.js");





/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? _stubArray_js__WEBPACK_IMPORTED_MODULE_0__["default"] : function(object) {
  var result = [];
  while (object) {
    (0,_arrayPush_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, (0,_getSymbols_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object));
    object = (0,_getPrototype_js__WEBPACK_IMPORTED_MODULE_3__["default"])(object);
  }
  return result;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSymbolsIn);


/***/ }),

/***/ "./node_modules/lodash-es/_getTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_getTag.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _DataView_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_DataView.js */ "./node_modules/lodash-es/_DataView.js");
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");
/* harmony import */ var _Promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_Promise.js */ "./node_modules/lodash-es/_Promise.js");
/* harmony import */ var _Set_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_Set.js */ "./node_modules/lodash-es/_Set.js");
/* harmony import */ var _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_WeakMap.js */ "./node_modules/lodash-es/_WeakMap.js");
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_toSource.js */ "./node_modules/lodash-es/_toSource.js");








/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
    mapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Map_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
    promiseCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
    setCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Set_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
    weakMapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"]);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__["default"];

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((_DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"] && getTag(new _DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"](new ArrayBuffer(1))) != dataViewTag) ||
    (_Map_js__WEBPACK_IMPORTED_MODULE_2__["default"] && getTag(new _Map_js__WEBPACK_IMPORTED_MODULE_2__["default"]) != mapTag) ||
    (_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"] && getTag(_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"].resolve()) != promiseTag) ||
    (_Set_js__WEBPACK_IMPORTED_MODULE_4__["default"] && getTag(new _Set_js__WEBPACK_IMPORTED_MODULE_4__["default"]) != setTag) ||
    (_WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"] && getTag(new _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"]) != weakMapTag)) {
  getTag = function(value) {
    var result = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__["default"])(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getTag);


/***/ }),

/***/ "./node_modules/lodash-es/_getValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_getValue.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getValue);


/***/ }),

/***/ "./node_modules/lodash-es/_hasPath.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hasPath.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js");
/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");







/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = (0,_castPath_js__WEBPACK_IMPORTED_MODULE_0__["default"])(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = (0,_toKey_js__WEBPACK_IMPORTED_MODULE_1__["default"])(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && (0,_isLength_js__WEBPACK_IMPORTED_MODULE_2__["default"])(length) && (0,_isIndex_js__WEBPACK_IMPORTED_MODULE_3__["default"])(key, length) &&
    ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object) || (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_5__["default"])(object));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hasPath);


/***/ }),

/***/ "./node_modules/lodash-es/_hashClear.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_hashClear.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? (0,_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(null) : {};
  this.size = 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashClear);


/***/ }),

/***/ "./node_modules/lodash-es/_hashDelete.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_hashDelete.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_hashGet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashGet.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashGet);


/***/ }),

/***/ "./node_modules/lodash-es/_hashHas.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashHas.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashHas);


/***/ }),

/***/ "./node_modules/lodash-es/_hashSet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashSet.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashSet);


/***/ }),

/***/ "./node_modules/lodash-es/_initCloneArray.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_initCloneArray.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initCloneArray);


/***/ }),

/***/ "./node_modules/lodash-es/_initCloneByTag.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_initCloneByTag.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_cloneArrayBuffer.js */ "./node_modules/lodash-es/_cloneArrayBuffer.js");
/* harmony import */ var _cloneDataView_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_cloneDataView.js */ "./node_modules/lodash-es/_cloneDataView.js");
/* harmony import */ var _cloneRegExp_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_cloneRegExp.js */ "./node_modules/lodash-es/_cloneRegExp.js");
/* harmony import */ var _cloneSymbol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_cloneSymbol.js */ "./node_modules/lodash-es/_cloneSymbol.js");
/* harmony import */ var _cloneTypedArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_cloneTypedArray.js */ "./node_modules/lodash-es/_cloneTypedArray.js");






/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return (0,_cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return (0,_cloneDataView_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return (0,_cloneTypedArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return (0,_cloneRegExp_js__WEBPACK_IMPORTED_MODULE_3__["default"])(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return (0,_cloneSymbol_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initCloneByTag);


/***/ }),

/***/ "./node_modules/lodash-es/_initCloneObject.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_initCloneObject.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseCreate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseCreate.js */ "./node_modules/lodash-es/_baseCreate.js");
/* harmony import */ var _getPrototype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getPrototype.js */ "./node_modules/lodash-es/_getPrototype.js");
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");




/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !(0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object))
    ? (0,_baseCreate_js__WEBPACK_IMPORTED_MODULE_1__["default"])((0,_getPrototype_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object))
    : {};
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initCloneObject);


/***/ }),

/***/ "./node_modules/lodash-es/_isFlattenable.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_isFlattenable.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");




/** Built-in value references. */
var spreadableSymbol = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return (0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) || (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isFlattenable);


/***/ }),

/***/ "./node_modules/lodash-es/_isIndex.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_isIndex.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isIndex);


/***/ }),

/***/ "./node_modules/lodash-es/_isIterateeCall.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_isIterateeCall.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");
/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");





/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? ((0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object) && (0,_isIndex_js__WEBPACK_IMPORTED_MODULE_2__["default"])(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return (0,_eq_js__WEBPACK_IMPORTED_MODULE_3__["default"])(object[index], value);
  }
  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isIterateeCall);


/***/ }),

/***/ "./node_modules/lodash-es/_isKey.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_isKey.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isSymbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isSymbol.js */ "./node_modules/lodash-es/isSymbol.js");



/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || (0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isKey);


/***/ }),

/***/ "./node_modules/lodash-es/_isKeyable.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_isKeyable.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isKeyable);


/***/ }),

/***/ "./node_modules/lodash-es/_isMasked.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_isMasked.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_coreJsData.js */ "./node_modules/lodash-es/_coreJsData.js");


/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(_coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"].keys && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"].keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isMasked);


/***/ }),

/***/ "./node_modules/lodash-es/_isPrototype.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_isPrototype.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isPrototype);


/***/ }),

/***/ "./node_modules/lodash-es/_isStrictComparable.js":
/*!*******************************************************!*\
  !*** ./node_modules/lodash-es/_isStrictComparable.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");


/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isStrictComparable);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheClear.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheClear.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheClear);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheDelete.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheDelete.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheGet.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheGet.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);

  return index < 0 ? undefined : data[index][1];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheGet);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheHas.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheHas.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this.__data__, key) > -1;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheHas);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheSet.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheSet.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheSet);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheClear.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheClear.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Hash.js */ "./node_modules/lodash-es/_Hash.js");
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");




/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    'map': new (_Map_js__WEBPACK_IMPORTED_MODULE_1__["default"] || _ListCache_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
    'string': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__["default"]
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheClear);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheDelete.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheDelete.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheGet.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheGet.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key).get(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheGet);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheHas.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheHas.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key).has(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheHas);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheSet.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheSet.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheSet);


/***/ }),

/***/ "./node_modules/lodash-es/_mapToArray.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_mapToArray.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapToArray);


/***/ }),

/***/ "./node_modules/lodash-es/_matchesStrictComparable.js":
/*!************************************************************!*\
  !*** ./node_modules/lodash-es/_matchesStrictComparable.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (matchesStrictComparable);


/***/ }),

/***/ "./node_modules/lodash-es/_memoizeCapped.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_memoizeCapped.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _memoize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memoize.js */ "./node_modules/lodash-es/memoize.js");


/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = (0,_memoize_js__WEBPACK_IMPORTED_MODULE_0__["default"])(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (memoizeCapped);


/***/ }),

/***/ "./node_modules/lodash-es/_nativeCreate.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_nativeCreate.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");


/* Built-in method references that are verified to be native. */
var nativeCreate = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object, 'create');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeCreate);


/***/ }),

/***/ "./node_modules/lodash-es/_nativeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_nativeKeys.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _overArg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_overArg.js */ "./node_modules/lodash-es/_overArg.js");


/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = (0,_overArg_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.keys, Object);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_nativeKeysIn.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_nativeKeysIn.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeKeysIn);


/***/ }),

/***/ "./node_modules/lodash-es/_nodeUtil.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_nodeUtil.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ "./node_modules/lodash-es/_freeGlobal.js");


/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__["default"].process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nodeUtil);


/***/ }),

/***/ "./node_modules/lodash-es/_objectToString.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_objectToString.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (objectToString);


/***/ }),

/***/ "./node_modules/lodash-es/_overArg.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_overArg.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (overArg);


/***/ }),

/***/ "./node_modules/lodash-es/_overRest.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_overRest.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _apply_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_apply.js */ "./node_modules/lodash-es/_apply.js");


/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return (0,_apply_js__WEBPACK_IMPORTED_MODULE_0__["default"])(func, this, otherArgs);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (overRest);


/***/ }),

/***/ "./node_modules/lodash-es/_parent.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_parent.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGet.js */ "./node_modules/lodash-es/_baseGet.js");
/* harmony import */ var _baseSlice_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseSlice.js */ "./node_modules/lodash-es/_baseSlice.js");



/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : (0,_baseGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, (0,_baseSlice_js__WEBPACK_IMPORTED_MODULE_1__["default"])(path, 0, -1));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parent);


/***/ }),

/***/ "./node_modules/lodash-es/_root.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_root.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ "./node_modules/lodash-es/_freeGlobal.js");


/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__["default"] || freeSelf || Function('return this')();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (root);


/***/ }),

/***/ "./node_modules/lodash-es/_safeGet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_safeGet.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (safeGet);


/***/ }),

/***/ "./node_modules/lodash-es/_setCacheAdd.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_setCacheAdd.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setCacheAdd);


/***/ }),

/***/ "./node_modules/lodash-es/_setCacheHas.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_setCacheHas.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setCacheHas);


/***/ }),

/***/ "./node_modules/lodash-es/_setToArray.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_setToArray.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setToArray);


/***/ }),

/***/ "./node_modules/lodash-es/_setToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_setToString.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseSetToString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseSetToString.js */ "./node_modules/lodash-es/_baseSetToString.js");
/* harmony import */ var _shortOut_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shortOut.js */ "./node_modules/lodash-es/_shortOut.js");



/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = (0,_shortOut_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_baseSetToString_js__WEBPACK_IMPORTED_MODULE_1__["default"]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setToString);


/***/ }),

/***/ "./node_modules/lodash-es/_shortOut.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_shortOut.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (shortOut);


/***/ }),

/***/ "./node_modules/lodash-es/_stackClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_stackClear.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");


/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  this.size = 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackClear);


/***/ }),

/***/ "./node_modules/lodash-es/_stackDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_stackDelete.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_stackGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackGet.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackGet);


/***/ }),

/***/ "./node_modules/lodash-es/_stackHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackHas.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackHas);


/***/ }),

/***/ "./node_modules/lodash-es/_stackSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackSet.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");
/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_MapCache.js */ "./node_modules/lodash-es/_MapCache.js");




/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    var pairs = data.__data__;
    if (!_Map_js__WEBPACK_IMPORTED_MODULE_1__["default"] || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new _MapCache_js__WEBPACK_IMPORTED_MODULE_2__["default"](pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackSet);


/***/ }),

/***/ "./node_modules/lodash-es/_strictIndexOf.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_strictIndexOf.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (strictIndexOf);


/***/ }),

/***/ "./node_modules/lodash-es/_strictLastIndexOf.js":
/*!******************************************************!*\
  !*** ./node_modules/lodash-es/_strictLastIndexOf.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A specialized version of `_.lastIndexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictLastIndexOf(array, value, fromIndex) {
  var index = fromIndex + 1;
  while (index--) {
    if (array[index] === value) {
      return index;
    }
  }
  return index;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (strictLastIndexOf);


/***/ }),

/***/ "./node_modules/lodash-es/_stringToPath.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_stringToPath.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _memoizeCapped_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_memoizeCapped.js */ "./node_modules/lodash-es/_memoizeCapped.js");


/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = (0,_memoizeCapped_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringToPath);


/***/ }),

/***/ "./node_modules/lodash-es/_toKey.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_toKey.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isSymbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSymbol.js */ "./node_modules/lodash-es/isSymbol.js");


/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || (0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toKey);


/***/ }),

/***/ "./node_modules/lodash-es/_toSource.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_toSource.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toSource);


/***/ }),

/***/ "./node_modules/lodash-es/_trimmedEndIndex.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_trimmedEndIndex.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (trimmedEndIndex);


/***/ }),

/***/ "./node_modules/lodash-es/assignIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/assignIn.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _createAssigner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createAssigner.js */ "./node_modules/lodash-es/_createAssigner.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");




/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */
var assignIn = (0,_createAssigner_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, source) {
  (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(source, (0,_keysIn_js__WEBPACK_IMPORTED_MODULE_2__["default"])(source), object);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assignIn);


/***/ }),

/***/ "./node_modules/lodash-es/before.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/before.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toInteger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toInteger.js */ "./node_modules/lodash-es/toInteger.js");


/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) {
  var result;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = (0,_toInteger_js__WEBPACK_IMPORTED_MODULE_0__["default"])(n);
  return function() {
    if (--n > 0) {
      result = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = undefined;
    }
    return result;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (before);


/***/ }),

/***/ "./node_modules/lodash-es/clone.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/clone.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseClone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseClone.js */ "./node_modules/lodash-es/_baseClone.js");


/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return (0,_baseClone_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value, CLONE_SYMBOLS_FLAG);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clone);


/***/ }),

/***/ "./node_modules/lodash-es/cloneDeep.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/cloneDeep.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseClone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseClone.js */ "./node_modules/lodash-es/_baseClone.js");


/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return (0,_baseClone_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneDeep);


/***/ }),

/***/ "./node_modules/lodash-es/compact.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/compact.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */
function compact(array) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (compact);


/***/ }),

/***/ "./node_modules/lodash-es/constant.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/constant.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constant);


/***/ }),

/***/ "./node_modules/lodash-es/countBy.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/countBy.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");
/* harmony import */ var _createAggregator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createAggregator.js */ "./node_modules/lodash-es/_createAggregator.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the number of times the key was returned by `iteratee`. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.countBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': 1, '6': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.countBy(['one', 'two', 'three'], 'length');
 * // => { '3': 2, '5': 1 }
 */
var countBy = (0,_createAggregator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(result, value, key) {
  if (hasOwnProperty.call(result, key)) {
    ++result[key];
  } else {
    (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, key, 1);
  }
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (countBy);


/***/ }),

/***/ "./node_modules/lodash-es/create.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/create.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssign_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssign.js */ "./node_modules/lodash-es/_baseAssign.js");
/* harmony import */ var _baseCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseCreate.js */ "./node_modules/lodash-es/_baseCreate.js");



/**
 * Creates an object that inherits from the `prototype` object. If a
 * `properties` object is given, its own enumerable string keyed properties
 * are assigned to the created object.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */
function create(prototype, properties) {
  var result = (0,_baseCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(prototype);
  return properties == null ? result : (0,_baseAssign_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, properties);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (create);


/***/ }),

/***/ "./node_modules/lodash-es/debounce.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/debounce.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _now_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./now.js */ "./node_modules/lodash-es/now.js");
/* harmony import */ var _toNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toNumber.js */ "./node_modules/lodash-es/toNumber.js");




/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = (0,_toNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(wait) || 0;
  if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax((0,_toNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = (0,_now_js__WEBPACK_IMPORTED_MODULE_2__["default"])();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge((0,_now_js__WEBPACK_IMPORTED_MODULE_2__["default"])());
  }

  function debounced() {
    var time = (0,_now_js__WEBPACK_IMPORTED_MODULE_2__["default"])(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (debounce);


/***/ }),

/***/ "./node_modules/lodash-es/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/defaults.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js");
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");
/* harmony import */ var _isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");





/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = (0,_baseRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, sources) {
  object = Object(object);

  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && (0,_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__["default"])(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = (0,_keysIn_js__WEBPACK_IMPORTED_MODULE_2__["default"])(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined ||
          ((0,_eq_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        object[key] = source[key];
      }
    }
  }

  return object;
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defaults);


/***/ }),

/***/ "./node_modules/lodash-es/defer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/defer.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseDelay_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseDelay.js */ "./node_modules/lodash-es/_baseDelay.js");
/* harmony import */ var _baseRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js");



/**
 * Defers invoking the `func` until the current call stack has cleared. Any
 * additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to defer.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.defer(function(text) {
 *   console.log(text);
 * }, 'deferred');
 * // => Logs 'deferred' after one millisecond.
 */
var defer = (0,_baseRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(func, args) {
  return (0,_baseDelay_js__WEBPACK_IMPORTED_MODULE_1__["default"])(func, 1, args);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defer);


/***/ }),

/***/ "./node_modules/lodash-es/difference.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/difference.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseDifference_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseDifference.js */ "./node_modules/lodash-es/_baseDifference.js");
/* harmony import */ var _baseFlatten_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_baseFlatten.js */ "./node_modules/lodash-es/_baseFlatten.js");
/* harmony import */ var _baseRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js");
/* harmony import */ var _isArrayLikeObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArrayLikeObject.js */ "./node_modules/lodash-es/isArrayLikeObject.js");





/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = (0,_baseRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(array, values) {
  return (0,_isArrayLikeObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(array)
    ? (0,_baseDifference_js__WEBPACK_IMPORTED_MODULE_2__["default"])(array, (0,_baseFlatten_js__WEBPACK_IMPORTED_MODULE_3__["default"])(values, 1, _isArrayLikeObject_js__WEBPACK_IMPORTED_MODULE_1__["default"], true))
    : [];
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (difference);


/***/ }),

/***/ "./node_modules/lodash-es/eq.js":
/*!**************************************!*\
  !*** ./node_modules/lodash-es/eq.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (eq);


/***/ }),

/***/ "./node_modules/lodash-es/escape.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/escape.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _escapeHtmlChar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_escapeHtmlChar.js */ "./node_modules/lodash-es/_escapeHtmlChar.js");
/* harmony import */ var _toString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toString.js */ "./node_modules/lodash-es/toString.js");



/** Used to match HTML entities and HTML characters. */
var reUnescapedHtml = /[&<>"']/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

/**
 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
 * corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */
function escape(string) {
  string = (0,_toString_js__WEBPACK_IMPORTED_MODULE_0__["default"])(string);
  return (string && reHasUnescapedHtml.test(string))
    ? string.replace(reUnescapedHtml, _escapeHtmlChar_js__WEBPACK_IMPORTED_MODULE_1__["default"])
    : string;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (escape);


/***/ }),

/***/ "./node_modules/lodash-es/every.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/every.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayEvery_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayEvery.js */ "./node_modules/lodash-es/_arrayEvery.js");
/* harmony import */ var _baseEvery_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseEvery.js */ "./node_modules/lodash-es/_baseEvery.js");
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_baseIteratee.js */ "./node_modules/lodash-es/_baseIteratee.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isIterateeCall_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js");






/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, guard) {
  var func = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection) ? _arrayEvery_js__WEBPACK_IMPORTED_MODULE_1__["default"] : _baseEvery_js__WEBPACK_IMPORTED_MODULE_2__["default"];
  if (guard && (0,_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_3__["default"])(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, (0,_baseIteratee_js__WEBPACK_IMPORTED_MODULE_4__["default"])(predicate, 3));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (every);


/***/ }),

/***/ "./node_modules/lodash-es/findIndex.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/findIndex.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseFindIndex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseFindIndex.js */ "./node_modules/lodash-es/_baseFindIndex.js");
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIteratee.js */ "./node_modules/lodash-es/_baseIteratee.js");
/* harmony import */ var _toInteger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toInteger.js */ "./node_modules/lodash-es/toInteger.js");




/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : (0,_toInteger_js__WEBPACK_IMPORTED_MODULE_0__["default"])(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return (0,_baseFindIndex_js__WEBPACK_IMPORTED_MODULE_1__["default"])(array, (0,_baseIteratee_js__WEBPACK_IMPORTED_MODULE_2__["default"])(predicate, 3), index);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (findIndex);


/***/ }),

/***/ "./node_modules/lodash-es/findLastIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/findLastIndex.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseFindIndex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseFindIndex.js */ "./node_modules/lodash-es/_baseFindIndex.js");
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIteratee.js */ "./node_modules/lodash-es/_baseIteratee.js");
/* harmony import */ var _toInteger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toInteger.js */ "./node_modules/lodash-es/toInteger.js");




/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * This method is like `_.findIndex` except that it iterates over elements
 * of `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
 * // => 2
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
 * // => 0
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastIndex(users, ['active', false]);
 * // => 2
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastIndex(users, 'active');
 * // => 0
 */
function findLastIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length - 1;
  if (fromIndex !== undefined) {
    index = (0,_toInteger_js__WEBPACK_IMPORTED_MODULE_0__["default"])(fromIndex);
    index = fromIndex < 0
      ? nativeMax(length + index, 0)
      : nativeMin(index, length - 1);
  }
  return (0,_baseFindIndex_js__WEBPACK_IMPORTED_MODULE_1__["default"])(array, (0,_baseIteratee_js__WEBPACK_IMPORTED_MODULE_2__["default"])(predicate, 3), index, true);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (findLastIndex);


/***/ }),

/***/ "./node_modules/lodash-es/flatten.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/flatten.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseFlatten_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseFlatten.js */ "./node_modules/lodash-es/_baseFlatten.js");


/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? (0,_baseFlatten_js__WEBPACK_IMPORTED_MODULE_0__["default"])(array, 1) : [];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (flatten);


/***/ }),

/***/ "./node_modules/lodash-es/get.js":
/*!***************************************!*\
  !*** ./node_modules/lodash-es/get.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGet.js */ "./node_modules/lodash-es/_baseGet.js");


/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : (0,_baseGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, path);
  return result === undefined ? defaultValue : result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (get);


/***/ }),

/***/ "./node_modules/lodash-es/groupBy.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/groupBy.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");
/* harmony import */ var _createAggregator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createAggregator.js */ "./node_modules/lodash-es/_createAggregator.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The order of grouped values
 * is determined by the order they occur in `collection`. The corresponding
 * value of each key is an array of elements responsible for generating the
 * key. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2], '6': [6.1, 6.3] }
 *
 * // The `_.property` iteratee shorthand.
 * _.groupBy(['one', 'two', 'three'], 'length');
 * // => { '3': ['one', 'two'], '5': ['three'] }
 */
var groupBy = (0,_createAggregator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(result, value, key) {
  if (hasOwnProperty.call(result, key)) {
    result[key].push(value);
  } else {
    (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, key, [value]);
  }
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (groupBy);


/***/ }),

/***/ "./node_modules/lodash-es/has.js":
/*!***************************************!*\
  !*** ./node_modules/lodash-es/has.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseHas_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseHas.js */ "./node_modules/lodash-es/_baseHas.js");
/* harmony import */ var _hasPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_hasPath.js */ "./node_modules/lodash-es/_hasPath.js");



/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && (0,_hasPath_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, path, _baseHas_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (has);


/***/ }),

/***/ "./node_modules/lodash-es/hasIn.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/hasIn.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseHasIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseHasIn.js */ "./node_modules/lodash-es/_baseHasIn.js");
/* harmony import */ var _hasPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_hasPath.js */ "./node_modules/lodash-es/_hasPath.js");



/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && (0,_hasPath_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, path, _baseHasIn_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hasIn);


/***/ }),

/***/ "./node_modules/lodash-es/identity.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/identity.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (identity);


/***/ }),

/***/ "./node_modules/lodash-es/indexOf.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/indexOf.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIndexOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIndexOf.js */ "./node_modules/lodash-es/_baseIndexOf.js");
/* harmony import */ var _toInteger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toInteger.js */ "./node_modules/lodash-es/toInteger.js");



/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Gets the index at which the first occurrence of `value` is found in `array`
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. If `fromIndex` is negative, it's used as the
 * offset from the end of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.indexOf([1, 2, 1, 2], 2);
 * // => 1
 *
 * // Search from the `fromIndex`.
 * _.indexOf([1, 2, 1, 2], 2, 2);
 * // => 3
 */
function indexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : (0,_toInteger_js__WEBPACK_IMPORTED_MODULE_0__["default"])(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return (0,_baseIndexOf_js__WEBPACK_IMPORTED_MODULE_1__["default"])(array, value, index);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (indexOf);


/***/ }),

/***/ "./node_modules/lodash-es/invert.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/invert.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.js */ "./node_modules/lodash-es/constant.js");
/* harmony import */ var _createInverter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createInverter.js */ "./node_modules/lodash-es/_createInverter.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");




/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Creates an object composed of the inverted keys and values of `object`.
 * If `object` contains duplicate values, subsequent values overwrite
 * property assignments of previous values.
 *
 * @static
 * @memberOf _
 * @since 0.7.0
 * @category Object
 * @param {Object} object The object to invert.
 * @returns {Object} Returns the new inverted object.
 * @example
 *
 * var object = { 'a': 1, 'b': 2, 'c': 1 };
 *
 * _.invert(object);
 * // => { '1': 'c', '2': 'b' }
 */
var invert = (0,_createInverter_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(result, value, key) {
  if (value != null &&
      typeof value.toString != 'function') {
    value = nativeObjectToString.call(value);
  }

  result[value] = key;
}, (0,_constant_js__WEBPACK_IMPORTED_MODULE_1__["default"])(_identity_js__WEBPACK_IMPORTED_MODULE_2__["default"]));

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (invert);


/***/ }),

/***/ "./node_modules/lodash-es/invoke.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/invoke.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseInvoke_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseInvoke.js */ "./node_modules/lodash-es/_baseInvoke.js");
/* harmony import */ var _baseRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js");



/**
 * Invokes the method at `path` of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
 *
 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
 * // => [2, 3]
 */
var invoke = (0,_baseRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_baseInvoke_js__WEBPACK_IMPORTED_MODULE_1__["default"]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (invoke);


/***/ }),

/***/ "./node_modules/lodash-es/isArguments.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArguments.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsArguments.js */ "./node_modules/lodash-es/_baseIsArguments.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = (0,_baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function() { return arguments; }()) ? _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__["default"] : function(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArguments);


/***/ }),

/***/ "./node_modules/lodash-es/isArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isArray.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArray);


/***/ }),

/***/ "./node_modules/lodash-es/isArrayLike.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArrayLike.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js");



/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && (0,_isLength_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value.length) && !(0,_isFunction_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArrayLike);


/***/ }),

/***/ "./node_modules/lodash-es/isArrayLikeObject.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/isArrayLikeObject.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArrayLikeObject);


/***/ }),

/***/ "./node_modules/lodash-es/isBuffer.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isBuffer.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");
/* harmony import */ var _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stubFalse.js */ "./node_modules/lodash-es/stubFalse.js");



/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isBuffer);


/***/ }),

/***/ "./node_modules/lodash-es/isElement.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/isElement.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");
/* harmony import */ var _isPlainObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isPlainObject.js */ "./node_modules/lodash-es/isPlainObject.js");



/**
 * Checks if `value` is likely a DOM element.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
 * @example
 *
 * _.isElement(document.body);
 * // => true
 *
 * _.isElement('<body>');
 * // => false
 */
function isElement(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && value.nodeType === 1 && !(0,_isPlainObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isElement);


/***/ }),

/***/ "./node_modules/lodash-es/isEmpty.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isEmpty.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseKeys_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_baseKeys.js */ "./node_modules/lodash-es/_baseKeys.js");
/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_getTag.js */ "./node_modules/lodash-es/_getTag.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");









/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if ((0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) &&
      ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) || (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value) || (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_4__["default"])(value))) {
    return !value.length;
  }
  var tag = (0,_getTag_js__WEBPACK_IMPORTED_MODULE_5__["default"])(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if ((0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_6__["default"])(value)) {
    return !(0,_baseKeys_js__WEBPACK_IMPORTED_MODULE_7__["default"])(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isEmpty);


/***/ }),

/***/ "./node_modules/lodash-es/isEqual.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isEqual.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsEqual_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsEqual.js */ "./node_modules/lodash-es/_baseIsEqual.js");


/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return (0,_baseIsEqual_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value, other);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isEqual);


/***/ }),

/***/ "./node_modules/lodash-es/isFunction.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/isFunction.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");



/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isFunction);


/***/ }),

/***/ "./node_modules/lodash-es/isLength.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isLength.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isLength);


/***/ }),

/***/ "./node_modules/lodash-es/isMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/isMap.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsMap.js */ "./node_modules/lodash-es/_baseIsMap.js");
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");
/* harmony import */ var _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nodeUtil.js */ "./node_modules/lodash-es/_nodeUtil.js");




/* Node.js helper references. */
var nodeIsMap = _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"].isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nodeIsMap) : _baseIsMap_js__WEBPACK_IMPORTED_MODULE_2__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isMap);


/***/ }),

/***/ "./node_modules/lodash-es/isMatch.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isMatch.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsMatch_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsMatch.js */ "./node_modules/lodash-es/_baseIsMatch.js");
/* harmony import */ var _getMatchData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getMatchData.js */ "./node_modules/lodash-es/_getMatchData.js");



/**
 * Performs a partial deep comparison between `object` and `source` to
 * determine if `object` contains equivalent property values.
 *
 * **Note:** This method is equivalent to `_.matches` when `source` is
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 *
 * _.isMatch(object, { 'b': 2 });
 * // => true
 *
 * _.isMatch(object, { 'b': 1 });
 * // => false
 */
function isMatch(object, source) {
  return object === source || (0,_baseIsMatch_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, source, (0,_getMatchData_js__WEBPACK_IMPORTED_MODULE_1__["default"])(source));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isMatch);


/***/ }),

/***/ "./node_modules/lodash-es/isNaN.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/isNaN.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isNumber.js */ "./node_modules/lodash-es/isNumber.js");


/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return (0,_isNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && value != +value;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isNaN);


/***/ }),

/***/ "./node_modules/lodash-es/isNumber.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isNumber.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    ((0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == numberTag);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isNumber);


/***/ }),

/***/ "./node_modules/lodash-es/isObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isObject.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObject);


/***/ }),

/***/ "./node_modules/lodash-es/isObjectLike.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isObjectLike.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObjectLike);


/***/ }),

/***/ "./node_modules/lodash-es/isPlainObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/isPlainObject.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _getPrototype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getPrototype.js */ "./node_modules/lodash-es/_getPrototype.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");




/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) || (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) != objectTag) {
    return false;
  }
  var proto = (0,_getPrototype_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isPlainObject);


/***/ }),

/***/ "./node_modules/lodash-es/isRegExp.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isRegExp.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsRegExp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsRegExp.js */ "./node_modules/lodash-es/_baseIsRegExp.js");
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");
/* harmony import */ var _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nodeUtil.js */ "./node_modules/lodash-es/_nodeUtil.js");




/* Node.js helper references. */
var nodeIsRegExp = _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp;

/**
 * Checks if `value` is classified as a `RegExp` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 * @example
 *
 * _.isRegExp(/abc/);
 * // => true
 *
 * _.isRegExp('/abc/');
 * // => false
 */
var isRegExp = nodeIsRegExp ? (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nodeIsRegExp) : _baseIsRegExp_js__WEBPACK_IMPORTED_MODULE_2__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isRegExp);


/***/ }),

/***/ "./node_modules/lodash-es/isSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/isSet.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsSet.js */ "./node_modules/lodash-es/_baseIsSet.js");
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");
/* harmony import */ var _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nodeUtil.js */ "./node_modules/lodash-es/_nodeUtil.js");




/* Node.js helper references. */
var nodeIsSet = _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nodeIsSet) : _baseIsSet_js__WEBPACK_IMPORTED_MODULE_2__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSet);


/***/ }),

/***/ "./node_modules/lodash-es/isString.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isString.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");




/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!(0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) == stringTag);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isString);


/***/ }),

/***/ "./node_modules/lodash-es/isSymbol.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isSymbol.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    ((0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == symbolTag);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSymbol);


/***/ }),

/***/ "./node_modules/lodash-es/isTypedArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isTypedArray.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsTypedArray.js */ "./node_modules/lodash-es/_baseIsTypedArray.js");
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");
/* harmony import */ var _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nodeUtil.js */ "./node_modules/lodash-es/_nodeUtil.js");




/* Node.js helper references. */
var nodeIsTypedArray = _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nodeIsTypedArray) : _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isTypedArray);


/***/ }),

/***/ "./node_modules/lodash-es/iteratee.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/iteratee.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseClone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseClone.js */ "./node_modules/lodash-es/_baseClone.js");
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIteratee.js */ "./node_modules/lodash-es/_baseIteratee.js");



/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */
function iteratee(func) {
  return (0,_baseIteratee_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof func == 'function' ? func : (0,_baseClone_js__WEBPACK_IMPORTED_MODULE_1__["default"])(func, CLONE_DEEP_FLAG));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (iteratee);


/***/ }),

/***/ "./node_modules/lodash-es/keyBy.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/keyBy.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");
/* harmony import */ var _createAggregator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createAggregator.js */ "./node_modules/lodash-es/_createAggregator.js");



/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */
var keyBy = (0,_createAggregator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(result, value, key) {
  (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(result, key, value);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keyBy);


/***/ }),

/***/ "./node_modules/lodash-es/keys.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/keys.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayLikeKeys.js */ "./node_modules/lodash-es/_arrayLikeKeys.js");
/* harmony import */ var _baseKeys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseKeys.js */ "./node_modules/lodash-es/_baseKeys.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");




/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object) ? (0,_arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object) : (0,_baseKeys_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keys);


/***/ }),

/***/ "./node_modules/lodash-es/keysIn.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/keysIn.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayLikeKeys.js */ "./node_modules/lodash-es/_arrayLikeKeys.js");
/* harmony import */ var _baseKeysIn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseKeysIn.js */ "./node_modules/lodash-es/_baseKeysIn.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");




/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object) ? (0,_arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, true) : (0,_baseKeysIn_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keysIn);


/***/ }),

/***/ "./node_modules/lodash-es/last.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/last.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (last);


/***/ }),

/***/ "./node_modules/lodash-es/lastIndexOf.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/lastIndexOf.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseFindIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseFindIndex.js */ "./node_modules/lodash-es/_baseFindIndex.js");
/* harmony import */ var _baseIsNaN_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_baseIsNaN.js */ "./node_modules/lodash-es/_baseIsNaN.js");
/* harmony import */ var _strictLastIndexOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_strictLastIndexOf.js */ "./node_modules/lodash-es/_strictLastIndexOf.js");
/* harmony import */ var _toInteger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toInteger.js */ "./node_modules/lodash-es/toInteger.js");





/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * This method is like `_.indexOf` except that it iterates over elements of
 * `array` from right to left.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.lastIndexOf([1, 2, 1, 2], 2);
 * // => 3
 *
 * // Search from the `fromIndex`.
 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
 * // => 1
 */
function lastIndexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length;
  if (fromIndex !== undefined) {
    index = (0,_toInteger_js__WEBPACK_IMPORTED_MODULE_0__["default"])(fromIndex);
    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
  }
  return value === value
    ? (0,_strictLastIndexOf_js__WEBPACK_IMPORTED_MODULE_1__["default"])(array, value, index)
    : (0,_baseFindIndex_js__WEBPACK_IMPORTED_MODULE_2__["default"])(array, _baseIsNaN_js__WEBPACK_IMPORTED_MODULE_3__["default"], index, true);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lastIndexOf);


/***/ }),

/***/ "./node_modules/lodash-es/memoize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/memoize.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_MapCache.js */ "./node_modules/lodash-es/_MapCache.js");


/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || _MapCache_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = _MapCache_js__WEBPACK_IMPORTED_MODULE_0__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (memoize);


/***/ }),

/***/ "./node_modules/lodash-es/merge.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/merge.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseMerge_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseMerge.js */ "./node_modules/lodash-es/_baseMerge.js");
/* harmony import */ var _createAssigner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createAssigner.js */ "./node_modules/lodash-es/_createAssigner.js");



/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = (0,_createAssigner_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, source, srcIndex) {
  (0,_baseMerge_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, source, srcIndex);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (merge);


/***/ }),

/***/ "./node_modules/lodash-es/mergeWith.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/mergeWith.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseMerge_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseMerge.js */ "./node_modules/lodash-es/_baseMerge.js");
/* harmony import */ var _createAssigner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createAssigner.js */ "./node_modules/lodash-es/_createAssigner.js");



/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = (0,_createAssigner_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, source, srcIndex, customizer) {
  (0,_baseMerge_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, source, srcIndex, customizer);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mergeWith);


/***/ }),

/***/ "./node_modules/lodash-es/now.js":
/*!***************************************!*\
  !*** ./node_modules/lodash-es/now.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Date.now();
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (now);


/***/ }),

/***/ "./node_modules/lodash-es/omit.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/omit.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayMap.js */ "./node_modules/lodash-es/_arrayMap.js");
/* harmony import */ var _baseClone_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_baseClone.js */ "./node_modules/lodash-es/_baseClone.js");
/* harmony import */ var _baseUnset_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_baseUnset.js */ "./node_modules/lodash-es/_baseUnset.js");
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _customOmitClone_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_customOmitClone.js */ "./node_modules/lodash-es/_customOmitClone.js");
/* harmony import */ var _flatRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_flatRest.js */ "./node_modules/lodash-es/_flatRest.js");
/* harmony import */ var _getAllKeysIn_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_getAllKeysIn.js */ "./node_modules/lodash-es/_getAllKeysIn.js");









/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = (0,_flatRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = (0,_arrayMap_js__WEBPACK_IMPORTED_MODULE_1__["default"])(paths, function(path) {
    path = (0,_castPath_js__WEBPACK_IMPORTED_MODULE_2__["default"])(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_3__["default"])(object, (0,_getAllKeysIn_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object), result);
  if (isDeep) {
    result = (0,_baseClone_js__WEBPACK_IMPORTED_MODULE_5__["default"])(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, _customOmitClone_js__WEBPACK_IMPORTED_MODULE_6__["default"]);
  }
  var length = paths.length;
  while (length--) {
    (0,_baseUnset_js__WEBPACK_IMPORTED_MODULE_7__["default"])(result, paths[length]);
  }
  return result;
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (omit);


/***/ }),

/***/ "./node_modules/lodash-es/once.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/once.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _before_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./before.js */ "./node_modules/lodash-es/before.js");


/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */
function once(func) {
  return (0,_before_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, func);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (once);


/***/ }),

/***/ "./node_modules/lodash-es/pick.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/pick.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _basePick_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_basePick.js */ "./node_modules/lodash-es/_basePick.js");
/* harmony import */ var _flatRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_flatRest.js */ "./node_modules/lodash-es/_flatRest.js");



/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = (0,_flatRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, paths) {
  return object == null ? {} : (0,_basePick_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, paths);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pick);


/***/ }),

/***/ "./node_modules/lodash-es/property.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/property.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseProperty.js */ "./node_modules/lodash-es/_baseProperty.js");
/* harmony import */ var _basePropertyDeep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_basePropertyDeep.js */ "./node_modules/lodash-es/_basePropertyDeep.js");
/* harmony import */ var _isKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isKey.js */ "./node_modules/lodash-es/_isKey.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");





/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return (0,_isKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(path) ? (0,_baseProperty_js__WEBPACK_IMPORTED_MODULE_1__["default"])((0,_toKey_js__WEBPACK_IMPORTED_MODULE_2__["default"])(path)) : (0,_basePropertyDeep_js__WEBPACK_IMPORTED_MODULE_3__["default"])(path);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (property);


/***/ }),

/***/ "./node_modules/lodash-es/result.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/result.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _castPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_castPath.js */ "./node_modules/lodash-es/_castPath.js");
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _toKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_toKey.js */ "./node_modules/lodash-es/_toKey.js");




/**
 * This method is like `_.get` except that if the resolved value is a
 * function it's invoked with the `this` binding of its parent object and
 * its result is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to resolve.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
 *
 * _.result(object, 'a[0].b.c1');
 * // => 3
 *
 * _.result(object, 'a[0].b.c2');
 * // => 4
 *
 * _.result(object, 'a[0].b.c3', 'default');
 * // => 'default'
 *
 * _.result(object, 'a[0].b.c3', _.constant('default'));
 * // => 'default'
 */
function result(object, path, defaultValue) {
  path = (0,_castPath_js__WEBPACK_IMPORTED_MODULE_0__["default"])(path, object);

  var index = -1,
      length = path.length;

  // Ensure the loop is entered when path is empty.
  if (!length) {
    length = 1;
    object = undefined;
  }
  while (++index < length) {
    var value = object == null ? undefined : object[(0,_toKey_js__WEBPACK_IMPORTED_MODULE_1__["default"])(path[index])];
    if (value === undefined) {
      index = length;
      value = defaultValue;
    }
    object = (0,_isFunction_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) ? value.call(object) : value;
  }
  return object;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (result);


/***/ }),

/***/ "./node_modules/lodash-es/some.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/some.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arraySome_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arraySome.js */ "./node_modules/lodash-es/_arraySome.js");
/* harmony import */ var _baseIteratee_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_baseIteratee.js */ "./node_modules/lodash-es/_baseIteratee.js");
/* harmony import */ var _baseSome_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseSome.js */ "./node_modules/lodash-es/_baseSome.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isIterateeCall_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js");






/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(collection) ? _arraySome_js__WEBPACK_IMPORTED_MODULE_1__["default"] : _baseSome_js__WEBPACK_IMPORTED_MODULE_2__["default"];
  if (guard && (0,_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_3__["default"])(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, (0,_baseIteratee_js__WEBPACK_IMPORTED_MODULE_4__["default"])(predicate, 3));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (some);


/***/ }),

/***/ "./node_modules/lodash-es/sortBy.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/sortBy.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseFlatten_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_baseFlatten.js */ "./node_modules/lodash-es/_baseFlatten.js");
/* harmony import */ var _baseOrderBy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseOrderBy.js */ "./node_modules/lodash-es/_baseOrderBy.js");
/* harmony import */ var _baseRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js");
/* harmony import */ var _isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js");





/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = (0,_baseRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && (0,_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__["default"])(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && (0,_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__["default"])(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return (0,_baseOrderBy_js__WEBPACK_IMPORTED_MODULE_2__["default"])(collection, (0,_baseFlatten_js__WEBPACK_IMPORTED_MODULE_3__["default"])(iteratees, 1), []);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sortBy);


/***/ }),

/***/ "./node_modules/lodash-es/stubArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/stubArray.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stubArray);


/***/ }),

/***/ "./node_modules/lodash-es/stubFalse.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/stubFalse.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stubFalse);


/***/ }),

/***/ "./node_modules/lodash-es/sum.js":
/*!***************************************!*\
  !*** ./node_modules/lodash-es/sum.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseSum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseSum.js */ "./node_modules/lodash-es/_baseSum.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");



/**
 * Computes the sum of the values in `array`.
 *
 * @static
 * @memberOf _
 * @since 3.4.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {number} Returns the sum.
 * @example
 *
 * _.sum([4, 2, 8, 6]);
 * // => 20
 */
function sum(array) {
  return (array && array.length)
    ? (0,_baseSum_js__WEBPACK_IMPORTED_MODULE_0__["default"])(array, _identity_js__WEBPACK_IMPORTED_MODULE_1__["default"])
    : 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sum);


/***/ }),

/***/ "./node_modules/lodash-es/toFinite.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/toFinite.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toNumber.js */ "./node_modules/lodash-es/toNumber.js");


/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = (0,_toNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toFinite);


/***/ }),

/***/ "./node_modules/lodash-es/toInteger.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/toInteger.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toFinite_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFinite.js */ "./node_modules/lodash-es/toFinite.js");


/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = (0,_toFinite_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toInteger);


/***/ }),

/***/ "./node_modules/lodash-es/toNumber.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/toNumber.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseTrim_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseTrim.js */ "./node_modules/lodash-es/_baseTrim.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _isSymbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSymbol.js */ "./node_modules/lodash-es/isSymbol.js");




/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if ((0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    return NAN;
  }
  if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = (0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = (0,_baseTrim_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toNumber);


/***/ }),

/***/ "./node_modules/lodash-es/toPlainObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/toPlainObject.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");



/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value, (0,_keysIn_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toPlainObject);


/***/ }),

/***/ "./node_modules/lodash-es/toString.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/toString.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseToString.js */ "./node_modules/lodash-es/_baseToString.js");


/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : (0,_baseToString_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toString);


/***/ }),

/***/ "./node_modules/lodash-es/uniqueId.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/uniqueId.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toString.js */ "./node_modules/lodash-es/toString.js");


/** Used to generate unique IDs. */
var idCounter = 0;

/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */
function uniqueId(prefix) {
  var id = ++idCounter;
  return (0,_toString_js__WEBPACK_IMPORTED_MODULE_0__["default"])(prefix) + id;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (uniqueId);


/***/ }),

/***/ "./node_modules/lodash-es/zipObject.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/zipObject.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assignValue.js */ "./node_modules/lodash-es/_assignValue.js");
/* harmony import */ var _baseZipObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseZipObject.js */ "./node_modules/lodash-es/_baseZipObject.js");



/**
 * This method is like `_.fromPairs` except that it accepts two arrays,
 * one of property identifiers and one of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 0.4.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObject(['a', 'b'], [1, 2]);
 * // => { 'a': 1, 'b': 2 }
 */
function zipObject(props, values) {
  return (0,_baseZipObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(props || [], values || [], _assignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (zipObject);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "converse.js:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"converse-headless": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkconverse_js"] = self["webpackChunkconverse_js"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************************!*\
  !*** ./src/headless/headless.js ***!
  \**********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _plugins_adhoc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugins/adhoc.js */ "./src/headless/plugins/adhoc.js");
/* harmony import */ var _plugins_bookmarks_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plugins/bookmarks/index.js */ "./src/headless/plugins/bookmarks/index.js");
/* harmony import */ var _plugins_bosh_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugins/bosh.js */ "./src/headless/plugins/bosh.js");
/* harmony import */ var _plugins_caps_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plugins/caps/index.js */ "./src/headless/plugins/caps/index.js");
/* harmony import */ var _plugins_chat_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugins/chat/index.js */ "./src/headless/plugins/chat/index.js");
/* harmony import */ var _plugins_chatboxes_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/chatboxes/index.js */ "./src/headless/plugins/chatboxes/index.js");
/* harmony import */ var _plugins_disco_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./plugins/disco/index.js */ "./src/headless/plugins/disco/index.js");
/* harmony import */ var _plugins_headlines_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugins/headlines/index.js */ "./src/headless/plugins/headlines/index.js");
/* harmony import */ var _plugins_mam_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugins/mam/index.js */ "./src/headless/plugins/mam/index.js");
/* harmony import */ var _plugins_muc_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugins/muc/index.js */ "./src/headless/plugins/muc/index.js");
/* harmony import */ var _plugins_ping_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugins/ping/index.js */ "./src/headless/plugins/ping/index.js");
/* harmony import */ var _plugins_pubsub_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./plugins/pubsub.js */ "./src/headless/plugins/pubsub.js");
/* harmony import */ var _plugins_roster_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugins/roster/index.js */ "./src/headless/plugins/roster/index.js");
/* harmony import */ var _plugins_smacks_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./plugins/smacks/index.js */ "./src/headless/plugins/smacks/index.js");
/* harmony import */ var _plugins_status_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./plugins/status/index.js */ "./src/headless/plugins/status/index.js");
/* harmony import */ var _plugins_vcard_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./plugins/vcard/index.js */ "./src/headless/plugins/vcard/index.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./core.js */ "./src/headless/core.js");
/* START: Removable components
 * --------------------
 * Any of the following components may be removed if they're not needed.
 */
 // XEP-0050 Ad Hoc Commands

 // XEP-0199 XMPP Ping

 // XEP-0206 BOSH

 // XEP-0115 Entity Capabilities

 // RFC-6121 Instant messaging


 // XEP-0030 Service discovery

 // Support for headline messages

 // XEP-0313 Message Archive Management

 // XEP-0045 Multi-user chat

 // XEP-0199 XMPP Ping

 // XEP-0060 Pubsub

 // RFC-6121 Contacts Roster

 // XEP-0198 Stream Management


 // XEP-0054 VCard-temp

/* END: Removable components */


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_core_js__WEBPACK_IMPORTED_MODULE_16__.converse);
})();

/******/ })()
;
//# sourceMappingURL=converse-headless.js.map





/**
 * The utils object
 * @namespace u
 */
const u = {};


u.isTagEqual = function (stanza, name) {
    if (stanza.nodeTree) {
        return u.isTagEqual(stanza.nodeTree, name);
    } else if (!(stanza instanceof Element)) {
        throw Error(
            "isTagEqual called with value which isn't "+
            "an element or Strophe.Builder instance");
    } else {
        return Strophe.isTagEqual(stanza, name);
    }
}

const parser = new DOMParser();
const parserErrorNS = parser.parseFromString('invalid', 'text/xml')
                            .getElementsByTagName("parsererror")[0].namespaceURI;

u.getJIDFromURI = function (jid) {
    return jid.startsWith('xmpp:') && jid.endsWith('?join')
        ? jid.replace(/^xmpp:/, '').replace(/\?join$/, '')
        : jid;
}

u.toStanza = function (string) {
    const node = parser.parseFromString(string, "text/xml");
    if (node.getElementsByTagNameNS(parserErrorNS, 'parsererror').length) {
        throw new Error(`Parser Error: ${string}`);
    }
    return node.firstElementChild;
}

u.getLongestSubstring = function (string, candidates) {
    function reducer (accumulator, current_value) {
        if (string.startsWith(current_value)) {
            if (current_value.length > accumulator.length) {
                return current_value;
            } else {
                return accumulator;
            }
        } else {
            return accumulator;
        }
    }
    return candidates.reduce(reducer, '');
}

u.prefixMentions = function (message) {
    /* Given a message object, return its text with @ chars
     * inserted before the mentioned nicknames.
     */
    let text = message.get('message');
    (message.get('references') || [])
        .sort((a, b) => b.begin - a.begin)
        .forEach(ref => {
            text = `${text.slice(0, ref.begin)}@${text.slice(ref.begin)}`
        });
    return text;
};

u.isValidJID = function (jid) {
    if (typeof jid === 'string') {
        return compact(jid.split('@')).length === 2 && !jid.startsWith('@') && !jid.endsWith('@');
    }
    return false;
};

u.isValidMUCJID = function (jid) {
    return !jid.startsWith('@') && !jid.endsWith('@');
};

u.isSameBareJID = function (jid1, jid2) {
    if (typeof jid1 !== 'string' || typeof jid2 !== 'string') {
        return false;
    }
    return Strophe.getBareJidFromJid(jid1).toLowerCase() ===
            Strophe.getBareJidFromJid(jid2).toLowerCase();
};


u.isSameDomain = function (jid1, jid2) {
    if (typeof jid1 !== 'string' || typeof jid2 !== 'string') {
        return false;
    }
    return Strophe.getDomainFromJid(jid1).toLowerCase() ===
            Strophe.getDomainFromJid(jid2).toLowerCase();
};

u.isNewMessage = function (message) {
    /* Given a stanza, determine whether it's a new
     * message, i.e. not a MAM archived one.
     */
    if (message instanceof Element) {
        return !(
            sizzle(`result[xmlns="${Strophe.NS.MAM}"]`, message).length &&
            sizzle(`delay[xmlns="${Strophe.NS.DELAY}"]`, message).length
        );
    } else if (message instanceof Model) {
        message = message.attributes;
    }
    return !(message['is_delayed'] && message['is_archived']);
};

u.shouldCreateMessage = function (attrs) {
    return attrs['retracted'] || // Retraction received *before* the message
        !u.isEmptyMessage(attrs);
}

u.shouldCreateGroupchatMessage = function (attrs) {
    return attrs.nick && (u.shouldCreateMessage(attrs) || attrs.is_tombstone);
}

u.isEmptyMessage = function (attrs) {
    if (attrs instanceof Model) {
        attrs = attrs.attributes;
    }
    return !attrs['oob_url'] &&
        !attrs['file'] &&
        !(attrs['is_encrypted'] && attrs['plaintext']) &&
        !attrs['message'];
};

//TODO: Remove
u.isOnlyChatStateNotification = function (msg) {
    if (msg instanceof Element) {
        // See XEP-0085 Chat State Notification
        return (msg.querySelector('body') === null) && (
                    (msg.querySelector('active') !== null) ||
                    (msg.querySelector('composing') !== null) ||
                    (msg.querySelector('inactive') !== null) ||
                    (msg.querySelector('paused') !== null) ||
                    (msg.querySelector('gone') !== null));
    }
    if (msg instanceof Model) {
        msg = msg.attributes;
    }
    return msg['chat_state'] && u.isEmptyMessage(msg);
};

u.isOnlyMessageDeliveryReceipt = function (msg) {
    if (msg instanceof Element) {
        // See XEP-0184 Message Delivery Receipts
        return (msg.querySelector('body') === null) &&
                    (msg.querySelector('received') !== null);
    }
    if (msg instanceof Model) {
        msg = msg.attributes;
    }
    return msg['received'] && u.isEmptyMessage(msg);
};

u.isChatRoom = function (model) {
    return model && (model.get('type') === 'chatroom');
}

u.isErrorObject = function (o) {
    return o instanceof Error;
}

u.isErrorStanza = function (stanza) {
    if (!isElement(stanza)) {
        return false;
    }
    return stanza.getAttribute('type') === 'error';
}

u.isForbiddenError = function (stanza) {
    if (!isElement(stanza)) {
        return false;
    }
    return sizzle(`error[type="auth"] forbidden[xmlns="${Strophe.NS.STANZAS}"]`, stanza).length > 0;
}

u.isServiceUnavailableError = function (stanza) {
    if (!isElement(stanza)) {
        return false;
    }
    return sizzle(`error[type="cancel"] service-unavailable[xmlns="${Strophe.NS.STANZAS}"]`, stanza).length > 0;
}

/**
 * Merge the second object into the first one.
 * @private
 * @method u#merge
 * @param { Object } first
 * @param { Object } second
 */
// u.merge = function merge (first, second) {
//     for (const k in second) {
//         if (isObject(first[k])) {
//             merge(first[k], second[k]);
//         } else {
//             first[k] = second[k];
//         }
//     }
// };

u.getOuterWidth = function (el, include_margin=false) {
    let width = el.offsetWidth;
    if (!include_margin) {
        return width;
    }
    const style = window.getComputedStyle(el);
    width += parseInt(style.marginLeft ? style.marginLeft : 0, 10) +
             parseInt(style.marginRight ? style.marginRight : 0, 10);
    return width;
};

/**
 * Converts an HTML string into a DOM element.
 * Expects that the HTML string has only one top-level element,
 * i.e. not multiple ones.
 * @private
 * @method u#stringToElement
 * @param { String } s - The HTML string
 */
u.stringToElement = function (s) {
    var div = document.createElement('div');
    div.innerHTML = s;
    return div.firstElementChild;
};

/**
 * Checks whether the DOM element matches the given selector.
 * @private
 * @method u#matchesSelector
 * @param { DOMElement } el - The DOM element
 * @param { String } selector - The selector
 */
u.matchesSelector = function (el, selector) {
    const match = (
        el.matches ||
        el.matchesSelector ||
        el.msMatchesSelector ||
        el.mozMatchesSelector ||
        el.webkitMatchesSelector ||
        el.oMatchesSelector
    );
    return match ? match.call(el, selector) : false;
};

/**
 * Returns a list of children of the DOM element that match the selector.
 * @private
 * @method u#queryChildren
 * @param { DOMElement } el - the DOM element
 * @param { String } selector - the selector they should be matched against
 */
u.queryChildren = function (el, selector) {
    return Array.from(el.childNodes).filter(el => u.matchesSelector(el, selector));
};

u.contains = function (attr, query) {
    const checker = (item, key) => item.get(key).toLowerCase().includes(query.toLowerCase());
    return function (item) {
        if (typeof attr === 'object') {
            return Object.keys(attr).reduce((acc, k) => acc || checker(item, k), false);
        } else if (typeof attr === 'string') {
            return checker(item, attr);
        } else {
            throw new TypeError('contains: wrong attribute type. Must be string or array.');
        }
    };
};

u.isOfType = function (type, item) {
    return item.get('type') == type;
};

u.isInstance = function (type, item) {
    return item instanceof type;
};

u.getAttribute = function (key, item) {
    return item.get(key);
};

u.contains.not = function (attr, query) {
    return function (item) {
        return !(u.contains(attr, query)(item));
    };
};

u.rootContains = function (root, el) {
    // The document element does not have the contains method in IE.
    if (root === document && !root.contains) {
        return document.head.contains(el) || document.body.contains(el);
    }
    return root.contains ? root.contains(el) : window.HTMLElement.prototype.contains.call(root, el);
};

u.createFragmentFromText = function (markup) {
    /* Returns a DocumentFragment containing DOM nodes based on the
     * passed-in markup text.
     */
    // http://stackoverflow.com/questions/9334645/create-node-from-markup-string
    var frag = document.createDocumentFragment(),
        tmp = document.createElement('body'), child;
    tmp.innerHTML = markup;
    // Append elements in a loop to a DocumentFragment, so that the
    // browser does not re-render the document for each node.
    while (child = tmp.firstChild) {  // eslint-disable-line no-cond-assign
        frag.appendChild(child);
    }
    return frag
};

u.isPersistableModel = function (model) {
    return model.collection && model.collection.browserStorage;
};

/**
 * Returns a promise object on which `resolve` or `reject` can be called.
 * @private
 * @method u#getResolveablePromise
 */
u.getResolveablePromise = function () {
    const wrapper = {
        isResolved: false,
        isPending: true,
        isRejected: false
    };
    const promise = new Promise((resolve, reject) => {
        wrapper.resolve = resolve;
        wrapper.reject = reject;
    })
    Object.assign(promise, wrapper);
    promise.then(
        function (v) {
            promise.isResolved = true;
            promise.isPending = false;
            promise.isRejected = false;
            return v;
        },
        function (e) {
            promise.isResolved = false;
            promise.isPending = false;
            promise.isRejected = true;
            throw (e);
        }
    );
    return promise;
};

u.interpolate = function (string, o) {
    return string.replace(/{{{([^{}]*)}}}/g,
        (a, b) => {
            var r = o[b];
            return typeof r === 'string' || typeof r === 'number' ? r : a;
        });
};

/**
 * Call the callback once all the events have been triggered
 * @private
 * @method u#onMultipleEvents
 * @param { Array } events: An array of objects, with keys `object` and
 *   `event`, representing the event name and the object it's triggered upon.
 * @param { Function } callback: The function to call once all events have
 *    been triggered.
 */
u.onMultipleEvents = function (events=[], callback) {
    let triggered = [];

    function handler (result) {
        triggered.push(result)
        if (events.length === triggered.length) {
            callback(triggered);
            triggered = [];
        }
    }
    events.forEach(e => e.object.on(e.event, handler));
};

u.safeSave = function (model, attributes, options) {
    if (u.isPersistableModel(model)) {
        model.save(attributes, options);
    } else {
        model.set(attributes, options);
    }
};

u.siblingIndex = function (el) {
    /* eslint-disable no-cond-assign */
    for (var i = 0; el = el.previousElementSibling; i++);
    return i;
};

/**
 * Returns the current word being written in the input element
 * @method u#getCurrentWord
 * @param {HTMLElement} input - The HTMLElement in which text is being entered
 * @param {integer} [index] - An optional rightmost boundary index. If given, the text
 *  value of the input element will only be considered up until this index.
 * @param {string} [delineator] - An optional string delineator to
 *  differentiate between words.
 * @private
 */
u.getCurrentWord = function (input, index, delineator) {
    if (!index) {
        index = input.selectionEnd || undefined;
    }
    let [word] = input.value.slice(0, index).split(/\s/).slice(-1);
    if (delineator) {
        [word] = word.split(delineator).slice(-1);
    }
    return word;
};

u.replaceCurrentWord = function (input, new_value) {
    const caret = input.selectionEnd || undefined,
          current_word = last(input.value.slice(0, caret).split(' ')),
          value = input.value;
    input.value = value.slice(0, caret - current_word.length) + `${new_value} ` + value.slice(caret);
    input.selectionEnd = caret - current_word.length + new_value.length + 1;
};

u.triggerEvent = function (el, name, type="Event", bubbles=true, cancelable=true) {
    const evt = document.createEvent(type);
    evt.initEvent(name, bubbles, cancelable);
    el.dispatchEvent(evt);
};

u.getSelectValues = function (select) {
    const result = [];
    const options = select && select.options;
    for (var i=0, iLen=options.length; i<iLen; i++) {
        const opt = options[i];
        if (opt.selected) {
            result.push(opt.value || opt.text);
        }
    }
    return result;
};

u.formatFingerprint = function (fp) {
    fp = fp.replace(/^05/, '');
    for (let i=1; i<8; i++) {
        const idx = i*8+i-1;
        fp = fp.slice(0, idx) + ' ' + fp.slice(idx);
    }
    return fp;
};

u.appendArrayBuffer = function (buffer1, buffer2) {
    const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
    tmp.set(new Uint8Array(buffer1), 0);
    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
    return tmp.buffer;
};

u.arrayBufferToHex = function (ab) {
    // https://stackoverflow.com/questions/40031688/javascript-arraybuffer-to-hex#40031979
    return Array.prototype.map.call(new Uint8Array(ab), x => ('00' + x.toString(16)).slice(-2)).join('');
};

u.arrayBufferToString = function (ab) {
    return new TextDecoder("utf-8").decode(ab);
};

u.stringToArrayBuffer = function (string) {
    const bytes = new TextEncoder("utf-8").encode(string);
    return bytes.buffer;
};

u.arrayBufferToBase64 = function (ab) {
    return btoa((new Uint8Array(ab)).reduce((data, byte) => data + String.fromCharCode(byte), ''));
};

u.base64ToArrayBuffer = function (b64) {
    const binary_string =  window.atob(b64),
          len = binary_string.length,
          bytes = new Uint8Array(len);

    for (let i = 0; i < len; i++) {
        bytes[i] = binary_string.charCodeAt(i)
    }
    return bytes.buffer
};

u.getRandomInt = function (max) {
    return Math.floor(Math.random() * Math.floor(max));
};

u.placeCaretAtEnd = function (textarea) {
    if (textarea !== document.activeElement) {
        textarea.focus();
    }
    // Double the length because Opera is inconsistent about whether a carriage return is one character or two.
    const len = textarea.value.length * 2;
    // Timeout seems to be required for Blink
    setTimeout(() => textarea.setSelectionRange(len, len), 1);
    // Scroll to the bottom, in case we're in a tall textarea
    // (Necessary for Firefox and Chrome)
    this.scrollTop = 999999;
};

u.getUniqueId = function (suffix) {
    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = Math.random() * 16 | 0;
        const v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
    if (typeof(suffix) === "string" || typeof(suffix) === "number") {
        return uuid + ":" + suffix;
    } else {
        return uuid;
    }
}


/**
 * Clears the specified timeout and interval.
 * @method u#clearTimers
 * @param {number} timeout - Id if the timeout to clear.
 * @param {number} interval - Id of the interval to clear.
 * @private
 * @copyright Simen Bekkhus 2016
 * @license MIT
 */
function clearTimers(timeout, interval) {
    clearTimeout(timeout);
    clearInterval(interval);
}


/**
 * Creates a {@link Promise} that resolves if the passed in function returns a truthy value.
 * Rejects if it throws or does not return truthy within the given max_wait.
 * @method u#waitUntil
 * @param {Function} func - The function called every check_delay,
 *  and the result of which is the resolved value of the promise.
 * @param {number} [max_wait=300] - The time to wait before rejecting the promise.
 * @param {number} [check_delay=3] - The time to wait before each invocation of {func}.
 * @returns {Promise} A promise resolved with the value of func,
 *  or rejected with the exception thrown by it or it times out.
 * @copyright Simen Bekkhus 2016
 * @license MIT
 */
u.waitUntil = function (func, max_wait=300, check_delay=3) {
    // Run the function once without setting up any listeners in case it's already true
    try {
        const result = func();
        if (result) {
            return Promise.resolve(result);
        }
    } catch (e) {
        return Promise.reject(e);
    }

    const promise = u.getResolveablePromise();
    const timeout_err = new Error();

    function checker () {
        try {
            const result = func();
            if (result) {
                clearTimers(max_wait_timeout, interval);
                promise.resolve(result);
            }
        } catch (e) {
            clearTimers(max_wait_timeout, interval);
            promise.reject(e);
        }
    }

    const interval = setInterval(checker, check_delay);

    function handler () {
        clearTimers(max_wait_timeout, interval);
        const err_msg = `Wait until promise timed out: \n\n${timeout_err.stack}`;
        console.trace();
        log.error(err_msg);
        promise.reject(new Error(err_msg));
    }

    const max_wait_timeout = setTimeout(handler, max_wait);

    return promise;
};
